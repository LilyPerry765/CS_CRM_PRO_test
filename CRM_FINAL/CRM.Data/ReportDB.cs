using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Collections;
using System.Data.Linq;
using System.Data.Linq.SqlClient;
using System.IO;
using CRM.Data.Schema;
using System.Globalization;
using System.Data;
using CRM.Data;
using Enterprise;
using System.Windows.Forms;


namespace CRM.Data
{

    public static class ReportDB
    {

        //public static IEnumerable GetByRequestDetailByID<T>(Type Entitytype, long ID)
        //{
        //    using (MainDataContext context = new MainDataContext())
        //    {

        //        ITable tbl = context.GetTable(Entitytype);
        //        IEnumerable lst = from ReqDetail in ((tbl) as IQueryable<T>)
        //                          join Req in context.Requests
        //                          on ID equals Req.ID
        //                          join status in context.StatusReasons
        //                          on Req.RequestTypeID equals status.ID

        //                          select new { Req, ReqDetail, status };
        //        return lst;
        //    }

        //}
        //public IEnumerable ExecuteStoreQuery(string commandText, params Object[] parameters)
        //{
        //    DataTable retVal = new DataTable();
        //    try
        //    {
        //        using (MainDataContext context = new MainDataContext())
        //        {
        //            retVal = context.ExecuteQuery(
        //            return retVal;
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        throw new Exception(ex.ToString());
        //    }
        //    return null;

        //}
        public static List<VisitTheSiteResult> GetVisitTheSiteByRequestID(List<long> requestIDs)
        {
            try
            {
                using (MainDataContext context = new MainDataContext())
                {
                    context.CommandTimeout = 0;
                    return context.VisitTheSite(string.Join(",", requestIDs)).ToList();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString());
            }

            return null;
        }
        public static List<ADSLRequestInfo> GetADSLRequests(DateTime? fromDate, DateTime? toDate,
                                                            long? Number, List<int> RequestTypeIds,
                                                            int? RequestNo, int? CenterId, string IdentificationId)
        {
            List<int> RT = RequestDB.GetADSLRequest();
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests
                    .Where(
                            t => (!fromDate.HasValue || t.InsertDate >= fromDate)
                                    && (!toDate.HasValue || t.InsertDate < toDate)
                                    && ((RequestTypeIds.Count == 0 && RT.Contains(t.RequestTypeID))
                                    || RequestTypeIds.Contains(t.RequestTypeID))
                                    && (!RequestNo.HasValue || t.ID == RequestNo)
                                    && (!CenterId.HasValue || t.CenterID == CenterId)
                                    && (IdentificationId == string.Empty || IdentificationId == t.Customer.NationalCodeOrRecordNo)
                                    && (!Number.HasValue || t.TelephoneNo == Number)

                            ).Select
                            (
                            t => new ADSLRequestInfo
                            {
                                Center = t.Center.CenterName,
                                Count = 1,
                                CurrentStatusRequest = t.Status.RequestStep.StepTitle,
                                Region = t.Center.Region.Title,
                                RequestDate = t.InsertDate.ToString(),
                                ID = t.ID,
                                RequestType = t.RequestType.Title,
                                RequestTypeID = t.RequestTypeID,
                                CustomerOwnerName = t.Customer.FirstNameOrTitle + " " + t.Customer.LastName,
                                CustomerOwner_Identification_RecordNO = t.Customer.NationalCodeOrRecordNo,
                                Status = t.StatusID.ToString(),
                                Step = t.Status.RequestStep.StepTitle,
                                LetterNo = t.RequestLetterNo,
                                TelephoneNo = t.TelephoneNo.ToString()
                            }
                                 )
                         .ToList();


            }

        }
        public static IEnumerable<ReportCustomerRequest> GetRequestByCustomer(long customerId)
        {
            using (MainDataContext context = new MainDataContext())
            {


                return context.Requests
                   .Where(t => t.CustomerID == customerId)
                   .Select(t => new ReportCustomerRequest
                   {
                       ID = t.ID,
                       RequestDate = t.RequestDate,
                       RequestLetterDate = t.RequestLetterDate,
                       RequestLetterNo = t.RequestLetterNo,
                       RequestInsertDate = t.InsertDate,
                       //CustomerFirstName = t.Customer.FirstName,
                       // CustomerLastName = t.Customer.LastName,
                       // SocialCode = t.Customer.NationalCode,
                       //  TelephoneNumber = t.TelephoneNo,
                       RequestType = t.RequestType.Title,
                       RequestStatus = context.Status.Where(s => s.ID == t.StatusID).Select(s => s.Title).ToString()

                   })
                   .OrderByDescending(t => t.RequestInsertDate).ToList();


            }
        }

        //public static IEnumerable<ReportRequestForInstall> GetRequestByID(long requestForInstallId)
        //{
        //    using (MainDataContext context = new MainDataContext())
        //    {


        //       return context.RequestForInstalls
        //           .Where(t => t.ID == requestForInstallId)
        //           .Select(t => new ReportRequestForInstall(t.RequestID,t.CustomerID,t.SaleFicheID)
        //           {
        //               ID=t.ID,
        //               ChargingType=t.ChargingType,
        //               TelephoneType=t.TelephoneType,
        //               TelephoneForCharge=t.TelephoneForCharge,
        //               PosessionType=t.PosessionType,
        //               OrderType=t.OrderType,
        //               Use3PercentQuata=t.Use3PercentQuata,
        //               IsRoundNumber=t.IsRoundNumber,
        //               DepositeNo=t.DepositeNo,
        //               MoneyInTrustNo=t.MoneyInTrustNo,
        //               Installdate=t.Installdate,
        //               Uninstalldate=t.Uninstalldate,
        //               InsertDate=t.InsertDate,



        //           })
        //           .ToList();


        //    }


        //}        



        public static IList<ReportBankAndBranch> GetBank<T>() where T : class
        {
            using (MainDataContext context = new MainDataContext())
            {
                //var q = context.Banks.Where(DB.MakeFilter<Bank>("ID",1));
                return context.BankBranches

                              .Select(r => new ReportBankAndBranch
                              {
                                  BankID = r.Bank.ID,
                                  BankName = r.Bank.BankName,
                                  //CenterID = r.CenterID,
                                  //  CenterName=r.Center.CenterName,
                                  BranchCode = r.BranchCode,
                                  BranchName = r.BranchName,
                                  AccountNo = r.AccountNo

                              }).ToList<ReportBankAndBranch>();



            }
        }
        public static List<CutAndEstablishInfo> GetCutAndEstablishInfo(List<int> cites, List<int> centers,
                                                                       DateTime? fromDate, DateTime? toDate,
                                                                       long? TelephoneNo, int typeValueId, List<int> causeOfCutIds, string IdentificationId)
        {
            List<CutAndEstablishInfo> result = new List<CutAndEstablishInfo>();
            using (MainDataContext context = new MainDataContext())
            {
                if (typeValueId == (int)DB.RequestType.CutAndEstablish)
                {

                    result = context.Requests
                                   .Join(context.Telephones, r => r.TelephoneNo, t => t.TelephoneNo, (r, t) => new { Request = r, telephone = t })
                          .Where(t => (cites.Count() == 0 || cites.Contains(t.Request.Center.Region.CityID)) &&
                                     (centers.Count() == 0 || centers.Contains(t.Request.CenterID)) &&
                                     (!fromDate.HasValue || t.Request.CutAndEstablish.InsertDate >= fromDate) &&
                                     (!toDate.HasValue || t.Request.CutAndEstablish.InsertDate <= toDate) &&
                                     (t.Request.RequestTypeID == (int)Data.DB.RequestType.CutAndEstablish) &&
                                     (!TelephoneNo.HasValue || t.Request.TelephoneNo == TelephoneNo) &&
                                     (causeOfCutIds.Count == 0 || causeOfCutIds.Contains(t.Request.CutAndEstablish.CutType.Value)) &&
                                     (IdentificationId == null || IdentificationId == t.Request.Customer.NationalCodeOrRecordNo) &&
                                     (!t.Request.IsCancelation && !t.Request.IsWaitingList && t.Request.CutAndEstablish.InsertDate != null)
                                 )
                                 .OrderBy(t => t.telephone.CutDate)

                          .Select(
                                  t => new CutAndEstablishInfo
                                  {
                                      Region = t.Request.Center.Region.City.Name,
                                      CenterName = t.Request.Center.CenterName,
                                      CutDate = t.Request.CutAndEstablish.InsertDate.ToPersian(Date.DateStringType.Short),
                                      Hour = t.Request.CutAndEstablish.CutDate.Value.Hour.ToString() + " : " + t.Request.CutAndEstablish.CutDate.Value.Minute.ToString(),
                                      FICode = t.Request.ID,
                                      Name = (t.Request.Customer.FirstNameOrTitle ?? "") + " " + (t.Request.Customer.LastName ?? ""),
                                      TelNumber = t.Request.TelephoneNo,
                                      CounterValue = t.Request.CutAndEstablish.Counter,
                                      LetterNumber = t.Request.CutAndEstablish.CutReportID.ToString(),
                                      ReqName = t.Request.RequesterName,
                                      CutType = t.Request.CutAndEstablish.CauseOfCut.Name,
                                      NationalCodeOrRecordNo = t.Request.Customer.NationalCodeOrRecordNo,
                                      TypeValue = "قطع",
                                  }
                                  )
                          .ToList();

                }
                else
                {
                    result = context.Requests
                                .Join(context.Telephones, r => r.TelephoneNo, t => t.TelephoneNo, (r, t) => new { Request = r, telephone = t })
                       .Where(t => (cites.Count() == 0 || cites.Contains(t.Request.Center.Region.CityID)) &&
                                  (centers.Count() == 0 || centers.Contains(t.Request.CenterID)) &&
                                  (!fromDate.HasValue || t.Request.CutAndEstablish.InsertDate >= fromDate) &&
                                  (!toDate.HasValue || t.Request.CutAndEstablish.InsertDate <= toDate) &&
                                  (t.Request.RequestTypeID == (int)Data.DB.RequestType.Connect) &&
                                  (!TelephoneNo.HasValue || t.Request.TelephoneNo == TelephoneNo) &&
                                  (IdentificationId == null || IdentificationId == t.Request.Customer.NationalCodeOrRecordNo) &&
                                  (!t.Request.IsCancelation && !t.Request.IsWaitingList && t.Request.CutAndEstablish.InsertDate != null)
                              )
                              .OrderBy(t => t.telephone.ConnectDate)
                       .Select(
                               t => new CutAndEstablishInfo
                               {
                                   Region = t.Request.Center.Region.City.Name,
                                   CenterName = t.Request.Center.CenterName,
                                   EstablishDate = t.Request.CutAndEstablish.InsertDate.ToPersian(Date.DateStringType.Short),
                                   Hour = t.Request.CutAndEstablish.CutDate.Value.Hour.ToString() + " : " + t.Request.CutAndEstablish.CutDate.Value.Minute.ToString(),
                                   FICode = t.Request.ID,
                                   Name = (t.Request.Customer.FirstNameOrTitle ?? "") + " " + (t.Request.Customer.LastName ?? ""),
                                   TelNumber = t.Request.TelephoneNo,
                                   CounterValue = t.Request.CutAndEstablish.Counter,
                                   LetterNumber = t.Request.CutAndEstablish.CutReportID.ToString(),
                                   ReqName = t.Request.RequesterName,
                                   CutType = t.Request.CutAndEstablish.CauseOfCut.Name,
                                   NationalCodeOrRecordNo = t.Request.Customer.NationalCodeOrRecordNo,
                                   TypeValue = "وصل",

                               }
                               )
                       .ToList();
                }
            }

            return result;
        }


        public static List<ADSLInfo> GetADSLInfo(DateTime? fromDate, DateTime? toDate, long? TelephoneNo, string IdentificationId, int? CustomerOwnerId, int? TariffID, int? ServiceID, int? StatusId, int? PapId)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLs
                     .Where(t => (
                          ((!TelephoneNo.HasValue || t.TelephoneNo == TelephoneNo))
                          && (!CustomerOwnerId.HasValue || t.CustomerOwnerStatus == CustomerOwnerId)
                          && (!TariffID.HasValue || t.TariffID == TariffID)
                          && (!ServiceID.HasValue || t.ServiceType == ServiceID)
                          && (!StatusId.HasValue || t.Status == StatusId)
                          && (IdentificationId == null || IdentificationId == t.Customer.NationalCodeOrRecordNo))
                        )
                        .Select(
                             t => new ADSLInfo
                             {
                                 TelephoneNo = t.TelephoneNo.ToString(),
                                 CustomerOwnerName = t.Customer.FirstNameOrTitle + " " + t.Customer.LastName,
                                 CustomerOwner_Identification_RecordNO = t.Customer.NationalCodeOrRecordNo,
                                 CustomerOwnerStatus = t.CustomerOwnerStatus.ToString(),
                                 ServiceTitle = t.ADSLService.Title,
                                 ServiceType = t.ServiceType.ToString(),
                                 Status = t.Status.ToString(),
                                 RegistrationProjectType = t.RegistrationProjectType.ToString(),
                                 PapInfoName = t.PAPInfo.Title,
                                 ADSLPortID = t.ADSLPort.PortNo,
                                 Count = 1
                             }
                             )
                     .ToList();
            }
        }



        #region Custom Class ReportCustomerRequest

        public class ReportCustomerRequest
        {
            public long ID
            {
                get;
                set;
            }

            public DateTime RequestDate
            {
                get;
                set;
            }

            public DateTime? RequestLetterDate
            {
                get;
                set;
            }

            public string RequestLetterNo
            {
                get;
                set;
            }

            public DateTime RequestInsertDate
            {
                get;
                set;
            }

            public string CustomerFirstName
            {
                get;
                set;
            }

            public string CustomerLastName
            {
                get;
                set;
            }

            public string SocialCode
            {
                get;
                set;
            }

            public string TelephoneNumber
            {
                get;
                set;
            }

            public string RequestType
            {
                get;
                set;
            }

            public string RequestStatus
            {
                get;
                set;
            }
            public string Region
            {
                set;
                get;
            }
            public string Center
            {
                set;
                get;
            }

            public int Count
            {
                set;
                get;
            }

        }

        public class StatusItem
        {
            public string workUnit
            {

                get;
                set;
            }
            public int reasonID
            {
                get;
                set;
            }

            public string reasonTitle
            {

                get;
                set;

            }

        }

        #endregion Custom Class

        #region Custom Class ReportBankAndBranch

        public class ReportBankAndBranch
        {
            public int BankID
            {
                get;
                set;
            }

            public string BankName
            {
                get;
                set;
            }

            public int CenterID
            {
                get;
                set;
            }

            public string CenterName
            {
                get;
                set;
            }
            public string BranchCode
            {
                get;
                set;
            }

            public string BranchName
            {
                get;
                set;
            }

            public string AccountNo
            {
                get;
                set;
            }
        }

        #endregion

        #region Custom Class ReportRequestForInstall
        public class ReportRequestForInstall
        {
            public ReportRequestForInstall(long RequestID, long CustomerID, long? SaleFicheID)
            {
                this.RequestID = RequestID;
                this.CustomerID = CustomerID;
                this.SaleFicheID = SaleFicheID;
                RequestDetail = DB.GetEntitybyID<Request>(RequestID);
                customerDetail = DB.GetEntitybyID<Customer>(CustomerID);
                SaleFicheDetail = DB.GetEntitybyID<Fiche>(SaleFicheID ?? 0);


            }

            public long ID
            {
                get;
                set;
            }

            public long RequestID
            {
                get;
                set;
            }

            public Request RequestDetail
            {

                get;
                set;

            }

            public long CustomerID
            {
                get;
                set;
            }

            public Customer customerDetail
            {
                get;
                set;
            }

            public long? SaleFicheID
            {
                get;
                set;
            }

            public Fiche SaleFicheDetail
            {
                get;
                set;
            }

            public Int16 ChargingType
            {
                get;
                set;
            }

            public Int16 TelephoneType
            {
                get;
                set;
            }

            public string TelephoneForCharge
            {
                get;
                set;
            }

            public Int16 PosessionType
            {
                get;
                set;
            }

            public Int16 OrderType
            {
                get;
                set;
            }

            public Int16 Use3PercentQuata
            {
                get;
                set;
            }

            public bool IsRoundNumber
            {
                get;
                set;
            }

            public string DepositeNo
            {
                get;
                set;
            }

            public string MoneyInTrustNo
            {
                get;
                set;
            }

            public DateTime? Installdate
            {
                get;
                set;
            }

            public DateTime? Uninstalldate
            {
                get;
                set;
            }

            public DateTime InsertDate
            {
                get;
                set;
            }

            public string RepresentitiveNo
            {
                get;
                set;
            }

            public DateTime? RepresentitiveDate
            {
                get;
                set;
            }

            public DateTime? RepresentitiveExpireDate
            {
                get;
                set;
            }
        }


        #endregion Custom Class




        public static List<ADSLRequestInfo> GetDayeriInfo(DateTime? fromDate, DateTime? toDate, DateTime? fromDateRanje, DateTime? toDateRanje, DateTime? fromDateDayeri, DateTime? toDateDayeri,
                                                          long? telephoneNo, int? custoemrGroupType, int? serviceType, List<int> currentStepId, int? centerId, string customerId, int? customerOwnerStatus)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests
                     .Where(t => (
                         (!fromDate.HasValue || t.Request.InsertDate >= fromDate)
                        && (!toDate.HasValue || t.Request.InsertDate > toDate)
                        && (!fromDateRanje.HasValue || t.MDFDate >= fromDateRanje)
                        && (!toDateRanje.HasValue || t.MDFDate > toDateRanje)
                        && (!fromDateDayeri.HasValue || t.InstallDate >= fromDateDayeri)
                        && (!toDateDayeri.HasValue || t.InstallDate > toDateDayeri)
                        && (!telephoneNo.HasValue || t.Request.TelephoneNo <= telephoneNo)
                        && (!customerOwnerStatus.HasValue || t.CustomerOwnerStatus == customerOwnerStatus)
                        && (!serviceType.HasValue || t.ServiceID == serviceType)
                        && (!custoemrGroupType.HasValue || t.CustomerGroupID == custoemrGroupType)
                        && (currentStepId.Count == 0 || currentStepId.Contains(t.Request.Status.RequestStep.ID))
                        && (customerId == null || customerId == t.Request.Customer.NationalCodeOrRecordNo))

                        ).Select(
                             t => new ADSLRequestInfo
                             {
                                 Center = t.Request.Center.CenterName,
                                 TelephoneNo = t.Request.TelephoneNo.ToString(),
                                 CustomerOwnerName = t.Request.Customer.FirstNameOrTitle + " " + t.Request.Customer.LastName,
                                 CustomerOwner_Identification_RecordNO = t.Request.Customer.NationalCodeOrRecordNo,
                                 CustomerOwnerStatus = t.CustomerOwnerStatus.ToString(),
                                 ServiceTitle = t.ADSLService.Title,
                                 CustomerGroupType = t.CustomerGroupID.ToString(),
                                 Status = t.Request.Status.RequestStep.StepTitle,
                                 //ModemType = t.ADSLModem.Title,
                                 LetterNo = t.Request.RequestLetterNo,
                                 Region = t.Request.CenterID.ToString(),
                                 RequestDate = t.Request.InsertDate.ToString(),
                                 ID = t.ID,
                                 DayeriDate = t.InstallDate.ToString(),

                                 Count = 1
                             })
                     .ToList();
            }
        }
        public static List<ADSLEquipmentInfo> GetADSLEquipments(int? regionId, int? centerId
                                                                , List<int> equipmentTypeIds, List<int> equipmentInstallationPlaceIds
                                                                , List<int> constractionCompanyIds, List<int> AAATypeIds)
        {
            List<ADSLEquipmentGroup> AEG = GetADSLEquipmentsGroup(regionId, centerId
                                                                 , equipmentTypeIds, equipmentInstallationPlaceIds
                                                                 , constractionCompanyIds, AAATypeIds);
            List<ADSLEquipmentInfo> lstRecord = new List<ADSLEquipmentInfo>();
            foreach (ADSLEquipmentGroup i in AEG)
            {
                List<ADSLEquipmentInfo> AEI = GetADSLEquipmentsInfo(i.Center, i.Region, i.EquipmentType, i.ADSLEquipmentID);

                ADSLEquipmentInfo RecordTemp = new ADSLEquipmentInfo();
                RecordTemp.Center = Data.CenterDB.GetCenterById(int.Parse(i.Center)).CenterName;
                RecordTemp.Region = Data.RegionDB.GetRegionById(int.Parse(i.Region)).Title;
                RecordTemp.EquipmentType = byte.Parse(i.EquipmentType);
                RecordTemp.FreePortCount = "0";
                RecordTemp.ReservePortCount = "0";
                RecordTemp.FailedPortCount = "0";
                RecordTemp.InstallPortCount = "0";
                foreach (ADSLEquipmentInfo j in AEI)
                {
                    RecordTemp.ADSLEquipmentIDCount += j.Count;
                    switch (int.Parse(j.Status))
                    {
                        case ((int)DB.ADSLPortStatus.Free):
                            {
                                RecordTemp.FreePortCount = j.Count.ToString();
                                break;
                            }
                        case ((int)DB.ADSLPortStatus.reserve):
                            {
                                RecordTemp.ReservePortCount = j.Count.ToString();
                                break;
                            }
                        case ((int)DB.ADSLPortStatus.Destruction):
                            {
                                RecordTemp.FailedPortCount = j.Count.ToString();
                                break;
                            }
                        case ((int)DB.ADSLPortStatus.Install):
                            {
                                RecordTemp.InstallPortCount = j.Count.ToString();
                                break;
                            }
                    }

                }
                lstRecord.Add(RecordTemp);

            }
            return lstRecord;
        }



        private static List<ADSLEquipmentInfo> GetADSLEquipmentsInfo(string centerId, string regionId, string EquipmentType, string ADSLEquipmentID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLPorts

                     .Where(t => (
                         // ( t.ADSLEquipment.Center.RegionID.ToString() == regionId)
                          (t.ADSLEquipment.CenterID.ToString() == centerId)
                         && (t.ADSLEquipment.EquipmentType.ToString() == EquipmentType)
                         && (t.ADSLEquipmentID.ToString() == ADSLEquipmentID)

                        )
                        ).Select(
                                    t => new ADSLEquipmentInfo
                                    {
                                        Center = t.ADSLEquipment.Center.CenterName,
                                        Region = t.ADSLEquipment.Center.Region.Title,
                                        EquipmentType = t.ADSLEquipment.EquipmentType,
                                        Status = t.Status.ToString(),
                                        Name = t.ADSLEquipment.Equipment,
                                        ADSLEquipmentID = t.ADSLEquipmentID.ToString()

                                    }
                                 ).GroupBy(t => new
                                 {
                                     center = t.Center,
                                     region = t.Region,
                                     equipmentType = t.EquipmentType,
                                     status = t.Status,
                                     ADSLEquipmentID = t.ADSLEquipmentID

                                 })
                                    .Select(t => new ADSLEquipmentInfo
                                    {
                                        Center = t.Key.center,
                                        Region = t.Key.region,
                                        EquipmentType = t.Key.equipmentType,
                                        Status = t.Key.status,
                                        Count = t.Key.status.Count(),
                                        ADSLEquipmentIDCount = t.Key.ADSLEquipmentID.Count()
                                    }
                                    ).
                                 ToList();

            }

        }
        public static List<ADSLEquipmentGroup> GetADSLEquipmentsGroup(int? regionId, int? centerId
                                                               , List<int> equipmentTypeIds, List<int> equipmentInstallationPlaceIds
                                                               , List<int> constractionCompanyIds, List<int> AAATypeIds)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLPorts
                     .Where(t => (
                          (!centerId.HasValue || t.ADSLEquipment.CenterID == centerId)
                         && (equipmentTypeIds.Count == 0 || equipmentTypeIds.Contains((int)t.ADSLEquipment.EquipmentType))
                         && (equipmentInstallationPlaceIds.Count == 0 || equipmentInstallationPlaceIds.Contains((int)t.ADSLEquipment.LocationInstall))
                         && (constractionCompanyIds.Count == 0 || constractionCompanyIds.Contains((int)t.ADSLEquipment.Product))
                         && (AAATypeIds.Count == 0 || AAATypeIds.Contains((int)t.ADSLEquipment.AAAType))
                        )
                        ).Select(
                                    t => new ADSLEquipmentGroup
                                    {
                                        Center = t.ADSLEquipment.CenterID.ToString(),
                                        Region = t.ADSLEquipment.Center.RegionID.ToString(),
                                        EquipmentType = t.ADSLEquipment.EquipmentType.ToString(),
                                        Name = t.ADSLEquipment.Equipment,

                                        ADSLEquipmentID = t.ADSLEquipmentID.ToString()
                                    }
                                 ).GroupBy(t => new
                                 {
                                     center = t.Center,
                                     region = t.Region,
                                     equipmentType = t.EquipmentType,
                                     Name = t.Name,
                                     ADSLEquipmentID = t.ADSLEquipmentID
                                 })
                                    .Select(t => new ADSLEquipmentGroup
                                    {
                                        Center = t.Key.center,
                                        Region = t.Key.region,
                                        EquipmentType = t.Key.equipmentType,
                                        Name = t.Key.Name,
                                        ADSLEquipmentID = t.Key.ADSLEquipmentID
                                    }
                                    ).Distinct()
                                     .ToList();
            }

        }

        public static List<ADSLStatisticsInfo> GetADSLStatistics(int? regionId, List<int> centerId)
        {
            List<ADSLStatisticsGroup> ASG = GetADSLStatisticsGroup(centerId, regionId);


            List<ADSLStatisticsInfo> lstRecord = new List<ADSLStatisticsInfo>();
            foreach (ADSLStatisticsGroup i in ASG)
            {
                List<ADSLStatisticsInfo> ASI = GetADSLStatisticsInfo(int.Parse(i.CenterID), int.Parse(i.RegionID));

                ADSLStatisticsInfo RecordTemp = new ADSLStatisticsInfo();
                RecordTemp.CenterName = Data.CenterDB.GetCenterById(int.Parse(i.CenterID)).CenterName;
                RecordTemp.RegionName = Data.RegionDB.GetRegionById(int.Parse(i.RegionID)).Title;
                RecordTemp.StepID = i.RequestStepID;
                RecordTemp.ADSLAssignmentCount = "0";
                RecordTemp.ADSLCenterManager = "0";
                RecordTemp.ADSLMDFCount = "0";
                RecordTemp.ADSLOMCCount = "0";
                RecordTemp.ADSLRequestCount = "0";
                RecordTemp.ADSLSetupCount = "0";
                RecordTemp.ADSLTaskOfCustomerCount = "0";
                RecordTemp.ADSLTaskOfCustomerManagerCount = "0";

                foreach (ADSLStatisticsInfo j in ASI)
                {
                    RecordTemp.Count += j.Count;
                    switch (int.Parse(j.StepID))
                    {
                        case ((int)DB.RequestStep.ADSL_Assignment):
                            {
                                RecordTemp.ADSLAssignmentCount = j.Count.ToString();
                                break;
                            }
                        case ((int)DB.RequestStep.ADSL_CenterManager):
                            {
                                RecordTemp.ADSLCenterManager = j.Count.ToString();
                                break;
                            }
                        case ((int)DB.RequestStep.ADSL_MDF):
                            {
                                RecordTemp.ADSLMDFCount = j.Count.ToString();
                                break;
                            }
                        case ((int)DB.RequestStep.ADSL_OMC):
                            {
                                RecordTemp.ADSLOMCCount = j.Count.ToString();
                                break;
                            }
                        case ((int)DB.RequestStep.ADSL_Request):
                            {
                                RecordTemp.ADSLRequestCount = j.Count.ToString();
                                break;
                            }
                        case ((int)DB.RequestStep.ADSL_Setup):
                            {
                                RecordTemp.ADSLSetupCount = j.Count.ToString();
                                break;
                            }
                        case ((int)DB.RequestStep.ADSL_TaskOfCustomer):
                            {
                                RecordTemp.ADSLTaskOfCustomerCount = j.Count.ToString();
                                break;
                            }
                        case ((int)DB.RequestStep.ADSL_TaskOfCustomerManager):
                            {
                                RecordTemp.ADSLTaskOfCustomerManagerCount = j.Count.ToString();
                                break;
                            }

                    }

                }
                lstRecord.Add(RecordTemp);

            }
            return lstRecord;

        }

        private static List<ADSLStatisticsInfo> GetADSLStatisticsInfo(int centerId, int regionId)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests

                     .Where(t => (
                          (t.Request.CenterID == centerId)
                          && (t.Request.Center.RegionID == regionId)
                          && (!t.Request.IsCancelation && !t.Request.IsWaitingList))


                        ).Select(
                                    t => new ADSLStatisticsInfo
                                    {
                                        CenterName = t.Request.Center.CenterName,
                                        RegionName = t.Request.Center.Region.Title,
                                        StepID = t.Request.Status.RequestStepID.ToString()

                                    }
                                 ).GroupBy(t => new
                                 {
                                     CenterName = t.CenterName,
                                     RegionName = t.RegionName,
                                     StepID = t.StepID

                                 })
                                    .Select(t => new ADSLStatisticsInfo
                                    {
                                        CenterName = t.Key.CenterName,
                                        RegionName = t.Key.RegionName,
                                        StepID = t.Key.StepID,
                                        Count = t.Key.StepID.Count()
                                    }
                                    ).
                                 ToList();

            }
        }

        private static List<ADSLStatisticsGroup> GetADSLStatisticsGroup(List<int> centerId, int? regionId)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests
                     .Where(t => (
                        (centerId.Count == 0 || centerId.Contains(t.Request.CenterID))
                        && (!regionId.HasValue || regionId == t.Request.Center.RegionID))
                        ).Select(
                             t => new ADSLStatisticsGroup
                             {
                                 CenterID = t.Request.CenterID.ToString(),
                                 RequestStepID = t.Request.Status.RequestStepID.ToString(),
                                 RequestStepTitle = t.Request.Status.RequestStep.StepTitle,
                                 Count = 1.ToString(),
                                 RequestNo = t.ID,
                                 RegionID = t.Request.Center.RegionID.ToString()

                             }
                                 ).GroupBy(t => new
                                 {
                                     center = t.CenterID,
                                     //requestno = t.RequestNo,
                                     region = t.RegionID
                                 })
                                    .Select(t => new ADSLStatisticsGroup
                                    {
                                        CenterID = t.Key.center,
                                        //RequestNo = t.Key.requestno,
                                        RegionID = t.Key.region.ToString()
                                    }
                                    ).Distinct()
                                     .ToList();
            }
        }

        public static List<RequestInfo> GetAdslDelay(DateTime? FromDate, DateTime? ToDate, string TelephoneNo, int? RegionId, int? CenterId, int? RequestType, int? DelayStatus, string IdentificationId)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests
                     .Where(t => (
                            ((!FromDate.HasValue || t.Request.InsertDate >= FromDate)
                            && (!ToDate.HasValue || t.Request.InsertDate < ToDate)
                          && (!RegionId.HasValue || t.Request.Center.RegionID == RegionId)
                          && (!CenterId.HasValue || t.Request.CenterID == CenterId)
                          && (!RequestType.HasValue || t.Request.RequestTypeID == RequestType)
                          && (!DelayStatus.HasValue || t.Request.Status.RequestStepID == DelayStatus)
                          && (IdentificationId == null || t.Customer.NationalCodeOrRecordNo == (string)IdentificationId))
                          && (TelephoneNo == null || t.Request.TelephoneNo.ToString() == TelephoneNo)
                          && (!t.Request.IsCancelation)
                          && (!t.Request.IsWaitingList))

                        ).Select(
                             t => new RequestInfo
                             {
                                 CenterName = t.Request.Center.CenterName,
                                 RegionName = t.Request.Center.Region.Title,
                                 CustomerName = t.Customer.FirstNameOrTitle + " " + t.Customer.LastName,
                                 ID = t.ID,
                                 InsertDate = t.Request.InsertDate.ToPersian(Date.DateStringType.Short),
                                 RequestDate = t.Request.InsertDate.ToPersian(Date.DateStringType.Short),
                                 RequestLetterNo = t.Request.RequestLetterNo,
                                 RequestLetterDate = t.Request.RequestLetterDate.ToPersian(Date.DateStringType.Short),
                                 CurrentStep = t.Request.Status.RequestStep.StepTitle,
                                 StepID = t.Request.Status.RequestStep.ID,
                                 RequesterName = t.Request.RequesterName,
                                 RequestPaymentTypeID = (int)t.Request.RequestPaymentTypeID,
                                 ModifyDate = t.Request.ModifyDate.ToString(),
                                 StatusName = t.Request.Status.Title,
                                 StatusID = t.Request.StatusID,
                                 RequestTypeName = t.Request.RequestType.Title,
                                 RequestTypeID = t.Request.RequestTypeID,
                                 CustomerNationalCode = t.Customer.NationalCodeOrRecordNo,
                                 TelephoneNo = t.Request.TelephoneNo
                             }
                            ).OrderByDescending(t => t.ModifyDate)
                             .Distinct()
                             .ToList();
            }
        }

        public static List<ADSLPAPRequestInfo> GetADSLPapRequests(DateTime? fromDate, DateTime? toDate,
                                                            List<int> RequestTypeIds,
                                                            long? RequestNo, int? CenterId, string IdentificationId, long? TelephoneNo)
        {
            List<int> RT = RequestDB.GetADSLPapRequest();

            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLPAPRequests
                    .Where(
                            t => (!fromDate.HasValue || t.Request.InsertDate >= fromDate)
                                    && (!toDate.HasValue || t.Request.InsertDate < toDate)
                                    && ((RequestTypeIds.Count == 0 && RT.Contains((int)t.RequestTypeID))
                                    || RequestTypeIds.Contains((int)t.RequestTypeID))
                                    && (!RequestNo.HasValue || t.ID == RequestNo)
                                    && (!CenterId.HasValue || t.Request.CenterID == CenterId)
                                    && (IdentificationId == string.Empty || IdentificationId == t.Request.Customer.NationalCodeOrRecordNo)
                                    && (!TelephoneNo.HasValue || t.Request.TelephoneNo == TelephoneNo)

                            ).Select
                            (
                            t => new ADSLPAPRequestInfo
                            {
                                Customer = t.Customer,
                                CustomerStatus = t.CustomerStatus.ToString(),
                                ID = t.ID,
                                RequestType = t.RequestTypeID.ToString(),
                                PapInfoID = t.PAPInfoID.ToString(),
                                PapInfoStatus = t.PAPInfo.LoginStatus.ToString(),
                                PapInfoTitle = t.PAPInfo.Title,
                                TelephoneNo = t.TelephoneNo,
                                SplitorBucht = t.SplitorBucht,
                                LineBucht = t.LineBucht,
                                InstalTimeOut = t.InstalTimeOut.ToString(),
                                EndDate = t.Request.EndDate.ToString(),
                                InsertDate = t.Request.InsertDate.ToString(),
                                RequestDate = t.Request.InsertDate.ToString(),
                                Center = t.Request.Center.CenterName,
                                Region = t.Request.Center.Region.Title,
                                Step = t.Request.Status.RequestStep.StepTitle
                            }
                           )
                         .ToList();


            }
        }

        public static List<ADSLPAPRequestInfo> GetPapRequestsOperation(DateTime? fromDate, DateTime? toDate, List<int> InstallDateTypeIds, long? RequestNo, int? CenterId, long? TelephoneNo)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLPAPRequests
                    .Where(t => (!fromDate.HasValue || t.Request.InsertDate >= fromDate)
                                 && (!toDate.HasValue || t.Request.InsertDate < toDate)
                                 && (InstallDateTypeIds.Count == 0
                                 || InstallDateTypeIds.Contains((int)t.InstalTimeOut))
                                 && (!RequestNo.HasValue || t.ID == RequestNo)
                                 && (!CenterId.HasValue || t.Request.CenterID == CenterId)
                                 && (!TelephoneNo.HasValue || t.Request.TelephoneNo == TelephoneNo)
                                 && (t.Request.EndDate != null)
                                 && (!t.Request.IsCancelation && !t.Request.IsWaitingList))
                            .Select(t => new ADSLPAPRequestInfo
                            {
                                ID = t.ID,
                                TelephoneNo = t.Request.TelephoneNo,
                                Customer = t.Customer,
                                RequestDate = t.Request.InsertDate.ToString(),
                                EndDate = t.Request.EndDate.ToString(),
                                RequestType = t.RequestTypeID.ToString(),
                                PapInfoTitle = t.PAPInfo.Title,
                                InstalTimeOut = t.InstalTimeOut.ToString(),
                                InsertDate = t.Request.InsertDate.ToString(),
                                Step = t.Request.Status.RequestStep.StepTitle,
                                Center = t.Request.Center.CenterName,
                                Region = t.Request.Center.Region.Title,
                                DateDiff = SqlMethods.DateDiffHour(t.Request.InsertDate, (DateTime)t.Request.EndDate)
                            })
                         .ToList();
            }
        }

        public static List<ChangeNameInfo> GetChangeNameInfo(List<int> cites, List<int> centers, DateTime? fromDate, DateTime? toDate, long? RequestNo, long? TelephoneNo)
        {




            if (toDate.HasValue)
                toDate = toDate.Value.AddDays(1);


            using (MainDataContext context = new MainDataContext())
            {

                return context.ChangeNames
                    .Join(context.Telephones, c => c.Request.TelephoneNo, t => t.TelephoneNo, (c, t) => new { Request = c.Request, ChangeName = c, Tel = t })

                    .Where(
                            t =>
                                       (cites.Count() == 0 || cites.Contains(t.Request.Center.Region.CityID))
                                    && (centers.Count() == 0 || centers.Contains(t.Request.CenterID))
                                    && (!fromDate.HasValue || t.Request.EndDate >= fromDate)
                                    && (!toDate.HasValue || t.Request.EndDate <= toDate)
                                    && (RequestNo == null ? t.Request.EndDate != null : RequestNo == t.ChangeName.ID)
                                    && (!TelephoneNo.HasValue || t.Request.TelephoneNo == TelephoneNo)
                                    && (!t.Request.IsCancelation && !t.Request.IsWaitingList)


                            ).OrderBy(t => t.Request.EndDate)
                            .Select
                            (
                            t => new ChangeNameInfo
                            {
                                RequestNo = t.ChangeName.ID.ToString(),
                                CenterName = t.Request.Center.CenterName,
                                Region = t.Request.Center.Region.City.Name,
                                OldFirstNameOrTitle = t.ChangeName.Customer1.FirstNameOrTitle,
                                NewFirstNameOrTitle = t.ChangeName.Customer.FirstNameOrTitle,
                                RequestID = t.Request.ID.ToString(),
                                OldCustomer_RecordNo = t.ChangeName.Customer1.NationalCodeOrRecordNo,
                                NewCustomer_RecordNo = t.ChangeName.Customer.NationalCodeOrRecordNo,

                                OldCustomer_Agency = t.ChangeName.Customer1.Agency,
                                OldCustomer_AgencyNumber = t.ChangeName.Customer1.AgencyNumber,

                                NewCustomer_Agency = t.ChangeName.Customer.Agency,
                                NewCustomer_AgencyNumber = t.ChangeName.Customer.AgencyNumber,

                                RequestDate = t.Request.EndDate.ToPersian(Date.DateStringType.Short),
                                RequestLetterDate = t.Request.RequestLetterDate.ToString(),
                                RequestLetterNo = t.Request.RequestLetterNo,
                                TelephoneNo = t.Request.TelephoneNo.ToString(),


                                NewCustomer_BirthCertificateID = t.ChangeName.Customer.BirthCertificateID.ToString(),
                                NewCustomer_BirthDateOrRecordDate = t.ChangeName.Customer.BirthDateOrRecordDate.ToString(),
                                NewCustomer_FatherName = t.ChangeName.Customer.FatherName,
                                NewCustomer_FirstName = t.ChangeName.Customer.FirstNameOrTitle,
                                NewCustomer_LastName = t.ChangeName.Customer.LastName,
                                NewCustomer_IssuePlace = t.ChangeName.Customer.IssuePlace,
                                NewCustomer_PersonType = t.ChangeName.Customer.PersonType,
                                NewCustomerNationalCode = t.ChangeName.Customer.NationalCodeOrRecordNo.ToString(),
                                NewCustomer_Name = t.ChangeName.Customer.FirstNameOrTitle + " " + t.ChangeName.Customer.LastName,
                                NewCustomer_PersonTypeTitle = Helpers.GetEnumDescription(t.ChangeName.Customer.PersonType, typeof(DB.PersonType)),

                                OldCustomer_BirthCertificateID = t.ChangeName.Customer1.BirthCertificateID.ToString(),
                                OldCustomer_BirthDateOrRecordDate = t.ChangeName.Customer1.BirthDateOrRecordDate.ToString(),
                                OldCustomer_FatherName = t.ChangeName.Customer1.FatherName,
                                OldCustomer_FirstName = t.ChangeName.Customer1.FirstNameOrTitle,
                                OldCustomer_LastName = t.ChangeName.Customer1.LastName,
                                OldCustomer_IssuePlace = t.ChangeName.Customer1.IssuePlace,
                                OldCustomer_PersonType = t.ChangeName.Customer1.PersonType,
                                OldCustomerNationalCode = t.ChangeName.Customer1.NationalCodeOrRecordNo.ToString(),
                                OldCustomer_HasCountLetter = t.ChangeName.HasCourtLetter,
                                OldCustomer_Name = t.ChangeName.Customer1.FirstNameOrTitle + " " + t.ChangeName.Customer1.LastName,
                                OldCustomer_PersonTypeTitle = Helpers.GetEnumDescription(t.ChangeName.Customer1.PersonType, typeof(DB.PersonType)),
                                InstallAddress = t.Tel.Address.AddressContent,
                                PostalCode = t.Tel.Address.PostalCode
                            }
                           )
                         .ToList();


            }
        }

        public static List<ChangeNumberInfo> GetChangeNumberInfo(List<int> cites, List<int> centers, DateTime? fromDate, DateTime? toDate, long telephoneNo, List<int> ChangeNumberReasonIds)
        {


            if (toDate.HasValue)
                toDate = toDate.Value.AddDays(1);
            using (MainDataContext context = new MainDataContext())
            {
                return context.ChangeNos
                    .Where(
                            t =>
                                    (cites.Count() == 0 || cites.Contains(t.Request.Center.Region.CityID)) &&
                                    (centers.Count() == 0 || centers.Contains(t.Request.CenterID)) &&
                                    (!fromDate.HasValue || t.ChangeDate >= fromDate)
                                    && (!toDate.HasValue || t.ChangeDate <= toDate)
                                    && (telephoneNo == -1 || t.OldTelephoneNo == telephoneNo)
                                    && (!t.Request.IsCancelation && !t.Request.IsWaitingList)
                                    && (ChangeNumberReasonIds.Count == 0 || ChangeNumberReasonIds.Contains(t.CauseOfChangeNoID))

                            ).Select
                            (
                            t => new ChangeNumberInfo
                            {
                                RequestNo = t.ID,
                                CenterName = t.Request.Center.CenterName,
                                NewSwitchPortID = t.NewSwitchPortID.ToString(),
                                OldSwitchPortID = t.OldSwitchPortID.ToString(),
                                NewTelephoneNo = t.NewTelephoneNo,
                                OldTelephoneNo = t.OldTelephoneNo,
                                Customer = (t.Request.Customer.FirstNameOrTitle ?? "") + " " + (t.Request.Customer.LastName ?? ""),
                                ChangeDate = t.ChangeDate.ToPersian(Date.DateStringType.Short),
                                ChangeReason = t.CauseOfChangeNoID.ToString(),
                                RequestLetterNo = t.Request.RequestLetterNo,
                                CustomerNationalCode = t.Request.Customer.NationalCodeOrRecordNo
                            }
                           )
                         .ToList();


            }
        }
        //public static List<InstallRequestInfo> GetInstallProcessInfo(DateTime? fromDate, DateTime? toDate, int? RequestNo, int? CenterId, List<int> ChangeNumberReasonIds)
        //{
        //    using (MainDataContext context = new MainDataContext())
        //    {
        //        return context.InstallRequests
        //            .Where(
        //                    t => (!fromDate.HasValue || t.Request.InsertDate >= fromDate)
        //                            && (!toDate.HasValue || t.Request.InsertDate <= toDate)
        //                            && (!RequestNo.HasValue || t.ID == RequestNo)
        //                            && (!CenterId.HasValue || t.Request.CenterID == CenterId)
        //                            && (!t.Request.IsCancelation && !t.Request.IsWaitingList)
        //            //&& (ChangeNumberReasonIds.Count == 0 || ChangeNumberReasonIds.Contains(t.ChangeReasonID))

        //                    ).Select
        //                    (
        //                    t => new InstallRequestInfo
        //                    {
        //                        //RequestNo = t.ID.ToString(),
        //                        //CenterName = t.Request.Center.CenterName,
        //                        //Region = t.Request.Center.Region.Title,
        //                        //NewSwitchPortID = t.NewSwitchPortID.ToString(),
        //                        //OldSwitchPortID = t.OldSwitchPortID.ToString(),
        //                        //NewTelephoneNo = t.NewTelephoneNo.ToString(),
        //                        //OldTelephoneNo = t.OldTelephoneNo.ToString(),
        //                        //Customer = t.Request.Customer.FirstNameOrTitle + " " + t.Request.Customer.LastName,
        //                        //ChangeDate = t.ChangeDate.ToString(),

        //                        //ChangeReason = t.ChangeReasonID.ToString(),

        //                        //RequestDate = t.Request.InsertDate.ToString(),




        //                        //RequestLetterDate = t.Request.RequestLetterDate.ToString(),
        //                        //RequestLetterNo = t.Request.RequestLetterNo,
        //                        //CustomerNationalCode = t.Request.Customer.NationalCodeOrRecordNo
        //                    }
        //                   )
        //                 .ToList();
        //    }
        //}





        public static List<InstallRequestInfo> GetInstallProcessInfo(
                                                                   List<int> cites, List<int> centers,
                                                                    string IdentificationId,
                                                                    long? RequestID,
                                                                    int? StepRequestID,
                                                                    int? TelephoneTypeID,
                                                                    long? TelephoneNo,
                                                                    DateTime? fromInstallationDate,
                                                                    DateTime? toInstallationDate)
        {
            if (toInstallationDate.HasValue)
                toInstallationDate = toInstallationDate.Value.AddDays(1);
            using (MainDataContext context = new MainDataContext())
            {
                List<InstallRequestInfo> result = context.InstallRequests
                    .Join(context.Addresses, i => i.InstallAddressID, a => a.ID, (i, a) => new { Address = a, InstallRequest = i })

                    //.GroupJoin(context.InvestigatePossibilities, j => j.Address.ID, i => i.CustomerAddressID, (j, i) => new { address = j.Address, investigate = i, installrequest = j.InstallRequest })
                    //.SelectMany(t1 => t1.investigate.DefaultIfEmpty(), (t2, t1) => new { InvestigatePS = t1, InstallRequest = t2.installrequest, Address = t2.address })
                    .Where(
                            t =>
                                       (cites.Count() == 0 || cites.Contains(t.InstallRequest.Request.Center.Region.CityID))
                                    && (centers.Count() == 0 || centers.Contains(t.InstallRequest.Request.CenterID))
                                    && (!RequestID.HasValue || t.InstallRequest.RequestID == RequestID)
                                    && (IdentificationId == string.Empty || t.InstallRequest.Request.Customer.NationalCodeOrRecordNo == IdentificationId)
                                    && (!RequestID.HasValue || RequestID == t.InstallRequest.RequestID)
                                    && (!TelephoneNo.HasValue || TelephoneNo == t.InstallRequest.Request.TelephoneNo || TelephoneNo == t.InstallRequest.Request.TelephoneNo)
                                    && (!StepRequestID.HasValue || StepRequestID == t.InstallRequest.Request.Status.RequestStepID)
                                    && (!TelephoneTypeID.HasValue || t.InstallRequest.TelephoneType == TelephoneTypeID)
                                    && (!t.InstallRequest.Request.IsCancelation && !t.InstallRequest.Request.IsWaitingList)
                                    && (!fromInstallationDate.HasValue || t.InstallRequest.InstallationDate >= fromInstallationDate)
                                    && (!toInstallationDate.HasValue || t.InstallRequest.InstallationDate <= toInstallationDate)

                            ).OrderBy(t => t.InstallRequest.InstallationDate)
                            .Select
                            (
                            t => new InstallRequestInfo
                            {
                                CenterName = t.InstallRequest.Request.Center.CenterName,
                                RegionName = t.InstallRequest.Request.Center.Region.Title,
                                ChargingType = t.InstallRequest.ChargingType.ToString(),
                                CurrentStep = t.InstallRequest.Request.Status.RequestStep.StepTitle,
                                CurrentTelephone = t.InstallRequest.CurrentTelephone.ToString(),
                                CustomerName = t.InstallRequest.Request.Customer.FirstNameOrTitle + " " + t.InstallRequest.Request.Customer.LastName,
                                CustomerNationalCode = t.InstallRequest.Request.Customer.NationalCodeOrRecordNo,
                                ID = t.InstallRequest.RequestID,
                                InsertDate = t.InstallRequest.Request.InsertDate.ToString(),
                                InstallRequestType = t.InstallRequest.Request.RequestTypeID.ToString(),
                                LetterDateOfReinstall = t.InstallRequest.LetterDateOfReinstall.ToString(),
                                LetterNumberOfReinstalling = t.InstallRequest.LetterNumberOfReinstalling,
                                LicenseDate = t.InstallRequest.LicenseDate.ToString(),
                                LicenseNumber = t.InstallRequest.LicenseNumber,
                                ModifyDate = t.InstallRequest.Request.ModifyDate.ToString(),
                                ModifyUser = t.InstallRequest.Request.ModifyDate.ToString(),
                                OrderType = t.InstallRequest.OrderType.ToString(),
                                PassTelephone = t.InstallRequest.PassTelephone.ToString(),
                                PosessionType = t.InstallRequest.PosessionType.ToString(),
                                ReasonReinstall = t.InstallRequest.ReasonReinstall.ToString(),
                                RequestDate = t.InstallRequest.Request.RequestDate.ToString(),
                                RequestLetterDate = t.InstallRequest.Request.RequestLetterDate.ToString(),
                                RequestLetterNo = t.InstallRequest.Request.RequestLetterNo,
                                RequestTypeName = t.InstallRequest.Request.RequestType.Title,
                                StatusName = t.InstallRequest.Request.Status.Title,
                                TelephoneType = t.InstallRequest.CustomerType.Title,
                                TelephoneNo = t.InstallRequest.Request.TelephoneNo.ToString(),
                                FieldID = t.InstallRequest.Request.Customer.CustomerID,
                                AddressID = t.InstallRequest.InstallAddressID,
                                Address = t.Address.AddressContent,
                                // TelephoneNo = t.InvestigatePS.TelephoneNo.ToString(),
                                InstallationDatedate = t.InstallRequest.InstallationDate
                            }
                           )
                         .ToList();
                result.ForEach(ir =>

                                      ir.InstallationDate = (ir.InstallationDatedate.HasValue) ? ir.InstallationDatedate.ToPersian(Date.DateStringType.Short) : "-----"
                               );
                return result;
            }


        }



        public static List<InstallRequestReport> GetInstallProcessReport(DateTime? FromDate, DateTime? ToDate, string IdentificationId, List<long> RequestIDs, List<int> CenterIds, int? StepRequestID, int? TelephoneTypeID, long? TelephoneNo)
        {
            if (ToDate.HasValue)
                ToDate = ToDate.Value.AddDays(1);
            using (MainDataContext context = new MainDataContext())
            {
                //, Customer.NationalCodeOrRecordNo as CustomerNationalCode, r.ID as RequestID ,r.InsertDate,r.EndDate as InstallInsertDate ,r.RequestTypeID as InstallRequestType
                //                   ,CAST(ir.OrderType AS char(5)) as OrderType, CustomerType.Title AS TelephoneType
                //                   , ir.PassTelephone,CAST(ir.PosessionType AS char(5)) as PosessionType
                //                   , _Counter.[Local] as WorkedCity ,_Counter.NonLocal as WorkedBetweenCity,_Counter.International as WorkedOutside
                //                   , Customer.CustomerID as FieldID
                //                   , ai.AddressContent as Address,ai.PostalCode
                //                   ,CAST(r.RequestPaymentTypeID AS char(5)) as RequestPaymentType
                string query = @"Select *
                                    From (
                                    Select Center.CenterName,Region.Title as RegionName,  Cast(ir.ChargingType as char(5)) as ChargingType ,r.Telephoneno as CurrentTelephone,CONCAT(Customer.FirstNameOrTitle,' ',Customer.LastName) as CustomerName 
                                    , Customer.NationalCodeOrRecordNo as CustomerNationalCode, r.ID as RequestID ,r.InsertDate,r.EndDate as InstallInsertDate ,r.RequestTypeID as InstallRequestType
                                    ,CAST(ir.OrderType AS char(5)) as OrderType, CustomerType.Title AS TelephoneType
                                    , ir.PassTelephone,CAST(ir.PosessionType AS char(5)) as PosessionType
                                    , _Counter.[Local] as WorkedCity ,_Counter.NonLocal as WorkedBetweenCity,_Counter.International as WorkedOutside
                                    , Customer.CustomerID as FieldID
                                    , ai.AddressContent as Address,ai.PostalCode , Cast(ir.PassTelephone as VarChar(max)) as OldTelephoneNo
                                    , tel.InstallationDate
                                    ,ROW_NUMBER() over (partition By r.TElephoneNo order by r.InsertDate Desc ) RowNo 
                                    FROM Request r
                                    join Telephone as tel on r.TelephoneNo = tel.TelephoneNo
                                    join installrequest ir ON r.ID = ir.RequestID AND r.RequestTypeID = 1
                                    LEFT JOIN Address ai ON ai.ID = ir.InstallAddressID
                                    LEFT JOIN InvestigatePossibility ip ON ip.RequestID = r.ID
                                    Left join (
			  select RowNumber , TelephoneNo ,  [local] , [NonLocal] , International
			  from (
				SELECT 
					ROW_NUMBER() OVER ( PARTITION BY TelephoneNo ORDER BY InsertDate DESC ) AS 'RowNumber' , 
					TelephoneNo ,
					cast (Local AS nvarchar(MAX)) as [local],
					cast(NonLocal AS nvarchar(MAX)) as [NonLocal],
					cast(International AS nvarchar(MAX)) as International 
				from  
					Counter ) as x where x.RowNumber = 1 
			 ) _Counter ON _Counter.TelephoneNo = r.TelephoneNo
                                    Left JOIN Center on r.CenterID = Center.ID 
                                    LEFT JOIN Region on Center.RegionID = Region.ID
                                    LEFT JOIN City on City.ID = Region.CityID
                                    
                                    Left JOIN Customer on Customer.ID = r.CustomerID
                                    LEFT JOIN CustomerType on CustomerType.ID = ir.TelephoneType
                                    
 
                                    
 
                                    WHERE (1=1) ";
                if (RequestIDs.Count != 0)
                {

                    query += " and r.ID in " + MakeTheList(RequestIDs.ConvertAll<string>(x => x.ToString())) + "";
                }
                if (TelephoneNo.HasValue)
                {
                    //query += " and r.TelephoneNo = '" + TelephoneNo + "'";
                    string telephoneNoFilter = string.Format("and ({0} = -1 OR {0} = r.TelephoneNo)", TelephoneNo);
                    query += telephoneNoFilter;
                }

                if (FromDate.HasValue)
                    query += " and tel.InstallationDate >= CONVERT(datetime, '" + FromDate.Value.ToShortDateString() + "', 101)";
                if (ToDate.HasValue)
                    query += " and tel.InstallationDate <= CONVERT(datetime, '" + ToDate.Value.ToShortDateString() + "', 101)";

                if (TelephoneTypeID.HasValue)
                    query += " and ir.TelephoneType = " + TelephoneTypeID.ToString() + "";

                if (CenterIds.Count > 0)
                {
                    string CenterList = MakeTheList(CenterIds.ConvertAll<string>(x => x.ToString()));
                    query += " and R.CenterID in " + CenterList;
                }
                query += @")T
                            where T.RowNo = 1
                            order by RequestID";
                return context.ExecuteQuery<InstallRequestReport>(string.Format(query)).ToList();

            }


        }

        public static List<InstallRequestReport> GetReInstallProcessReport(DateTime? FromDate, DateTime? ToDate,
                                                                    string IdentificationId,
                                                                   List<long> RequestIDs,
               List<int> CenterIds,
                                                                   int? StepRequestID,
                                                                   int? TelephoneTypeID,
                                                                   long? TelephoneNo)
        {
            using (MainDataContext context = new MainDataContext())
            {
                string query = @"Select Center.CenterName,Region.Title as RegionName,  Cast(ir.ChargingType as char(5)) as ChargingType ,r.Telephoneno as CurrentTelephone,Customer.FirstNameOrTitle + ' ' + Customer.LastName as CustomerName 
                                   , Customer.NationalCodeOrRecordNo as CustomerNationalCode, r.ID as RequestID ,r.InsertDate,r.EndDate as InstallInsertDate ,r.RequestTypeID as InstallRequestType
                                    ,CAST(ir.OrderType AS char(5)) as OrderType, CustomerType.Title AS TelephoneType
                                    , ir.PassTelephone,CAST(ir.PosessionType AS char(5)) as PosessionType
                                    , _Counter.[Local] as WorkedCity ,_Counter.NonLocal as WorkedBetweenCity,_Counter.International as WorkedOutside
                                    , Customer.CustomerID as FieldID
                                    , ai.AddressContent as Address,ai.PostalCode , Cast(ir.PassTelephone as VarChar(max)) as OldTelephoneNo
                                    , tel.InstallationDate
                                    FROM Request r
                                    join Telephone as tel on r.TelephoneNo = tel.TelephoneNo
                                    join installrequest ir ON r.ID = ir.RequestID AND r.RequestTypeID = 53
                                    LEFT JOIN Address ai ON ai.ID = ir.InstallAddressID
                                    LEFT JOIN InvestigatePossibility ip ON ip.RequestID = r.ID
                                    Left join (SELECT ROW_NUMBER() OVER ( PARTITION BY TelephoneNo ORDER BY InsertDate DESC ) AS 'RowNumber' , TelephoneNo ,cast (Local AS nvarchar(MAX)) as [local],cast(NonLocal AS nvarchar(MAX)) as [NonLocal],cast(International AS nvarchar(MAX)) as International from  Counter) _Counter ON _Counter.TelephoneNo = r.TelephoneNo
                                    Left JOIN Center on r.CenterID = Center.ID 
									LEFT JOIN Region on Center.RegionID = Region.ID
									LEFT JOIN City on City.ID = Region.CityID
                                    Left JOIN Customer on Customer.ID = r.CustomerID
                                    LEFT JOIN CustomerType on CustomerType.ID = ir.TelephoneType
                                    WHERE _Counter.RowNumber = 1";
                if (RequestIDs.Count != 0)
                {

                    query += " and r.ID in " + MakeTheList(RequestIDs.ConvertAll<string>(x => x.ToString())) + "";
                }
                if (TelephoneNo.HasValue)
                {
                    query += " and r.TelephoneNo = '" + TelephoneNo + "'";
                }

                if (FromDate.HasValue)
                    query += " and tel.InstallationDate >= CONVERT(datetime, '" + FromDate.Value.ToShortDateString() + "', 101)";
                if (ToDate.HasValue)
                    query += " and tel.InstallationDate <= CONVERT(datetime, '" + ToDate.Value.ToShortDateString() + "', 101)";

                if (TelephoneTypeID.HasValue)
                    query += " and ir.TelephoneType = " + TelephoneTypeID.ToString() + "";

                if (CenterIds.Count > 0)
                {
                    string CenterList = MakeTheList(CenterIds.ConvertAll<string>(x => x.ToString()));
                    query += " and R.CenterID in " + CenterList;
                }
                query += " order by r.ID ";
                return context.ExecuteQuery<InstallRequestReport>(string.Format(query)).ToList();

            }


        }


        public static List<ReportTemplateInfo> GetReportInfo()
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ReportTemplates
                               .Where(t => t.IsVisible == true).Select(t => new ReportTemplateInfo
                                            {
                                                Category = t.Category,
                                                ID = t.ID,
                                                Title = t.Title,
                                                IconName = t.IconName
                                            }
                                        )
                                .OrderBy(rt => rt.Category.Replace('ک', 'ك'))
                                .ThenBy(rt => rt.Title.Replace('ک', 'ك'))
                                .ToList();
            }
        }

        public static string GetUserControlName(int reportID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ReportTemplates
                        .Where(t => t.ID == reportID).Select(t => t.UserControlName).FirstOrDefault();
            }
        }

        public static ReportTemplate GetReportTemplateByID(int id)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ReportTemplates.Where(t => t.ID == id).SingleOrDefault();
            }
        }

        public static FormTemplate GetFormTemplateByID(int id)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.FormTemplates.Where(t => t.ID == id).SingleOrDefault();
            }
        }

        public static byte[] GetReportFile(int id)
        {
            using (MainDataContext context = new MainDataContext())
            {
                try
                {
                    return context.ReportTemplates.Where(t => t.ID == id).Select(t => t.Template).Single().ToArray();
                }
                catch
                {
                    return null;
                }
            }
        }

        public static byte[] GetFormFile(int id)
        {
            using (MainDataContext context = new MainDataContext())
            {
                try
                {
                    return context.FormTemplates.Where(t => t.ID == id).Select(t => t.Template).Single().ToArray();
                }
                catch
                {
                    return null;
                }
            }
        }

        public static string GetReportIconName(int reportID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ReportTemplates.Where(t => t.ID == reportID).Select(t => t.IconName).SingleOrDefault();
            }
        }

        public static string GetReportPath(int id)
        {
            using (MainDataContext context = new MainDataContext())
            {
                string filePath = string.Empty;
                ReportTemplate item = context.ReportTemplates.FirstOrDefault(t => t.ID == id);
                if (item != null)
                {
                    string timeStamp = item.TimeStamp;
                    string TemPath = Path.GetTempPath();
                    filePath = TemPath + timeStamp.ToString();
                    if (!File.Exists(filePath))
                    {
                        File.WriteAllBytes(filePath, item.Template.ToArray());
                    }
                }
                return filePath;
            }
        }

        public static string GetFormPath(int id)
        {
            using (MainDataContext context = new MainDataContext())
            {
                FormTemplate item = context.FormTemplates.FirstOrDefault(t => t.ID == id);
                string timeStamp = item.TimeStamp;
                string TemPath = Path.GetTempPath();
                string FileFullPath = TemPath + timeStamp.ToString();
                if (!File.Exists(FileFullPath))
                {
                    File.WriteAllBytes(FileFullPath, item.Template.ToArray());
                }
                return FileFullPath;
            }
        }






        public static List<InvestigatePossibilityRaw> GetInvestigatePossibility(string TelephoneNo, DateTime? FromDate, DateTime? ToDate, int? CenterId, int? TelephoneStatus)
        {
            using (MainDataContext context = new MainDataContext())
            {
                string query = @"select IssueWiring.WiringNo,IssueWiring.WiringIssueDate 
	                                        ,Wiring.MDFWiringDate,Wiring.MDFWiringHour,Wiring.WiringDate,Wiring.WiringHour
	                                        ,InvestigatePossibility.BuchtID , InvestigatePossibility.ConnectionReserveDate,InvestigatePossibility.HasReport,InvestigatePossibility.HasWaitingInfo
	                                        ,CabinetInput.InputNumber
	                                        ,Cabinet.CabinetNumber 
	                                        ,PostContact.ConnectionNo ,PostContact.ConnectionType
	                                        ,Post.Number
	                                        ,Counter.CounterNo
                                            ,Request.InsertDate,Request.TelephoneNo
                                            ,InstallRequest.RequestID
                                            ,InstallAddress.AddressContent,InstallAddress.PostalCode as InstallPostalcode
											,CorrespondenceAddress.AddressContent,CorrespondenceAddress.PostalCode as CorrespondencePostalCode
                                            ,region.Title as Region,center.CenterName As Center
                                            ,Customer.FirstNameOrTitle + ' ' +  Customer.LastName as CustomerName
                                        
                                        From Request 
                                        join InstallRequest on Request.ID = InstallRequest.RequestID
                                        join Address on Address.ID = InstallRequest.InstallAddressID
                                        join IssueWiring on IssueWiring.RequestID = request.ID
                                        join Wiring on Wiring.RequestID = IssueWiring.RequestID
                                        join InvestigatePossibility on Request.ID = InvestigatePossibility.RequestID
                                        join Bucht on Bucht.ID = InvestigatePossibility.BuchtID
                                        join PostContact on bucht.ConnectionID = PostContact.ID
                                        join Post on PostContact.PostID = Post.ID
                                        join CabinetInput on CabinetInput.ID = Bucht.CabinetInputID
                                        join Cabinet on cabinet.ID = CabinetInput.CabinetID
										JOIN [Address] InstallAddress on InstallAddress.ID = InstallRequest.InstallAddressID
										JOIN [Address] CorrespondenceAddress ON CorrespondenceAddress.ID = InstallRequest.CorrespondenceAddressID
                                        join (select CounterNo,TelephoneNo
                                        from  counter  join(select TelNo,DateTimeRead 
						                                        from(	select TelephoneNo As TelNo,Max(CounterReadDate) as DateTimeRead
								                                        from Counter
								                                        group by TelephoneNo)T
								                            )CounterTemp  
								                             on  CounterTemp.TelNo = Counter.TelephoneNo
								                             where CounterTemp.DateTimeRead = Counter.CounterReadDate) Counter
                                         on InvestigatePossibility.TelephoneNo = Counter.TelephoneNo 
                                        join Center on Center.ID = Request.CenterID
                                        join Region on region.ID = Center.RegionID   
                                        join Telephone on Request.TelephoneNo = Telephone.TelephoneNo
                                        join Customer on request.CustomerID = Customer.ID
                                        where IsWaitingList = 0 AND IsCancelation = 0";
                if (TelephoneNo != null)
                {
                    query += " and Request.TelephoneNo = '" + TelephoneNo + "'";
                }

                if (FromDate.HasValue)
                    query += " and CONVERT(date, Request.InsertDate , 101 ) >= CONVERT(date, '" + FromDate.Value.ToShortDateString() + "', 101)";
                if (ToDate.HasValue)
                    query += " and CONVERT(date, Request.InsertDate , 101 ) <= CONVERT(date, '" + ToDate.Value.ToShortDateString() + "', 101)";
                if (CenterId.HasValue)
                    query += " and Request.CenterID = " + CenterId.ToString() + "";
                if (TelephoneStatus.HasValue)
                    query += " and Telephone.Status = " + TelephoneStatus.ToString() + "";

                query += " order by RequestID ";
                return context.ExecuteQuery<InvestigatePossibilityRaw>(string.Format(query)).ToList();

            }
        }



        public static List<IssueWiringRaw> GetDayeriInfo(string TelephoneNo, DateTime? FromDate, DateTime? ToDate, int? CenterId, int? WiringTypeId, long? RequestNo, string NationalID)
        {
            using (MainDataContext context = new MainDataContext())
            {



                string query =
                @"select IssueWiring.WiringNo,IssueWiring.WiringIssueDate ,IssueWiring.IsPrinted,IssueWiring.WiringTypeID,IssueWiring.InsertDate,IssueWiring.PrintCount,IssueWiring.LastPrintDate
	                                        ,InvestigatePossibility.ConnectionID
	                                        ,CabinetInput.InputNumber
	                                        ,Cabinet.CabinetNumber
	                                        ,PostContact.ConnectionNo 
	                                        ,Post.Number 
                                            ,Request.InsertDate,Request.TelephoneNo
                                            ,InstallRequest.RequestID
                                            ,Address.AddressContent,Address.PostalCode
                                            ,region.Title as Region,center.CenterName As Center
                                            ,Customer.FirstNameOrTitle + ' ' +  Customer.LastName as CustomerName
											,SwitchPort.PortNo
											,Switch.SwitchCode
											,SwitchPrecode.SwitchPreNo
                                        From Request 
                                        join InstallRequest on Request.ID = InstallRequest.RequestID
                                        join Address on Address.ID = InstallRequest.InstallAddressID
                                        join IssueWiring on IssueWiring.RequestID = request.ID
                                        join InvestigatePossibility on Request.ID = InvestigatePossibility.RequestID
                                        join Bucht on Bucht.ID = InvestigatePossibility.ConnectionID
                                        join PostContact on bucht.ConnectionID = PostContact.ID
                                        join Post on PostContact.PostID = Post.ID
                                        join CabinetInput on CabinetInput.ID = Bucht.CabinetInputID
                                        join Cabinet on cabinet.ID = CabinetInput.CabinetID
                                        join Center on Center.ID = Request.CenterID
                                        join Region on region.ID = Center.RegionID   
                                        join Telephone on Request.TelephoneNo = Telephone.TelephoneNo
                                        join Customer on request.CustomerID = Customer.ID
										join SwitchPort on Telephone.SwitchPortID = SwitchPort.ID
										join SwitchPrecode on Telephone.SwitchPrecodeID = SwitchPrecode.ID
										join Switch on Switch.ID = SwitchPrecode.SwitchID
                                        where IsWaitingList = 0 AND IsCancelation = 0
                                        and Request.RequestTypeID = " + ((int)DB.RequestType.Dayri).ToString();
                if (TelephoneNo != null)
                {
                    query += " and Request.TelephoneNo = '" + TelephoneNo + "'";
                }

                if (FromDate.HasValue)
                    query += " and Request.InsertDate >= CONVERT(datetime, '" + FromDate.Value.ToShortDateString() + "', 101)";
                if (ToDate.HasValue)
                    query += " and Request.InsertDate <= CONVERT(datetime, '" + ToDate.Value.ToShortDateString() + "', 101)";
                if (CenterId.HasValue)
                    query += " and Request.CenterID = " + CenterId.ToString() + "";
                if (WiringTypeId.HasValue)
                    query += " and IssueWiring.WiringTypeID = " + WiringTypeId.ToString() + "";
                if (CenterId.HasValue)
                    query += " and Center.ID = " + CenterId.ToString() + "";
                if (RequestNo.HasValue)
                    query += " and IssueWiring.RequestID  = " + RequestNo.ToString() + "";
                if (NationalID != null)
                    query += " And Customer.NationalCodeOrRecordNo = '" + NationalID + "'";

                query += " order by RequestID";
                return context.ExecuteQuery<IssueWiringRaw>(string.Format(query)).ToList();

            }
        }
        public static List<IssueWiringRaw> GetReDayeriInfo(string TelephoneNo, DateTime? FromDate, DateTime? ToDate, int? CenterId, int? WiringTypeId, long? RequestNo, string NationalID)
        {
            using (MainDataContext context = new MainDataContext())
            {



                string query =
                @"select IssueWiring.WiringNo,IssueWiring.WiringIssueDate ,IssueWiring.IsPrinted,IssueWiring.WiringTypeID,IssueWiring.InsertDate,IssueWiring.PrintCount,IssueWiring.LastPrintDate
	                                        ,InvestigatePossibility.ConnectionID
	                                        ,CabinetInput.InputNumber
	                                        ,Cabinet.CabinetNumber
	                                        ,PostContact.ConnectionNo 
	                                        ,Post.Number 
                                            ,Request.InsertDate,Request.TelephoneNo
                                            ,InstallRequest.RequestID
                                            ,Address.AddressContent,Address.PostalCode
                                            ,region.Title as Region,center.CenterName As Center
                                            ,Customer.FirstNameOrTitle + ' ' +  Customer.LastName as CustomerName
											,SwitchPort.PortNo
											,Switch.SwitchCode
											,SwitchPrecode.SwitchPreNo
                                        From Request 
                                        join InstallRequest on Request.ID = InstallRequest.RequestID
                                        join Address on Address.ID = InstallRequest.InstallAddressID
                                        join IssueWiring on IssueWiring.RequestID = request.ID
                                        join InvestigatePossibility on Request.ID = InvestigatePossibility.RequestID
                                        join Bucht on Bucht.ID = InvestigatePossibility.ConnectionID
                                        join PostContact on bucht.ConnectionID = PostContact.ID
                                        join Post on PostContact.PostID = Post.ID
                                        join CabinetInput on CabinetInput.ID = Bucht.CabinetInputID
                                        join Cabinet on cabinet.ID = CabinetInput.CabinetID
                                        join Center on Center.ID = Request.CenterID
                                        join Region on region.ID = Center.RegionID   
                                        join Telephone on Request.TelephoneNo = Telephone.TelephoneNo
                                        join Customer on request.CustomerID = Customer.ID
										join SwitchPort on Telephone.SwitchPortID = SwitchPort.ID
										join SwitchPrecode on Telephone.SwitchPrecodeID = SwitchPrecode.ID
										join Switch on Switch.ID = SwitchPrecode.SwitchID
                                        where IsWaitingList = 0 AND IsCancelation = 0
                                        and Request.RequestTypeID = " + ((int)DB.RequestType.Reinstall).ToString();
                if (TelephoneNo != null)
                {
                    query += " and Request.TelephoneNo = '" + TelephoneNo + "'";
                }

                if (FromDate.HasValue)
                    query += " and Request.InsertDate >= CONVERT(datetime, '" + FromDate.Value.ToShortDateString() + "', 101)";
                if (ToDate.HasValue)
                    query += " and Request.InsertDate <= CONVERT(datetime, '" + ToDate.Value.ToShortDateString() + "', 101)";
                if (CenterId.HasValue)
                    query += " and Request.CenterID = " + CenterId.ToString() + "";
                if (WiringTypeId.HasValue)
                    query += " and IssueWiring.WiringTypeID = " + WiringTypeId.ToString() + "";
                if (CenterId.HasValue)
                    query += " and Center.ID = " + CenterId.ToString() + "";
                if (RequestNo.HasValue)
                    query += " and IssueWiring.RequestID  = " + RequestNo.ToString() + "";
                if (NationalID != null)
                    query += " And Customer.NationalCodeOrRecordNo = '" + NationalID + "'";

                query += " order by RequestID";
                return context.ExecuteQuery<IssueWiringRaw>(string.Format(query)).ToList();

            }
        }
        public static List<WiringListInfo> GetWiringDetails(DateTime? fromDate, DateTime? toDate,
                                                                     string IdentificationId,
                                                                    long? RequestID, int? CenterId, long? TelephoneNo)
        {
            using (MainDataContext context = new MainDataContext())
            {

                return context.Wirings
                    .Where(t => (
                                    (!fromDate.HasValue || t.Request.InsertDate >= fromDate)
                                    && (!toDate.HasValue || t.Request.InsertDate <= toDate)
                                    && (!RequestID.HasValue || t.RequestID == RequestID)
                                    && (!CenterId.HasValue || t.Request.CenterID == CenterId)
                                    && (IdentificationId == null || t.Request.Customer.NationalCodeOrRecordNo == IdentificationId)
                                    && (!RequestID.HasValue || RequestID == t.RequestID)
                                    && (!t.Request.IsCancelation && !t.Request.IsWaitingList)
                                    && (!TelephoneNo.HasValue || t.Request.TelephoneNo == TelephoneNo)
                                    )
                                    ).Select(t => new WiringListInfo
                                    {
                                        WiringNo = t.ID.ToString(),
                                        WiringDate = t.WiringDate.ToPersian(Date.DateStringType.Short),
                                        WiringHour = t.WiringHour,
                                        ID = t.RequestID.ToString(),
                                        MDFWiringDate = t.MDFWiringDate.ToPersian(Date.DateStringType.Short),
                                        MDFWiringHour = t.MDFWiringHour,
                                        TelephoneNo = t.Request.TelephoneNo
                                    }
                                    ).ToList();
            }

        }
        public static List<ExchangeInfoDetails> GetExchangeBackDetails(DateTime? fromDate, DateTime? toDate,
                                                                     string IdentificationId,
                                                                    long? RequestID, int? CenterId, long? TelephoneNo)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Wirings
                    .Where(t => ((!fromDate.HasValue || t.Request.InsertDate >= fromDate)
                                    && (!toDate.HasValue || t.Request.InsertDate <= toDate)
                                    && (!RequestID.HasValue || t.RequestID == RequestID)
                                    && (!CenterId.HasValue || t.Request.CenterID == CenterId)
                                    && (IdentificationId == null || t.Request.Customer.NationalCodeOrRecordNo == IdentificationId)
                                    && (!RequestID.HasValue || RequestID == t.RequestID)
                                    && (!t.Request.IsCancelation && !t.Request.IsWaitingList)
                                    && (!TelephoneNo.HasValue || t.Request.TelephoneNo == TelephoneNo)
                                    && (t.Request.RequestTypeID == (int)DB.RequestType.ExchangePost
                                        || t.Request.RequestTypeID == (int)DB.RequestType.ExchangeCenralCableMDF
                                        || t.Request.RequestTypeID == (int)DB.RequestType.ExchangeCabinetInput)
                                    )

                                    ).Select(t => new ExchangeInfoDetails
                                    {
                                        RequestID = t.IssueWiring.RequestID.ToString(),
                                        OldConnectionID = t.OldConnectionID.ToString(),//Bucht.PostContact.ConnectionNo.ToString(),
                                        NewConnectionID = t.ConnectionID.ToString(),
                                        OldBucht = t.OldBuchtID.ToString(),
                                        NewBucht = t.BuchtID.ToString(),
                                        OldBuchtType = t.OldBuchtType.ToString(),
                                        NewBuchtType = t.BuchtType.ToString(),
                                        PostID = t.Bucht.PostContact.PostID.ToString(),
                                        WiringNo = t.ID.ToString()
                                    }
                                    ).ToList();
            }

        }
        public static List<ExchangeRaw> GetExchangeInfo(string TelephoneNo, DateTime? FromDate, DateTime? ToDate, int? CenterId, int? WiringTypeId, long? RequestNo, string NationalID)
        {
            using (MainDataContext context = new MainDataContext())
            {

                string query =
                        @"select IssueWiring.WiringNo,IssueWiring.WiringIssueDate ,IssueWiring.IsPrinted,IssueWiring.WiringTypeID,IssueWiring.InsertDate,IssueWiring.PrintCount,IssueWiring.LastPrintDate
                        ,Request.InsertDate,request.ID,Request.TelephoneNo
                        ,region.Title as Region,center.CenterName As Center
                        ,Customer.FirstNameOrTitle + ' ' +  Customer.LastName as CustomerName
                        ,ExchangePost.OldCabinetID ,ExchangePost.NewCabinetID,ExchangePost.OldPostID,ExchangePost.NewPostID,ExchangePost.AccomplishmentDate
                        from ExchangePost 
                        join request on request.ID = ExchangePost.RequestID
                        join IssueWiring on IssueWiring.RequestID = ExchangePost.RequestID
                        
                        join Customer on request.CustomerID = Customer.ID
                        join Center on Center.ID = Request.CenterID
                        join Region on region.ID = Center.RegionID  
                        where IsWaitingList = 0 AND IsCancelation = 0";

                if (TelephoneNo != null)
                    query += " and Request.TelephoneNo = '" + TelephoneNo + "'";
                if (FromDate.HasValue)
                    query += " and Request.InsertDate >= CONVERT(datetime, '" + FromDate.Value.ToShortDateString() + "', 101)";
                if (ToDate.HasValue)
                    query += " and Request.InsertDate <= CONVERT(datetime, '" + ToDate.Value.ToShortDateString() + "', 101)";
                if (CenterId.HasValue)
                    query += " and Request.CenterID = " + CenterId.ToString() + "";
                //if (WiringTypeId.HasValue)
                //    query += " and IssueWiring.WiringTypeID = " + WiringTypeId.ToString() + "";
                if (CenterId.HasValue)
                    query += " and Center.ID = " + CenterId.ToString() + "";
                if (RequestNo.HasValue)
                    query += " and IssueWiring.RequestID  = " + RequestNo.ToString() + "";
                if (NationalID != null)
                    query += " And Customer.NationalCodeOrRecordNo = '" + NationalID + "'";

                query += " order by ExchangePost.RequestID";
                return context.ExecuteQuery<ExchangeRaw>(string.Format(query)).ToList();

            }
        }

        public static List<ExchangeMDFRaw> GetExchangeMDFInfo(string TelephoneNo, DateTime? FromDate, DateTime? ToDate, int? CenterId, int? WiringTypeId, long? RequestNo, string NationalID)
        {
            using (MainDataContext context = new MainDataContext())
            {

                string query =
                        @"SELECT       CO.InputNumber as InputNumberF, CI.InputNumber as InputNumberT,CT.CabinetNumber as cabinetNumberT,CT.CabinetNumber as CabinetNumberF
                        , E.FirstOldBuchtID , E.LastNewBuchtID
                        ,I.WiringNo,I.WiringIssueDate ,I.IsPrinted,I.WiringTypeID,I.InsertDate,I.PrintCount,I.LastPrintDate
                        ,R.InsertDate,R.ID,R.TelephoneNo
                        ,region.Title as Region,center.CenterName As Center
                        ,Customer.FirstNameOrTitle + ' ' +  Customer.LastName as CustomerName
                        FROM            ExchangeCenralCableMDF  E
					    INNER JOIN Request R ON E.RequestID = R.ID
                        INNER JOIN Telephone T on R.TelephoneNo = T.TelephoneNo 
					    INNER JOIN IssueWiring  I ON R.ID = I.RequestID 
					    INNER JOIN Cabinet C ON E.CabinetID = C.ID 
					    INNER JOIN CabinetInput CI ON E.FromCabinetInputID = CI.ID
					    INNER JOIN CabinetInput CO ON E.ToCabinetInputID = CO.ID
					    inner join Cabinet CF On CI.CabinetID = CF.ID
					    inner join Cabinet CT On CO.CabinetID = CT.ID
					    Inner join Customer on R.CustomerID = Customer.ID
                        Inner join Center on Center.ID = R.CenterID
                        Inner join Region on region.ID = Center.RegionID  
                        where IsWaitingList = 0 AND IsCancelation = 0";

                if (TelephoneNo != null)
                    query += " and R.TelephoneNo = '" + TelephoneNo + "'";
                if (FromDate.HasValue)
                    query += " and R.InsertDate >= CONVERT(datetime, '" + FromDate.Value.ToShortDateString() + "', 101)";
                if (ToDate.HasValue)
                    query += " and R.InsertDate <= CONVERT(datetime, '" + ToDate.Value.ToShortDateString() + "', 101)";
                if (CenterId.HasValue)
                    query += " and R.CenterID = " + CenterId.ToString() + "";
                //if (WiringTypeId.HasValue)
                //    query += " and IssueWiring.WiringTypeID = " + WiringTypeId.ToString() + "";
                if (CenterId.HasValue)
                    query += " and Center.ID = " + CenterId.ToString() + "";
                if (RequestNo.HasValue)
                    query += " and I.RequestID  = " + RequestNo.ToString() + "";
                if (NationalID != null)
                    query += " And Customer.NationalCodeOrRecordNo = '" + NationalID + "'";

                query += " order by R.ID";
                return context.ExecuteQuery<ExchangeMDFRaw>(string.Format(query)).ToList();

            }
        }

        public static List<ExchangeCabinetRaw> GetExchangeCabinetInfo(string TelephoneNo, DateTime? FromDate, DateTime? ToDate, int? CenterId, int? WiringTypeId, long? RequestNo, string NationalID)
        {
            using (MainDataContext context = new MainDataContext())
            {

                string query =
                        @"SELECT  CFO.InputNumber as FromOldInputNumber, CFN.InputNumber as FromNewInputNumber,CTO.InputNumber as ToOldInputNumber,CTN.InputNumber as ToNewInputNumber
		                    ,CAO.CabinetNumber as OldCabinetNumber,CAN.CabinetNumber as NewCabinetNumber
		                    ,e.OldFirstBuchtID,e.NewFirstBuchtID,e.OldLastBuchtID,e.NewLastBuchtID
                            , E.NewFirstBuchtID , E.NewLastBuchtID
                            ,I.WiringNo,I.IsPrinted,I.WiringTypeID,I.InsertDate,I.PrintCount,I.LastPrintDate
                            ,R.InsertDate,R.ID,R.TelephoneNo
                            ,region.Title as Region,center.CenterName As Center
                            ,Customer.FirstNameOrTitle + ' ' +  Customer.LastName as CustomerName		
                            FROM       ExchangeCenralCableCabinet  E
		                    INNER JOIN Request R ON E.RequestID = R.ID 
		                    INNER JOIN IssueWiring  I ON R.ID = I.RequestID 
		                    INNER JOIN CabinetInput CFO ON E.FromOldCabinetInputID = CFO.ID
		                    INNER JOIN CabinetInput CTO ON E.ToOldCabinetInputID = CTO.ID
		                    INNER JOIN CabinetInput CFN ON E.FromNewCabinetInputID = CFN.ID
		                    INNER JOIN CabinetInput CTN ON E.ToNewCabinetInputID = CTN.ID
		                    inner join Cabinet CAO On E.OldCabinetID = CAO.ID
		                    inner join Cabinet CAN On E.NewCabinetID = CAN.ID
		                    Inner join Customer on R.CustomerID = Customer.ID
                            Inner join Center on Center.ID = R.CenterID
                            Inner join Region on region.ID = Center.RegionID  
                            where IsWaitingList = 0 AND IsCancelation = 0";

                if (TelephoneNo != null)
                    query += " and R.TelephoneNo = '" + TelephoneNo + "'";
                if (FromDate.HasValue)
                    query += " and R.InsertDate >= CONVERT(datetime, '" + FromDate.Value.ToShortDateString() + "', 101)";
                if (ToDate.HasValue)
                    query += " and R.InsertDate <= CONVERT(datetime, '" + ToDate.Value.ToShortDateString() + "', 101)";
                if (CenterId.HasValue)
                    query += " and R.CenterID = " + CenterId.ToString() + "";
                //if (WiringTypeId.HasValue)
                //    query += " and IssueWiring.WiringTypeID = " + WiringTypeId.ToString() + "";
                if (CenterId.HasValue)
                    query += " and Center.ID = " + CenterId.ToString() + "";
                if (RequestNo.HasValue)
                    query += " and I.RequestID  = " + RequestNo.ToString() + "";
                if (NationalID != null)
                    query += " And Customer.NationalCodeOrRecordNo = '" + NationalID + "'";

                query += " order by R.ID";
                return context.ExecuteQuery<ExchangeCabinetRaw>(string.Format(query)).ToList();

            }
        }


        public static List<DischargeRaw> GetDischargeInfo(string TelephoneNo, DateTime? FromDate, DateTime? ToDate, int? CenterId, int? WiringTypeId, long? RequestNo, string NationalID)
        {
            using (MainDataContext context = new MainDataContext())
            {

                string query =
                        @"select IssueWiring.WiringNo,IssueWiring.WiringIssueDate ,IssueWiring.IsPrinted,IssueWiring.WiringTypeID,IssueWiring.InsertDate,IssueWiring.PrintCount,IssueWiring.LastPrintDate
                            ,region.Title as Region,center.CenterName As Center
                            ,Customer.FirstNameOrTitle + ' ' +  Customer.LastName as CustomerName
                            ,TakePossession.TakePossessionReason,SwitchPort.MDFHorizentalID
                            ,Wiring.MDFWiringDate,Wiring.MDFWiringHour,Wiring.WiringDate,Wiring.WiringHour,Wiring.BuchtID
                            ,request.ID,Request.TelephoneNo
							,Cabinet.CabinetNumber,CabinetInput.InputNumber
							,Post.Number
                            from TakePossession	
                            Inner join request on request.ID = TakePossession.ID
                            Inner join IssueWiring on IssueWiring.RequestID = Request.ID
                            Inner join Wiring on wiring.RequestID = IssueWiring.RequestID
                            Inner join SwitchPort on TakePossession.SwitchPortID = SwitchPort.ID
							Inner JOIN bucht on Bucht.id = Wiring.BuchtID 
							Inner Join CabinetInput on CabinetInput.ID = Bucht.CabinetInputID
							Inner join Cabinet on cabinet.ID = cabinetinput.CabinetID
							INNER JOIN PostContact on PostContact.ID = Wiring.ConnectionID 
							INNER JOIN Post on post.ID = PostContact.PostID
                            inner join (select CounterNo,TelephoneNo
                                    from  counter  join(select TelNo,DateTimeRead 
						                                    from(	select TelephoneNo As TelNo,Max(CounterReadDate) as DateTimeRead
								                                    from Counter
								                                    group by TelephoneNo)T
							                            )CounterTemp  
								                            on  CounterTemp.TelNo = Counter.TelephoneNo
								                            where CounterTemp.DateTimeRead = Counter.CounterReadDate) Counter
                                        on Request.TelephoneNo = Counter.TelephoneNo 
                            Inner join Customer on request.CustomerID = Customer.ID
                            Inner join Center on Center.ID = Request.CenterID
                            Inner join Region on region.ID = Center.RegionID  
                            where IsWaitingList = 0 AND IsCancelation = 0";

                if (TelephoneNo != null)
                    query += " and Request.TelephoneNo = '" + TelephoneNo + "'";

                if (FromDate.HasValue)
                    query += " and Request.InsertDate >= CONVERT(datetime, '" + FromDate.Value.ToShortDateString() + "', 101)";
                if (ToDate.HasValue)
                    query += " and Request.InsertDate <= CONVERT(datetime, '" + ToDate.Value.ToShortDateString() + "', 101)";
                if (CenterId.HasValue)
                    query += " and Request.CenterID = " + CenterId.ToString() + "";

                if (CenterId.HasValue)
                    query += " and Center.ID = " + CenterId.ToString() + "";
                if (RequestNo.HasValue)
                    query += " and Request.ID  = " + RequestNo.ToString() + "";
                if (NationalID != null)
                    query += " And Customer.NationalCodeOrRecordNo = '" + NationalID + "'";

                query += " order by Request.ID";
                return context.ExecuteQuery<DischargeRaw>(string.Format(query)).ToList();
            }
        }

        public static List<ChangeLocationInfo> GetChangeLocationInfo(string TelephoneNo, DateTime? fromDate, DateTime? toDate, int? CenterId, int? WiringTypeId, long? RequestNo, string NationalID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Wirings
                    .Where(t => ((!fromDate.HasValue || t.Request.InsertDate >= fromDate)
                                    && (!toDate.HasValue || t.Request.InsertDate <= toDate)
                                    && (!RequestNo.HasValue || t.RequestID == RequestNo)
                                    && (t.Request.ID == t.Request.ChangeLocation.ID)
                                    && (!CenterId.HasValue || t.Request.CenterID == CenterId)
                                    && (NationalID == null || t.Request.Customer.NationalCodeOrRecordNo == NationalID)
                                    && (!t.Request.IsCancelation && !t.Request.IsWaitingList)
                                    && (TelephoneNo == null || t.Request.TelephoneNo.ToString() == TelephoneNo)
                                    )
                                    ).Select(t => new ChangeLocationInfo
                                    {
                                        ID = t.RequestID.ToString(),
                                        MDFWiringDate = t.MDFWiringDate.ToString(),
                                        MDFWiringHour = t.MDFWiringHour,
                                        NewBuchtID = t.BuchtID.ToString(),
                                        OldBuchtID = t.OldBuchtID.ToString(),
                                        NewBuchtType = t.BuchtType.ToString(),
                                        OldBuchtType = t.OldBuchtType.ToString(),
                                        NewTelephoneNo = t.NewTelephoneNo.ToString(),
                                        OldTelephoneNo = t.OldTelephoneNo.ToString(),
                                        WiringDate = t.WiringDate.ToString(),
                                        WiringHour = t.WiringHour,
                                        OldCustomerAddress = t.Request.ChangeLocation.OldInstallAddressID.ToString(),
                                        NewCustomerAddress = t.Request.ChangeLocation.NewInstallAddressID.ToString(),
                                        WiringIssueDate = t.WiringInsertDate.ToString(),
                                        WiringNo = t.ID.ToString(),
                                        InsertDate = t.Request.InsertDate.ToString(),
                                        PrintCount = t.IssueWiring.PrintCount.ToString(),
                                        IsPrinted = t.IssueWiring.IsPrinted.ToString(),
                                        LastPrintDate = t.IssueWiring.LastPrintDate.ToString(),
                                        Center = t.Request.Center.CenterName,
                                        Region = t.Request.Center.Region.Title,
                                        CustomerName = t.Request.Customer.FirstNameOrTitle + " " + t.Request.Customer.LastName,
                                        CounterNo = t.Request.ChangeLocation.Counter.CounterNo
                                    }
                                    ).ToList();
            }
        }

        public static List<ChangeNoInfo> GetChangeNoWiringInfo(string TelephoneNo, DateTime? fromDate, DateTime? toDate, int? CenterId, int? WiringTypeId, long? RequestNo, string NationalID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Wirings
                           .Where(t => ((!fromDate.HasValue || t.Request.InsertDate >= fromDate)
                                    && (!toDate.HasValue || t.Request.InsertDate <= toDate)
                                    && (!RequestNo.HasValue || t.RequestID == RequestNo)
                                    && (t.Request.ID == t.Request.ChangeNo.ID)
                                    && (!CenterId.HasValue || t.Request.CenterID == CenterId)
                                    && (NationalID == null || t.Request.Customer.NationalCodeOrRecordNo == NationalID)
                                    && (!t.Request.IsCancelation && !t.Request.IsWaitingList)
                                    && (TelephoneNo == null || t.Request.TelephoneNo.ToString() == TelephoneNo)
                                    )
                                    ).Select(t => new ChangeNoInfo
                                    {
                                        ID = t.RequestID.ToString(),
                                        MDFWiringDate = t.MDFWiringDate.ToString(),
                                        MDFWiringHour = t.MDFWiringHour,
                                        NewBuchtID = t.BuchtID.ToString(),
                                        OldBuchtID = t.OldBuchtID.ToString(),
                                        NewBuchtType = t.BuchtType.ToString(),
                                        OldBuchtType = t.OldBuchtType.ToString(),
                                        NewTelephoneNo = t.NewTelephoneNo.ToString(),
                                        OldTelephoneNo = t.OldTelephoneNo.ToString(),
                                        WiringIssueDate = t.WiringInsertDate.ToString(),
                                        WiringNo = t.ID.ToString(),
                                        InsertDate = t.Request.InsertDate.ToString(),
                                        PrintCount = t.IssueWiring.PrintCount.ToString(),
                                        IsPrinted = t.IssueWiring.IsPrinted.ToString(),
                                        LastPrintDate = t.IssueWiring.LastPrintDate.ToString(),
                                        Center = t.Request.Center.CenterName,
                                        Region = t.Request.Center.Region.Title,
                                        CustomerName = t.Request.Customer.FirstNameOrTitle + " " + t.Request.Customer.LastName,
                                        OldTelCounterNo = t.Request.ChangeNo.OldTelephoneNo.ToString(),
                                        NewTelCounterNo = t.Request.ChangeNo.NewTelephoneNo.ToString(),
                                        ChangeReasonID = t.Request.ChangeNo.CauseOfChangeNoID.ToString(),
                                        OldSwitchPortID = t.Request.ChangeNo.OldSwitchPortID.ToString(),
                                        NewSwitchPortID = t.Request.ChangeNo.NewSwitchPortID.ToString()
                                    }
                                    ).ToList();

            }
        }

        public static List<RefundDespositInfo> GetRefundDespositInfo(string TelephoneNo, DateTime? fromDate, DateTime? toDate, int? CenterId, int? WiringTypeId, long? RequestNo, string NationalID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Wirings
                        .Where(t => ((!fromDate.HasValue || t.Request.InsertDate >= fromDate)
                                    && (!toDate.HasValue || t.Request.InsertDate <= toDate)
                                    && (!RequestNo.HasValue || t.RequestID == RequestNo)
                                    && (t.Request.ID == t.Request.RefundDeposit.ID)
                                    && (!CenterId.HasValue || t.Request.CenterID == CenterId)
                                    && (NationalID == null || t.Request.Customer.NationalCodeOrRecordNo == NationalID)
                                    && (!t.Request.IsCancelation && !t.Request.IsWaitingList)
                                    && (TelephoneNo == null || t.Request.TelephoneNo.ToString() == TelephoneNo)
                                    )
                        ).Select(t => new RefundDespositInfo
                        {
                            ID = t.RequestID.ToString(),
                            MDFWiringDate = t.MDFWiringDate.ToString(),
                            MDFWiringHour = t.MDFWiringHour,
                            WiringDate = t.WiringDate.ToString(),
                            WiringHour = t.MDFWiringHour,

                            TelephoneNo = t.Request.TelephoneNo.ToString(),

                            WiringIssueDate = t.WiringInsertDate.ToString(),
                            WiringNo = t.ID.ToString(),
                            InsertDate = t.Request.InsertDate.ToString(),
                            PrintCount = t.IssueWiring.PrintCount.ToString(),
                            IsPrinted = t.IssueWiring.IsPrinted.ToString(),
                            LastPrintDate = t.IssueWiring.LastPrintDate.ToString(),
                            Center = t.Request.Center.CenterName,
                            Region = t.Request.Center.Region.Title,
                            CustomerName = t.Request.Customer.FirstNameOrTitle + " " + t.Request.Customer.LastName,
                            //TelCounterNo = t.Request.RefundDeposit.OldTelephoneNo.ToString(),


                            PortNo = t.Request.RefundDeposit.SwitchPort.PortNo,
                            SwitchPortID = t.Request.RefundDeposit.SwitchPortID.ToString(),
                            Cabinet = t.Bucht.CabinetInput.Cabinet.CabinetNumber.ToString(),
                            CabinetInput = t.Bucht.CabinetInput.InputNumber.ToString(),
                            Post = t.Bucht.PostContact.Post.Number.ToString(),
                            PostContact = t.Bucht.PostContact.ConnectionNo.ToString(),
                            BuchtID = t.BuchtID.ToString(),
                            ConfirmRecord = t.Request.RefundDeposit.thingesOfCustomer.ToString()



                        }
                    )
                    .OrderBy(t => t.InsertDate)
                    .ToList();
            }
        }

        public static List<ZeroStatusInfo> GetZeroStatusInfo(List<int> cites, List<int> centers, DateTime? fromDate, DateTime? toDate, long? requestNo, List<int> blockZeroStatusIds, List<int> zeroStatusIds, long telephoneNo, string nationalCodeOrRecordNo)
        {
            using (MainDataContext context = new MainDataContext())
            {
                List<ZeroStatusInfo> result = new List<ZeroStatusInfo>();
                result = context.ZeroStatus
                                .Where(t =>
                                            (
                                                 (cites.Count() == 0 || cites.Contains(t.Request.Center.Region.CityID)) &&
                                                 (centers.Count == 0 ? DB.CurrentUser.CenterIDs.Contains(t.Request.CenterID) : centers.Contains(t.Request.CenterID)) &&
                                                 (!fromDate.HasValue || t.InsertDate >= fromDate) &&
                                                 (!toDate.HasValue || t.InsertDate <= toDate) &&
                                                 (requestNo == -1 || t.ID == requestNo) &&
                                                 (!t.Request.IsCancelation && !t.Request.IsWaitingList && t.InsertDate != null) &&
                                                 (telephoneNo == -1 || (t.Request.TelephoneNo.HasValue && t.Request.TelephoneNo.Value == telephoneNo)) &&
                                                 (string.IsNullOrEmpty(nationalCodeOrRecordNo) || nationalCodeOrRecordNo == t.Request.Customer.NationalCodeOrRecordNo)
                                             )
                                        )
                                .OrderBy(t => t.InsertDate)
                                .Select(t => new ZeroStatusInfo
                                {
                                    intRequestNo = t.Request.ID,
                                    RequestNo = t.Request.ID.ToString(),
                                    TelephoneNo = t.Request.TelephoneNo.ToString(),
                                    ClassTelephone = t.ClassTelephone,
                                    CenterName = t.Request.Center.CenterName,
                                    Region = t.Request.Center.Region.City.Name,
                                    RequestDate = t.InsertDate.ToPersian(Date.DateStringType.Short),
                                    RequestLetterDate = t.Request.RequestLetterDate.ToPersian(Date.DateStringType.Short),
                                    RequestLetterNo = t.Request.RequestLetterNo,
                                    Customer = t.Request.Customer.FirstNameOrTitle ?? "" + " " + t.Request.Customer.LastName ?? "",
                                    CustomerNationalCode = t.Request.Customer.NationalCodeOrRecordNo,
                                    InsertDate = t.InsertDate.ToPersian(Date.DateStringType.Short),
                                    InstallHour = t.InstallHour.Substring(0, 6).Trim()
                                }).ToList();

                result.ForEach(r =>
                {
                    if (string.IsNullOrEmpty(r.Customer))
                    {
                        r.Customer = "-----";
                    }
                    if (string.IsNullOrEmpty(r.CustomerNationalCode))
                    {
                        r.CustomerNationalCode = "-----";
                    }
                    if (string.IsNullOrEmpty(r.RequestLetterNo))
                    {
                        r.RequestLetterNo = "-----";
                    }
                    r.ClassTelephoneName = Helpers.GetEnumDescription(Convert.ToInt32(r.ClassTelephone), typeof(DB.ClassTelephone));
                }
                              );
                return result;
            }
        }

        public static List<TitleIn118Info> GetChangeTitleIn118Info(List<int> cites, List<int> centers, DateTime? fromDate, DateTime? toDate, long? RequestNo, List<int> ChangeTitleStatusIds, string TelephoneNo, string NationalId)
        {



            if (toDate.HasValue)
                toDate = toDate.Value.AddDays(1);
            using (MainDataContext context = new MainDataContext())
            {
                return context.TitleIn118s
                    .Where(
                            t => (
                                       (cites.Count() == 0 || cites.Contains(t.Request.Center.Region.CityID))
                                    && (centers.Count() == 0 || centers.Contains(t.Request.CenterID))
                                    && (!fromDate.HasValue || t.Date >= fromDate)
                                    && (!toDate.HasValue || t.Date <= toDate)
                                    && (!RequestNo.HasValue || t.ID == RequestNo)
                                    && (!t.Request.IsCancelation && !t.Request.IsWaitingList && t.Date != null)
                                    && (ChangeTitleStatusIds.Count == 0 || ChangeTitleStatusIds.Contains((byte)t.Status))
                                    && (TelephoneNo == null || t.Request.TelephoneNo.ToString() == TelephoneNo)
                                    && (NationalId == null || NationalId == t.Request.Customer.NationalCodeOrRecordNo))
                    )
                    .Select(t => new TitleIn118Info
                    {
                        intRequestNo = t.Request.ID,
                        RequestNo = t.Request.ID.ToString(),
                        TelephoneNo = t.Request.TelephoneNo.ToString(),
                        CenterName = t.Request.Center.CenterName,
                        Region = t.Request.Center.Region.Title,
                        RequestDate = t.Date.ToPersian(Date.DateStringType.Short),
                        RequestLetterDate = t.Request.RequestLetterDate.ToString(),
                        RequestLetterNo = t.Request.RequestLetterNo.ToString(),
                        Customer = (t.Request.Customer.FirstNameOrTitle ?? "") + " " + (t.Request.Customer.LastName ?? ""),
                        CustomerNationalCode = t.Request.Customer.NationalCodeOrRecordNo,
                        ChangeTitleStatus = t.Status.ToString(),
                        LastNameAt118 = t.LastNameAt118,
                        NameTitleAt118 = t.NameTitleAt118,
                        TitleAt118 = t.TitleAt118,
                    }
                    )
                    .OrderBy(t => t.intRequestNo)
                    .ToList();


            }
        }
        public static List<SpaceAndPowerReportInfo> GetSpacePowerInfo(DateTime? fromDate, DateTime? toDate,
                                                                        long? RequestNo, int? CenterId,
                                                                        string SpaceSize, List<int> SpaceTypeIds,
                                                                        List<int> EquipmentTypeIds, List<int> PowerTypeIds)
        {



            if (toDate.HasValue)
                toDate = toDate.Value.AddDays(1);

            using (MainDataContext context = new MainDataContext())
            {
                return context.SpaceAndPowers
                    .Where(
                            t => (
                                     (!fromDate.HasValue || t.Request.EndDate >= fromDate)
                                    && (!toDate.HasValue || t.Request.EndDate <= toDate)
                                    && (!RequestNo.HasValue || t.ID == RequestNo)
                                    && (!CenterId.HasValue || t.Request.CenterID == CenterId)
                                    && (!t.Request.IsCancelation && !t.Request.IsWaitingList)
                                    && (SpaceTypeIds.Count == 0 || SpaceTypeIds.Contains((int)t.SpaceType))
                                    && (EquipmentTypeIds.Count == 0 || EquipmentTypeIds.Contains((int)t.EquipmentType))
                                    && (PowerTypeIds.Count == 0 || PowerTypeIds.Contains((int)t.PowerType))
                                    && (SpaceSize == null || SpaceSize == t.SpaceSize))

                    )
                    .Select(t => new SpaceAndPowerReportInfo
                    {

                        intRequestNo = t.Request.ID,
                        RequestNo = t.Request.ID.ToString(),
                        Region = t.Request.Center.Region.Title,
                        Center = t.Request.Center.CenterName,
                        RequestDate = t.Request.InsertDate.ToString(),
                        RequestLetterDate = t.Request.RequestLetterDate.ToString(),
                        RequestLetterNo = t.Request.RequestLetterNo.ToString(),
                        CurrentStep = RequestDB.GetRequestInfoByID(t.ID).CurrentStep,
                        //~*~*~*~*~*~*~*~*~                        
                        SpaceAndPowerCustomer = string.Format("{1} {0}", t.Customer.FirstNameOrTitle, t.Customer.LastName),
                        Duration = t.Duration,
                        EquipmentType = t.EquipmentType.ToString(),
                        EquipmentWeight = t.EquipmentWeight,
                        HeatWasteRate = t.HeatWasteRate,
                        PowerRate = t.PowerRate,
                        PowerType = t.PowerType.ToString(),
                        RequestDescription = t.RequestDescription,
                        SpaceSize = t.SpaceSize,
                        SpaceType = t.SpaceType.ToString(),
                        SpaceUsage = t.SpaceUsage
                    }
                    )
                    .OrderBy(t => t.intRequestNo)
                    .ToList();


            }
        }

        public static IEnumerable GetSpecialServiceInfo(List<int> cites, List<int> centers, DateTime? fromDate, DateTime? toDate, long RequestNo, long TelephoneNo, List<int> SpecialServiceTypeIds, List<int> SpecialServiceStatusTypeIds, string nationalCodeOrRecordNo)
        {
            // TODO:Region Edited

            if (toDate.HasValue)
                toDate = toDate.Value.AddDays(1);

            using (MainDataContext context = new MainDataContext())
            {
                List<SpecialServiceInfo> result = context.SpecialServices
                                                         .Where(t =>
                                                                         (
                                                                             (t.InsertDate.HasValue) &&
                                                                             (cites.Count() == 0 || cites.Contains(t.Request.Center.Region.CityID)) &&
                                                                             (centers.Count() == 0 || centers.Contains(t.Request.CenterID)) &&
                                                                             (!fromDate.HasValue || t.InsertDate >= fromDate) &&
                                                                             (!toDate.HasValue || t.InsertDate <= toDate) &&
                                                                             (RequestNo == -1 || t.ID == RequestNo) &&
                                                                             (TelephoneNo == -1 || (t.Request.TelephoneNo.HasValue && t.Request.TelephoneNo.Value == TelephoneNo)) &&
                                                                             (string.IsNullOrEmpty(nationalCodeOrRecordNo) || t.Request.Customer.NationalCodeOrRecordNo == nationalCodeOrRecordNo) &&
                                                                             (!t.Request.IsCancelation && !t.Request.IsWaitingList)
                                                                             //     && (SpecialServiceTypeIds.Count == 0 || SpecialServiceTypeIds.Contains((int)t.SpecialServiceTypeID))
                                                                             //   && (SpecialServiceStatusTypeIds.Count == 0 || SpecialServiceStatusTypeIds.Contains((int)t.Status))
                                                                         )
                                                               )
                                                            .OrderBy(t => t.InsertDate).Select(t => new SpecialServiceInfo
                                                                        {

                                                                            intRequestNo = t.Request.ID,
                                                                            RequestNo = t.Request.ID.ToString(),
                                                                            Region = t.Request.Center.Region.City.Name,
                                                                            Center = t.Request.Center.CenterName,
                                                                            CustomerName = t.Request.Customer.FirstNameOrTitle + " " + t.Request.Customer.LastName,
                                                                            RequestLetterDate = t.Request.RequestLetterDate.ToString(),
                                                                            RequestLetterNo = t.Request.RequestLetterNo,
                                                                            CurrentStep = RequestDB.GetRequestInfoByID(t.Request.ID).CurrentStep,
                                                                            SpecialServiceTypeIdsXml = t.InstallSpecialService,
                                                                            TelephoneNo = t.Request.TelephoneNo.ToString(),
                                                                            //RequestDate = t.InsertDate.ToString(),
                                                                            // InstallDate = t.InstallDate.ToString(),
                                                                            InsertDate = t.InsertDate.ToString(),
                                                                            UnInstalDate = t.UninstallDate.ToString(),
                                                                            LetterNo = t.LetterNo,
                                                                            SpecialServiceRequestReference = t.SpecialServiceRequestReference
                                                                        }
                                                               )

                                                         .ToList();

                //علت استفاده از شیوه زیر این است که برای پردازش کردن بر روی عناصر یک اکس ام ال معادل در  زبان اس کیو ال وجود ندارد
                //بنابراین باید دیتای اکس ام ال را عیناً از دیتابیس میاوردم و سپس بر روی آن مانور میدادم
                result.ForEach(si =>
                                    {
                                        foreach (var item in si.SpecialServiceTypeIdsXml.Descendants("int"))
                                        {
                                            si.SpecialServiceTypesId.Add(int.Parse(item.Value));
                                        }
                                    }
                               );

                //برای بدست آوردن عناوین سرویس های ویژه لیست زیر را تعریف کردم
                var specialServiceTypes = context.SpecialServiceTypes.ToList();

                //بدست آوردن عناوین سرویس های ویژه
                result.ForEach(si =>
                                    {
                                        //عناوین سرویس های ویژه را با کاما از هم جدا کردم
                                        si.SpecialServiceTitle = string.Join(" , ",
                                                                             specialServiceTypes.Where(sp =>
                                                                                                            (si.SpecialServiceTypesId.Count == 0 || si.SpecialServiceTypesId.Contains(sp.ID))
                                                                                                       )
                                                                                                .Select(sp => sp.Title)
                                                                                                .ToArray()
                                                                             );
                                    }
                              );

                //علت استفاده از نوع بی نام زیر آن است که برای ایجاد گزارش در استیمول باید لیستی را به عنوان دیتا بفرستیم که اعضای کلاس آن لیست ساده باشند ، یعنی کلاس نباشند
                return result.Select(r => new
                                    {
                                        RequestNo = r.RequestNo,
                                        Region = r.Region,
                                        Center = r.Center,
                                        CustomerName = !string.IsNullOrEmpty(r.CustomerName) ? r.CustomerName : "-----",
                                        //RequestDate = !string.IsNullOrEmpty(r.RequestDate) ? DateTime.Parse(r.RequestDate).ToPersian(Date.DateStringType.Short) : "-----",
                                        RequestLetterDate = !string.IsNullOrEmpty(r.RequestLetterDate) ? DateTime.Parse(r.RequestLetterDate).ToPersian(Date.DateStringType.Short) : "-----",
                                        RequestLetterNo = !string.IsNullOrEmpty(r.RequestLetterNo) ? r.RequestLetterNo : "-----",
                                        CurrentStep = !string.IsNullOrEmpty(r.CurrentStep) ? r.CurrentStep : "-----",
                                        //InstallDate = !string.IsNullOrEmpty(r.InstallDate) ? DateTime.Parse(r.InstallDate).ToPersian(Date.DateStringType.Short) : "-----",
                                        InsertDate = !string.IsNullOrEmpty(r.InsertDate) ? DateTime.Parse(r.InsertDate).ToPersian(Date.DateStringType.Short) : "-----",
                                        SpecialServiceTitle = r.SpecialServiceTitle,
                                        TelephoneNo = r.TelephoneNo,
                                        UnInstalDate = !string.IsNullOrEmpty(r.UnInstalDate) ? DateTime.Parse(r.UnInstalDate).ToPersian(Date.DateStringType.Short) : "-----",
                                        LetterNo = !string.IsNullOrEmpty(r.LetterNo) ? r.LetterNo : "-----",
                                        SpecialServiceRequestReference = !string.IsNullOrEmpty(r.SpecialServiceRequestReference) ? r.SpecialServiceRequestReference : "-----"

                                    }
                                    ).ToList();
            }
        }

        public static List<ChangeLocationProcessInfo> GetChangeLocationProcessInfo(
                                                                List<int> cites,
                                                                List<int> centers,
                                                                DateTime? fromDate,
                                                                DateTime? toDate,
                                                                long? RequestNo,
                                                                string TelephoneNo,
                                                                List<int> ChangeCenterTypeIds,
                                                                List<int> ChangeNumberTypeIds,
                                                                string NationalID,
                                                                bool? changeName)
        {


            if (toDate.HasValue)
                toDate = toDate.Value.AddDays(1);


            using (MainDataContext context = new MainDataContext())
            {



                List<ChangeLocationProcessInfo> result = new List<ChangeLocationProcessInfo>();
                List<ChangeLocation> tempChangeLocation = new List<ChangeLocation>();
                var temp = context.ChangeLocations
                    .Where(
                            t => (
                                       (cites.Count() == 0 || cites.Contains(t.Request.Center.Region.CityID))
                                    && (centers.Count() == 0 || centers.Contains(t.Request.CenterID))
                                    && (!fromDate.HasValue || t.Request.EndDate >= fromDate)
                                    && (!toDate.HasValue || t.Request.EndDate <= toDate)
                                    && (!RequestNo.HasValue || t.Request.ID == RequestNo)
                                    && (TelephoneNo == null || t.Request.TelephoneNo.ToString() == TelephoneNo)
                                    && (NationalID == null || t.Request.Customer.NationalCodeOrRecordNo == NationalID)
                                    && (!t.Request.IsCancelation && !t.Request.IsWaitingList && t.Request.EndDate != null)
                                    && (ChangeCenterTypeIds.Count == 0 || ChangeCenterTypeIds.Contains((int)t.ChangeLocationTypeID))
                                    && (changeName == true ? t.NewCustomerID != null : t.NewCustomerID == null))
                    )
                  .OrderBy(t => t.Request.EndDate)
                  .Select(t => new ChangeLocationProcessInfo
                 {
                     intRequestNo = t.Request.ID,
                     RequestNo = t.Request.ID.ToString(),
                     Region = t.Request.Center.Region.City.Name,
                     Center = t.Request.Center.CenterName,
                     CustomerName = (t.Request.Customer.FirstNameOrTitle ?? "") + " " + (t.Request.Customer.LastName ?? ""),
                     NewCustomer = (t.Customer.FirstNameOrTitle ?? "") + " " + (t.Customer.LastName ?? ""),
                     RequestDate = t.Request.EndDate.ToPersian(Date.DateStringType.Short),
                     RequestLetterDate = t.Request.RequestLetterDate.ToPersian(Date.DateStringType.Short),
                     RequestLetterNo = t.Request.RequestLetterNo.ToString(),
                     BuchtIDOld = "ام دی اف:" + t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Number.ToString() + "ردیف:" + t.Bucht.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString() + "طبقه:" + t.Bucht.VerticalMDFRow.VerticalRowNo.ToString() + "اتصالی:" + t.Bucht.BuchtNo.ToString(),
                     BuchtIDReserve = "ام دی اف:" + t.Request.InvestigatePossibilities.Take(1).SingleOrDefault().Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Number.ToString() + "ردیف:" + t.Request.InvestigatePossibilities.Take(1).SingleOrDefault().Bucht.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString() + "طبقه:" + t.Request.InvestigatePossibilities.Take(1).SingleOrDefault().Bucht.VerticalMDFRow.VerticalRowNo.ToString() + "اتصالی:" + t.Request.InvestigatePossibilities.Take(1).SingleOrDefault().Bucht.BuchtNo.ToString(),
                     NewTelephone = t.NewTelephone.ToString(),
                     OldTelephone = t.OldTelephone.ToString(),
                     NewCustomerAddressID = t.NewInstallAddressID != null ? t.Address1.AddressContent : "",
                     OldCustomerAddressID = t.OldInstallAddressID != null ? t.Address2.AddressContent : "",
                     SourceCenter = t.SourceCenter != null ? t.Center.CenterName : "",
                     TargetCenter = t.TargetCenter != null ? t.Center1.CenterName : "",
                     CurrentStep = t.Request.Status.RequestStep.StepTitle,
                     ChangeLocationType = t.ChangeLocationTypeID.ToString()
                 }

                );


                return temp.ToList();
            }

        }
        public static List<CenterCabinetInfo> GetCenterCabinetInfo(
           List<int> cites,
           List<int> CenterIDs,
           string cabinetNumber,
           bool JustHearerBuchtNo
           )
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.Cabinets
                    .GroupJoin(context.CabinetInputs, c => c.ID, ci => ci.CabinetID, (c, ci) => new { cabinet = c, CabinetInput = ci })
                    .SelectMany(t1 => t1.CabinetInput.DefaultIfEmpty(), (c, t1) => new { CabinetInput = t1, Cabinet = c.cabinet })

                    .GroupJoin(context.Buchts, ci => ci.CabinetInput.ID, b => b.CabinetInputID, (ci, b) => new { bucht = b, cabinetInput = ci.CabinetInput })
                    .SelectMany(t2 => t2.bucht.DefaultIfEmpty(), (b, t2) => new { CabinetInput = b.cabinetInput, Bucht = t2 })

                    .GroupJoin(context.Telephones, b => b.Bucht.SwitchPortID, t => t.SwitchPortID, (b, t) => new { bucht = b.Bucht, telephone = t })
                    .SelectMany(t3 => t3.telephone.DefaultIfEmpty(), (bt, t3) => new { bucht = bt.bucht, Telephone = t3 })

                    .Where(t =>
                            (CenterIDs.Count == 0 || CenterIDs.Contains(t.bucht.CabinetInput.Cabinet.CenterID)) &&
                            (cites.Count == 0 || cites.Contains(t.bucht.CabinetInput.Cabinet.Center.Region.CityID)) &&
                            (cabinetNumber == null || t.bucht.CabinetInput.Cabinet.CabinetNumber.ToString() == cabinetNumber) &&
                            (JustHearerBuchtNo == false || ((t.bucht.PCMPort.PortNumber == 1 && t.bucht.PCMPort.PortType == 8) || t.bucht.PCMPortID == null)) &&
                            (t.bucht.BuchtTypeID != null)
                          )
                          .Select(t => new CenterCabinetInfo
                          {

                              Address = t.Telephone.Address.AddressContent,

                              CabinetNumber = t.bucht.CabinetInput.Cabinet.CabinetNumber,
                              CabinetTypeID = t.bucht.CabinetInput.Cabinet.CabinetType.CabinetTypeName,

                              Center = t.bucht.CabinetInput.Cabinet.Center.CenterName,
                              PostCode = t.bucht.CabinetInput.Cabinet.PostCode,
                              Status = t.bucht.Status.ToString(),

                              ID = t.bucht.CabinetInput.Cabinet.ID,
                              City = t.bucht.CabinetInput.Cabinet.Center.Region.City.Name,
                              CustomerID = t.Telephone.Customer.CustomerID,
                              CustomerName = t.Telephone.Customer.FirstNameOrTitle + " " + t.Telephone.Customer.LastName,


                              BuchtIDConnectedOtherBucht = "ام دی اف:" + t.bucht.Bucht1.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Number.ToString() +
                                                                              "ردیف:" + t.bucht.Bucht1.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString() +
                                                                              "طبقه:" + t.bucht.Bucht1.VerticalMDFRow.VerticalRowNo.ToString() +
                                                                              "اتصالی:" + t.bucht.Bucht1.BuchtNo.ToString(),
                              MDFHorizintalID = t.Telephone.SwitchPort.MDFHorizentalID,
                              PCM = "رک:" + t.bucht.PCMPort.PCM.PCMShelf.PCMRock.Number.ToString() + " ،  " + "شلف : " + t.bucht.PCMPort.PCM.PCMShelf.Number.ToString() + " ،  " + "کارت : " + t.bucht.PCMPort.PCM.Card.ToString() + " ،  " + "پورت : " + t.bucht.PCMPort.PortNumber.ToString(),
                              BuchtType = t.bucht.BuchtTypeID,
                              CabinetInputID = t.bucht.CabinetInput.ID,
                              BuchtStatus = t.bucht.Status,
                              TelephoneNo = t.Telephone.TelephoneNoIndividual.ToString(),
                              Bucht = "ام دی اف:" + t.bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Number.ToString() +
                                                                            "ردیف:" + t.bucht.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString() +
                                                                            "طبقه:" + t.bucht.VerticalMDFRow.VerticalRowNo.ToString() +
                                                                            "اتصالی:" + t.bucht.BuchtNo.ToString(),

                              CabinetInputNumber = t.bucht.CabinetInput.InputNumber,
                              PostContactNumber = t.bucht.PostContact.ConnectionNo,
                              PostNumber = t.bucht.PostContact.Post.Number,
                              BuchtOutput = context.Buchts.Where(t2 => t2.CabinetInputID == t.bucht.CabinetInputID && t2.BuchtTypeID == (int)DB.BuchtType.OutLine).Select(t2 => "ام دی اف:" + t2.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Number.ToString() +
                                                                                                                                 "ردیف:" + t2.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString() +
                                                                                                                                 "طبقه:" + t2.VerticalMDFRow.VerticalRowNo.ToString() +
                                                                                                                                  "اتصالی:" + t2.BuchtNo.ToString()).SingleOrDefault(),

                              BuchtInput = context.Buchts.Where(t3 => t3.ID == t.bucht.ID && t3.BuchtTypeID == (int)DB.BuchtType.InLine).Select(t3 => "ام دی اف:" + t3.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Number.ToString() +
                                                                                                                               "ردیف:" + t3.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString() +
                                                                                                                               "طبقه:" + t3.VerticalMDFRow.VerticalRowNo.ToString() +
                                                                                                                                "اتصالی:" + t3.BuchtNo.ToString()).SingleOrDefault(),


                          })
                    .OrderBy(t => t.CabinetNumber).ThenBy(t => t.CabinetInputNumber).ThenBy(t => t.PostNumber).ThenBy(t => t.PostContactNumber)
                    .ToList();
            }
        }

        //public static List<PostInfo> GetPostInfo(List<int> CenterIDs
        //                           , List<int> CabinetIDs
        //                           , List<int> PostTypeIDs
        //                           , List<int> ABTypeIDs
        //                           , int Distance
        //                           , int IsBorderMeter
        //                           , string PostalCode
        //                           , int OutBorderMeter
        //                           , string Address
        //                           , List<int> StatusPostIDs)
        //{

        //    using (MainDataContext context = new MainDataContext())
        //    {
        //        return context.Posts
        //           .Where(t =>
        //               (CenterIDs.Count == 0 || CenterIDs.Contains(t.Cabinet.CenterID))
        //               && (CabinetIDs.Count == 0 || CabinetIDs.Contains(t.CabinetID))
        //               && (PostTypeIDs.Count == 0 || PostTypeIDs.Contains(t.PostTypeID))
        //               && (ABTypeIDs.Count == 0 || ABTypeIDs.Contains((int)t.AorBType))
        //               && (Distance == 0 || Distance == t.Distance)
        //               && ((IsBorderMeter == 0 && t.IsOutBorder == false) || (IsBorderMeter == 1 && t.IsOutBorder == true && (OutBorderMeter == 0 || OutBorderMeter == (int)t.OutBorderMeter))) //False -- True
        //               && (Address == (string)null || Address == t.Address)
        //               && (PostalCode == (string)null || PostalCode == t.PostalCode)
        //               && (StatusPostIDs.Count == 0 || StatusPostIDs.Contains(t.Status)))
        //               .Select(t => new PostInfo
        //               {
        //                   Center = t.Cabinet.Center.CenterName,
        //                   ABType = t.AorBType.ToString(),
        //                   Address = t.Address,
        //                   PostContactCountFail = 0,
        //                   PostContactCountValid = 0,
        //                   CabinetID = t.CabinetID.ToString(),
        //                   Capacity = t.Capacity.ToString(),
        //                   Distance = t.Distance.ToString(),
        //                   ID = t.ID,
        //                   IsOutBorder = t.IsOutBorder.ToString(),
        //                   Number = t.Number.ToString(),
        //                   OutBorderMeter = ((int)t.OutBorderMeter).ToString(),
        //                   PostalCode = t.PostalCode,
        //                   PostTypeID = t.PostType.PostTypeName,
        //                   Status = t.Status.ToString(),
        //                   PostGroupID = t.PostGroup.GroupNo.ToString(),
        //                   City = t.Cabinet.Center.Region.City.Name

        //               }
        //               )
        //               .ToList();

        //    }
        //}
        public static List<PostInfo> GetPostInfo(List<int> CenterIDs
                                   , List<int> CabinetIDs
                                    , List<int> PostNumberIDs
                                   , List<int> PostTypeIDs
                                   , List<int> ABTypeIDs
                                   , int Distance
                                   , int IsBorderMeter
                                   , string PostalCode
                                   , int OutBorderMeter
                                   , string Address
                                   , List<int> StatusPostIDs
                                   , List<int> PostGroupIDs)
        {

            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;

                IQueryable<PostInfo> postInfo = context.PostContacts
                        .GroupJoin(context.Buchts, pc => pc.ID, b => b.ConnectionID, (pc, b) => new { postcontact = pc, bucht = b })
                        .SelectMany(t2 => t2.bucht.DefaultIfEmpty(), (b, t2) => new { Bucht = t2, PostContact = b.postcontact })

                        .GroupJoin(context.Telephones, sp => sp.Bucht.SwitchPortID, t => t.SwitchPortID, (sp, t) => new { telephone = t, bucht = sp.Bucht })
                        .SelectMany(t2 => t2.telephone.DefaultIfEmpty(), (t, t2) => new { Telephone = t2, Bucht = t.bucht })

                   .Where(t =>
                       (CenterIDs.Count == 0 || CenterIDs.Contains(t.Bucht.CabinetInput.Cabinet.CenterID))
                       && (PostNumberIDs.Count == 0 || PostNumberIDs.Contains(t.Bucht.PostContact.PostID))
                       && (CabinetIDs.Count == 0 || CabinetIDs.Contains(t.Bucht.PostContact.Post.CabinetID))
                       && (PostTypeIDs.Count == 0 || PostTypeIDs.Contains(t.Bucht.PostContact.Post.PostTypeID))
                       && (ABTypeIDs.Count == 0 || ABTypeIDs.Contains((int)t.Bucht.PostContact.Post.AorBType))
                       && (Distance == 0 || Distance == t.Bucht.PostContact.Post.Distance)
                       && ((IsBorderMeter == 0 && t.Bucht.PostContact.Post.IsOutBorder == false) || (IsBorderMeter == 1 && t.Bucht.PostContact.Post.IsOutBorder == true && (OutBorderMeter == 0 || OutBorderMeter == (int)t.Bucht.PostContact.Post.OutBorderMeter))) //False -- True
                       && (Address == (string)null || Address == t.Bucht.PostContact.Post.Address)
                       && (PostalCode == (string)null || PostalCode == t.Bucht.PostContact.Post.PostalCode)
                       && (StatusPostIDs.Count == 0 || StatusPostIDs.Contains(t.Bucht.PostContact.Post.Status))
                       ).Select(t => new PostInfo
                       {
                           Center = t.Bucht.CabinetInput.Cabinet.Center.CenterName,
                           Address = t.Telephone.Address.AddressContent,
                           PostContactCountFail = 0,
                           PostContactCountValid = 0,
                           CabinetID = t.Bucht.CabinetInput.CabinetID.ToString(),
                           TelNo = t.Telephone.TelephoneNo.ToString(),
                           Capacity = t.Bucht.PostContact.Post.Capacity.ToString(),
                           Distance = t.Bucht.PostContact.Post.Distance.ToString(),
                           ID = t.Bucht.PostContact.Post.ID,
                           Number = t.Bucht.PostContact.Post.Number,
                           PostalCode = t.Bucht.PostContact.Post.PostalCode,
                           PostTypeID = t.Bucht.PostContact.Post.PostTypeID,
                           PostTypeName = t.Bucht.PostContact.Post.PostType.PostTypeName,
                           Status = t.Bucht.PostContact.PostContactStatus.Name,
                           PostGroupNo = t.Bucht.PostContact.Post.PostGroup.GroupNo.ToString(),
                           PostGroupID = t.Bucht.PostContact.Post.PostGroup.ID.ToString(),
                           City = t.Bucht.CabinetInput.Cabinet.Center.Region.City.Name,
                           CabinetInput = t.Bucht.CabinetInput.InputNumber,
                           CabinetInputID = t.Bucht.CabinetInputID,
                           PostContact = t.Bucht.PostContact.ConnectionNo,
                           PostContactID = t.Bucht.PostContact.ID,
                           CustomerName = (t.Telephone.Customer.FirstNameOrTitle ?? "") + " " + (t.Telephone.Customer.LastName ?? ""),
                           CabinetNumber = t.Bucht.CabinetInput.Cabinet.CabinetNumber,
                           Post = t.Bucht.PostContact.Post.Number,
                           ABType = t.Bucht.PostContact.Post.AORBPostAndCabinet.Name,
                           PostContactConnectionType = (t.Bucht.PostContact.ConnectionType.HasValue) ? Helpers.GetEnumDescription((int)t.Bucht.PostContact.ConnectionType.Value, typeof(DB.PostContactConnectionType)) : "نامشخص",
                           HasADSL = (context.ADSLPAPPorts.Where(adpp => adpp.TelephoneNo == t.Telephone.TelephoneNo).Any()) ? "دارد" : "ندارد"
                       }
                       ).OrderBy(t => t.CabinetNumber).ThenBy(t => t.Post).ThenBy(t => t.PostContact);
                return postInfo.ToList();
            }
        }
        public static List<PostInfo> GetPostInfoCable(List<int> CenterIDs
                                   , List<int> CabinetIDs
                                    , List<int> PostNumberIDs
                                   , List<int> PostTypeIDs
                                   , List<int> ABTypeIDs
                                   , int Distance
                                   , int IsBorderMeter
                                   , string PostalCode
                                   , int OutBorderMeter
                                   , string Address
                                   , List<int> StatusPostIDs
                                   , List<int> PostGroupIDs)
        {

            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;


                return context.Posts

                   .Where(t =>
                       (CenterIDs.Count == 0 || CenterIDs.Contains(t.Cabinet.CenterID))
                       && (PostNumberIDs.Count == 0 || PostNumberIDs.Contains(t.ID))
                       && (CabinetIDs.Count == 0 || CabinetIDs.Contains(t.CabinetID))
                       && (PostTypeIDs.Count == 0 || PostTypeIDs.Contains(t.PostTypeID))
                       && (ABTypeIDs.Count == 0 || ABTypeIDs.Contains((int)t.AorBType))
                       && (Distance == 0 || Distance == t.Distance)
                       && ((IsBorderMeter == 0 && t.IsOutBorder == false) || (IsBorderMeter == 1 && t.IsOutBorder == true && (OutBorderMeter == 0 || OutBorderMeter == (int)t.OutBorderMeter))) //False -- True
                       && (Address == (string)null || Address == t.Address)
                       && (PostalCode == (string)null || PostalCode == t.PostalCode)
                       && (StatusPostIDs.Count == 0 || StatusPostIDs.Contains(t.Status))
                       && (PostGroupIDs.Count == 0 || PostGroupIDs.Contains(t.PostGroup.ID))
                       && (t.PostTypeID == 4 || t.PostTypeID == 6)
                       ).Select(t => new PostInfo
                       {
                           Center = t.Cabinet.Center.CenterName,
                           Address = t.Address,
                           Capacity = t.Capacity.ToString(),
                           Distance = t.Distance.ToString(),
                           ID = t.ID,
                           Number = t.Number,
                           PostalCode = t.PostalCode,
                           PostTypeID = t.PostTypeID,
                           PostTypeName = t.PostType.PostTypeName,
                           Status = t.Status.ToString(),
                           PostGroupNo = t.PostGroup.GroupNo.ToString(),
                           PostGroupID = t.PostGroup.ID.ToString(),
                           City = t.Cabinet.Center.Region.City.Name,
                           CabinetNumber = t.Cabinet.CabinetNumber
                       }
                       ).OrderBy(t => t.Number)
                       .ToList();



            }
        }

        //TODO:rad. edit
        public static List<PostInfo> GetPostInfoReserve(List<int> CenterIDs, List<int> CabinetIDs, List<int> PostNumberIDs, List<int> PostTypeIDs)
        {

            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                List<PostInfo> result = new List<PostInfo>();

                result = context.Posts
                                .Where(t =>
                                            (CenterIDs.Count == 0 || CenterIDs.Contains(t.Cabinet.CenterID))
                                            && (PostNumberIDs.Count == 0 || PostNumberIDs.Contains(t.ID))
                                            && (CabinetIDs.Count == 0 || CabinetIDs.Contains(t.CabinetID))
                                            && (PostTypeIDs.Count == 0 || PostTypeIDs.Contains(t.PostTypeID))
                                            && (t.Status == (byte)DB.PostStatus.ReserveForExchange)
                                       )
                               .Select(t => new PostInfo
                                            {
                                                Center = t.Cabinet.Center.CenterName,
                                                Number = t.Number,
                                                ABType = t.AORBPostAndCabinet.Name,
                                                PostTypeName = t.PostType.PostTypeName,
                                                Status = t.PostStatus.Name,
                                                City = t.Cabinet.Center.Region.City.Name,
                                                CabinetNumber = t.Cabinet.CabinetNumber,
                                                Capacity = t.Capacity.ToString(),
                                            }
                                      ).OrderBy(t => t.Number)
                              .ToList();
                return result;

            }
        }

        public static List<PostInfo> GetPostInfoDetails(List<int> CenterIDs
                                   , List<int> CabinetIDs
                                   , List<int> PostTypeIDs
                                   , List<int> ABTypeIDs
                                   , int Distance
                                   , int IsBorderMeter
                                   , string PostalCode
                                   , int OutBorderMeter
                                   , string Address
                                   , List<int> StatusPostIDs, ref List<PostInfo> Fail, ref List<PostInfo> Safe)
        {
            using (MainDataContext context = new MainDataContext())
            {


                return context.Posts
                     .GroupJoin(context.PostContacts, P => P.ID, pc => pc.PostID, (p, pc) => new { post = p, postcontact = pc })
                        .SelectMany(t1 => t1.postcontact.DefaultIfEmpty(), (pc, t1) => new { Post = pc.post, PostContact = t1 })

                        .GroupJoin(context.Buchts, pc => pc.PostContact.ID, b => b.ConnectionID, (pc, b) => new { postcontact = pc.PostContact, bucht = b })
                        .SelectMany(t2 => t2.bucht.DefaultIfEmpty(), (b, t2) => new { Bucht = t2, PostContact = b.postcontact })

                        .GroupJoin(context.SwitchPorts, b => b.Bucht.SwitchPortID, sp => sp.ID, (b, sp) => new { bucht = b, switchPort = sp })
                        .SelectMany(t1 => t1.switchPort.DefaultIfEmpty(), (sp, t1) => new { SwitchPort = t1, Bucht = sp.bucht })

                        .GroupJoin(context.Telephones, sp => sp.SwitchPort.ID, t => t.SwitchPortID, (sp, t) => new { telephone = t, switchPort = sp.SwitchPort, bucht = sp.Bucht })
                        .SelectMany(t2 => t2.telephone.DefaultIfEmpty(), (t, t2) => new { Telephone = t2, SwitchPort = t.switchPort, Bucht = t.bucht })
                       .Where(t =>
                           (CenterIDs.Count == 0 || CenterIDs.Contains(t.Bucht.Bucht.CabinetInput.Cabinet.CenterID))
                           && (CabinetIDs.Count == 0 || CabinetIDs.Contains(t.Bucht.PostContact.Post.CabinetID))
                           && (PostTypeIDs.Count == 0 || PostTypeIDs.Contains(t.Bucht.PostContact.Post.PostTypeID))
                           && (ABTypeIDs.Count == 0 || ABTypeIDs.Contains((int)t.Bucht.PostContact.Post.AorBType))
                           && (Distance == 0 || Distance == t.Bucht.PostContact.Post.Distance)
                           && ((IsBorderMeter == 0 && t.Bucht.PostContact.Post.IsOutBorder == false) || (IsBorderMeter == 1 && t.Bucht.PostContact.Post.IsOutBorder == true && (OutBorderMeter == 0 || OutBorderMeter == (int)t.Bucht.PostContact.Post.OutBorderMeter))) //False -- True
                           && (Address == (string)null || Address == t.Bucht.PostContact.Post.Address)
                           && (PostalCode == (string)null || PostalCode == t.Bucht.PostContact.Post.PostalCode)
                           && (StatusPostIDs.Count == 0 || StatusPostIDs.Contains(t.Bucht.PostContact.Post.Status)))
                           .Select(t => new PostInfo
                           {
                               Center = t.Bucht.Bucht.CabinetInput.Cabinet.Center.CenterName,
                               ABType = t.Bucht.PostContact.Post.AorBType.ToString(),
                               Address = t.Bucht.PostContact.Post.Address,
                               PostContactCountFail = 0,
                               PostContactCountValid = 0,
                               CabinetID = t.Bucht.Bucht.CabinetInput.Cabinet.CabinetNumber.ToString(),
                               Capacity = t.Bucht.PostContact.Post.Capacity.ToString(),
                               Distance = t.Bucht.PostContact.Post.Distance.ToString(),
                               ID = t.Bucht.PostContact.Post.ID,
                               IsOutBorder = t.Bucht.PostContact.Post.IsOutBorder.ToString(),
                               Number = t.Bucht.PostContact.Post.Number,
                               OutBorderMeter = ((int)t.Bucht.PostContact.Post.OutBorderMeter).ToString(),
                               PostalCode = t.Bucht.PostContact.Post.PostalCode,
                               PostTypeID = t.Bucht.PostContact.Post.PostTypeID,
                               PostTypeName = t.Bucht.PostContact.Post.PostType.PostTypeName,
                               Status = t.Bucht.PostContact.Post.Status.ToString(),
                               PostGroupID = t.Bucht.PostContact.Post.PostGroup.GroupNo.ToString(),
                               City = t.Bucht.Bucht.CabinetInput.Cabinet.Center.Region.City.Name,
                               PostContact = t.Bucht.PostContact.ConnectionNo,
                               TelNo = t.Telephone.TelephoneNo.ToString(),
                               CustomerName = t.Telephone.Customer.FirstNameOrTitle + " " + t.Telephone.Customer.LastName
                           }
                           ).OrderBy(t => t.Number)
                           .ToList();
            }
        }
        public static List<CabinetInputReport> GetCabinetInput(List<int> CenterIDs,
                                                        List<int> CabinetIDs,
                                                        List<int> StatusIDs,
                                                        List<int> DirectionIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.CabinetInputs
                    .Where(t =>
                        (CenterIDs.Count == 0 || CenterIDs.Contains(t.Cabinet.CenterID))
                        && (CabinetIDs.Count == 0 || CabinetIDs.Contains(t.CabinetID))
                        && (StatusIDs.Count == 0 || StatusIDs.Contains(t.Status))
                        && (DirectionIDs.Count == 0 || DirectionIDs.Contains((int)t.Direction))
                    )
                      .GroupJoin(context.Buchts, ci => ci.ID, b => b.CabinetInputID, (ci, b) => new { Bucht = ci.Buchts, cabinetInput = b })
                    .SelectMany(t2 => t2.Bucht.DefaultIfEmpty(), (t1, t2) => new { CabinetInputs = t1, Buchts = t2 })

                    .GroupJoin(context.Telephones, b => b.Buchts.SwitchPortID, t => t.SwitchPortID, (b, t) => new { Buchts = b, Telephones = t, CabinetInputs = b.CabinetInputs })
                    .SelectMany(x => x.Telephones.DefaultIfEmpty(), (t1, t2) => new { Bucht = t1.Buchts, CabinetInput = t1.CabinetInputs, Telephone = t2 })




                    .Select(t => new CabinetInputReport
                    {
                        CabinetID = t.Bucht.Buchts.CabinetInput.Cabinet.CabinetNumber.ToString(),
                        Direction = t.Bucht.Buchts.CabinetInput.Direction.ToString(),
                        ID = t.Bucht.Buchts.CabinetInput.ID,
                        InputNumber = t.Bucht.Buchts.CabinetInput.InputNumber,
                        InsertDate = t.Bucht.Buchts.CabinetInput.InsertDate.ToString(),
                        boolStatus = t.Bucht.Buchts.CabinetInput.Status,
                        TelNo = t.Telephone.TelephoneNo.ToString(),
                        Bucht = "ام دی اف:" + t.Bucht.Buchts.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Number.ToString() +
                                                                            "ردیف:" + t.Bucht.Buchts.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString() +
                                                                            "طبقه:" + t.Bucht.Buchts.VerticalMDFRow.VerticalRowNo.ToString() +
                                                                            "اتصالی:" + t.Bucht.Buchts.BuchtNo.ToString(),
                        City = t.Bucht.Buchts.CabinetInput.Cabinet.Center.Region.City.Name,
                        Center = t.Bucht.Buchts.CabinetInput.Cabinet.Center.CenterName,
                        BuchtID = t.Bucht.Buchts.ID.ToString(),
                        BuchtStatus = t.Bucht.Buchts.Status,
                        CabinetInputID = t.Bucht.Buchts.CabinetInputID,
                        BuchtIDConnectedOtherBucht = t.Bucht.Buchts.BuchtIDConnectedOtherBucht.ToString()

                    })
                    .OrderBy(t => t.InputNumber)

                    .ToList();

            }
        }
        public static void GetPCMDetails(List<long?> CabinetInputIDs, ref List<PCMDetails> pcmDetails)
        {
            using (MainDataContext context = new MainDataContext())
            {
                List<PCMDetails> Temp = new List<PCMDetails>();
                pcmDetails = context.Buchts
                     .GroupJoin(context.Telephones, b => b.SwitchPortID, t => t.SwitchPortID, (b, t) => new { Bucht = b, Telephone = t })
                    .SelectMany(x => x.Telephone.DefaultIfEmpty(), (t1, t2) => new { Buchts = t1, Telephones = t2 })
                    .Where(t =>
                        (CabinetInputIDs.Count == 0 || CabinetInputIDs.Contains((long)t.Buchts.Bucht.CabinetInputID))
                        && (t.Buchts.Bucht.Status != (int)DB.BuchtStatus.AllocatedToInlinePCM)
                        && (t.Buchts.Bucht.BuchtTypeID == (int)DB.BuchtType.InLine || t.Buchts.Bucht.BuchtTypeID == (int)DB.BuchtType.OutLine))
                        .Select(t => new PCMDetails
                        {

                            BuchtType = ((int)DB.BuchtType.InLine == t.Buchts.Bucht.BuchtTypeID) ? "ورودی" : "خروجی",
                            MUID = "رک:" + t.Buchts.Bucht.PCMPort.PCM.PCMShelf.PCMRock.Number.ToString() + " ،  " + "شلف : " + t.Buchts.Bucht.PCMPort.PCM.PCMShelf.Number.ToString() + " ،  " + "کارت : " + t.Buchts.Bucht.PCMPort.PCM.Card.ToString() + " ،  " + "پورت : " + t.Buchts.Bucht.PCMPort.PortNumber.ToString(),
                            CabinetID = (long)t.Buchts.Bucht.CabinetInputID,
                            ID = t.Buchts.Bucht.ID,
                            PortNumber = t.Buchts.Bucht.PCMPort.PortNumber.ToString(),
                            boolStatus = t.Buchts.Bucht.CabinetInput.Status,
                            TelNo = t.Telephones.TelephoneNo.ToString(),
                            Bucht = "ام دی اف:" + t.Buchts.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Number.ToString() +
                                                                                "ردیف:" + t.Buchts.Bucht.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString() +
                                                                                "طبقه:" + t.Buchts.Bucht.VerticalMDFRow.VerticalRowNo.ToString() +
                                                                                "اتصالی:" + t.Buchts.Bucht.BuchtNo.ToString(),//DB.GetConnectionByBuchtID(t.Buchts.Bucht.ID),
                            BuchtID = t.Buchts.Bucht.ID.ToString(),
                            CabinetInputID = (long)t.Buchts.Bucht.CabinetInputID,
                            BuchtTypeID = t.Buchts.Bucht.BuchtTypeID,
                            Address = t.Buchts.Bucht.CabinetInput.Cabinet.Address + " " + t.Buchts.Bucht.CabinetInput.Cabinet.PostCode,
                            CustomerID = t.Telephones.Customer.CustomerID,
                            CustomerName = t.Telephones.Customer.FirstNameOrTitle + " " + t.Telephones.Customer.LastName

                        })
                        .ToList();


            }
        }

        //public static void GetContactPostPCMDetails(List<long> PostContactID, ref List<PCMDetails> pcmDetails)
        //{
        //    using (MainDataContext context = new MainDataContext())
        //    {
        //        List<PCMDetails> Temp = new List<PCMDetails>();
        //        Temp = context.PostContacts
        //             .GroupJoin(context.Buchts, pc => pc.ID, b => b.ConnectionID, (pc, b) => new { bucht = pc.Buchts, PostContactBucht = b })
        //             .SelectMany(t1 => t1.bucht.DefaultIfEmpty(), (t, pcb) => new { PostContact = t, Bucht = pcb })
        //             .GroupJoin(context.Telephones, bp => bp.Bucht.SwitchPortID, t => t.SwitchPortID, (bp, t) => new { Bucht = bp, Telephone = t })
        //             .SelectMany(t2 => t2.Telephone.DefaultIfEmpty(), (t2, bt) => new { BuchtTelephone = t2, Telephone = bt })


        //            .Where(t =>
        //                (PostContactID.Contains(t.BuchtTelephone.Bucht.Bucht.PostContact.ID)))

        //                .Select(t => new PCMDetails
        //                {

        //                    BuchtType = t.BuchtTelephone.Bucht.Bucht.BuchtTypeID.ToString(),
        //                    MUID = "رک:" + t.BuchtTelephone.Bucht.Bucht.PCMPort.PCM.PCMShelf.PCMRock.Number.ToString() + " ،  " + "شلف : " + t.BuchtTelephone.Bucht.Bucht.PCMPort.PCM.PCMShelf.Number.ToString() + " ،  " + "کارت : " + t.BuchtTelephone.Bucht.Bucht.PCMPort.PCM.Card.ToString() + " ،  " + "پورت : " + t.BuchtTelephone.Bucht.Bucht.PCMPort.PortNumber.ToString(),
        //                    PostContactID = t.BuchtTelephone.Bucht.Bucht.PostContact.ID,
        //                    PortNumber = t.BuchtTelephone.Bucht.Bucht.PCMPort.PortNumber.ToString(),
        //                    Status = t.BuchtTelephone.Bucht.Bucht.PostContact.Status.ToString(),
        //                    BuchtStatus = t.BuchtTelephone.Bucht.Bucht.Status.ToString(),
        //                    TelNo = t.Telephone.TelephoneNo.ToString(),
        //                    BuchtID = t.BuchtTelephone.Bucht.Bucht.ID.ToString(),
        //                    ConnectionNo = t.BuchtTelephone.Bucht.Bucht.PostContact.ConnectionNo
        //                    //CabinetInputID = (long)t.BuchtTelephone.Bucht.Bucht.CabinetInputID

        //                })
        //                .ToList();
        //        foreach (PCMDetails i in Temp)
        //            pcmDetails.Add(i);

        //    }
        //}
        public static void GetContactPostPCMDetails(List<int> PostID, ref List<PCMDetails> pcmDetails)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                string query = @"SELECT 
                                    ('رک:' + CAST(PCMRock.Number AS nvarchar(5)) + 'شلف : ' + CAST(PCMShelf.Number AS nvarchar(5)) + 'کارت' + CAST(PCM.[Card] AS nvarchar(5)) + 'پورت' + CAST(PCMPort.PortNumber AS nvarchar(5))) AS MUID
                                    ,CAST( Bucht.BuchtTypeID AS nvarchar(5)) as BuchtType
                                    ,PostContact.ID AS PostContactID
                                    ,CAST(PCMPort.PortNumber AS NVARCHAR(5)) AS PortNumber
                                    ,CAST(PostContact.[Status] AS nvarchar(5)) AS Status
                                    ,CAST(Bucht.[Status] AS nvarchar(5)) AS BuchtStatus
                                    ,CAST(Telephone.TelephoneNo AS nvarchar(15)) AS TelNo
                                    ,CAST(Bucht.ID AS nvarchar(10))  AS BuchtID
                                    ,PostContact.ConnectionNo
                                    ,PostContact.PostID
                                    ,(  'ام دی اف:' + cast (MDF.Number AS nvarchar(5)) + '(' + MDF.Description + ')' + 'ردیف:' + cast(VerticalMDFColumn.VerticalCloumnNo AS nvarchar(5)) + 'طبقه:' + cast (VerticalMDFRow.VerticalRowNo as nvarchar(10)) + 'اتصالی:' + CAST(Bucht.BuchtNo AS  nvarchar(5)) ) as Bucht
                                    , BuchtType  =
		                                    CASE WHEN BuchtTypeID = 8
			                                    THEN 'ورودی'
			                                    ELSE 'خروجی'
		                                    END
                                    FROM postcontact
                                    left JOIN Bucht on Bucht.ConnectionID = PostContact.ID 
                                    
                                    left JOIN Post on Post.ID = PostContact.PostID
                                    LEFT JOIN Telephone on Telephone.SwitchPortID = Bucht.SwitchPortID
                                    LEFT JOIN PCMPort on PCMPort.ID = bucht.PCMPortID
                                    LEFT JOIN PCM on PCM.ID = PCMPort.PCMID
                                    LEFT JOIN PCMShelf on PCMShelf.ID = PCM.ShelfID
                                    LEFT JOIN PCMRock on PCMRock.ID = PCMShelf.PCMRockID
                                    Left JOIN VerticalMDFRow on VerticalMDFRow.ID = Bucht.MDFRowID
                                    Left JOIN VerticalMDFColumn on VerticalMDFColumn.ID = VerticalMDFRow.VerticalMDFColumnID
                                    LEFT JOIN MDFFrame on MDFFrame.ID = VerticalMDFColumn.MDFFrameID
                                    LEFT join mdf on MDF.ID = MDFFrame.MDFID
                                    where Bucht.BuchtTypeID = 8
                                    ";
                if (PostID.Count > 0)
                    query += " and PostContact.PostID in " + MakeTheList(PostID.ConvertAll(x => x.ToString()));

                pcmDetails = context.ExecuteQuery<PCMDetails>(string.Format(query)).ToList();

            }
        }

        public static List<PostContactConnectionTypeReport> GetPostContacts(List<int> CenterIDs, List<int> CabinetIDs, List<int> StatusIDs, List<int> PostIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {


                context.CommandTimeout = 0;
                string query = @"select p.ConnectionType,p.PostID,p.ID from postcontact p
                                 LEFT JOIN post on post.id = p.postid
                                 LEFT JOIN cabinet on cabinet.ID = Post.cabinetid
                                 where p.ConnectionType =  " + ((byte)DB.PostContactConnectionType.PCMNormal).ToString();
                if (CenterIDs.Count > 0)
                {
                    string CenterList = MakeTheList(CenterIDs.ConvertAll<string>(x => x.ToString()));
                    query += " and Cabinet.CenterID in " + CenterList;
                }
                if (CabinetIDs.Count > 0)
                    query += " and Cabinet.ID in " + MakeTheList(CabinetIDs.ConvertAll<string>(x => x.ToString()));

                if (StatusIDs.Count > 0)
                    query += " and p.Status in " + MakeTheList(StatusIDs.ConvertAll<string>(x => x.ToString()));

                if (PostIDs.Count > 0)
                    query += " and p.PostID in " + MakeTheList(PostIDs.ConvertAll<string>(x => x.ToString()));

                query += " order by p.id";
                List<PostContactConnectionTypeReport> result = context.ExecuteQuery<PostContactConnectionTypeReport>(string.Format(query)).ToList();

                return result;
            }
        }
        public static List<PostContactsReport> GetPostContactsMaster(List<int> CenterIDs, byte ConnectionType, List<int> CabinetIDs, List<int> StatusIDs, List<int> PostIDs)
        {

            using (MainDataContext context = new MainDataContext())
            {


                string query = @"SELECT PostContact.ID,
                                    CAST( Post.Number AS nvarchar(5)) as PostNumber
                                    ,CAST( Cabinet.CabinetNumber AS nvarchar(5)) as CabinetNumber

                                    , Center.CenterName as Center
                                    , City.Name as City
                                    , CAST( PostContact.[Status] AS nvarchar(5)) as [Status]
                                    , CAST( Telephone.TelephoneNo AS nvarchar(50)) as TelNo
                                    , CAST( PostContact.ConnectionType AS nvarchar(5)) as PostContactConnectionType
                                    , PostContact.ConnectionNo as PostContactConnectionno
                                    ,Bucht.ID as BuchtID
                                    ,PostContact.PostID

                                    , CAST( Bucht.BuchtTypeID AS nvarchar(5)) as BuchtTypeID
                                    ,Bucht.CabinetInputID
                                    ,(  'ام دی اف:' + cast (MDF.Number AS nvarchar(5)) + '(' + MDF.Description + ')' + 'ردیف:' + cast(VerticalMDFColumn.VerticalCloumnNo AS nvarchar(5)) + 'طبقه:' + cast (VerticalMDFRow.VerticalRowNo as nvarchar(10)) + 'اتصالی:' + CAST(Bucht.BuchtNo AS  nvarchar(5)) ) as Bucht
                                    FROM postcontact
                                    left JOIN Bucht on Bucht.ConnectionID = PostContact.ID 
                                    left JOIN Post on Post.ID = PostContact.PostID
                                    LEFT JOIN Telephone on Telephone.SwitchPortID = Bucht.SwitchPortID
                                    LEFT JOIN Cabinet on Cabinet.ID = post.CabinetID
                                    LEFT JOIN Center on Center.ID = Cabinet.CenterID 
                                    LEFT JOIN Region on Region.ID = Center.RegionID
                                    LEFT JOIN City on City.ID = Region.CityID
                                    LEFT JOIN VerticalMDFRow on VerticalMDFRow.ID = Bucht.MDFRowID
                                    LEFT JOIN VerticalMDFColumn on VerticalMDFColumn.ID = VerticalMDFRow.VerticalMDFColumnID
                                    LEFT JOIN MDFFrame on MDFFrame.ID = VerticalMDFColumn.MDFFrameID
                                    LEFT join mdf on MDF.ID = MDFFrame.MDFID
                                    where PostContact.ConnectionType <> " + ConnectionType.ToString();

                if (CenterIDs.Count > 0)
                    query += " and Cabinet.CenterID in " + MakeTheList(CenterIDs.ConvertAll<string>(x => x.ToString()));

                if (CabinetIDs.Count > 0)
                    query += " and Cabinet.ID in " + MakeTheList(CabinetIDs.ConvertAll<string>(x => x.ToString()));

                if (StatusIDs.Count > 0)
                    query += " and PostContact.Status in " + MakeTheList(StatusIDs.ConvertAll<string>(x => x.ToString()));

                if (PostIDs.Count > 0)
                    query += " and PostContact.PostID in " + MakeTheList(PostIDs.ConvertAll<string>(x => x.ToString()));

                List<PostContactsReport> result = context.ExecuteQuery<PostContactsReport>(string.Format(query)).ToList();
                return result;
            }
        }
        public static List<PostContactInfo> GetPostContactInfo(List<int> CenterIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.PostContacts
                    .Where(t => (CenterIDs.Count == 0 || CenterIDs.Contains(t.Post.Cabinet.CenterID)) && t.ConnectionType == (int)DB.PostContactConnectionType.PCMRemote)
                    .Select(t => new PostContactInfo
                    {
                        CabinetNumber = t.Post.Cabinet.CabinetNumber,
                        CabinetID = t.Post.Cabinet.ID,
                        Center = t.Post.Cabinet.Center.CenterName,
                        City = t.Post.Cabinet.Center.Region.City.Name,
                        ConnectionNo = t.ConnectionNo,
                        ConnectionType = t.ConnectionType,
                        PostID = t.Post.ID,
                        Status = t.Status,
                        ID = t.ID,
                        Address = t.Post.Address,
                        PostNumber = t.Post.Number
                    })
                    .ToList();
            }
        }

        public static List<PCMStatisticDetails> GetPCMStatisticDetails(List<int> CenterIds, List<int> PCMBrandIDs, List<int> RockIDs, List<int> ShelfIDs, List<int> CardIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.PCMPorts
                    .GroupJoin(context.Buchts, p => p.ID, b => b.PCMPortID, (p, b) => new { bucht = p.Buchts, pcmPortBucht = b })
                    .SelectMany(t2 => t2.bucht.DefaultIfEmpty(), (t1, ppb) => new { PCMPortBucht = t1, Bucht = ppb })

                    .GroupJoin(context.Telephones, bp => bp.Bucht.SwitchPortID, t => t.SwitchPortID, (bp, t) => new { Bucht = bp, Telephone = t })
                    .SelectMany(t3 => t3.Telephone.DefaultIfEmpty(), (t3, bt) => new { BuchtTelephone = t3, Telephone = bt })

                    .Where(t => (CenterIds.Count == 0 || CenterIds.Contains(t.BuchtTelephone.Bucht.Bucht.PCMPort.PCM.PCMShelf.PCMRock.CenterID)) &&
                            (PCMBrandIDs.Count == 0 || PCMBrandIDs.Contains(t.BuchtTelephone.Bucht.Bucht.PCMPort.PCM.PCMBrand.ID)) &&
                            (RockIDs.Count == 0 || RockIDs.Contains(t.BuchtTelephone.Bucht.Bucht.PCMPort.PCM.PCMShelf.PCMRock.ID)) &&
                            (ShelfIDs.Count == 0 || ShelfIDs.Contains(t.BuchtTelephone.Bucht.Bucht.PCMPort.PCM.PCMShelf.ID)) &&
                            (CardIDs.Count == 0 || CardIDs.Contains(t.BuchtTelephone.Bucht.Bucht.PCMPort.PCM.ID)))
                            .Select(t => new PCMStatisticDetails
                            {
                                Cabinet = t.BuchtTelephone.Bucht.Bucht.CabinetInput.Cabinet.CabinetNumber.ToString(),
                                CabinetInputID = t.BuchtTelephone.Bucht.Bucht.CabinetInput.InputNumber.ToString(),
                                ConnectionIDBucht = t.BuchtTelephone.Bucht.Bucht.Bucht1.ID.ToString(),
                                Connectionno = t.BuchtTelephone.Bucht.Bucht.PostContact.ConnectionNo.ToString(),
                                CustomerID = t.Telephone.CustomerID,
                                MDFHorizentalID = t.Telephone.SwitchPort.MDFHorizentalID,
                                //InputBucht = 
                                //OutputBucht = 
                                PCMSpecification = "رک:" + t.BuchtTelephone.Bucht.Bucht.PCMPort.PCM.PCMShelf.PCMRock.Number.ToString() + " ،  " + "شلف : "
                                + t.BuchtTelephone.Bucht.Bucht.PCMPort.PCM.PCMShelf.Number.ToString() + " ،  " + "کارت : "
                                + t.BuchtTelephone.Bucht.Bucht.PCMPort.PCM.Card.ToString() + " ،  " + "پورت : " + t.BuchtTelephone.Bucht.Bucht.PCMPort.PortNumber.ToString(),
                                Portno = t.BuchtTelephone.Bucht.Bucht.PCMPort.PortNumber.ToString(),
                                Postno = t.BuchtTelephone.Bucht.Bucht.PostContact.Post.Number.ToString(),
                                Telno = t.Telephone.TelephoneNo.ToString(),
                                BuchtType = t.BuchtTelephone.Bucht.Bucht.BuchtTypeID,
                                BuchtID = t.BuchtTelephone.Bucht.Bucht.ID,
                                RockID = t.BuchtTelephone.Bucht.Bucht.PCMPort.PCM.PCMShelf.PCMRock.ID,
                                ShelfID = t.BuchtTelephone.Bucht.Bucht.PCMPort.PCM.PCMShelf.ID,
                                CardID = t.BuchtTelephone.Bucht.Bucht.PCMPort.PCM.ID,
                                PortID = t.BuchtTelephone.Bucht.Bucht.PCMPort.ID,
                                PCMType = t.BuchtTelephone.Bucht.Bucht.PCMPort.PCM.PCMType.Name,
                                PCMStatus = t.BuchtTelephone.Bucht.Bucht.PCMPort.PCM.Status.ToString()
                            })
                            .ToList();




            }

        }
        public static List<PCMCardInfo> GetPCMStatisticEquipment(int? CenterId, int? PCMBrandID, int? RockID, int? ShelfID, int? CardID)
        {

            using (MainDataContext context = new MainDataContext())
            {
                var temp = context.Buchts
                                .Where(t => context.PCMPorts.GroupBy(x => new { PCMID = x.PCMID, PCMPortType = x.PortType, PCMPortStatus = x.Status })
                                    .Where(x2 => x2.Key.PCMPortType == (byte)DB.BuchtType.OutLine && x2.Key.PCMPortStatus == (byte)DB.PCMPortStatus.Connection && x2.Count() == 1)
                                    .Select(x3 => x3.Key.PCMID)
                                    .Contains(t.PCMPort.PCM.ID)
                                        && t.PCMPort.PortType == (byte)DB.BuchtType.InLine
                                        && DB.CurrentUser.CenterIDs.Contains(t.PCMPort.PCM.PCMShelf.PCMRock.CenterID))
                                .Where(t =>
                                    //(!CenterId.HasValue ? DB.CurrentUser.CenterIDs.Contains(t.PCMPort.PCM.PCMShelf.PCMRock.CenterID) : t.PCMPort.PCM.PCMShelf.PCMRock.CenterID == (int)CenterId))// &&
                                       (!RockID.HasValue || RockID == t.PCMPort.PCM.PCMShelf.PCMRockID) &&
                                        (!ShelfID.HasValue || ShelfID == t.PCMPort.PCM.ShelfID) &&
                                        (!CardID.HasValue || CardID == t.PCMPort.PCM.ID))

                    .Select(t =>
                 new PCMCardInfo
                 {
                     IsChecked = false,
                     ID = t.PCMPort.PCM.ID,
                     CenterID = t.PCMPort.PCM.PCMShelf.PCMRock.CenterID,
                     RockNumber = t.PCMPort.PCM.PCMShelf.PCMRock.Number,
                     ShelfNumber = t.PCMPort.PCM.PCMShelf.Number,
                     Card = t.PCMPort.PCM.Card,
                     PCMBrandID = t.PCMPort.PCM.PCMBrandID,
                     PCMTypeID = t.PCMPort.PCM.PCMTypeID,
                     InstallAddress = t.PCMPort.PCM.InstallAddress,
                     InstallPostCode = t.PCMPort.PCM.InstallPostCode,
                     Status = t.PCMPort.PCM.Status,
                     PCMRockID = t.PCMPort.PCM.PCMShelf.PCMRockID,
                     PCMShelfID = t.PCMPort.PCM.ShelfID,
                     CabinetNumber = t.CabinetInput.Cabinet.CabinetNumber,
                     PostNumber = t.PostContact.Post.Number,
                     NumberConnectionFills = 1,
                     PortNumber = t.PCMPort.PortNumber
                 })
                 .ToList();
                return temp;
            }
        }
        public static List<PCMInfoReport> GetPCM(List<int> centers, DateTime? FromDate, DateTime? ToDate, int ChangeType)
        {

            using (MainDataContext context = new MainDataContext())
            {
                string TempCenter = string.Empty;
                foreach (int item in centers)
                {
                    TempCenter += item.ToString() + ",";
                }
                List<ActionLog> AllPCM = context.ActionLogs.Where(t => (ChangeType == 255 && (t.ActionID == (int)DB.ActionLog.PCMCreate || t.ActionID == (int)DB.ActionLog.PCMInstall ||
                                                                    t.ActionID == (int)DB.ActionLog.PCMDrop || t.ActionID == (int)DB.ActionLog.PCMTransfer ||
                                                                    t.ActionID == (int)DB.ActionLog.PCMEdit || t.ActionID == (int)DB.ActionLog.PCMEditInfo ||
                                                                    t.ActionID == (int)DB.ActionLog.PCMDelete)) || t.ActionID == ChangeType).ToList();


                List<PCMInfoReport> result = new List<PCMInfoReport>();
                foreach (ActionLog item in AllPCM)
                {
                    List<Center> centerTemp = CenterDB.GetAllCenter();

                    switch (item.ActionID)
                    {
                        case (byte)DB.ActionLog.PCMCreate:
                            {
                                CRM.Data.Schema.PCMCreate PCMCreate = LogSchemaUtility.Deserialize<CRM.Data.Schema.PCMCreate>(item.Description.ToString());
                                PCMInfoReport Temp = new PCMInfoReport();
                                Temp.CenterName = PCMCreate.CenterID.ToString();
                                Temp.PCMActionID = item.ActionID;
                                Temp.Rock = PCMCreate.Rock;
                                Temp.Shelf = PCMCreate.Shelf;
                                Temp.Card = PCMCreate.Card;
                                Temp.Type = PCMCreate.Type;
                                Temp.PCMActionDate = item.Date;
                                result.Add(Temp);
                                break;
                            }
                        case (byte)DB.ActionLog.PCMInstall:
                            {
                                CRM.Data.Schema.PCMInstall PCMInstall = LogSchemaUtility.Deserialize<CRM.Data.Schema.PCMInstall>(item.Description.ToString());
                                PCMInfoReport Temp = new PCMInfoReport();
                                Temp.CenterName = PCMInstall.CenterID.ToString();
                                Temp.PCMActionID = item.ActionID;
                                Temp.Rock = PCMInstall.Rock;
                                Temp.Shelf = PCMInstall.Shelf;
                                Temp.Card = PCMInstall.Card;
                                Temp.Type = PCMInstall.Type;
                                Temp.PCMActionDate = item.Date;
                                result.Add(Temp);
                                break;
                            }
                        case (byte)DB.ActionLog.PCMDrop:
                            {
                                CRM.Data.Schema.PCMDrop PCMRemove = LogSchemaUtility.Deserialize<CRM.Data.Schema.PCMDrop>(item.Description.ToString());
                                PCMInfoReport Temp = new PCMInfoReport();
                                Temp.CenterName = PCMRemove.CenterID.ToString();
                                Temp.PCMActionID = item.ActionID;
                                Temp.Rock = PCMRemove.Rock;
                                Temp.Shelf = PCMRemove.Shelf;
                                Temp.Card = PCMRemove.Card;
                                Temp.Type = PCMRemove.Type;
                                Temp.PCMActionDate = item.Date;
                                result.Add(Temp);
                                break;
                            }
                        case (byte)DB.ActionLog.PCMTransfer:
                            {
                                CRM.Data.Schema.PCMTransfer PCMTransfer = LogSchemaUtility.Deserialize<CRM.Data.Schema.PCMTransfer>(item.Description.ToString());
                                PCMInfoReport Temp = new PCMInfoReport();
                                Temp.CenterName = PCMTransfer.CenterID.ToString();
                                Temp.PCMActionID = item.ActionID;
                                Temp.Rock = PCMTransfer.Rock;
                                Temp.Shelf = PCMTransfer.Shelf;
                                Temp.Card = PCMTransfer.Card;
                                Temp.Type = PCMTransfer.Type;
                                Temp.PCMActionDate = item.Date;
                                result.Add(Temp);
                                break;
                            }
                        case (byte)DB.ActionLog.PCMEdit:
                            {
                                CRM.Data.Schema.PCMEdit PCMEdit = LogSchemaUtility.Deserialize<CRM.Data.Schema.PCMEdit>(item.Description.ToString());
                                PCMInfoReport Temp = new PCMInfoReport();
                                Temp.CenterName = PCMEdit.CenterID.ToString();
                                Temp.PCMActionID = item.ActionID;
                                Temp.Rock = PCMEdit.Rock;
                                Temp.Shelf = PCMEdit.Shelf;
                                Temp.Card = PCMEdit.Card;
                                Temp.Type = PCMEdit.Type;
                                Temp.PCMActionDate = item.Date;
                                result.Add(Temp);
                                break;
                            }
                        case (byte)DB.ActionLog.PCMEditInfo:
                            {
                                CRM.Data.Schema.PCMEditInfo PCMEditInfo = LogSchemaUtility.Deserialize<CRM.Data.Schema.PCMEditInfo>(item.Description.ToString());
                                PCMInfoReport Temp = new PCMInfoReport();
                                Temp.CenterName = PCMEditInfo.CenterID.ToString();
                                Temp.PCMActionID = item.ActionID;
                                Temp.Rock = PCMEditInfo.Rock;
                                Temp.Shelf = PCMEditInfo.Shelf;
                                Temp.Card = PCMEditInfo.Card;
                                Temp.Type = PCMEditInfo.Type;
                                Temp.PCMActionDate = item.Date;
                                result.Add(Temp);
                                break;
                            }
                        case (byte)DB.ActionLog.PCMDelete:
                            {
                                CRM.Data.Schema.PCMDelete PCMDelete = LogSchemaUtility.Deserialize<CRM.Data.Schema.PCMDelete>(item.Description.ToString());
                                PCMInfoReport Temp = new PCMInfoReport();
                                Temp.CenterName = PCMDelete.CenterID.ToString();
                                Temp.PCMActionID = item.ActionID;
                                Temp.Rock = PCMDelete.Rock;
                                Temp.Shelf = PCMDelete.Shelf;
                                Temp.Card = PCMDelete.Card;
                                Temp.Type = PCMDelete.Type;
                                Temp.PCMActionDate = item.Date;
                                result.Add(Temp);
                                break;
                            }
                    }

                }
                return result.Where(t => (!FromDate.HasValue || t.PCMActionDate >= FromDate)
                                     && (!ToDate.HasValue || t.PCMActionDate <= ToDate)).ToList();
            }
        }

        public static List<FailureFormRowInfo> GetFailureRequest(DateTime? fromDate, DateTime? toDate, long? RequestIdFrom, long? RequestIdTo, List<int> CenterId, long? TelephoneNo, string IdentityId, List<int> LineStatusIDs, List<int> FailureStatusIDs, int FailureStatus, int? NetworkOfficerID, int? RowNoFrom, int? RowNoTo)
        {
            List<FailureFormRowInfo> result = new List<FailureFormRowInfo>();
            List<FailureFormRowInfo> resultTemp = new List<FailureFormRowInfo>();
            using (MainDataContext context = new MainDataContext())
            {
                result = context.Failure117s
                     .GroupJoin(context.FailureForms, f => f.ID, ff => ff.FailureRequestID, (ff, f) => new { FailureForm = ff.FailureForms, Failure117 = f })
                     .SelectMany(t2 => t2.FailureForm.DefaultIfEmpty(), (t1, t2) => new { FailureForms = t2, Failure117s = t1 })

                    .Where(
                            t => (!fromDate.HasValue || t.FailureForms.Failure117.Request.InsertDate >= fromDate)
                                    && (!toDate.HasValue || t.FailureForms.Failure117.Request.InsertDate <= toDate)
                                    && (!RequestIdTo.HasValue || t.FailureForms.Failure117.ID <= RequestIdTo)
                                    && (t.FailureForms.Failure117.EndMDFDate != null && t.FailureForms.Failure117.EndMDFDate <= toDate)
                                    && (!RequestIdFrom.HasValue || t.FailureForms.Failure117.ID >= RequestIdFrom)
                                    && (CenterId.Count == 0 || CenterId.Contains(t.FailureForms.Failure117.Request.CenterID))
                                    && (!TelephoneNo.HasValue || t.FailureForms.Failure117.Request.TelephoneNo == TelephoneNo)
                                    && (!t.FailureForms.Failure117.Request.IsCancelation && !t.FailureForms.Failure117.Request.IsWaitingList)
                                    && (IdentityId == null || t.FailureForms.Failure117.Request.Customer.NationalCodeOrRecordNo == IdentityId)
                                    && (LineStatusIDs.Count == 0 || LineStatusIDs.Contains((int)t.FailureForms.Failure117.LineStatusID))
                                    && (FailureStatusIDs.Count == 0 || FailureStatusIDs.Contains((int)t.FailureForms.Failure117.FailureStatusID))
                                    && (
                                        ((int)DB.Failure117RequestStatus.All == FailureStatus)
                                        || (!t.FailureForms.Failure117.Request.EndDate.HasValue && (int)DB.Failure117RequestStatus.InProcess == FailureStatus)
                                        || (t.FailureForms.Failure117.Request.EndDate.HasValue && (int)DB.Failure117RequestStatus.Eliminate == FailureStatus)
                                       )
                                    && (!NetworkOfficerID.HasValue || t.FailureForms.Failure117NetworkContractorOfficerID == NetworkOfficerID)
                                    && (!RowNoFrom.HasValue || t.FailureForms.RowNo >= RowNoFrom)
                                    && (!RowNoTo.HasValue || t.FailureForms.RowNo <= RowNoTo))
                            .Select(t => new FailureFormRowInfo
                            {
                                RequestID = t.FailureForms.Failure117.ID,
                                Center = t.FailureForms.Failure117.Request.Center.CenterName,
                                InsertDate = t.FailureForms.Failure117.Request.InsertDate != null ?  context.fn_JulianToSolarFormat(t.FailureForms.Failure117.Request.InsertDate,"g"): "",
                                Customer = t.FailureForms.Failure117.Request.Customer.FirstNameOrTitle + " " + t.FailureForms.Failure117.Request.Customer.LastName,
                                FailureStatus = t.FailureForms.Failure117.Failure117FailureStatus.Title,
                                LineStatus = t.FailureForms.Failure117.Failure117LineStatus.Title,
                                NetworkOfficerName = t.FailureForms.Failure117NetworkContractorOfficer.Name,
                                Step = t.FailureForms.Failure117.Request.Status.RequestStep.StepTitle,
                                TelephoneNo = (!t.FailureForms.Failure117.Request.TelephoneNo.HasValue) ? (long)0 : (long)t.FailureForms.Failure117.Request.TelephoneNo,
                                EndMDFDate = t.FailureForms.Failure117.EndMDFDate != null ? context.fn_JulianToSolarFormat(t.FailureForms.Failure117.EndMDFDate, "g"): "",
                                RowNo = t.FailureForms.RowNo,
                                GiveNetworkDate = t.FailureForms.GiveNetworkFormDate,
                                GetNetworkDate = t.FailureForms.GetNetworkFormDate,
                                EliminateFailureDate = context.GetTimeElpased(t.FailureForms.Failure117.ID)
                            }).ToList();
            }
            return result;
        }


        public static List<Failure117Requests> GetSendingFailure117RequestsToNetworkCable(DateTime? fromDate, DateTime? toDate, long? RequestIdFrom, long? RequestIdTo, List<int> CenterId, long? TelephoneNo, int? RadifFrom, int? RadifTo, string IdentityID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.FailureForms
                    .Where(t => (!fromDate.HasValue || t.Failure117.Request.InsertDate >= fromDate)
                                    && (!toDate.HasValue || t.Failure117.Request.InsertDate <= toDate)
                                    && (!RequestIdTo.HasValue || t.Failure117.ID <= RequestIdTo)
                                    && (!RequestIdFrom.HasValue || t.Failure117.ID >= RequestIdFrom)
                                    && (CenterId.Count == 0 || CenterId.Contains(t.Failure117.Request.CenterID))
                                    && (!TelephoneNo.HasValue || t.Failure117.Request.TelephoneNo == TelephoneNo)
                                    && (!t.Failure117.Request.IsCancelation && !t.Failure117.Request.IsWaitingList)
                                    && (!RadifFrom.HasValue || t.RowNo >= RadifFrom)
                                    && (!RadifTo.HasValue || t.RowNo <= RadifTo)
                                     && (IdentityID == null || t.Failure117.Request.Customer.NationalCodeOrRecordNo == IdentityID)
                    ).Select(t => new Failure117Requests
                    {

                        CableDate = t.CabelDate.ToString(),
                        CableTime = t.CabelDate.Value.Hour.ToString() + ":" + t.CabelDate.Value.Minute.ToString(),

                        EndMDFDate = Date.GetPersianDate(t.Failure117.EndMDFDate, Date.DateStringType.Short),
                        EndMDFTime = t.Failure117.EndMDFDate.Value.Hour.ToString() + ":" + t.Failure117.EndMDFDate.Value.Minute.ToString(),

                        InsertDate = Date.GetPersianDate(t.Failure117.Request.InsertDate, Date.DateStringType.Short),
                        InsertTime = Date.GetTime(t.Failure117.Request.InsertDate),

                        MDFDate = Date.GetPersianDate(t.Failure117.MDFDate, Date.DateStringType.Short),
                        MDFTime = t.Failure117.MDFDate.Value.Hour.ToString() + ":" + t.Failure117.MDFDate.Value.Minute.ToString(),

                        NetworkDate = Date.GetPersianDate(t.Failure117.NetworkDate, Date.DateStringType.Short),
                        NetworkTime = t.Failure117.NetworkDate.Value.Hour.ToString() + ":" + t.Failure117.NetworkDate.Value.Minute.ToString(),

                        SendToCableDate = t.SendToCabelDate.ToString(),
                        SendToCableTime = t.SendToCabelDate.Value.Hour.ToString() + ":" + t.SendToCabelDate.Value.Minute.ToString(),

                        RequestID = t.Failure117.Request.ID,
                        RowNo = t.RowNo,

                        Step = t.Failure117.Request.Status.RequestStep.StepTitle,
                        TelephoneNo = t.Failure117.Request.TelephoneNo,
                        FailureStatus = t.Failure117.Failure117FailureStatus.Title,
                        NetworkDescription = t.Failure117.NetworkComment,

                        CabinetNo = t.Failure117.CabinetNo,
                        CabinetMarkazi = t.Failure117.CabinetMarkazi,
                        PostEtesali = t.Failure117.PostEtesali,
                        PostNo = t.Failure117.PostNo

                    }
                    ).ToList();
            }
        }
        public static List<Failure117Requests> GetSendingFailure117Requests(DateTime? fromDate, DateTime? toDate, long? RequestIdFrom, long? RequestIdTo, List<int> CenterId, long? TelephoneNo, DateTime? EliminateFromDate, DateTime? EliminateToDate, int? RequestStep, string IdentityID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Failure117s
                    .GroupJoin(context.FailureForms, f => f.ID, ff => ff.FailureRequestID, (ff, f) => new { FailureForm = ff.FailureForms, Failure117 = f })
                    .SelectMany(t2 => t2.FailureForm.DefaultIfEmpty(), (t1, t2) => new { FailureForms = t2, Failure117s = t1 })

                    //.GroupJoin(context.Telephones, b => b.Buchts.SwitchPortID, t => t.SwitchPortID, (b, t) => new { Buchts = b, Telephones = t, CabinetInputs = b.CabinetInputs })
                    //.SelectMany(x => x.Telephones.DefaultIfEmpty(), (t1, t2) => new { Bucht = t1.Buchts, CabinetInput = t1.CabinetInputs, Telephone = t2 })

                    .Where(t => (!fromDate.HasValue || t.FailureForms.Failure117.Request.InsertDate >= fromDate)
                                    && (!toDate.HasValue || t.FailureForms.Failure117.Request.InsertDate <= toDate)
                                    && (!RequestIdTo.HasValue || t.FailureForms.Failure117.ID <= RequestIdTo)
                                    && (!RequestIdFrom.HasValue || t.FailureForms.Failure117.ID >= RequestIdFrom)
                                    && (CenterId.Count == 0 || CenterId.Contains(t.FailureForms.Failure117.Request.CenterID))
                                    && (!TelephoneNo.HasValue || t.FailureForms.Failure117.Request.TelephoneNo == TelephoneNo)
                                    && (!t.FailureForms.Failure117.Request.IsCancelation && !t.FailureForms.Failure117.Request.IsWaitingList)
                                    && (!EliminateFromDate.HasValue || t.FailureForms.Failure117.Request.EndDate >= EliminateFromDate)
                                    && (!EliminateToDate.HasValue || t.FailureForms.Failure117.Request.EndDate <= EliminateToDate)
                                    && ((int)DB.RequestStepFailure117.All == RequestStep || t.FailureForms.Failure117.Request.Status.RequestStep.ID == RequestStep)
                                    && (IdentityID == null || t.FailureForms.Failure117.Request.Customer.NationalCodeOrRecordNo == IdentityID)

                    ).Select(t => new Failure117Requests
                    {

                        CableDate = Date.GetPersianDate(t.FailureForms.CabelDate, Date.DateStringType.Short),
                        CableTime = t.FailureForms.CabelDate.Value.Hour.ToString() + ":" + t.FailureForms.CabelDate.Value.Minute.ToString(),

                        EndMDFDate = Date.GetPersianDate(t.FailureForms.Failure117.EndMDFDate, Date.DateStringType.Short),
                        EndMDFTime = t.FailureForms.Failure117.EndMDFDate.Value.Hour.ToString() + ":" + t.FailureForms.Failure117.EndMDFDate.Value.Minute.ToString(),

                        InsertDate = Date.GetPersianDate(t.FailureForms.Failure117.Request.InsertDate, Date.DateStringType.Short),
                        InsertTime = Date.GetTime(t.FailureForms.Failure117.Request.InsertDate),

                        MDFDate = Date.GetPersianDate(t.FailureForms.Failure117.MDFDate, Date.DateStringType.Short),
                        MDFTime = t.FailureForms.Failure117.MDFDate.Value.Hour.ToString() + ":" + t.FailureForms.Failure117.MDFDate.Value.Minute.ToString(),

                        NetworkDate = Date.GetPersianDate(t.FailureForms.Failure117.NetworkDate, Date.DateStringType.Short),
                        NetworkTime = t.FailureForms.Failure117.NetworkDate.Value.Hour.ToString() + ":" + t.FailureForms.Failure117.NetworkDate.Value.Minute.ToString(),

                        SendToCableDate = Date.GetPersianDate(t.FailureForms.SendToCabelDate, Date.DateStringType.Short),
                        SendToCableTime = t.FailureForms.SendToCabelDate.Value.Hour.ToString() + ":" + t.FailureForms.SendToCabelDate.Value.Minute.ToString(),

                        RequestID = t.FailureForms.Failure117.Request.ID,
                        RowNo = t.FailureForms.RowNo,

                        Step = t.FailureForms.Failure117.Request.Status.RequestStep.StepTitle,
                        TelephoneNo = t.FailureForms.Failure117.Request.TelephoneNo
                    }
                    ).ToList();
            }
        }
        public static IEnumerable GetCabinetInputFailure(DateTime? fromDate, DateTime? toDate, long? RequestIdFrom, long? RequestIdTo, List<int> CenterIds, long? TelephoneNo, List<int> LineStatusIDs, List<int> FailureStatusIDs, int FailureStatus, List<int> CabinetIDs, List<int> PostIDs, string IdentityId)
        {
            using (MainDataContext context = new MainDataContext())
            {

                string query = @"select 
                                      R.ID as RequestID
                                    , Center.CenterName as Center
                                    ,cast(F.EndMDFDate as Nvarchar(20)) as EndMDFDate
                                    ,cast( R.InsertDate as Nvarchar(20)) as InsertDate
                                    ,(Customer.FirstNameOrTitle + ' ' + Customer.LastName) as Customer
                                    ,Failure117FailureStatus.Title as FailureStatus
                                    ,Failure117LineStatus.Title as LineStatus
                                    ,s.Title as Step
                                    ,R.TelephoneNo 
                                    ,F.cabinetno as CabinetNumber
                                    ,F.CabinetMarkazi  as CabinetInputID
                                    ,F.PostNo as Post
                                    ,F.PostEtesali  as PostContact
                                    from Failure117 F
                                    Left join request R on R.ID = F.ID
                                    Left join Telephone T on T.Telephoneno = R.Telephoneno
                                    Left join SwitchPort sp on Sp.ID = T.SwitchPortID
                                    left join bucht b on Sp.ID = b.SwitchPortID
                                    left join cabinetInput ci on ci.ID = b.CabinetinputID
                                    Left join cabinet c on c.id = ci.CabinetID
                                    Left join PostContact pc on b.connectionID = pc.ID
                                    Left join Post p on p.ID = pc.PostID
                                    Left join Center on Center.ID = R.CenterID
                                    Left join Customer on Customer.ID = R.CustomerID
                                    Left join Failure117FailureStatus on F.FailureStatusID = Failure117FailureStatus.ID
                                    Left join Failure117LineStatus on F.LineStatusID = Failure117LineStatus.ID
                                    Left join Status s on R.StatusID = s.ID
                                    Left join RequestStep rs on rs.ID = s.RequestStepID
                                    where R.IsWaitingList = 0 AND R.IsCancelation = 0 ";
                if (TelephoneNo != null)
                    query += " and R.TelephoneNo = '" + TelephoneNo + "'";
                if (fromDate.HasValue)
                    query += " and CONVERT(date , R.InsertDate , 101) >= CONVERT(date, '" + fromDate.Value.ToShortDateString() + "', 101)";
                if (toDate.HasValue)
                    query += " and CONVERT(date , R.InsertDate , 101) <= CONVERT(date, '" + toDate.Value.ToShortDateString() + "', 101)";
                if (CenterIds.Count > 0)
                {
                    string CenterList = MakeTheList(CenterIds.ConvertAll<string>(x => x.ToString()));
                    query += " and R.CenterID in " + CenterList;
                }

                if (RequestIdFrom.HasValue)
                    query += " and I.RequestID  >= " + RequestIdFrom.ToString() + "";
                if (RequestIdTo.HasValue)
                    query += " and I.RequestID  <= " + RequestIdTo.ToString() + "";
                if (IdentityId != null)
                    query += " And Customer.NationalCodeOrRecordNo = '" + IdentityId + "'";
                if (LineStatusIDs.Count != 0)
                    query += " And F.LineStatusID in " + MakeTheList(LineStatusIDs.ConvertAll<string>(x => x.ToString()));
                if (FailureStatusIDs.Count != 0)
                    query += " And F.FailureStatusID in " + MakeTheList(FailureStatusIDs.ConvertAll<string>(x => x.ToString()));

                if (FailureStatus == (int)DB.Failure117RequestStatus.InProcess)
                    query += " and R.EndDate is  Null";
                if (FailureStatus == (int)DB.Failure117RequestStatus.Eliminate)
                    query += " and R.EndDate is not Null";
                if (CabinetIDs.Count != 0)
                    query += " And c.id in " + MakeTheList(CabinetIDs.ConvertAll<string>(x => x.ToString()));
                if (PostIDs.Count != 0)
                    query += " And p.ID in " + MakeTheList(PostIDs.ConvertAll<string>(x => x.ToString()));



                query += " order by R.ID";
                List<FailureFormRowInfo> result = context.ExecuteQuery<FailureFormRowInfo>(string.Format(query)).ToList();
                foreach (FailureFormRowInfo item in result)
                {

                    item.Step = RequestDB.GetRequestInfoByID(item.RequestID).CurrentStep;
                    if (item.EndMDFDate != null)
                    {
                        double compareResult = (DateTime.Parse(item.EndMDFDate) - DateTime.Parse(item.InsertDate)).TotalMinutes;
                        item.EliminateFailureDate = string.Format("{1} : {0}", Math.Round(compareResult % 60, 2).ToString(), Math.Round(compareResult / 60).ToString());
                        item.InsertDate = Date.GetPersianDate(DateTime.Parse(item.InsertDate), Date.DateStringType.DateTime);
                        item.EndMDFDate = Date.GetPersianDate(DateTime.Parse(item.EndMDFDate), Date.DateStringType.DateTime);

                    }
                    else
                    {
                        item.InsertDate = Date.GetPersianDate(DateTime.Parse(item.InsertDate), Date.DateStringType.DateTime);
                        item.EliminateFailureDate = "-";
                    }

                }
                return result;
            }
        }
        public static IEnumerable GetTotalCabinetInputFailure(DateTime? fromDate, DateTime? toDate, long? RequestIdFrom, long? RequestIdTo, List<int> CenterIds, long? TelephoneNo, int FailureStatus, string CabinetIdFrom, string CabinetIdTo, string IdentityId)
        {
            using (MainDataContext context = new MainDataContext())
            {

                string query = @"SELECT I.CabinetNumber,I.Post,COUNT(I.Post) as Count
                                     FROM (
                                     select 
                                      R.ID as RequestID
                                    , Center.CenterName as Center
                                    ,cast(F.EndMDFDate as Nvarchar(20)) as EndMDFDate
                                    ,cast( R.InsertDate as Nvarchar(20)) as InsertDate
                                    ,(Customer.FirstNameOrTitle + ' ' + Customer.LastName) as Customer
                                    ,Failure117FailureStatus.Title as FailureStatus
                                    ,Failure117LineStatus.Title as LineStatus
                                    ,s.Title as Step
                                    ,R.TelephoneNo 
                                    ,F.cabinetno as CabinetNumber
                                    ,F.CabinetMarkazi  as CabinetInputID
                                    ,F.PostNo as Post
                                    ,F.PostEtesali  as PostContact
                                    from Failure117 F
                                    Left join request R on R.ID = F.ID
                                    Left join Telephone T on T.Telephoneno = R.Telephoneno
                                    Left join SwitchPort sp on Sp.ID = T.SwitchPortID
                                    left join bucht b on Sp.ID = b.SwitchPortID
                                    left join cabinetInput ci on ci.ID = b.CabinetinputID
                                    Left join cabinet c on c.id = ci.CabinetID
                                    Left join PostContact pc on b.connectionID = pc.ID
                                    Left join Post p on p.ID = pc.PostID
                                    Left join Center on Center.ID = R.CenterID
                                    Left join Customer on Customer.ID = R.CustomerID
                                    Left join Failure117FailureStatus on F.FailureStatusID = Failure117FailureStatus.ID
                                    Left join Failure117LineStatus on F.LineStatusID = Failure117LineStatus.ID
                                    Left join Status s on R.StatusID = s.ID
                                    Left join RequestStep rs on rs.ID = s.RequestStepID
                                    where R.IsWaitingList = 0 AND R.IsCancelation = 0 ";
                if (TelephoneNo != null)
                    query += " and R.TelephoneNo = '" + TelephoneNo + "'";
                if (fromDate.HasValue)
                    query += " and CONVERT(date, R.InsertDate , 101) >= CONVERT(date, '" + fromDate.Value.ToShortDateString() + "', 101)";
                if (toDate.HasValue)
                    query += " and CONVERT(date, R.InsertDate , 101) <= CONVERT(date, '" + toDate.Value.ToShortDateString() + "', 101)";
                if (CenterIds.Count > 0)
                {
                    string CenterList = MakeTheList(CenterIds.ConvertAll<string>(x => x.ToString()));
                    query += " and R.CenterID in " + CenterList;
                }

                if (RequestIdFrom.HasValue)
                    query += " and I.RequestID  >= " + RequestIdFrom.ToString() + "";
                if (RequestIdTo.HasValue)
                    query += " and I.RequestID  <= " + RequestIdTo.ToString() + "";
                if (IdentityId != null)
                    query += " And Customer.NationalCodeOrRecordNo = '" + IdentityId + "'";

                if (FailureStatus == (int)DB.Failure117RequestStatus.InProcess)
                    query += " and R.EndDate is  Null";
                if (FailureStatus == (int)DB.Failure117RequestStatus.Eliminate)
                    query += " and R.EndDate is not Null";
                if (CabinetIdFrom != null)
                    query += " And c.id >= " + CabinetIdFrom;

                if (CabinetIdTo != null)
                    query += " And c.id <= " + CabinetIdTo;





                query += ") I group BY I.CabinetNumber,I.Post";
                List<FailureFormRowInfo> result = context.ExecuteQuery<FailureFormRowInfo>(string.Format(query)).ToList();
                //foreach (FailureFormRowInfo item in result)
                //{

                //    item.Step = RequestDB.GetRequestInfoByID(item.RequestID).CurrentStep;
                //    if (item.EndMDFDate != null)
                //    {
                //        double compareResult = (DateTime.Parse(item.EndMDFDate) - DateTime.Parse(item.InsertDate)).TotalMinutes;
                //        item.EliminateFailureDate = string.Format("{1} : {0}", Math.Round(compareResult % 60, 2).ToString(), Math.Round(compareResult / 60).ToString());
                //        item.InsertDate = Date.GetPersianDate(DateTime.Parse(item.InsertDate), Date.DateStringType.DateTime);
                //        item.EndMDFDate = Date.GetPersianDate(DateTime.Parse(item.EndMDFDate), Date.DateStringType.DateTime);

                //    }
                //    else
                //    {
                //        item.InsertDate = Date.GetPersianDate(DateTime.Parse(item.InsertDate), Date.DateStringType.DateTime);
                //        item.EliminateFailureDate = "-";
                //    }

                //}
                return result;
            }
        }

        private static string MakeTheList(List<string> arr)
        {


            string result = string.Empty;
            foreach (string item in arr)
            {
                result += item + ",";
            }
            result = result.Substring(0, result.Length - 1);
            result = new StringBuilder("(").Append(result).Append(")").ToString();
            return result;
        }

        public static List<FailureFormRowInfo> GetFailureTimeTableRequest(List<int> CenterIDs, byte Duration, int FailureStepID, DateTime? fromDate, DateTime? toDate)
        {
            List<FailureFormRowInfo> result = new List<FailureFormRowInfo>();
            DateTime? DurationDateTime = null;
            switch (Duration)
            {
                case (byte)DB.TimeTable.Daily:
                    {
                        DurationDateTime = DB.GetServerDate().AddHours(-1 * DB.GetServerDate().Hour).AddMinutes(-1 * DB.GetServerDate().Minute);
                        break;
                    }
                case (byte)DB.TimeTable.Mounthly:
                    {
                        DateTime today = DB.GetServerDate();
                        string todayShamsi = Date.GetPersianDate(today, Date.DateStringType.Short);
                        string[] todayShamsiAry = todayShamsi.Split('/');
                        int firstDayofMonth = Convert.ToInt32(todayShamsiAry[2]);
                        DateTime firstDayMiladi = today.AddDays(-(firstDayofMonth - 1));

                        DurationDateTime = firstDayMiladi.AddHours(-1 * DB.GetServerDate().Hour).AddMinutes(-1 * DB.GetServerDate().Minute);
                        break;
                    }
                case (byte)DB.TimeTable.Weekly:
                    {
                        DurationDateTime = DB.GetServerDate().AddDays(-1 * ((int)DB.GetServerDate().DayOfWeek + 2)).AddHours(-1 * DB.GetServerDate().Hour).AddMinutes(-1 * DB.GetServerDate().Minute);
                        break;
                    }
                case (byte)DB.TimeTable.Yearly:
                    {
                        DateTime today = DB.GetServerDate();
                        string todayShamsi = Date.GetPersianDate(today, Date.DateStringType.Short);
                        string[] todayShamsiAry = todayShamsi.Split('/');
                        int firstDayofMonth = Convert.ToInt32(todayShamsiAry[2]);
                        int MounthofYear = Convert.ToInt32(todayShamsiAry[1]);
                        DateTime firstDayMiladi = (MounthofYear <= 6) ? today.AddDays(-((MounthofYear - 1) * 31) - (firstDayofMonth - 1)) : today.AddDays(-((((MounthofYear - 1) - 6) * 30) + (6 * 31)) - (firstDayofMonth - 1));
                        DurationDateTime = firstDayMiladi.AddHours(-1 * DB.GetServerDate().Hour).AddMinutes(-1 * DB.GetServerDate().Minute);
                        break;
                    }
                case (byte)DB.TimeTable.All:
                    {
                        break;
                    }
            }
            using (MainDataContext context = new MainDataContext())
            {
                result = context.Failure117s
                    .Where(
                            t => ((int)DB.RequestStepFailure117.All == FailureStepID || t.Request.Status.RequestStep.ID == FailureStepID)
                                && (DurationDateTime == null || t.Request.InsertDate >= DurationDateTime)
                                && (CenterIDs.Count == 0 || CenterIDs.Contains(t.Request.CenterID))
                                && (fromDate == null || t.EndMDFDate >= fromDate)
                                && (toDate == null || t.EndMDFDate <= toDate)
                            ).Select
                            (
                            t => new FailureFormRowInfo
                            {

                                RequestID = t.ID,
                                Center = t.Request.Center.CenterName,
                                InsertDate = Date.GetPersianDate(t.Request.InsertDate, Date.DateStringType.DateTime),
                                InsertDateString = t.Request.InsertDate.ToString(),
                                Customer = t.Request.Customer.FirstNameOrTitle + " " + t.Request.Customer.LastName,
                                FailureStatus = t.Failure117FailureStatus.Title,
                                LineStatus = t.Failure117LineStatus.Title,
                                //                                NetworkOfficer
                                Step = t.Request.Status.RequestStep.StepTitle,
                                TelephoneNo = (!t.Request.TelephoneNo.HasValue) ? (long)0 : (long)t.Request.TelephoneNo,
                                EndMDFDate = Date.GetPersianDate(t.EndMDFDate, Date.DateStringType.DateTime),
                                EndMDFDateString = t.EndMDFDate.ToString(),

                            }
                           )
                         .ToList();
            }
            return result;
        }

        public static List<CabinetCapacity> GetCabinetCapacity(int? Capacity)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Cabinets
                    .Where(t => (!Capacity.HasValue || t.CabinetType.ID == Capacity))
                    .Select(t => new CabinetCapacity
                    {
                        CabinetNumber = t.CabinetNumber
                    }).ToList();

            }
        }

        public static List<HorizintalBuchtReportInfo> GetHorizintalBuchtStatistic(List<int> CenterIDs, int? SwitchPortStatusID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                //return context.SwitchPorts

                //    .GroupJoin(context.Buchts, s => s.ID, b => b.SwitchPortID, (s, b) => new { switchPort = s, bucht = b })
                //    .SelectMany(t1 => t1.bucht.DefaultIfEmpty(), (s, t1) => new { Bucht = t1, SwitchPort = s.switchPort })

                //    .GroupJoin(context.Telephones, s => s.SwitchPort.ID, t => t.SwitchPortID, (s, t) => new { telephone = t, bucht = s.Bucht ,switchport = s.SwitchPort})
                //    .SelectMany(t2 => t2.telephone.DefaultIfEmpty(), (b, t2) => new { Telephone = t2, Bucht = b.bucht,SwitchPort = b.switchport  })

                //    .Where(t => (CenterIDs.Count == 0 || CenterIDs.Contains(t.Telephone.CenterID))
                //        && (!SwitchPortStatusID.HasValue || t.SwitchPort.Status == SwitchPortStatusID))

                //    .Select(t => new HorizintalBuchtReportInfo
                //    {
                //        BuchtID = t.Bucht.ID,
                //        BuchtNo = t.Bucht.BuchtNo,
                //        CenterName = t.Telephone.Center.CenterName,
                //        PortNo = t.Bucht.SwitchPort.PortNo,
                //        SwitchPortStatus = t.Bucht.SwitchPort.Status,
                //        TelephoneNo = t.Telephone.TelephoneNo
                //    }).ToList();
                string query = @"select Bucht.ID as BuchtID,Bucht.BuchtNo,Center.CenterName ,SwitchPort.PortNo,SwitchPort.[Status] as SwitchPortStatus,Telephone.TelephoneNo
                                    FROM switchport
                                    left JOIN bucht on bucht.switchportid = switchport.id
                                    LEFT JOIN telephone on telephone.switchportid = switchport.id
                                    LEFT JOIN center on center.id = telephone.centerid
                                    WHERE 1=1";
                if (CenterIDs.Count > 0)
                    query += " AND Telephone.CenterID in " + MakeTheList(CenterIDs.ConvertAll(x => x.ToString()));
                if (SwitchPortStatusID != null)
                    query += " AND SwitchPort.Status = " + SwitchPortStatusID.ToString();
                return context.ExecuteQuery<HorizintalBuchtReportInfo>(string.Format(query)).ToList();
            }
        }

        public static List<ResignationLinesStatisticReport> GetResignationLinesStatistic(List<int> CenterIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Buchts
                    .GroupJoin(context.Telephones, sp => sp.SwitchPort.ID, t => t.SwitchPortID, (sp, t) => new { telephone = t, bucht = sp })
                    .SelectMany(t2 => t2.telephone.DefaultIfEmpty(), (t, t2) => new { Telephone = t2, Bucht = t.bucht })

                    .Where(t => (CenterIDs.Count == 0 || CenterIDs.Contains(t.Telephone.CenterID)))
                    .Select(t => new ResignationLinesStatisticReport
                    {
                        BuchtID = "ام دی اف:" + t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Number.ToString() + //DB.GetDescription(t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Description) +
                                                                            "ردیف:" + t.Bucht.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString() +
                                                                            "طبقه:" + t.Bucht.VerticalMDFRow.VerticalRowNo.ToString() +
                                                                            "اتصالی:" + t.Bucht.BuchtNo.ToString(),
                        Cabinet = t.Bucht.CabinetInput.Cabinet.CabinetNumber,
                        CabinetInput = t.Bucht.CabinetInput.InputNumber,
                        CenterName = t.Telephone.Center.CenterName,
                        CustomerName = t.Telephone.Customer.FirstNameOrTitle + " " + t.Telephone.Customer.LastName,
                        CustomerID = t.Telephone.Customer.ID.ToString(),
                        HorizintalMDFID = t.Telephone.SwitchPort.MDFHorizentalID,
                        PortNo = t.Telephone.SwitchPort.PortNo,
                        Post = t.Bucht.PostContact.Post.Number,
                        PostContact = t.Bucht.PostContact.ConnectionNo,
                        SwitchPortID = t.Telephone.SwitchPort.ID,
                        TelephoneNo = t.Telephone.TelephoneNo,
                        BuchtStatus = t.Bucht.Status.ToString(),
                        PCM = "رک:" + t.Bucht.PCMPort.PCM.PCMShelf.PCMRock.Number.ToString() + " " + "شلف:" + t.Bucht.PCMPort.PCM.PCMShelf.Number.ToString() + " " + "کارت:" + t.Bucht.PCMPort.PCM.Card.ToString() + " " + "پورت:" + t.Bucht.PCMPort.PortNumber.ToString(),
                        PCMType = t.Bucht.PCMPort.PCM.PCMType.Name

                    }).ToList();
            }
        }



        public static List<PCMInPost> GetPCMInPost(List<int> CenterIDs, List<int> CabinetIDs, int? PCMCount)
        {
            using (MainDataContext context = new MainDataContext())
            {
                IQueryable<PCMInPost> PCMInPost = context.Posts
                    .GroupJoin(context.PostContacts, P => P.ID, pc => pc.PostID, (p, pc) => new { post = p, postcontact = pc })
                    .SelectMany(t1 => t1.postcontact.DefaultIfEmpty(), (pc, t1) => new { Post = pc.post, PostContact = t1 })

                    .GroupJoin(context.Buchts, pc => pc.PostContact.ID, b => b.ConnectionID, (pc, b) => new { postcontact = pc.PostContact, bucht = b })
                    .SelectMany(t2 => t2.bucht.DefaultIfEmpty(), (b, t2) => new { Bucht = t2, PostContact = b.postcontact })

                    .GroupJoin(context.Telephones, sp => sp.Bucht.SwitchPortID, t => t.SwitchPortID, (sp, t) => new { telephone = t, bucht = sp.Bucht })
                    .SelectMany(t2 => t2.telephone.DefaultIfEmpty(), (t, t2) => new { Telephone = t2, Bucht = t.bucht })

                    .Where(t => (CenterIDs.Count == 0 || CenterIDs.Contains(t.Bucht.CabinetInput.Cabinet.CenterID))
                                && (CabinetIDs.Count == 0 || CabinetIDs.Contains(t.Bucht.CabinetInput.Cabinet.CabinetNumber))
                                && (t.Bucht.PostContact.ConnectionType == (byte)DB.PostContactConnectionType.PCMRemote))
                        .GroupBy(t => new { PostNumber = t.Bucht.PostContact.Post.Number.ToString(), Center = t.Bucht.CabinetInput.Cabinet.Center.CenterName })

                        .Select(t => new PCMInPost
                        {
                            PostNumber = t.Key.PostNumber.ToString(),
                            PCMCount = t.Key.PostNumber.Count(),
                            CenterName = t.Key.Center
                        })
                        .Where(t => (!PCMCount.HasValue || t.PCMCount > PCMCount));

                return PCMInPost.ToList();



            }
        }

        public static List<ReleaseDocuments> GetReleasedDocuments(List<int> CenterIDs, List<int> ReasonTypeIDs, DateTime? FromEnterDate, DateTime? ToEnterDate, DateTime? FromExitDate, DateTime? ToExitDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return
                    context.WaitingLists
                    .GroupJoin(context.Requests, w => w.RequestID, r => r.ID, (w, r) => new { waitinglist = w, Request = r })
                    .SelectMany(t1 => t1.Request.DefaultIfEmpty(), (w, t1) => new { Request = t1, WaitingList = w })

                    .GroupJoin(context.Customers, r => r.Request.CustomerID, c => c.ID, (r, c) => new { Rquest = r.Request, Customer = c, Waitingl = r.WaitingList })
                    .SelectMany(t2 => t2.Customer.DefaultIfEmpty(), (c, t2) => new { Request = c.Rquest, Customer = t2, Waitingl = c.Waitingl.waitinglist })

                    .GroupJoin(context.Telephones, c => c.Customer.ID, t => t.CustomerID, (c, t) => new { customer = c, telephone = t })
                    .SelectMany(t3 => t3.telephone.DefaultIfEmpty(), (c, t3) => new { Customer = c.customer, Telephone = t3, WaitingList = c.customer.Waitingl })

                    .Where(t => (CenterIDs.Count == 0 || CenterIDs.Contains(t.Customer.Request.CenterID))
                    && (ReasonTypeIDs.Count == 0 || ReasonTypeIDs.Contains(t.WaitingList.ReasonID ?? 0))
                    && (!FromEnterDate.HasValue || t.WaitingList.InsertDate.Date >= FromEnterDate)
                    && (!ToEnterDate.HasValue || t.WaitingList.InsertDate.Date <= ToEnterDate)
                     && (!FromExitDate.HasValue || t.WaitingList.ExitDate >= FromExitDate)
                    && (!ToExitDate.HasValue || t.WaitingList.ExitDate <= ToExitDate)
                    && (t.WaitingList.Status))
                    .Select(t => new ReleaseDocuments
                    {
                        Address = t.Telephone.Address.AddressContent,
                        CenterName = t.Telephone.Center.CenterName,
                        CustomerName = t.Customer.Customer.FirstNameOrTitle + " " + t.Customer.Customer.LastName,
                        EnterDateTime = t.WaitingList.InsertDate,
                        ExitDateTime = t.WaitingList.ExitDate,
                        FieldID = t.Customer.Customer.CustomerID,
                        ReasonTypeName = DB.GetEnumDescriptionByValue(typeof(DB.WaitingListReason), t.WaitingList.ReasonID),
                        TelephoneNo = t.Telephone.TelephoneNo
                    })
                    .ToList();


            }
        }

        public static List<ReleaseDocuments> GetChangeBuchts(List<int> CenterIDs, List<int> ReasonTypeIDs, DateTime? FromEnterDate, DateTime? ToEnterDate)
        {
            using (MainDataContext context = new MainDataContext())
            {

            }

            List<ReleaseDocuments> xx = new List<ReleaseDocuments>();
            return xx;
        }

        public static List<Failure117PerformanceTotal> GetFailure117Performance(List<int> CenterIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Failure117s.Where(t => (CenterIDs.Count == 0 || CenterIDs.Contains(t.Request.CenterID)))
                    .Select(t => new Failure117PerformanceTotal
                    {
                        InsertDate_Request = t.Request.InsertDate,
                        MDFDate_Request = t.MDFDate,
                        Status_Request = t.Request.StatusID,
                        NetworkDate_Failure117 = t.NetworkDate,
                        SaloonDate_Failure117 = t.SaloonDate,
                        EndMDFDate = t.EndMDFDate
                    }).ToList();

            }
        }

        public static List<Failure117PerformanceTotal> GetFailure117FormPerformance(List<int> CenterIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.FailureForms.Where(t => (CenterIDs.Count == 0 || CenterIDs.Contains(t.Failure117.Request.CenterID)))
                    .Select(t => new Failure117PerformanceTotal
                    {
                        InserDate_FailureForm = t.FormInsertDate
                    }).ToList();

            }
        }

        public static List<RequestPaymentReport> GetRequestPayment(List<long> RequestIDs, DateTime? fromDate, DateTime? toDate, List<int> centers, long telephoneNo)
        {



            if (toDate.HasValue)
                toDate = toDate.Value.AddDays(1);
            using (MainDataContext context = new MainDataContext())
            {
                return context.RequestPayments
                    .Where(t =>

                                 (!fromDate.HasValue || t.Request.EndDate >= fromDate)
                                 && (!toDate.HasValue || t.Request.EndDate <= toDate)
                                 && (telephoneNo == 0 || t.Request.TelephoneNo == telephoneNo)
                               && (RequestIDs.Count == 0 || RequestIDs.Contains(t.RequestID))
                              && (centers.Count == 0 || centers.Contains(t.Request.CenterID))
                              && (t.IsPaid == true)
                           )
                    .Select(t => new RequestPaymentReport
                    {
                        AccountNo = t.AccountNo,
                        Amount = t.AmountSum,
                        BranchName = t.BankBranch.BranchName,
                        BankName = t.BankBranch.Bank.BankName,
                        FicheDate = t.FicheDate,
                        PersianFicheDate = t.FicheDate.ToPersian(Date.DateStringType.Short).ToString(),
                        Office = t.RecieverPostOfficeCode + "-" + t.RecieverPostOfficeRecordNo,
                        RequestID = t.RequestID,
                        FicheNo = t.FicheNunmber.ToString()
                    })
                    .ToList();

            }
        }

        public static List<DayeriWiringNetwork> GetDayeriWiringNetwork(long RequestID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ExecuteQuery<DayeriWiringNetwork>("execute [dbo].[Report.DayeriWiringNetwork] " + RequestID).ToList();
            }
        }

        //TODO:rad Add
        public static List<DayeriWiringNetwork> GetDayeriWiringNetwork(List<long> requestIds)
        {
            using (MainDataContext contexte = new MainDataContext())
            {
                List<DayeriWiringNetwork> result = new List<DayeriWiringNetwork>();
                string requests = (requestIds != null && requestIds.Count != 0) ? string.Join(",", requestIds.ToArray()) : "";
                result = contexte.uspReportDayeriWiringNetwork(requests)
                                 .Select(dwn => new DayeriWiringNetwork
                                                  {
                                                      CabinetinputNo = dwn.CabinetinputNo,
                                                      CabinetNo = dwn.CabinetNo,
                                                      Card = dwn.Card,
                                                      CenterName = dwn.CenterName,
                                                      CorrespondenceAddress = dwn.CorrespondenceAddress,
                                                      CustomerName = dwn.CustomerName,
                                                      Etesali = dwn.Etesali,
                                                      FieldID = dwn.FieldID,
                                                      InstallAddress = dwn.InstallAddress,
                                                      MobileNo = dwn.MobileNo,
                                                      NearestTelephoneNo = dwn.NearestTelephon,
                                                      PCM = dwn.PCM,
                                                      PersonType = dwn.PersonType,
                                                      Port = dwn.Port,
                                                      PostalCode = dwn.PostalCode,
                                                      PostEtesaliNo = dwn.PostEtesaliNo,
                                                      PostNo = dwn.PostNo,
                                                      Radif = dwn.Radif,
                                                      RegionName = dwn.RegionName,
                                                      Rock = dwn.Rock,
                                                      Shelf = dwn.Shelf,
                                                      Tabagheh = dwn.Tabagheh,
                                                      TelephoneNo = dwn.TelephoneNo,
                                                      TelephoneType = dwn.TelephoneType,
                                                      UNO = dwn.UNO,
                                                      UrgentTelNo = dwn.UrgentTelNo
                                                  }
                                        )
                                  .ToList();

                //برخی از فیلدها باید قبل از ارسال به گزارش مقادیرشان برررسی شود
                result.ForEach((dwn) =>
                                        {
                                            dwn.UNO = !string.IsNullOrEmpty(dwn.UNO) ? "*" : dwn.UNO;
                                            dwn.PCM = !string.IsNullOrEmpty(dwn.PCM) ? "*" : dwn.PCM;
                                            dwn.PersonType = !string.IsNullOrEmpty(dwn.PersonType) ? Helpers.GetEnumDescription(int.Parse(dwn.PersonType), typeof(DB.PersonType)) : string.Empty;
                                        }
                              );
                return result;
            }
        }

        //TODO:rad
        public static List<DayeriWiringNetwork> GetDayeriMDFWiring(List<long> requestIds)
        {
            using (MainDataContext context = new MainDataContext())
            {
                List<DayeriWiringNetwork> result = new List<DayeriWiringNetwork>();
                var query = context.Requests.Join(context.Telephones, re => re.TelephoneNo, t => t.TelephoneNo, (re, t) => new { Request = re, Telephone = t })
                                            .Join(context.Buchts, a => a.Telephone.SwitchPortID, bu => bu.SwitchPortID, (a, bu) => new { Request = a.Request, Telephone = a.Telephone, Bucht = bu })
                                            .GroupJoin(context.ADSLPAPPorts, a => a.Request.TelephoneNo, pap => pap.TelephoneNo, (a, pap) => new { Request = a.Request, Telephone = a.Telephone, Bucht = a.Bucht, Adsls = pap })
                                            .SelectMany(a => a.Adsls.DefaultIfEmpty(), (a, Adsl) => new { Request = a.Request, Telephone = a.Telephone, Bucht = a.Bucht, Adsl = Adsl })
                                            .Where(a =>
                                                        (requestIds.Count == 0 || requestIds.Contains(a.Request.ID))
                                                  )
                                            .AsQueryable();
                result = query.Select(re => new DayeriWiringNetwork
                                                {
                                                    TelephoneNo = re.Telephone.TelephoneNo.ToString(),
                                                    Radif = re.Bucht.ColumnNo.ToString(),
                                                    Tabagheh = re.Bucht.RowNo.ToString(),
                                                    Etesali = re.Bucht.BuchtNo.ToString(),
                                                    //NewPCMCabinetInputColumnNo = re.Bucht.BuchtTypeID == (int)DB.BuchtType.InLine ? context.Buchts
                                                    //                                    .Where(bu2 => (bu2.CabinetInputID == re.Bucht.CabinetInputID && bu2.BuchtTypeID == (int)DB.BuchtType.CustomerSide))
                                                    //                                    .Select(bu2 => bu2.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo)
                                                    //                                    .SingleOrDefault() : (int?)null,
                                                    //NewPCMCabinetInputRowNo = re.Bucht.BuchtTypeID == (int)DB.BuchtType.InLine ? context.Buchts
                                                    //                                 .Where(bu3 => (bu3.CabinetInputID == re.Bucht.CabinetInputID && bu3.BuchtTypeID == (int)DB.BuchtType.CustomerSide))
                                                    //                                 .Select(bu3 => bu3.VerticalMDFRow.VerticalRowNo)
                                                    //                                 .SingleOrDefault() : (int?)null,
                                                    //NewPCMCabinetInputBuchtNo = re.Bucht.BuchtTypeID == (int)DB.BuchtType.InLine ? context.Buchts
                                                    //                                   .Where(bu4 => bu4.CabinetInputID == re.Bucht.CabinetInputID && bu4.BuchtTypeID == (int)DB.BuchtType.CustomerSide)
                                                    //                                   .Select(bu4 => bu4.BuchtNo)
                                                    //                                   .SingleOrDefault() : (long?)null,

                                                    NewPCMCabinetInputColumnNo = re.Bucht.Bucht2.ColumnNo,
                                                    NewPCMCabinetInputRowNo = re.Bucht.Bucht2.RowNo,
                                                    NewPCMCabinetInputBuchtNo = re.Bucht.Bucht2.BuchtNo,
                                                    AdslColumnNo = re.Adsl.RowNo,
                                                    AdslRowNo = re.Adsl.ColumnNo,
                                                    AdslBuchtNo = re.Adsl.BuchtNo,
                                                    CabinetinputNo = re.Bucht.CabinetInput.InputNumber.ToString(),
                                                    CabinetNo = re.Bucht.CabinetInput.Cabinet.CabinetNumber.ToString()
                                                }
                                     )
                              .ToList();
                return result;
            }
        }

        //TODO:rad
        public static List<DayeriWiringNetwork> GetDischargeConfirmByMDF(List<long> requestIds)
        {
            using (MainDataContext context = new MainDataContext())
            {
                List<DayeriWiringNetwork> result = new List<DayeriWiringNetwork>();
                var query = context.TakePossessions.Join(context.Buchts, tp => tp.BuchtID, bu => bu.ID, (tp, bu) => new { TakePossession = tp, Bucht = bu })
                                                   .GroupJoin(context.ADSLPAPPorts, a => a.TakePossession.OldTelephone, paps => paps.TelephoneNo, (a, paps) => new { TakePossession = a.TakePossession, Bucht = a.Bucht, Adsls = paps })
                                                   .SelectMany(a => a.Adsls.DefaultIfEmpty(), (a, pap) => new { Adsl = pap, Bucht = a.Bucht, TakePossession = a.TakePossession })
                                                   .Where(tp =>
                                                                (requestIds.Count == 0 || requestIds.Contains(tp.TakePossession.ID))
                                                         )
                                                   .AsQueryable();
                result = query.Select(tp => new DayeriWiringNetwork
                                                {
                                                    TelephoneNo = tp.TakePossession.OldTelephone.ToString(),
                                                    Radif = tp.Bucht.ColumnNo.ToString(),
                                                    Tabagheh = tp.Bucht.RowNo.ToString(),
                                                    Etesali = tp.Bucht.BuchtNo.ToString(),
                                                    //NewPCMCabinetInputColumnNo = tp.Bucht.BuchtTypeID == (int)DB.BuchtType.InLine ? context.Buchts
                                                    //                                    .Where(bu2 => bu2.CabinetInputID == tp.Bucht.CabinetInputID && bu2.BuchtTypeID == (int)DB.BuchtType.CustomerSide)
                                                    //                                    .Select(bu2 => bu2.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo)
                                                    //                                    .SingleOrDefault() : (int?)null,
                                                    //NewPCMCabinetInputRowNo = tp.Bucht.BuchtTypeID == (int)DB.BuchtType.InLine ? context.Buchts
                                                    //                                 .Where(bu3 => bu3.CabinetInputID == tp.Bucht.CabinetInputID && bu3.BuchtTypeID == (int)DB.BuchtType.CustomerSide)
                                                    //                                 .Select(bu3 => bu3.VerticalMDFRow.VerticalRowNo)
                                                    //                                 .SingleOrDefault() : (int?)null,
                                                    //NewPCMCabinetInputBuchtNo = tp.Bucht.BuchtTypeID == (int)DB.BuchtType.InLine ? context.Buchts
                                                    //                                   .Where(bu4 => bu4.CabinetInputID == tp.Bucht.CabinetInputID && bu4.BuchtTypeID == (int)DB.BuchtType.CustomerSide)
                                                    //                                   .Select(bu4 => bu4.BuchtNo)
                                                    //                                   .SingleOrDefault() : (long?)null,

                                                    NewPCMCabinetInputColumnNo = tp.Bucht.Bucht2.ColumnNo,
                                                    NewPCMCabinetInputRowNo = tp.Bucht.Bucht2.RowNo,
                                                    NewPCMCabinetInputBuchtNo = tp.Bucht.Bucht2.BuchtNo,

                                                    AdslColumnNo = tp.Adsl.RowNo,
                                                    AdslRowNo = tp.Adsl.ColumnNo,
                                                    AdslBuchtNo = tp.Adsl.BuchtNo,
                                                    CabinetinputNo = tp.Bucht.CabinetInput.InputNumber.ToString(),
                                                    CabinetNo = tp.Bucht.CabinetInput.Cabinet.CabinetNumber.ToString()
                                                }
                                     )
                              .ToList();
                return result;
            }
        }

        //TODO:rad
        public static List<ChangeLocationCenterInfo> GetChangeNoMDFWiring(List<long> requestIds)
        {
            using (MainDataContext context = new MainDataContext())
            {
                List<ChangeLocationCenterInfo> result = new List<ChangeLocationCenterInfo>();

                var query = context.ChangeNos.GroupJoin(context.ADSLPAPPorts, cn => cn.OldTelephoneNo, pap => pap.TelephoneNo, (cn, pap) => new { ChangeNo = cn, Adsls = pap })
                                             .SelectMany(a => a.Adsls.DefaultIfEmpty(), (cn, pap) => new { ChangeNo = cn.ChangeNo, Adsl = pap })
                                             .Join(context.Buchts, a => a.ChangeNo.OldBuchtID, bu => bu.ID, (a, bu) => new { Adsl = a.Adsl, ChangeNo = a.ChangeNo, OldBucht = bu })
                                             .Where(cn => requestIds.Count == 0 || requestIds.Contains(cn.ChangeNo.ID))
                                             .AsQueryable();

                result = query.Select(cn => new ChangeLocationCenterInfo
                                                {
                                                    OldTelephoneNo = cn.ChangeNo.OldTelephoneNo.ToString(),
                                                    NewTelephoneNo = cn.ChangeNo.NewTelephoneNo.ToString(),

                                                    OldBuchtRadif = cn.OldBucht.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString(),
                                                    OldBuchtTabaghe = cn.OldBucht.VerticalMDFRow.VerticalRowNo.ToString(),
                                                    OldBuchtEttsali = cn.OldBucht.BuchtNo.ToString(),

                                                    NewPCMCabinetInputColumnNo = cn.OldBucht.BuchtTypeID == (int)DB.BuchtType.InLine ? context.Buchts
                                                                                        .Where(bu => bu.CabinetInputID == cn.OldBucht.CabinetInputID && bu.BuchtTypeID == (int)DB.BuchtType.CustomerSide)
                                                                                        .Select(bu => bu.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo)
                                                                                        .SingleOrDefault() : (int?)null,
                                                    NewPCMCabinetInputRowNo = cn.OldBucht.BuchtTypeID == (int)DB.BuchtType.InLine ? context.Buchts
                                                                                     .Where(bu2 => bu2.CabinetInputID == cn.OldBucht.CabinetInputID && bu2.BuchtTypeID == (int)DB.BuchtType.CustomerSide)
                                                                                     .Select(bu2 => bu2.VerticalMDFRow.VerticalRowNo)
                                                                                     .SingleOrDefault() : (int?)null,
                                                    NewPCMCabinetInputBuchtNo = cn.OldBucht.BuchtTypeID == (int)DB.BuchtType.InLine ? context.Buchts
                                                                                       .Where(bu3 => bu3.CabinetInputID == cn.OldBucht.CabinetInputID && bu3.BuchtTypeID == (int)DB.BuchtType.CustomerSide)
                                                                                       .Select(bu3 => bu3.BuchtNo)
                                                                                       .SingleOrDefault() : (long?)null,
                                                    AdslColumnNo = cn.Adsl.RowNo,
                                                    AdslRowNo = cn.Adsl.ColumnNo,
                                                    AdslBuchtNo = cn.Adsl.BuchtNo,
                                                    MdfDescription = string.Empty
                                                }
                                     )
                              .ToList();

                //در روال تعویض شماره ، بوخت تغییر نمیکند پس باید بوخت جدید مقدار پیش فرض بگیرد
                result.ForEach((cn) =>
                                    {
                                        cn.NewBuchtEttesali = "---";
                                        cn.NewBuchtRadif = "---";
                                        cn.NewBuchtTabaghe = "---";
                                    }
                              );
                return result;
            }
        }

        //TODO:rad
        public static List<ChangeLocationCenterInfo> GetBuchtSwitchingMDF(List<long> requestIds)
        {
            using (MainDataContext context = new MainDataContext())
            {
                List<ChangeLocationCenterInfo> result = new List<ChangeLocationCenterInfo>();
                var query = context.BuchtSwitchings.Join(context.Requests, bs => bs.ID, re => re.ID, (bs, re) => new { Request = re, BuchtSwitching = bs })
                                                   .GroupJoin(context.ADSLPAPPorts, a => a.Request.TelephoneNo, pap => pap.TelephoneNo, (a, pap) => new { Adsls = pap, Request = a.Request, BuchtSwitching = a.BuchtSwitching })
                                                   .SelectMany(a => a.Adsls.DefaultIfEmpty(), (a, pap) => new { Adsl = pap, Request = a.Request, BuchtSwitching = a.BuchtSwitching })
                                                   .Where(bs => requestIds.Count == 0 || requestIds.Contains(bs.BuchtSwitching.ID))
                                                   .AsQueryable();
                result = query.Select(bs => new ChangeLocationCenterInfo
                                                {
                                                    TelephoneNo = bs.Request.TelephoneNo.ToString(),

                                                    NewBuchtRadif = bs.BuchtSwitching.Bucht1.ColumnNo.ToString(),
                                                    NewBuchtTabaghe = bs.BuchtSwitching.Bucht1.RowNo.ToString(),
                                                    NewBuchtEttesali = bs.BuchtSwitching.Bucht1.BuchtNo.ToString(),

                                                    OldBuchtRadif = bs.BuchtSwitching.Bucht.ColumnNo.ToString(),
                                                    OldBuchtTabaghe = bs.BuchtSwitching.Bucht.RowNo.ToString(),
                                                    OldBuchtEttsali = bs.BuchtSwitching.Bucht.BuchtNo.ToString(),
                                                    //new
                                                    NewPCMCabinetInputColumnNo = bs.BuchtSwitching.Bucht1.Bucht2.ColumnNo,
                                                    NewPCMCabinetInputRowNo = bs.BuchtSwitching.Bucht1.Bucht2.RowNo,
                                                    NewPCMCabinetInputBuchtNo = bs.BuchtSwitching.Bucht1.Bucht2.BuchtNo,
                                                    //NewPCMCabinetInputColumnNo = bs.BuchtSwitching.Bucht1.BuchtTypeID == (int)DB.BuchtType.InLine ? context.Buchts
                                                    //                                  .Where(bu => bu.CabinetInputID == bs.BuchtSwitching.Bucht1.CabinetInputID && bu.BuchtTypeID == (int)DB.BuchtType.CustomerSide)
                                                    //                                  .Select(bu => bu.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo)
                                                    //                                  .SingleOrDefault() : default(int?),
                                                    //NewPCMCabinetInputRowNo = bs.BuchtSwitching.Bucht1.BuchtTypeID == (int)DB.BuchtType.InLine ? context.Buchts
                                                    //                               .Where(bu2 => bu2.CabinetInputID == bs.BuchtSwitching.Bucht1.CabinetInputID && bu2.BuchtTypeID == (int)DB.BuchtType.CustomerSide)
                                                    //                               .Select(bu2 => bu2.VerticalMDFRow.VerticalRowNo)
                                                    //                               .SingleOrDefault() : default(int?),
                                                    //NewPCMCabinetInputBuchtNo = bs.BuchtSwitching.Bucht1.BuchtTypeID == (int)DB.BuchtType.InLine ? context.Buchts
                                                    //                                 .Where(bu3 => bu3.CabinetInputID == bs.BuchtSwitching.Bucht1.CabinetInputID && bu3.BuchtTypeID == (int)DB.BuchtType.CustomerSide)
                                                    //                                 .Select(bu3 => bu3.BuchtNo)
                                                    //                                 .SingleOrDefault() : default(long?),

                                                    //old
                                                    OldPCMCabinetInputColumnNo = bs.BuchtSwitching.Bucht.Bucht2.ColumnNo,
                                                    OldPCMCabinetInputRowNo = bs.BuchtSwitching.Bucht.Bucht2.RowNo,
                                                    OldPCMCabinetInputBuchtNo = bs.BuchtSwitching.Bucht.Bucht2.BuchtNo,

                                                    //OldPCMCabinetInputColumnNo = bs.BuchtSwitching.Bucht.BuchtTypeID == (int)DB.BuchtType.InLine ? context.Buchts
                                                    //                                      .Where(bu => bu.CabinetInputID == bs.BuchtSwitching.Bucht.CabinetInputID && bu.BuchtTypeID == (int)DB.BuchtType.CustomerSide)
                                                    //                                      .Select(bu => bu.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo)
                                                    //                                      .SingleOrDefault() : default(int?),
                                                    //OldPCMCabinetInputRowNo = bs.BuchtSwitching.Bucht.BuchtTypeID == (int)DB.BuchtType.InLine ? context.Buchts
                                                    //                               .Where(bu2 => bu2.CabinetInputID == bs.BuchtSwitching.Bucht.CabinetInputID && bu2.BuchtTypeID == (int)DB.BuchtType.CustomerSide)
                                                    //                               .Select(bu2 => bu2.VerticalMDFRow.VerticalRowNo)
                                                    //                               .SingleOrDefault() : default(int?),
                                                    //OldPCMCabinetInputBuchtNo = bs.BuchtSwitching.Bucht.BuchtTypeID == (int)DB.BuchtType.InLine ? context.Buchts
                                                    //                                 .Where(bu3 => bu3.CabinetInputID == bs.BuchtSwitching.Bucht.CabinetInputID && bu3.BuchtTypeID == (int)DB.BuchtType.CustomerSide)
                                                    //                                 .Select(bu3 => bu3.BuchtNo)
                                                    //                                 .SingleOrDefault() : default(long?),


                                                    NewOtherBuchtRadif = bs.BuchtSwitching.Bucht2.ColumnNo,
                                                    NewOtherBuchtTabaghe = bs.BuchtSwitching.Bucht2.RowNo,
                                                    NewOtherBuchtEttesali = (long)bs.BuchtSwitching.Bucht2.BuchtNo,

                                                    AdslColumnNo = bs.Adsl.RowNo,
                                                    AdslRowNo = bs.Adsl.ColumnNo,
                                                    AdslBuchtNo = bs.Adsl.BuchtNo,
                                                    MdfDescription = string.Empty

                                                }
                                   )
                            .ToList();
                return result;
            }
        }

        //TODO:rad
        /// <summary>
        /// گزارش سیم بندی ام دی اف در مبدا
        /// </summary>
        /// <param name="requestIds"></param>
        /// <returns></returns>
        public static List<ChangeLocationCenterInfo> GetChangeLocationCenterToCenterMdfWriringOfSourceCenter(List<long> requestIds)
        {
            using (MainDataContext context = new MainDataContext())
            {
                List<ChangeLocationCenterInfo> result = new List<ChangeLocationCenterInfo>();
                var query = context.ChangeLocations.Join(context.Requests, cl => cl.ID, re => re.ID, (cl, re) => new { ChangeLocation = cl, Request = re })
                                                   .GroupJoin(context.ADSLPAPPorts, a => a.ChangeLocation.OldTelephone, paps => paps.TelephoneNo, (a, paps) => new { Adsls = paps, Request = a.Request, ChangeLocation = a.ChangeLocation })
                                                   .SelectMany(a => a.Adsls.DefaultIfEmpty(), (a, pap) => new { Adsl = pap, Request = a.Request, ChangeLocation = a.ChangeLocation })
                                                   .Where(cl =>
                                                              (cl.ChangeLocation.ChangeLocationTypeID == (int)DB.ChangeLocationCenterType.CenterToCenter) &&
                                                              (requestIds.Count == 0 || requestIds.Contains(cl.ChangeLocation.ID))
                                                         )
                                                   .AsQueryable();
                result = query.Select(cl => new ChangeLocationCenterInfo
                                                {
                                                    NewTelephoneNo = cl.ChangeLocation.NewTelephone.ToString(),
                                                    OldTelephoneNo = cl.ChangeLocation.OldTelephone.ToString(),

                                                    OldBuchtRadif = cl.ChangeLocation.Bucht.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString(),
                                                    OldBuchtTabaghe = cl.ChangeLocation.Bucht.VerticalMDFRow.VerticalRowNo.ToString(),
                                                    OldBuchtEttsali = cl.ChangeLocation.Bucht.BuchtNo.ToString(),




                                                    OldCaffu = cl.ChangeLocation.Bucht.CabinetInput.Cabinet.CabinetNumber.ToString(),
                                                    OldPostContactmarkazi = cl.ChangeLocation.Bucht.CabinetInput.InputNumber.ToString(),

                                                    OldPostContactPost = cl.ChangeLocation.PostContact.Post.Number.ToString(),
                                                    OldPostContactEttesali = cl.ChangeLocation.PostContact.ConnectionNo.ToString(),

                                                    OldPCMCabinetInputColumnNo = cl.ChangeLocation.Bucht.Bucht2.ColumnNo,
                                                    OldPCMCabinetInputRowNo = cl.ChangeLocation.Bucht.Bucht2.RowNo,
                                                    OldPCMCabinetInputBuchtNo = cl.ChangeLocation.Bucht.Bucht2.BuchtNo,

                                                    //OldPCMCabinetInputColumnNo = cl.ChangeLocation.Bucht.BuchtTypeID == (int)DB.BuchtType.InLine ? context.Buchts
                                                    //                                    .Where(bu => bu.CabinetInputID == cl.ChangeLocation.Bucht.CabinetInputID && bu.BuchtTypeID == (int)DB.BuchtType.CustomerSide)
                                                    //                                    .Select(bu => bu.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo)
                                                    //                                    .SingleOrDefault() : default(int?),
                                                    //OldPCMCabinetInputRowNo = cl.ChangeLocation.Bucht.BuchtTypeID == (int)DB.BuchtType.InLine ? context.Buchts
                                                    //                                 .Where(bu2 => bu2.CabinetInputID == cl.ChangeLocation.Bucht.CabinetInputID && bu2.BuchtTypeID == (int)DB.BuchtType.CustomerSide)
                                                    //                                 .Select(bu2 => bu2.VerticalMDFRow.VerticalRowNo)
                                                    //                                 .SingleOrDefault() : default(int?),
                                                    //OldPCMCabinetInputBuchtNo = cl.ChangeLocation.Bucht.BuchtTypeID == (int)DB.BuchtType.InLine ? context.Buchts
                                                    //                                   .Where(bu3 => bu3.CabinetInputID == cl.ChangeLocation.Bucht.CabinetInputID && bu3.BuchtTypeID == (int)DB.BuchtType.CustomerSide)
                                                    //                                   .Select(bu3 => bu3.BuchtNo)
                                                    //                                   .SingleOrDefault() : default(long?),
                                                    AdslColumnNo = cl.Adsl.RowNo,
                                                    AdslRowNo = cl.Adsl.ColumnNo,
                                                    AdslBuchtNo = cl.Adsl.BuchtNo,
                                                    MdfDescription = string.Empty
                                                }
                                     )
                              .ToList();
                return result;
            }
        }

        //TODO:rad
        /// <summary>
        /// گزارش سیم بندی ام دی اف در مقصد
        /// </summary>
        /// <param name="requestIds"></param>
        /// <returns></returns>
        public static List<ChangeLocationCenterInfo> GetChangeLocationCenterToCenterMdfWriringOfTargetCenter(List<long> requestIds)
        {
            using (MainDataContext context = new MainDataContext())
            {
                List<ChangeLocationCenterInfo> result = new List<ChangeLocationCenterInfo>();
                var query = context.ChangeLocations.Join(context.Requests, cl => cl.ID, re => re.ID, (cl, re) => new { ChangeLocation = cl, Request = re })
                                                   .GroupJoin(context.ADSLPAPPorts, a => a.ChangeLocation.OldTelephone, paps => paps.TelephoneNo, (a, paps) => new { Adsls = paps, Request = a.Request, ChangeLocation = a.ChangeLocation })
                                                   .SelectMany(a => a.Adsls.DefaultIfEmpty(), (a, pap) => new { Adsl = pap, Request = a.Request, ChangeLocation = a.ChangeLocation })
                                                   .Where(cl =>
                                                              (cl.ChangeLocation.ChangeLocationTypeID == (int)DB.ChangeLocationCenterType.CenterToCenter) &&
                                                              (requestIds.Count == 0 || requestIds.Contains(cl.ChangeLocation.ID))
                                                         )
                                                   .AsQueryable();
                result = query.Select(cl => new ChangeLocationCenterInfo
                {
                    NewTelephoneNo = cl.ChangeLocation.NewTelephone.ToString(),
                    OldTelephoneNo = cl.ChangeLocation.OldTelephone.ToString(),


                    NewBuchtRadif = cl.ChangeLocation.Request.InvestigatePossibilities.Take(1).SingleOrDefault().Bucht.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString(),
                    NewBuchtTabaghe = cl.ChangeLocation.Request.InvestigatePossibilities.Take(1).SingleOrDefault().Bucht.VerticalMDFRow.VerticalRowNo.ToString(),
                    NewBuchtEttesali = cl.ChangeLocation.Request.InvestigatePossibilities.Take(1).SingleOrDefault().Bucht.BuchtNo.ToString(),

                    NewCaffu = cl.ChangeLocation.Request.InvestigatePossibilities.Take(1).SingleOrDefault().Bucht.CabinetInput.Cabinet.CabinetNumber.ToString(),
                    NewPostContactmarkazi = cl.ChangeLocation.Request.InvestigatePossibilities.Take(1).SingleOrDefault().Bucht.CabinetInput.InputNumber.ToString(),

                    NewPostContactPost = cl.ChangeLocation.Request.InvestigatePossibilities.Take(1).SingleOrDefault().PostContact.Post.Number.ToString(),
                    NewPostContactEttesali = cl.ChangeLocation.Request.InvestigatePossibilities.Take(1).SingleOrDefault().PostContact.ConnectionNo.ToString(),



                    NewPCMCabinetInputColumnNo = cl.ChangeLocation.Request.InvestigatePossibilities.Take(1).SingleOrDefault().Bucht.BuchtTypeID == (int)DB.BuchtType.InLine ? context.Buchts
                                                        .Where(bu => bu.CabinetInputID == cl.ChangeLocation.Request.InvestigatePossibilities.Take(1).SingleOrDefault().Bucht.CabinetInputID && bu.BuchtTypeID == (int)DB.BuchtType.CustomerSide)
                                                        .Select(bu => bu.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo)
                                                        .SingleOrDefault() : (int?)null,
                    NewPCMCabinetInputRowNo = cl.ChangeLocation.Request.InvestigatePossibilities.Take(1).SingleOrDefault().Bucht.BuchtTypeID == (int)DB.BuchtType.InLine ? context.Buchts
                                                     .Where(bu2 => bu2.CabinetInputID == cl.ChangeLocation.Request.InvestigatePossibilities.Take(1).SingleOrDefault().Bucht.CabinetInputID && bu2.BuchtTypeID == (int)DB.BuchtType.CustomerSide)
                                                     .Select(bu2 => bu2.VerticalMDFRow.VerticalRowNo)
                                                     .SingleOrDefault() : (int?)null,
                    NewPCMCabinetInputBuchtNo = cl.ChangeLocation.Request.InvestigatePossibilities.Take(1).SingleOrDefault().Bucht.BuchtTypeID == (int)DB.BuchtType.InLine ? context.Buchts
                                                       .Where(bu3 => bu3.CabinetInputID == cl.ChangeLocation.Request.InvestigatePossibilities.Take(1).SingleOrDefault().Bucht.CabinetInputID && bu3.BuchtTypeID == (int)DB.BuchtType.CustomerSide)
                                                       .Select(bu3 => bu3.BuchtNo)
                                                       .SingleOrDefault() : (long?)null,
                    AdslColumnNo = cl.Adsl.RowNo,
                    AdslRowNo = cl.Adsl.ColumnNo,
                    AdslBuchtNo = cl.Adsl.BuchtNo,
                    MdfDescription = string.Empty
                }
                                     )
                              .ToList();
                return result;
            }
        }
        public static List<Report_SpecialWireWiringNetworkResult> GetSpecialWireWiringNetwork(List<long> RequestID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ExecuteQuery<Report_SpecialWireWiringNetworkResult>("execute [dbo].[Report.SpecialWireWiringNetwork] '" + string.Join(",", RequestID) + "'").ToList();
            }
        }

        public static List<DayeriWiringNetwork> GetDischargeWiringNetwork(long RequestID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ExecuteQuery<DayeriWiringNetwork>("execute [dbo].[Report.DischargeWiringNetwork] " + RequestID).ToList();
            }
        }

        //TODO:rad Add
        public static List<DayeriWiringNetwork> GetDischargeWiringNetwork(List<long> requestIds)
        {
            using (MainDataContext context = new MainDataContext())
            {
                List<DayeriWiringNetwork> result = new List<DayeriWiringNetwork>();
                string requests = (requestIds != null) ? string.Join(",", requestIds.ToArray()) : "";
                result = context.uspReportDischargeWiringNetwork(requests)
                                .Select(dwn => new DayeriWiringNetwork
                                                  {
                                                      FieldID = dwn.FieldID,
                                                      CabinetinputNo = dwn.CabinetinputNo,
                                                      CabinetNo = dwn.CabinetNo,
                                                      Card = dwn.Card,
                                                      CenterName = dwn.CenterName,
                                                      CorrespondenceAddress = dwn.CorrespondenceAddress,
                                                      CustomerName = dwn.CustomerName,
                                                      Etesali = dwn.Etesali,
                                                      InstallAddress = dwn.InstallAddress,
                                                      MobileNo = dwn.MobileNo,
                                                      PCM = dwn.PCM,
                                                      PersonType = dwn.PersonType,
                                                      Port = dwn.Port,
                                                      PostalCode = dwn.PostalCode,
                                                      PostEtesaliNo = dwn.PostEtesaliNo,
                                                      PostNo = dwn.PostNo,
                                                      Radif = dwn.Radif,
                                                      RegionName = dwn.RegionName,
                                                      Rock = dwn.Rock,
                                                      Shelf = dwn.Shelf,
                                                      Tabagheh = dwn.Tabagheh,
                                                      TelephoneNo = dwn.TelephoneNo,
                                                      UNO = dwn.UNO,
                                                      UrgentTelNo = dwn.UrgentTelNo
                                                  }
                                       )
                               .ToList();

                //برخی از فیلدها باید قبل از ارسال به گزارش مقادیرشان بررسی شود
                result.ForEach((dwn) =>
                                    {
                                        dwn.UNO = !string.IsNullOrEmpty(dwn.UNO) ? "*" : dwn.UNO;
                                        dwn.PCM = !string.IsNullOrEmpty(dwn.PCM) ? "*" : dwn.PCM;
                                        dwn.PersonType = !string.IsNullOrEmpty(dwn.PersonType) ? Helpers.GetEnumDescription(int.Parse(dwn.PersonType), typeof(DB.PersonType)) : dwn.PersonType;
                                    }
                              );
                return result;
            }
        }

        public static PerformanceWiringNetworkReport GetPerformanceWiringNetwork(DateTime? fromDate, DateTime? toDate, List<int> CenterIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                PerformanceWiringNetworkReport result = new PerformanceWiringNetworkReport();
                List<Failure117> TempOutTime =
                    context.Failure117s
                     .Where(
                            t => (!fromDate.HasValue || t.Request.InsertDate.Date < fromDate)
                                    && (!toDate.HasValue || t.Request.InsertDate.Date > toDate)
                                    && (CenterIDs.Count == 0 || CenterIDs.Contains(t.Request.CenterID)))

                        .ToList();
                result.UsualTelNoInUsedCount = "-";
                result.PublicTelNoInUsedCount = "-";
                result.PrivateTelNoInUsedCount = "-";


                List<WiringNetworkReport> TempInTime =
                    context.FailureForms
                    //.Join(context.FailureForms, f => f.ID, ff => ff.FailureRequestID, (ff, f) => new { FailureForm = ff, Failure117 = f.Failure117 })
                     .Where(
                            t => (!fromDate.HasValue || t.Failure117.Request.InsertDate >= fromDate)
                                    && (!toDate.HasValue || t.Failure117.Request.InsertDate < toDate.Value.AddDays(1))
                                    &&
                                    (CenterIDs.Count == 0 || CenterIDs.Contains(t.Failure117.Request.CenterID)))
                        .Select(t => new WiringNetworkReport
                        {
                            InsertDate = t.Failure117.Request.InsertDate,
                            EndDate = t.Failure117.Request.EndDate,
                            FormInsertDate = t.FormInsertDate,
                            MDFDate = t.Failure117.MDFDate,
                            NetworkDate = t.Failure117.NetworkDate,
                            SendToCable = t.SendToCabelDate,
                            FailureStatusID = t.Failure117.FailureStatusID,
                            FailureStatusParentID = t.Failure117.Failure117FailureStatus.ParentID,
                            DifMDFNetworkDate = ((t.Failure117.NetworkDate != null && t.Failure117.MDFDate != null) ?
                            SqlMethods.DateDiffMinute(t.Failure117.MDFDate, t.Failure117.NetworkDate) + 60 : null)
                        })
                        .ToList();
                List<WiringNetworkReport> Temp = TempInTime.Where(t => t.DifMDFNetworkDate < 0).ToList();
                result.AllOfTheFailure117InDateTimeDistinct = TempInTime.Count.ToString();
                result.AllOfTheFailure117RemaindBefore = TempOutTime.Count.ToString();
                result.AllOfTheFailure117IssueInDateTime = TempInTime.Where(t => t.FormInsertDate != null).Count().ToString();

                result.TheNumber_LocationOfTheFaultCorrectionCenter_Network = (TempInTime.Where(t => (t.FormInsertDate != null && t.FailureStatusParentID == 1 && t.EndDate != null)).Count()
                    - TempInTime.Where(t => (t.FailureStatusID == 29 && t.EndDate != null)).Count()).ToString();
                result.TheNumber_LocationOfTheFaultCorrectionCenter_Cable = TempInTime.Where(t => (t.FailureStatusParentID == 2 && t.EndDate != null)).Count().ToString();
                result.TheNumber_LocationOfTheFaultCorrectionCenter_PCM = TempInTime.Where(t => (t.FailureStatusID == 29 && t.EndDate != null)).Count().ToString();
                result.TheNumber_LocationOfTheFaultCorrectionCenter_WLL = TempInTime.Where(t => (t.FailureStatusID == 51 && t.EndDate != null)).Count().ToString();

                result.FailureDeliveredToTheCustomer = TempInTime.Where(t => (t.FailureStatusParentID == 6 && t.EndDate != null)).Count().ToString();
                result.FailureDeliveredToTheCustomer_FXCustomer = "-";
                result.FailureDeliveredToTheCustomer_PrivateCustomer = "-";
                result.FailureDeliveredToTheCustomer_PublicCustomer = "-";
                result.FailureDeliveredToTheCustomer_UsualCustomer = "-";

                result.FailureRemaindFormInTime = TempInTime.Where(t => (t.FormInsertDate != null) && (t.EndDate == null)).Count().ToString();
                result.FailureCorrectionTime_1H = TempInTime.Where(t => (t.FormInsertDate != null) && (t.DifMDFNetworkDate / 60 == 1)).Count().ToString();
                result.FailureCorrectionTime_2H = TempInTime.Where(t => (t.FormInsertDate != null) && (t.DifMDFNetworkDate / 60 == 2)).Count().ToString();
                result.FailureCorrectionTime_3H = TempInTime.Where(t => (t.FormInsertDate != null) && (t.DifMDFNetworkDate / 60 == 3)).Count().ToString();
                result.FailureCorrectionTime_4H = TempInTime.Where(t => (t.FormInsertDate != null) && (t.DifMDFNetworkDate / 60 == 4)).Count().ToString();
                result.FailureCorrectionTime_5H = TempInTime.Where(t => (t.FormInsertDate != null) && (t.DifMDFNetworkDate / 60 == 5)).Count().ToString();
                result.FailureCorrectionTime_6H = TempInTime.Where(t => (t.FormInsertDate != null) && (t.DifMDFNetworkDate / 60 == 6)).Count().ToString();
                result.FailureCorrectionTime_12H = TempInTime.Where(t => (t.FormInsertDate != null) && (t.DifMDFNetworkDate / 60 == 12)).Count().ToString();
                result.FailureCorrectionTime_24H = TempInTime.Where(t => (t.FormInsertDate != null) && (t.DifMDFNetworkDate / 60 == 24)).Count().ToString();
                result.FailureCorrectionTime_36H = TempInTime.Where(t => (t.FormInsertDate != null) && (t.DifMDFNetworkDate / 60 == 36)).Count().ToString();
                result.FailureCorrectionTime_72H = TempInTime.Where(t => (t.FormInsertDate != null) && (t.DifMDFNetworkDate / 60 == 72)).Count().ToString();
                result.FailureCorrectionTime_48H = TempInTime.Where(t => (t.FormInsertDate != null) && (t.DifMDFNetworkDate / 60 == 48)).Count().ToString();
                result.FailureCorrectionTime_U72H = TempInTime.Where(t => (t.FormInsertDate != null) && (t.DifMDFNetworkDate / 60 > 72)).Count().ToString();

                //int failurePercent = 
                result.FailurePercent = ((double)(TempInTime.Where(t => (t.FormInsertDate != null)).Count()) / double.Parse(result.AllOfTheFailure117InDateTimeDistinct)).ToString("P2");
                int? ImprovedSpeedNetworkDowntime = TempInTime.Where(t => (t.FormInsertDate != null && t.NetworkDate != null && t.MDFDate != null)).Sum(t => t.DifMDFNetworkDate);

                result.ImprovedSpeedNetworkDowntime = (ImprovedSpeedNetworkDowntime / 60).ToString() + "H:" + (ImprovedSpeedNetworkDowntime % 60).ToString();
                if (TempInTime.Count != 0)
                {
                    int? AverageSpeedNetworkDowntime = (string.IsNullOrEmpty(ImprovedSpeedNetworkDowntime.ToString()) ? 0 : ImprovedSpeedNetworkDowntime) / int.Parse(result.AllOfTheFailure117InDateTimeDistinct);
                    result.AverageSpeedNetworkDowntime = (AverageSpeedNetworkDowntime / 60).ToString() + "H:" + (AverageSpeedNetworkDowntime % 60).ToString();
                }






                return result;
            }
        }

        public static List<PostInfoFill> GetPostInfoFill(List<int> CenterIDs
                                   , List<int> CabinetIDs
                                   , int? PostContactLess
                                   , int? PostContactMore
                                   , int? PortLess
                                   , int? PortMore
                                   , List<int> PCMTypeIDs
            )
        {

            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                List<PostInfoFill> result = new List<PostInfoFill>();

                result = context.PostContacts


                   .Where(t =>
                       (CenterIDs.Count == 0 || CenterIDs.Contains(t.Post.Cabinet.CenterID))
                       && (CabinetIDs.Count == 0 || CabinetIDs.Contains(t.Post.Cabinet.ID))
                       && (PCMTypeIDs.Count == 0 || PCMTypeIDs.Contains((int)t.ConnectionType))
                       )
                       .Select(t => new PostInfoFill
                       {

                           Center = t.Post.Cabinet.Center.CenterName,
                           Number = t.Post.Number,
                           PostTypeName = t.Post.AORBPostAndCabinet.Name,
                           City = t.Post.Cabinet.Center.Region.City.Name,
                           CabinetNumber = t.Post.Cabinet.CabinetNumber,

                           FillPostContactCount = context.PostContacts.Where(x => (x.Status == (int)DB.PostContactStatus.CableConnection || x.Status == (int)DB.PostContactStatus.NoCableConnection)
                                                                               && (x.PostID == t.Post.ID)
                                                                               && (x.ConnectionType != (int)DB.PostContactConnectionType.PCMNormal)).Count(),

                           FillPortCount = context.PostContacts.Where(x => (x.ConnectionType == (byte)DB.PostContactConnectionType.PCMNormal)
                                                                       && (x.Status == (int)DB.PostContactStatus.CableConnection)
                                                                       && (x.PostID == t.Post.ID)).Count(),
                           ReservedPostContactCount = context.PostContacts.Where(x =>
                                                                                   (x.ConnectionType != (int)DB.PostContactConnectionType.PCMNormal) &&
                                                                                   (
                                                                                        x.Status == (int)DB.PostContactStatus.FullBooking
                                                                                       //||
                                                                                       //x.Status == (int)DB.PostContactStatus.ExchangeCentralCableMDF
                                                                                       //||
                                                                                       //x.Status == (int)DB.PostContactStatus.ExchangeCenterToCenter
                                                                                       //||
                                                                                       //x.Status == (int)DB.PostContactStatus.ExchangePost
                                                                                       //||
                                                                                       //x.Status == (int)DB.PostContactStatus.ReserveExchangePost
                                                                                   ) &&
                                                                                   x.PostID == t.Post.ID
                                                                              ).Count(),
                           EmptyPostContactCount = context.PostContacts.Where(x => (x.Status == (int)DB.PostContactStatus.Free)
                                                                              && (x.PostID == t.Post.ID)
                                                                              && (x.ConnectionType != (int)DB.PostContactConnectionType.PCMNormal)).Count(),

                           FailPostContactCount = context.PostContacts.Where(x => (x.Status == (int)DB.PostContactStatus.PermanentBroken)
                                                                         && (x.ConnectionType == (int)DB.PostContactConnectionType.PCMNormal)
                                                                         && (x.PostID == t.Post.ID)).Count(),

                           PCMCount = context.PostContacts.Where(x => ((x.PostID == t.Post.ID)
                                                                    && (x.ConnectionType == (int)DB.PostContactConnectionType.PCMRemote))).Count(),

                           KarkonCount = context.PostContacts.Where(x => ((x.PostID == t.Post.ID) &&
                                                                     x.Status == (int)DB.PostContactStatus.CableConnection)).Count(),

                           PCMKarkonCount = context.PostContacts.Where(x => ((x.PostID == t.Post.ID) &&
                                                                    (x.Status == (int)DB.PostContactStatus.CableConnection) &&
                                                                    x.ConnectionType == (int)DB.PostContactConnectionType.PCMNormal)).Count(),

                           RemainRequestCount = context.InvestigatePossibilityWaitinglists.Where(x => (x.WaitingList.Status == false) && (x.PostID == t.Post.ID)).Count()

                       }
                       )
                       .Distinct()
                       .ToList();

                result = (PostContactLess.HasValue) ? result.Where(t => t.FillPostContactCount < PostContactLess).ToList() : result;
                result = (PostContactMore.HasValue) ? result.Where(t => t.FillPostContactCount > PostContactMore).ToList() : result;

                result = (PortLess.HasValue) ? result.Where(t => t.FillPortCount < PortLess).ToList() : result;
                result = (PortMore.HasValue) ? result.Where(t => t.FillPortCount > PortMore).ToList() : result;
                return result;

            }

        }

        //TODO:rad
        public static List<CenterCabinet_Subset> GetCenterCabinet_Subset(List<int> citys, List<int> centerIDs, List<int> cabinets, int freePostContact, int reportSortedBy)
        {
            using (MainDataContext context = new MainDataContext())
            {
                //TODO:rad
                //سهمیه رزرو 3 درصد
                int intCabinetShare = default(int);
                string strCabinetShare = DB.GetSettingByKey(DB.GetEnumItemDescription(typeof(DB.SettingKeys), (int)DB.SettingKeys.ApplyCabinetShare));
                intCabinetShare = int.Parse(strCabinetShare);

                //به خاطر مرتب سازی نتیجه نهایی این متغیر را تعریف کردم
                List<CenterCabinet_Subset> sortedResult = new List<CenterCabinet_Subset>();

                var primaryResult = context.Cabinets
                                           .Join(context.CabinetInputs, c => c.ID, ci => ci.CabinetID, (c, ci) => new { Cabinet = c, CabinetInput = ci })

                                           .GroupJoin(context.Buchts, x => x.CabinetInput.ID, b => b.CabinetInputID, (x, b) => new { CabintInput = x, Bucht = b })
                                           .SelectMany(t => t.Bucht.DefaultIfEmpty(), (t, x) => new { CabinetInput = t.CabintInput, Bucht = x })

                                           .GroupJoin(context.Telephones, x => x.Bucht.SwitchPortID, t => t.SwitchPortID, (x, t) => new { Bucht = x, Telephone = t })
                                           .SelectMany(t => t.Telephone.DefaultIfEmpty(), (t, x) => new { Bucht = t.Bucht, Telephone = x })

                                           .Where(t =>
                                                        (citys.Count == 0 || citys.Contains(t.Bucht.CabinetInput.CabinetInput.Cabinet.Center.Region.CityID)) &&
                                                        (centerIDs.Count == 0 || centerIDs.Contains(t.Bucht.CabinetInput.CabinetInput.Cabinet.CenterID)) &&
                                                        (cabinets.Count == 0 || cabinets.Contains(t.Bucht.CabinetInput.CabinetInput.Cabinet.ID))
                                                  )
                                           .Select(t => new CenterCabinet_Subset
                                           {
                                               CabinetInputCount = context.CabinetInputs.Where(x => x.Cabinet.ID == t.Bucht.CabinetInput.CabinetInput.CabinetID).Count(),
                                               FreeCabinetInputCount = context.Buchts.Where(x => x.CabinetInput.CabinetID == t.Bucht.CabinetInput.Cabinet.ID && x.Status == (int)DB.BuchtStatus.Free && x.CabinetInput.Status == (byte)DB.CabinetInputStatus.healthy && x.PCMPortID == null).Count(), // context.CabinetInputs.Where(x => x.Cabinet.ID == t.Bucht.CabinetInput.CabinetInput.CabinetID  && x.bu == (int)DB.BuchtStatus.Free).Count(),
                                               BreakCabinetInputCount = context.CabinetInputs.Where(x => x.Cabinet.ID == t.Bucht.CabinetInput.CabinetInput.CabinetID && x.Status == (int)DB.CabinetInputStatus.Malfuction).Count(),
                                               BreakBuchtCount = context.Buchts.Where(x => x.CabinetInput.CabinetID == t.Bucht.CabinetInput.Cabinet.ID && x.Status == (int)DB.BuchtStatus.Destroy && x.PCMPortID == null).Count(),
                                               ReservCabinetInputCount = context.Buchts.Where(x => x.CabinetInput.CabinetID == t.Bucht.CabinetInput.Cabinet.ID && x.Status == (int)DB.BuchtStatus.Reserve && x.PCMPortID == null).Count(),
                                               ActiveCabinetInputCount = context.Buchts.Where(b => b.CabinetInput.CabinetID == t.Bucht.CabinetInput.Cabinet.ID && b.Status == (int)DB.BuchtStatus.Connection && !b.PCMPortID.HasValue).Count()
                                                                         + context.Buchts.Where(b => b.CabinetInput.CabinetID == t.Bucht.CabinetInput.Cabinet.ID && b.Status == (int)DB.BuchtStatus.AllocatedToInlinePCM && !b.PCMPortID.HasValue).Count(),
                                               CabinetNumber = t.Bucht.CabinetInput.CabinetInput.Cabinet.CabinetNumber.ToString(),
                                               PostCount = t.Bucht.CabinetInput.CabinetInput.Cabinet.Posts.Count(),
                                               APostCount = t.Bucht.CabinetInput.CabinetInput.Cabinet.Posts.Where(p => p.Status == (byte)DB.PostStatus.Dayer && p.AorBType == (byte)DB.AORBPostAndCabinet.A).Count(),
                                               BPostCount = t.Bucht.CabinetInput.CabinetInput.Cabinet.Posts.Where(p => p.Status == (byte)DB.PostStatus.Dayer && p.AorBType == (byte)DB.AORBPostAndCabinet.B).Count(),
                                               ABPostCount = t.Bucht.CabinetInput.CabinetInput.Cabinet.Posts.Where(p => p.Status == (byte)DB.PostStatus.Dayer && p.AorBType == (byte)DB.AORBPostAndCabinet.AORB).Count(),
                                               ReservePostCount = t.Bucht.CabinetInput.CabinetInput.Cabinet.Posts.Where(p => p.Status == (byte)DB.PostStatus.ReserveForExchange).Count(),
                                               BrokenPostCount = t.Bucht.CabinetInput.Cabinet.Posts.Where(p => p.Status == (byte)DB.PostStatus.Broken).Count(),
                                               KarkonCount = context.Buchts.Where(x => x.CabinetInput.CabinetID == t.Bucht.CabinetInput.Cabinet.ID && x.Status == (int)DB.BuchtStatus.Connection).Count(),  //context.PostContacts.Where(t3 => t3.Status == (byte)DB.PostContactStatus.CableConnection && t3.Post.CabinetID == t.Bucht.CabinetInput.Cabinet.ID).Count(),
                                               BrokenPostContact = context.PostContacts.Where(pc => pc.Status == (byte)DB.PostContactStatus.PermanentBroken && pc.Post.CabinetID == t.Bucht.CabinetInput.Cabinet.ID).Count(),
                                               FreePostContact = context.PostContacts.Where(pc => pc.Status == (byte)DB.PostContactStatus.Free && pc.Post.CabinetID == t.Bucht.CabinetInput.Cabinet.ID).Count(),
                                               ReservePostContact = context.PostContacts.Where(pc => (pc.Status == (int)DB.PostContactStatus.FullBooking
                                                   //|| pc.Status == (int)DB.PostContactStatus.ExchangePost 
                                                   //|| pc.Status == (int)DB.PostContactStatus.ReserveExchangePost
                                                   )
                                                   && pc.Post.CabinetID == t.Bucht.CabinetInput.Cabinet.ID).Count(),
                                               PCMPostContact = context.PostContacts.Where(pc => pc.ConnectionType == (byte)DB.PostContactConnectionType.PCMRemote && pc.Post.CabinetID == t.Bucht.CabinetInput.Cabinet.ID).Count(),
                                               CityName = t.Bucht.CabinetInput.Cabinet.Center.Region.City.Name,
                                               CenterName = t.Bucht.CabinetInput.Cabinet.Center.CenterName,
                                               ADSLCount = context.Buchts.Where(T4 => T4.CabinetInput.CabinetID == t.Bucht.CabinetInput.CabinetInput.CabinetID)
                                                           .Join(context.Telephones, bu => bu.SwitchPortID, te => te.SwitchPortID, (bu, te) => new { bucht = bu, tele = te })
                                                           .Join(context.ADSLPAPPorts, te2 => te2.tele.TelephoneNo, adsl => adsl.TelephoneNo, (te2, adsl) => new { telephone = te2.tele, ADSLPAPPort = adsl }).Count(),
                                               WaitingCount = t.Bucht.CabinetInput.Cabinet.InvestigatePossibilityWaitinglists.Where(iwp => iwp.WaitingList.Status == false && (iwp.WaitingList.WaitingListType == (byte)DB.WatingListType.investigatePossibility)).Count(),
                                               CabinetCapacity = t.Bucht.CabinetInput.Cabinet.Capacity,
                                               DayerPostCount = t.Bucht.CabinetInput.Cabinet.Posts.Where(p => p.Status == (byte)DB.PostStatus.Dayer).Count(),
                                               // RemainedQuotaReservation = (context.Buchts.Where(bu => bu.CabinetInput.CabinetID == t.Bucht.CabinetInput.Cabinet.ID && bu.Status == (byte)DB.BuchtStatus.Free && bu.PCMPortID == null).Count()) - (context.CabinetInputs.Where(ca => ca.CabinetID == t.Bucht.CabinetInput.Cabinet.ID && ca.Status == (byte)DB.CabinetInputStatus.healthy).Count() * intCabinetShare / 100),
                                               RemainedQuotaReservation = (context.Buchts.Where(bu => bu.CabinetInput.CabinetID == t.Bucht.CabinetInput.Cabinet.ID && bu.Status == (byte)DB.BuchtStatus.Free && bu.CabinetInput.Status == (byte)DB.CabinetInputStatus.healthy && bu.PCMPortID == null).Count())
                                                                        - (context.Buchts.Where(bu => bu.CabinetInput.CabinetID == t.Bucht.CabinetInput.Cabinet.ID && bu.CabinetInput.Status == (byte)DB.CabinetInputStatus.healthy && bu.PCMPortID == null).Count() * intCabinetShare / 100),
                                               PcmBoxCount = context.Buchts.Where(b => b.CabinetInput.CabinetID == t.Bucht.CabinetInput.Cabinet.ID && b.Status == (byte)DB.BuchtStatus.AllocatedToInlinePCM).Count(),
                                               AllPostCount = PostDB.GetDetailPostCountByCabinetID(t.Bucht.CabinetInput.CabinetInput.CabinetID)


                                           }
                                                   )
                                          .AsQueryable();

                //به خاطر مقایسه با تعداد اتصالی آزاد به عنوان یکی از فیلتر های گزارش این متغیر را تعریف کردم
                var secondaryResult = primaryResult.Where(pr => (freePostContact == -1 || pr.FreePostContact.Value <= freePostContact)).AsQueryable();

                //تعیین نوع مرتب سازی نتیجه نهایی
                switch (reportSortedBy)
                {
                    case (int)DB.ReportSortingType.CabinetInputCount:
                        sortedResult = secondaryResult.OrderBy(pr => pr.CabinetInputCount).Distinct().ToList();
                        break;
                    case (int)DB.ReportSortingType.PostCount:
                        sortedResult = secondaryResult.OrderBy(pr => pr.PostCount).Distinct().ToList();
                        break;

                    default:
                        sortedResult = secondaryResult.Distinct().ToList();
                        break;
                }

                return sortedResult;
            }
        }

        public static List<CenterCabinetInfo> GetCabinetSyndeticOrder(List<int> centerIDs, List<int> CabinetIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Cabinets
                               .GroupJoin(context.CabinetInputs, c => c.ID, ci => ci.CabinetID, (c, ci) => new { cabinet = c, CabinetInput = ci })
                               .SelectMany(t1 => t1.CabinetInput.DefaultIfEmpty(), (c, t1) => new { CabinetInput = t1, Cabinet = c.cabinet })

                               .GroupJoin(context.Buchts, ci => ci.CabinetInput.ID, b => b.CabinetInputID, (ci, b) => new { bucht = b, cabinetInput = ci.CabinetInput })
                               .SelectMany(t2 => t2.bucht.DefaultIfEmpty(), (b, t2) => new { CabinetInput = b.cabinetInput, Bucht = t2 })
                        .Where(t =>
                                (centerIDs.Count == 0 || DB.CurrentUser.CenterIDs.Contains(t.CabinetInput.Cabinet.CenterID)) &&
                                (CabinetIDs.Count == 0 || CabinetIDs.Contains(t.CabinetInput.Cabinet.ID))
                              )
                              .Select
                              (t => new CenterCabinetInfo
                              {
                                  ID = t.CabinetInput.Cabinet.ID,
                                  Center = t.CabinetInput.Cabinet.Center.CenterName,
                                  CabinetNumber = t.CabinetInput.Cabinet.CabinetNumber,
                                  PostNumber = t.Bucht.PostContact.Post.Number,

                                  FromBuchtNo = context.Buchts.Where(x => x.ID == t.Bucht.ID).Select(x => x.BuchtNo).Min().ToString(),
                                  ToBuchtNo = context.Buchts.Where(x => x.ID == t.Bucht.ID).Select(x => x.BuchtNo).Max().ToString(),
                                  FromInputNo = t.CabinetInput.Cabinet.FromInputNo.ToString(),
                                  ToInputNo = t.CabinetInput.Cabinet.ToInputNo.ToString(),

                                  BuchtTypeName = t.Bucht.BuchtType.BuchtTypeName,
                                  Radif = t.Bucht.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString(),
                                  Tabaghe = t.Bucht.VerticalMDFRow.VerticalRowNo.ToString()

                              }).OrderBy(t => t.CabinetNumber).ThenBy(t => t.PostNumber)
                              .ToList();
            }
        }

        public static List<PostContactsReport> GetPostContactTotal(int centerID, int CabinetID, int postID, int? PostContactStatus)
        {
            using (MainDataContext context = new MainDataContext())
            {


                string query = @"SELECT PostContact.ID,
                                    CAST( Post.Number AS nvarchar(5)) as PostNumber
                                    ,CAST( Cabinet.CabinetNumber AS nvarchar(5)) as CabinetNumber
                                    , Center.CenterName as Center
                                    , City.Name as City
                                    , CAST( Telephone.TelephoneNo AS nvarchar(50)) as TelNo
                                    , CAST( PostContact.ConnectionType AS nvarchar(5)) as PostContactConnectionType
                                    , CAST( Bucht.BuchtTypeID AS nvarchar(5)) as BuchtTypeID
                                    ,Bucht.CabinetInputID
                                    ,T1.TelephoneDate as TelephoneDate
									,T1.TelephoneTime as TelephoneTime
                                    ,ISNULL(T1.Description,'-----') Description
                                    ,ConnectionNo as PostContactConnectionno
                                    ,PostContact.ConnectionType
                                    FROM postcontact
                                    left JOIN Bucht on Bucht.ConnectionID = PostContact.ID 
                                    left JOIN Post on Post.ID = PostContact.PostID
                                    LEFT JOIN Telephone on Telephone.SwitchPortID = Bucht.SwitchPortID
                                    LEFT JOIN Cabinet on Cabinet.ID = post.CabinetID
                                    LEFT JOIN Center on Center.ID = Cabinet.CenterID 
                                    LEFT JOIN Region on Region.ID = Center.RegionID
                                    LEFT JOIN City on City.ID = Region.CityID  ";
                switch (PostContactStatus)
                {
                    case (int)DB.PostContactStatus.FullBooking:
                        query += @"LEFT JOIN (SELECT * FROM (
							                                    SELECT  ROW_NUMBER() OVER ( PARTITION BY Request.TelephoneNo ORDER BY InstallRequest.ID DESC) AS RowNumber,
                                                                CONVERT(date,InstallRequest.InstallationDate,101) as TelephoneDate, 
                                                                CONVERT(VARCHAR(8),InstallRequest.InstallationDate,108) as TelephoneTime
                                                                ,Request.TelephoneNo as TelephoneNO
							                                    FROM InstallRequest  JOIN Request  on Request.ID = InstallRequest.RequestID ) as T
							                                    WHERE T.RowNumber = 1) as T1 on T1.TelephoneNo = Telephone.TelephoneNo";
                        break;
                    case (int)DB.PostContactStatus.CableConnection:
                        query += @"LEFT JOIN (SELECT * FROM (
							                                    SELECT  ROW_NUMBER() OVER ( PARTITION BY Request.TelephoneNo ORDER BY InstallRequest.ID DESC) AS RowNumber,
                                                                CONVERT(date,InstallRequest.InstallationDate,101) as TelephoneDate, 
                                                                CONVERT(VARCHAR(8),InstallRequest.InstallationDate,108) as TelephoneTime
                                                                ,Request.TelephoneNo as TelephoneNO
							                                    FROM InstallRequest  JOIN Request  on Request.ID = InstallRequest.RequestID ) as T
							                                    WHERE T.RowNumber = 1) as T1 on T1.TelephoneNo = Telephone.TelephoneNo";
                        break;
                    case (int)DB.PostContactStatus.PermanentBroken:
                        query += @"LEFT JOIN (SELECT * FROM (
							                                    SELECT  ROW_NUMBER() OVER ( PARTITION BY PostContact.ConnectionNo ORDER BY malfuction.ID DESC) AS RowNumber
                                                                ,DateMalfunction as TelephoneDate
																,TimeMalfunction as TelephoneTime
																,PostContactID
                                                                ,NULL as TelephoneNO 
                                                                ,[Description]
							                                    FROM malfuction  JOIN PostContact  on PostContact.ID = Malfuction.PostContactID ) as T
							                                    WHERE T.RowNumber = 1) as T1 on T1.PostContactID = PostContact.ID ";

                        break;
                    case (int)DB.PostContactStatus.Free:
                        query = @"SELECT PostContact.ID,
                                      CAST( Post.Number AS nvarchar(5)) as PostNumber
                                      ,CAST( Cabinet.CabinetNumber AS nvarchar(5)) as CabinetNumber
                                      , Center.CenterName as Center
                                      , City.Name as City
                                      , CAST( Telephone.TelephoneNo AS nvarchar(50)) as TelNo
                                      , CAST( PostContact.ConnectionType AS nvarchar(5)) as PostContactConnectionType
                                      , CAST( Bucht.BuchtTypeID AS nvarchar(5)) as BuchtTypeID
                                      ,Bucht.CabinetInputID
                                      ,NULL
                                      ,NULL
                                      ,ConnectionNo as PostContactConnectionno
                                     ,PostContact.ConnectionType
                                     FROM postcontact
                                    		 left JOIN Bucht on Bucht.ConnectionID = PostContact.ID 
                                    		 left JOIN Post on Post.ID = PostContact.PostID
                                    		 LEFT JOIN Telephone on Telephone.SwitchPortID = Bucht.SwitchPortID
                                        	 LEFT JOIN Cabinet on Cabinet.ID = post.CabinetID
                                    	     LEFT JOIN Center on Center.ID = Cabinet.CenterID
                                    		 LEFT JOIN Region on Region.ID = Center.RegionID
                                    		 LEFT JOIN City on City.ID = Region.CityID  ";
                        break;
                    case (null):
                        query += @"LEFT JOIN (SELECT * FROM (
							                                    SELECT  ROW_NUMBER() OVER ( PARTITION BY Request.TelephoneNo ORDER BY InstallRequest.ID DESC) AS RowNumber,
                                                                CONVERT(date,InstallRequest.InstallationDate,101) as TelephoneDate, 
                                                                CONVERT(VARCHAR(8),InstallRequest.InstallationDate,108) as TelephoneTime,
                                                                Request.TelephoneNo
							                                    FROM InstallRequest  JOIN Request  on Request.ID = InstallRequest.RequestID ) as T
							                                    WHERE T.RowNumber = 1) as T1 on T1.TelephoneNo = Telephone.TelephoneNo";

                        break;

                }

                query += " WHERE  PostContact.ConnectionType <> 5  and Cabinet.CenterID = {0} and Cabinet.ID = {1} and ({2} = -1 OR PostContact.PostID = {2}) ";







                if (PostContactStatus.HasValue)
                    query += " and PostContact.Status = " + PostContactStatus.ToString();

                List<PostContactsReport> result = context.ExecuteQuery<PostContactsReport>(string.Format(query, centerID, CabinetID, postID)).OrderBy(t => t.PostContactConnectionno).ToList();

                result.ForEach(t => { if (t.ConnectedToPCM == "4") { t.ConnectedToPCM = "دارد"; } else { t.ConnectedToPCM = "ندارد"; } });
                return result;
            }
        }

        public static List<InputInfo> GetCabinetInputFail(int CenterIds, List<int> CabinetIDs, int CabinetInputNumber)
        {
            using (MainDataContext context = new MainDataContext())
            {
                //return 
                //              .Where(t => t.Temp.Status  == (int)DB.CabinetInputStatus.Malfuction)
                //              using (MainDataContext context = new MainDataContext())

                List<InputInfo> result = context.Buchts


                    .GroupJoin(context.Telephones, b => b.SwitchPortID, t => t.SwitchPortID, (b, t) => new { bucht = b, telephone = t })
                    .SelectMany(t1 => t1.telephone.DefaultIfEmpty(), (bt, t1) => new { Bucht = bt.bucht, Telephone = t1 })

                    .GroupJoin(context.Malfuctions, i => i.Bucht.CabinetInputID, m => m.CabinetInputID, (i, m) => new { bucht = i.Bucht, malfuction = m, telephone = i.Telephone })
                    .SelectMany(T => T.malfuction.DefaultIfEmpty(), (i, T) => new { Malfuction = T, Bucht = i.bucht, Telephone = i.telephone })

                    .Where(t => (CenterIds == t.Bucht.CabinetInput.Cabinet.CenterID)
                        && (CabinetIDs.Count == 0 || CabinetIDs.Contains(t.Bucht.CabinetInput.Cabinet.ID))
                        && (CabinetInputNumber == -1 || (t.Bucht.CabinetInput.InputNumber == CabinetInputNumber))
                        && (t.Malfuction.MalfuctionOrhealthy == (int)DB.MalfuctionStatus.Malfuction))

                    .Select(t => new InputInfo
                    {
                        BuchtID = t.Bucht.ID,
                        CabinetNumber = t.Bucht.CabinetInput.Cabinet.CabinetNumber,
                        TeleNo = t.Telephone.TelephoneNo.ToString(),
                        Status = t.Bucht.CabinetInput.Status,
                        CustomerName = (t.Telephone.Customer.FirstNameOrTitle ?? "") + " " + (t.Telephone.Customer.LastName ?? ""),
                        InputNumber = t.Bucht.CabinetInput.InputNumber,
                        CenterName = t.Bucht.CabinetInput.Cabinet.Center.CenterName,
                        BuchtTypeName = t.Bucht.BuchtType.BuchtTypeName,
                        VerticalCloumnNo = t.Bucht.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo,
                        VerticalRowNo = t.Bucht.VerticalMDFRow.VerticalRowNo,
                        BuchtNo = t.Bucht.BuchtNo,
                        Capacity = t.Bucht.CabinetInput.Cabinet.Capacity,
                        BuchtStatus = t.Bucht.Status,
                        CabinetInputID = t.Bucht.CabinetInput.ID,
                        MalfunctionDate = t.Malfuction.DateMalfunction.ToPersian(Date.DateStringType.Short),
                        FailureTypeName = Helpers.GetEnumDescription((int)t.Malfuction.TypeMalfunction, typeof(DB.CabinetInputMalfuctionType)),
                        Description = t.Malfuction.Description,
                        MalfunctionTime = t.Malfuction.TimeMalfunction
                    }
                    ).ToList();

                result.ForEach(i => { i.MalfunctionTime = !string.IsNullOrEmpty(i.MalfunctionTime) ? i.MalfunctionTime : "-----"; });
                return result;
            }
        }

        public static List<RequestPaymentReport> GetRequestPaymentList(DateTime? fromDate, DateTime? toDate,
                                                                    string BillID, string PaymentID,
                                                                      long RequestID,
                                                                     List<int> PaymentWays, List<int> PaymentTypes, List<int> BankIDs,
                                                                    string FicheNumber, long? Cost, int? Tax, bool? IsPaid, List<int> BaseCosts,
                                                                        List<int> Cities, List<int> Centers)
        {

            using (MainDataContext context = new MainDataContext())
            {
                return context.RequestPayments.Where
                    (t =>
                        (Cities.Count == 0 || Cities.Contains((int)t.Request.Center.Region.CityID)) &&
                        (Centers.Count == 0 || Centers.Contains((int)t.Request.CenterID)) &&
                        ((BankIDs.Count == 0) || (BankIDs.Contains((int)t.BankID))) &&
                    ((PaymentTypes.Count == 0) || (PaymentTypes.Contains((int)t.PaymentType))) &&
                    ((PaymentWays.Count == 0) || (PaymentWays.Contains((int)t.PaymentWay))) &&
                    ((BaseCosts.Count == 0) || (BaseCosts.Contains((int)t.BaseCostID))) &&
                    ((string.IsNullOrWhiteSpace(FicheNumber)) || (t.FicheNunmber.Contains(FicheNumber))) &&
                     ((string.IsNullOrWhiteSpace(PaymentID)) || (t.PaymentID.Contains(PaymentID))) &&
                     ((string.IsNullOrWhiteSpace(BillID)) || (t.BillID.Contains(BillID))) &&
                     ((RequestID == -1) || (RequestID == t.RequestID)) &&
                     ((Cost == -1) || (Cost == t.Cost)) &&
                     ((Tax == -1) || (Tax == t.Tax)) &&
                      ((!fromDate.HasValue) || (t.InsertDate.Date >= fromDate))
                                    && ((!toDate.HasValue || t.InsertDate.Date <= toDate))
                                    && ((t.IsPaid == IsPaid) || (IsPaid == null))
                                    ).Select
                            (
                            t => new RequestPaymentReport
                            {
                                RequestID = t.RequestID,
                                BillId = t.BillID,
                                PaymentID = t.PaymentID,
                                BaseCost = t.BaseCost.Title,
                                BankName = t.Bank.BankName,
                                Cost = t.Cost,
                                Tax = t.Tax,
                                AmountSum = t.AmountSum,
                                FicheNo = t.FicheNunmber,
                                FicheDate = t.FicheDate,
                                PaymentWayName = DB.GetEnumDescriptionByValue(typeof(DB.PaymentWay), t.PaymentWay),
                                PaymentTypeName = DB.GetEnumDescriptionByValue(typeof(DB.PaymentType), t.PaymentType),
                                BankID = t.BankID,
                                IsPaid = t.IsPaid
                            }
                                 )
                         .ToList();
            }
        }
        public static List<PCMStatisticDetails> GetPCMStatisticDetails(int? city, int? CenterId, int? PCMBrandID, int? RockID, int? ShelfID, int? CardID, List<int> CabinetIDs, int? PCMPortStatus)
        {
            using (MainDataContext context = new MainDataContext())
            {
                IQueryable<PCMStatisticDetails> PCMStatisticDetails = context.Buchts


                    .GroupJoin(context.Telephones, bp => bp.SwitchPortID, t => t.SwitchPortID, (bp, t) => new { bucht = bp, telephone = t })
                    .SelectMany(T => T.telephone.DefaultIfEmpty(), (b, T) => new { Bucht = b.bucht, Telephone = T })

                    .Where(t => (city == null || t.Bucht.PCMPort.PCM.PCMShelf.PCMRock.Center.Region.CityID == city) &&
                                    (CenterId == null || t.Bucht.PCMPort.PCM.PCMShelf.PCMRock.CenterID == CenterId) &&
                                    (!PCMPortStatus.HasValue || (PCMPortStatus == 255 || t.Bucht.PCMPort.Status == PCMPortStatus)) &&
                                    (CabinetIDs.Count == 0 || CabinetIDs.Contains(t.Bucht.CabinetInput.Cabinet.ID)) &&
                                    (!RockID.HasValue || RockID == t.Bucht.PCMPort.PCM.PCMShelf.PCMRockID) &&
                                    (!ShelfID.HasValue || ShelfID == t.Bucht.PCMPort.PCM.ShelfID) &&
                                    (!CardID.HasValue || CardID == t.Bucht.PCMPort.PCM.ID))
                            .Select(t => new PCMStatisticDetails
                            {
                                Cabinet = t.Bucht.CabinetInput.Cabinet.CabinetNumber.ToString(),
                                CabinetInputID = t.Bucht.CabinetInput.InputNumber.ToString(),
                                ConnectionIDBucht = t.Bucht.Bucht1.ID.ToString(),
                                Connectionno = t.Bucht.PostContact.ConnectionNo.ToString(),
                                CustomerID = t.Telephone.CustomerID,
                                MDFHorizentalID = t.Telephone.SwitchPort.MDFHorizentalID,
                                PCMSpecification = "رک:" + t.Bucht.PCMPort.PCM.PCMShelf.PCMRock.Number.ToString() + " ،  " + "شلف : " + t.Bucht.PCMPort.PCM.PCMShelf.Number.ToString() + " ،  " + "کارت : " + t.Bucht.PCMPort.PCM.Card.ToString() + " ،  " + "پورت : " + t.Bucht.PCMPort.PortNumber.ToString(),
                                Portno = t.Bucht.PCMPort.PortNumber.ToString(),
                                Postno = t.Bucht.PostContact.Post.Number.ToString(),
                                Telno = t.Telephone.TelephoneNo.ToString(),
                                BuchtType = t.Bucht.BuchtTypeID,
                                BuchtID = t.Bucht.ID,
                                RockID = t.Bucht.PCMPort.PCM.PCMShelf.PCMRock.ID,
                                ShelfID = t.Bucht.PCMPort.PCM.PCMShelf.ID,
                                CardID = t.Bucht.PCMPort.PCM.ID,
                                PortID = t.Bucht.PCMPort.ID,
                                PCMType = t.Bucht.PCMPort.PCM.PCMType.Name,
                                PCMStatus = t.Bucht.PCMPort.PCM.Status.ToString(),
                                BuchtNo = t.Bucht.BuchtNo.ToString(),
                                Radif = t.Bucht.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString(),
                                Tabaghe = t.Bucht.VerticalMDFRow.VerticalRowNo.ToString()
                            });

                return PCMStatisticDetails.ToList();
            }

        }
        public static List<ADSLServiceInfo> GetADSLServiceInfo(DateTime? StartFromDate,
                                                               DateTime? StartToDate,
                                                               DateTime? EndFromDate,
                                                               DateTime? EndToDate,
                                                               List<int> Titles,
                                                               List<int> GroupNames,
                                                               List<int> Bandwidths,
                                                               List<int> Traffics,
                                                               List<int> Durations,
                                                               List<int> PaymentTypes,
                                                               bool? IsSpecial,
                                                               bool? IsActive,
                                                               bool? IsOnlineRegistery)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLServices.Where

                            (t =>
                        ((Titles.Count == 0) || (Titles.Contains((int)(t.TypeID)))) &&
                        ((GroupNames.Count == 0) || (GroupNames.Contains(t.GroupID))) &&
                        ((Bandwidths.Count == 0) || (Bandwidths.Contains((int)t.BandWidthID))) &&
                        ((PaymentTypes.Count == 0) || (PaymentTypes.Contains((int)t.PaymentTypeID))) &&
                        ((Traffics.Count == 0) || (Traffics.Contains((int)t.TrafficID))) &&
                         ((Durations.Count == 0) || (Durations.Contains((int)t.DurationID))) &&
                        ((!StartFromDate.HasValue) || (t.StartDtae >= StartFromDate)) &&
                        ((!StartToDate.HasValue || t.StartDtae <= StartToDate)) &&
                        ((!EndFromDate.HasValue || t.EndDate < EndFromDate)) &&
                        ((!EndToDate.HasValue || t.EndDate < EndToDate)) &&
                        ((t.IsSpecial == IsSpecial) || (IsSpecial == null)) &&
                        ((t.IsActive == IsActive) || (IsActive == null)) &&
                        ((t.IsOnlineRegister == IsOnlineRegistery) || (IsOnlineRegistery == null))
                        ).Select
                            (t => new ADSLServiceInfo
                            {

                                Title = t.Title,
                                ServiceGroup = t.ADSLServiceGroup.Title,
                                BandWidth = t.ADSLServiceBandWidth.Title,
                                Traffic = t.ADSLServiceTraffic.Title,
                                Duration = t.ADSLServiceDuration.Title,
                                IsSpecial = t.IsSpecial,
                                IsActive = t.IsActive,
                                IsRequiredLicense = t.IsRequiredLicense,
                                IBSngGroupName = t.IBSngGroupName,
                                IsOnlineRegister = t.IsOnlineRegister,
                                Price = (t.Price).ToString(),
                                GiftProfileName = t.ADSLServiceGiftProfile.Title,
                                StartDate = t.StartDtae,
                                EndDate = t.EndDate,
                                PaymentType = DB.GetEnumDescriptionByValue(typeof(DB.PaymentType), t.PaymentTypeID),
                                TypeID = t.TypeID
                            }
                              )
                         .ToList();
            }

        }

        public static List<ADSLTelephoneHistoryInfo> GetADSLTelNoInfoList(long TelNo,
                                                                            int? PapInfos,
                                                                            List<int> CenterNames,
                                                                            List<int> Cities,
                                                                            DateTime? FromDate,
                                                                            DateTime? ToDate
                                                                            )
        {

            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLTelephoneNoHistories.Where
                    (t =>
                        ((TelNo == -1) || (TelNo == t.TelephoneNo)) &&
                        ((!PapInfos.HasValue) || (PapInfos == ((int)t.PAPInfoID))) &&
                        ((!FromDate.HasValue) || (t.InstalDate >= FromDate)) &&
                        ((!ToDate.HasValue || t.InstalDate < ToDate)) &&
                        (Cities.Count == 0 || Cities.Contains((int)t.Center.Region.CityID)) &&
                        ((CenterNames.Count == 0) || (CenterNames.Contains((int)t.CenterID)))).Select

                        (t => new ADSLTelephoneHistoryInfo
                        {
                            TelephoneNo = t.TelephoneNo,
                            Center = t.Center.Region.City.Name + ":" + t.Center.CenterName,
                            PAPInfo = t.PAPInfo.Title,
                            InstallDate_date = t.InstalDate
                        }
                        ).ToList();

            }
        }


        public static List<ADSLSellerAgentInfo> GetADSLSellerAgentInfo(List<string> ADSLSellerAgnetIDs,
                                                                      List<int> cityIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLSellerAgents
                    .Join(context.ADSLSellerAgentRecharges, a => a.ID, u => u.SellerAgentID, (a, u) => new { ADSLSellerAgent = a, ADSlSellerAgentRecharge = u }).Where
                    (t =>
                          ((ADSLSellerAgnetIDs.Count == 0) || (ADSLSellerAgnetIDs.Contains(t.ADSLSellerAgent.Title)))
                       && ((cityIDs.Count == 0) || (cityIDs.Contains((int)t.ADSLSellerAgent.CityID)))
                    //&& ((Groups.Count == 0) || (Groups.Contains((int)t.ADSLSellerAgent.GroupID)))
                        ).GroupBy(t => new
                        {

                            Title = t.ADSLSellerAgent.Title,
                            ADSLSellerAgentName = t.ADSLSellerAgent.Title,
                            CreditCash = t.ADSLSellerAgent.CreditCash,
                            CreditCashRemain = t.ADSLSellerAgent.CreditCashRemain,
                            CreditCashUse = t.ADSLSellerAgent.CreditCashUse,
                            CityName = t.ADSLSellerAgent.City.Name,

                        }).Select(t => new
                        {
                            First = t.OrderByDescending(x => x.ADSlSellerAgentRecharge.ID).First(),
                            Cost = t.Sum(x => x.ADSlSellerAgentRecharge.Cost),
                        })


                        .Select
                        (t => new ADSLSellerAgentInfo
                        {
                            CityName = t.First.ADSLSellerAgent.City.Name,
                            Title = t.First.ADSLSellerAgent.Title,
                            ADSLSellerAgentName = t.First.ADSLSellerAgent.Title,
                            CreditCash = t.First.ADSLSellerAgent.CreditCash,
                            CreditCashRemain = t.First.ADSLSellerAgent.CreditCashRemain,
                            CreditCashUse = t.First.ADSLSellerAgent.CreditCashUse,
                            RechargedCost = t.Cost,
                            ISSellModem = t.First.ADSLSellerAgent.IsSellModem,
                            RechargeDate = Date.GetPersianDate(t.First.ADSlSellerAgentRecharge.InsertDate, Date.DateStringType.Short),
                            UserRecharge = t.First.ADSlSellerAgentRecharge.User.FirstName + " " + t.First.ADSlSellerAgentRecharge.User.LastName

                        }
                         ).ToList();
            }
        }
        public static List<ADSLHistoryInfo> GetADSLHitoryInfo(List<int> Services,
                                                              string telephoneNo,
                                                              DateTime? fromDate,
                                                              DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLHistories.Where
                    (t =>
                        (Services.Count == 0 || Services.Contains((int)t.ServiceID)) &&
                        (string.IsNullOrWhiteSpace(telephoneNo) || (telephoneNo.Contains(t.TelephoneNo))) &&
                        ((!fromDate.HasValue) || (t.InsertDate >= fromDate)) &&
                        ((!toDate.HasValue) || (t.InsertDate < toDate))).Select
                        (t => new ADSLHistoryInfo
                        {
                            TelephoneNo = t.TelephoneNo,
                            ServiceTitle = t.ADSLService.Title,
                            InsertDate = Date.GetPersianDate(t.InsertDate, Date.DateStringType.Short)
                        }
                        ).ToList();


            }
        }

        public static List<ADSLInfo> GetADSLCustomerInfo(long TelephoneNo,
                                                        string CustomerName,
                                                        string UserName,
                                                        List<int> Services,
                                                        List<int> Statuses,
                                                        List<int> Cities,
                                                        List<int> centers,
                                                        List<int> paymentType,
                                                        List<int> sellers,
                                                        List<int> groups)
        //there is no relatoion to center and region so we can not check it out!!!!!
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLs.Join(context.Requests, a => a.TelephoneNo, r => r.TelephoneNo, (a, r) => new { ADSL = a, Request = r })
                    .Join(context.RequestPayments, r => r.Request.ID, p => p.RequestID, (r, p) => new { All = r, RequestPayment = p }).Where
                    (t =>
                        (Services.Count == 0 || Services.Contains((int)t.All.ADSL.TariffID)) &&
                        (Statuses.Count == 0 || Statuses.Contains((int)t.All.ADSL.Status)) &&
                         (TelephoneNo == -1 || t.All.ADSL.TelephoneNo == TelephoneNo) &&
                            //(string.IsNullOrEmpty(TelephoneNo) || t.ADSL.TelephoneNo.ToString().Contains(TelephoneNo)) &&
                        (string.IsNullOrEmpty(UserName) || t.All.ADSL.UserName.Contains(UserName)) &&
                        (string.IsNullOrEmpty(CustomerName) || t.All.ADSL.CustomerOwnerName.Equals(CustomerName))
                        && (centers.Count == 0 || centers.Contains(t.All.Request.CenterID))
                        && (Cities.Count == 0 || Cities.Contains((int)t.All.Request.Center.Region.City.ID))
                        && (paymentType.Count == 0 || paymentType.Contains((int)t.RequestPayment.PaymentType))
                        && (sellers.Count == 0 || sellers.Contains((int)t.All.Request.ADSLRequest.ADSLSellerAgent.ADSLSellerGroup.ID))
                        && (groups.Count == 0 || groups.Contains((int)t.All.Request.ADSLRequest.ADSLCustomerGroup.ID))).Select
                        (t => new ADSLInfo
                        {
                            TelephoneNo = t.All.ADSL.TelephoneNo.ToString(),
                            ServiceTitle = t.All.ADSL.ADSLService.Title,
                            CustomerOwnerName = t.All.Request.Customer.FirstNameOrTitle + " " + t.All.Request.Customer.LastName,
                            UserName = t.All.ADSL.UserName,
                            ADSLPortID = (t.All.ADSL.ADSLPort.PortNo).ToString(),
                            Status = DB.GetEnumDescriptionByValue(typeof(DB.ADSLStatus), t.All.ADSL.Status),
                            CustomerOwnerStatus = DB.GetEnumDescriptionByValue(typeof(DB.ADSLOwnerStatus), t.All.ADSL.CustomerOwnerStatus),
                            InstallDate = Date.GetPersianDate(t.All.ADSL.InstallDate, Date.DateStringType.Short),
                            Center = t.All.Request.Center.CenterName,
                            CityName = t.All.Request.Center.Region.City.Name

                        }).Distinct().ToList();
            }
        }

        public static List<PAPPortInfo> GetADSLPAPPortInfo(int? PAPs,
                                                            List<int> centers,
                                                            List<int> Statuses,
                                                            long TelNo,
                                                            long portNos)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLPAPPorts.Where
                    (t =>
                        (!PAPs.HasValue || PAPs == ((int)t.PAPInfoID)) &&
                        (centers.Count == 0 || centers.Contains((int)t.CenterID)) &&
                        (Statuses.Count == 0 || Statuses.Contains((int)t.Status)) &&
                        (TelNo == -1 || t.TelephoneNo == TelNo) &&
                        (portNos == -1 || t.PortNo == portNos)
                        ).Select
                        (t => new PAPPortInfo
                            {
                                Center = t.Center.Region.City.Name + ":" + t.Center.CenterName,
                                PAPInfo = t.PAPInfo.Title,
                                TelephoneNo = (t.TelephoneNo).ToString(),
                                PortNo = (t.PortNo).ToString(),
                                Status = DB.GetEnumDescriptionByValue(typeof(DB.ADSLPAPPortStatus), t.Status)
                            }).ToList();

            }
        }

        public static List<RequestPaymentReport> GetADSLPaymentList(DateTime? date,
                                                                    string name,
                                                                    string FicheNo,
                                                                    long telNo,
                                                                    List<int> centers,
                                                                    List<int> Cities,
                                                                    List<int> services,
                                                                    long amountSum)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.RequestPayments.Where
                    (t =>
                        (!date.HasValue || t.FicheDate == date) &&
                        (string.IsNullOrEmpty(name) || (((t.Request.Customer.FirstNameOrTitle) + " " + (t.Request.Customer.LastName)).Contains(name))) &&
                        (string.IsNullOrEmpty(FicheNo) || t.FicheNunmber.Equals(FicheNo)) &&
                        (Cities.Count == 0 || Cities.Contains((int)t.Request.Center.Region.CityID)) &&
                        (centers.Count == 0 || centers.Contains((int)t.Request.Center.CenterCode)) &&
                        (amountSum == -1 || amountSum == t.AmountSum) &&
                        (telNo == -1 || telNo == t.Request.TelephoneNo)
                    //&& (services.Count == 0 || services.Contains((int)t.service))
                        ).Select
                        (t => new RequestPaymentReport
                        {
                            Cost = t.Cost,
                            CustomerName = (t.Request.Customer.FirstNameOrTitle + " " + t.Request.Customer.LastName),
                            TelephoneNo = t.Request.TelephoneNo.ToString(),
                            Center = t.Request.Center.CenterName,
                            FicheNo = t.FicheNunmber,
                            FicheDate = t.FicheDate,
                            AmountSum = t.AmountSum,
                            RequestID = t.RequestID
                            //Service Type should be entered in Custom class and here
                        }).ToList();
            }
        }


        public static List<RequestPaymentReport> GetRequestIDs(DateTime? date,
                                                                    string name,
                                                                    string FicheNo,
                                                                    long telNo,
                                                                    List<int> centers,
                                                                    List<int> Cities,
                                                                    List<int> services,
                                                                    long amountSum)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.RequestPayments.Where
                        (t =>
                            (!date.HasValue || t.FicheDate == date) &&
                            (string.IsNullOrEmpty(name) || (((t.Request.Customer.FirstNameOrTitle) + " " + (t.Request.Customer.LastName)).Contains(name))) &&
                            (string.IsNullOrEmpty(FicheNo) || t.FicheNunmber.Equals(FicheNo)) &&
                            (Cities.Count == 0 || Cities.Contains((int)t.Request.Center.Region.CityID)) &&
                            (centers.Count == 0 || centers.Contains((int)t.Request.Center.CenterCode)) &&
                            (amountSum == -1 || amountSum == t.AmountSum) &&
                            (telNo == -1 || telNo == t.Request.TelephoneNo)).Select(t => new RequestPaymentReport
                            {
                                RequestID = t.RequestID

                            }).Distinct().ToList().Join(context.ADSLRequests, e => e.RequestID, r => r.ID, (e, r) => new { E = e, R = r }).Select
                            (t => new RequestPaymentReport
                            {
                                ServiceID = t.R.ServiceID,
                                IpDuration = t.R.IPDuration.ToString()
                            }).Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Select
                            (t => new RequestPaymentReport
                            {
                                DurationID = t.S.DurationID,
                                BandwidthID = t.S.BandWidthID
                            }).Join(context.ADSLServiceBandWidths, s => s.BandwidthID, b => b.ID, (s, b) => new { S = s, B = b }).Select
                            (t => new RequestPaymentReport
                            {
                                Bandwidth = t.B.Title
                            }).Join(context.ADSLServiceDurations, s => s.DurationID, d => d.ID, (s, d) => new { S = s, D = d }).Select
                            (t => new RequestPaymentReport
                                {
                                    Duration = t.D.Title
                                }).Join(context.ADSLChangeServices, s => s.RequestID, c => c.ID, (s, c) => new { S = s, C = c }).Select
                                (t => new RequestPaymentReport
                                {
                                    AdditionalTrafficID = t.C.AdditionalTrafficeID,
                                    OldServiceID = t.C.OldServiceID,
                                    NewServiceID = t.C.NewServiceID

                                }).ToList();
            }
        }



        public static List<RequestPaymentReport> GetADSLInstallmentCostByExpertList(DateTime? date,
                                                              string name,
                                                              string FicheNo,
                                                              long telNo,
                                                              List<int> centers,
                                                              List<int> Cities,
                                                              long amountSum)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.RequestPayments.Where
                    (t =>
                        (t.BaseCostID == 37) &&
                        (!date.HasValue || t.FicheDate == date) &&
                        (string.IsNullOrEmpty(name) || (((t.Request.Customer.FirstNameOrTitle) + " " + (t.Request.Customer.LastName)).Contains(name))) &&
                        (string.IsNullOrEmpty(FicheNo) || t.FicheNunmber.Equals(FicheNo)) &&
                        (Cities.Count == 0 || Cities.Contains((int)t.Request.Center.Region.CityID)) &&
                        (centers.Count == 0 || centers.Contains((int)t.Request.Center.CenterCode)) &&
                        (amountSum == -1 || amountSum == t.AmountSum) &&
                        (telNo == -1 || telNo == t.Request.TelephoneNo)
                    //&& (services.Count == 0 || services.Contains((int)t.service))
                        ).Select
                        (t => new RequestPaymentReport
                        {
                            Cost = t.Cost,
                            CustomerName = (t.Request.Customer.FirstNameOrTitle + " " + t.Request.Customer.LastName),
                            TelephoneNo = t.Request.TelephoneNo.ToString(),
                            Center = t.Request.Center.CenterName,
                            FicheNo = t.FicheNunmber,
                            FicheDate = t.FicheDate,
                            AmountSum = t.AmountSum
                            //Service Type should be entered in Custom class and here
                        }).ToList();
            }
        }
        public static List<ADSLChargedDischargedInfo> GetADSLDyeriDischargeInfo(List<int> centers,
                                                                                List<int> cities,
                                                                                DateTime? fromDate,
                                                                                DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Where(t =>
                    (centers.Count == 0 || centers.Contains((int)t.CenterID)) &&
                    (cities.Count == 0 || cities.Contains((int)t.Center.Region.City.ID)) &&
                    (!fromDate.HasValue || fromDate <= t.EndDate) &&
                    (!toDate.HasValue || toDate > t.EndDate))
                    .GroupBy(t => new
                              {
                                  center = t.Center.CenterName,
                                  region = t.Center.Region.Title,
                                  City = t.Center.Region.City.Name

                              }).Select(t => new ADSLChargedDischargedInfo
                              {
                                  Center = t.Key.center,
                                  Region = t.Key.region,
                                  City = t.Key.City
                              }).ToList();

            }
        }

        public static List<ADSLChargedDischargedInfo> GetNumberofCharged(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Join(context.RequestPayments, r => r.ID, p => p.RequestID, (r, p) => new { Request = r, RequestPayment = p }).Where(
                    t => (t.Request.EndDate != null &&
                        (t.Request.RequestTypeID == (byte)DB.RequestType.ADSL) &&
                        (cityIDs.Count == 0 || cityIDs.Contains((int)t.Request.Center.Region.CityID))
                        && (centerIDs.Count == 0 || centerIDs.Contains((int)t.Request.CenterID))
                        && (!fromDate.HasValue || fromDate <= t.Request.EndDate)
                        && (!toDate.HasValue || toDate >= t.Request.EndDate))
                        && (t.RequestPayment.BaseCostID == 44))
                        .GroupBy(t => new
                        {
                            center = t.Request.Center.CenterName,
                            //DayeryAmountSum=t.ADSLRequest.ADSLService.PriceSum
                        }).Select(t => new ADSLChargedDischargedInfo
                        {
                            NumberPrePaidOfCharged = t.Count(),
                            Center = t.Key.center,
                            DayeriAmountSum = t.Sum(x => x.RequestPayment.AmountSum)
                        }).ToList();
            }

        }
        public static List<ADSLChargedDischargedInfo> GetNumberofADSLRequestCharged(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate
                                                                                , List<int> ServiceIDs, List<int> GroupIDs,
                                                                                 List<int> BandWidthIDs, List<int> TrafficIDs,
                                                                                 List<int> DurationIDs,
                                                                                 List<int> SaleWayIDs, List<int> CustomerGroupIDs,
                                                                                 List<int> ServicePaymentTypeIDs, List<int> PaymentTypeIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Join(context.RequestPayments, r => r.ID, p => p.RequestID, (r, p) => new { Request = r, RequestPayment = p }).Where(
                    t => (t.Request.EndDate != null &&
                        (t.Request.RequestTypeID == (byte)DB.RequestType.ADSL) &&
                        (cityIDs.Count == 0 || cityIDs.Contains((int)t.Request.Center.Region.CityID))
                        && (centerIDs.Count == 0 || centerIDs.Contains((int)t.Request.CenterID))
                        && (!fromDate.HasValue || fromDate <= t.Request.EndDate)
                        && (!toDate.HasValue || toDate > t.Request.EndDate))
                        && (t.RequestPayment.BaseCostID == 44)
                        && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.Request.ADSLRequest.ADSLService.ID))
                        && (GroupIDs.Count == 0 || GroupIDs.Contains((int)t.Request.ADSLRequest.ADSLService.GroupID))
                        && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.Request.ADSLRequest.ADSLService.BandWidthID))
                        && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.Request.ADSLRequest.ADSLService.TrafficID))
                        && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.Request.ADSLRequest.ADSLService.DurationID))
                        && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.Request.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                        && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.Request.ADSLRequest.ADSLService.PaymentTypeID))
                        && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestPayment.PaymentType))
                    //&& (t.RequestPayment.PaymentType == (byte)DB.PaymentType.Cash)
                        )
                        .GroupBy(t => new
                        {
                            center = t.Request.Center.CenterName,
                            //DayeryAmountSum=t.ADSLRequest.ADSLService.PriceSum
                        }).Select(t => new ADSLChargedDischargedInfo
                        {
                            NumberPrePaidOfCharged = t.Count(),
                            Center = t.Key.center,
                            DayeriAmountSum = t.Sum(x => x.RequestPayment.AmountSum)
                        }).ToList();
            }
        }


        public static List<ADSLChargedDischargedInfo> GetNumberofPostPaidCharged(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Join(context.RequestPayments, r => r.ID, p => p.RequestID, (r, p) => new { Request = r, RequestPayment = p }).Where(
                    t => (t.Request.EndDate != null &&
                        (t.Request.RequestTypeID == (byte)DB.RequestType.ADSL) &&
                        (cityIDs.Count == 0 || cityIDs.Contains((int)t.Request.Center.Region.CityID))
                        && (centerIDs.Count == 0 || centerIDs.Contains((int)t.Request.CenterID))
                        && (!fromDate.HasValue || fromDate <= t.Request.EndDate)
                        && (!toDate.HasValue || toDate > t.Request.EndDate))
                        && (t.RequestPayment.BaseCostID == 44)
                        && (t.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment))
                        .GroupBy(t => new
                        {
                            center = t.Request.Center.CenterName,
                            //DayeryAmountSum=t.ADSLRequest.ADSLService.PriceSum
                        }).Select(t => new ADSLChargedDischargedInfo
                        {
                            NumberPostPaidOfCharged = t.Count(),
                            Center = t.Key.center,
                            DayeriAmountSum = t.Sum(x => x.RequestPayment.AmountSum)
                        }).ToList();
            }

        }

        public static List<ADSLChargedDischargedInfo> GetNumberofFreeCharged(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Join(context.RequestPayments, r => r.ID, p => p.RequestID, (r, p) => new { Request = r, RequestPayment = p }).Where(
                    t => (t.Request.EndDate != null &&
                        (t.Request.RequestTypeID == (byte)DB.RequestType.ADSL) &&
                        (cityIDs.Count == 0 || cityIDs.Contains((int)t.Request.Center.Region.CityID))
                        && (centerIDs.Count == 0 || centerIDs.Contains((int)t.Request.CenterID))
                        && (!fromDate.HasValue || fromDate <= t.Request.EndDate)
                        && (!toDate.HasValue || toDate > t.Request.EndDate))
                        && (t.RequestPayment.BaseCostID == 44)
                        && (t.RequestPayment.PaymentType == (byte)DB.PaymentType.NoPayment))
                        .GroupBy(t => new
                        {
                            center = t.Request.Center.CenterName,
                            //DayeryAmountSum=t.ADSLRequest.ADSLService.PriceSum
                        }).Select(t => new ADSLChargedDischargedInfo
                        {
                            NumberFreeOfCharged = t.Count(),
                            Center = t.Key.center,
                            DayeriAmountSum = t.Sum(x => x.RequestPayment.AmountSum)
                        }).ToList();
            }

        }

        public static List<ADSLChargedDischargedInfo> GetNumberofADSLChangeService(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate
                                                                                , List<int> ServiceIDs, List<int> GroupIDs,
                                                                                 List<int> BandWidthIDs, List<int> TrafficIDs,
                                                                                 List<int> DurationIDs,
                                                                                 List<int> SaleWayIDs, List<int> CustomerGroupIDs,
                                                                                 List<int> ServicePaymentTypeIDs, List<int> PaymentTypeIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Join(context.RequestPayments, r => r.ID, p => p.RequestID, (r, p) => new { Request = r, RequestPayment = p }).Where(
                    t => (t.Request.EndDate != null &&
                        (t.Request.RequestTypeID == (byte)DB.RequestType.ADSLChangeService) &&
                        (cityIDs.Count == 0 || cityIDs.Contains((int)t.Request.Center.Region.CityID))
                        && (centerIDs.Count == 0 || centerIDs.Contains((int)t.Request.CenterID))
                        && (!fromDate.HasValue || fromDate <= t.Request.EndDate)
                        && (!toDate.HasValue || toDate > t.Request.EndDate))
                        && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.Request.ADSLChangeService.ADSLService.ID))
                        && (GroupIDs.Count == 0 || GroupIDs.Contains((int)t.Request.ADSLChangeService.ADSLService.GroupID))
                        && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.Request.ADSLChangeService.ADSLService.BandWidthID))
                        && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.Request.ADSLChangeService.ADSLService.TrafficID))
                        && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.Request.ADSLChangeService.ADSLService.DurationID))
                        && (SaleWayIDs.Count == 0 || SaleWayIDs.Contains((int)t.Request.ADSLChangeService.ChangeServiceType))
                        && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.Request.ADSLChangeService.ADSLService.ADSLServiceGroup.CustomerGroupID))
                        && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.Request.ADSLChangeService.ADSLService.PaymentTypeID))
                        && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestPayment.PaymentType))
                        && (t.RequestPayment.BaseCostID == 44 || t.RequestPayment.BaseCostID == 45))
                        .GroupBy(t => new
                        {
                            center = t.Request.Center.CenterName,
                            //DayeryAmountSum=t.ADSLRequest.ADSLService.PriceSum
                        }).Select(t => new ADSLChargedDischargedInfo
                        {
                            NumberOfADSLChangeService = t.Count(),
                            Center = t.Key.center,
                            DayeriAmountSum = t.Sum(x => x.RequestPayment.AmountSum)
                        }).ToList();
            }

        }

        public static List<ADSLChargedDischargedInfo> GetNumberOfRecharged(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Where(
                t => (t.EndDate != null &&
                        (t.RequestTypeID == (byte)DB.RequestType.ADSLChangeService) &&
                        (cityIDs.Count == 0 || cityIDs.Contains((int)t.Center.Region.CityID))
                        && (centerIDs.Count == 0 || centerIDs.Contains((int)t.CenterID))
                        && (!fromDate.HasValue || fromDate <= t.EndDate)
                        && (!toDate.HasValue || toDate > t.EndDate)))
                        .GroupBy(t => new
                        {
                            center = t.Center.CenterName

                        }).Select(t => new ADSLChargedDischargedInfo
                        {
                            NumberOfADSLChangeService = t.Count(),
                            Center = t.Key.center
                        }).ToList();
            }

        }

        public static List<ADSLChargedDischargedInfo> GetNumberOfExpired(List<int> cityIDs, List<int> centerIDs,
                                                                        DateTime? fromDate, DateTime? toDate,
                                                                        DateTime? PassedDays, bool? HasPort)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLs.Where(
                t => (
                        (t.ExpDate < DB.GetServerDate().Date) &&
                        (cityIDs.Count == 0 || cityIDs.Contains((int)t.Telephone.Center.Region.CityID))
                        && (centerIDs.Count == 0 || centerIDs.Contains((int)t.Telephone.CenterID))
                        && (!fromDate.HasValue || fromDate <= t.ExpDate))
                        && (!toDate.HasValue || toDate > t.ExpDate)
                        && (!PassedDays.HasValue || (t.ExpDate.Value.Date) == PassedDays)
                        && (!HasPort.HasValue || ((HasPort == false) ? (t.ADSLPortID == null) : (t.ADSLPortID != null))))
                        .GroupBy(t => new
                        {
                            center = t.Telephone.Center.CenterName,
                            city = t.Telephone.Center.Region.City.Name,


                        }).Select(t => new ADSLChargedDischargedInfo
                        {
                            NumberOfExpired = t.Count(),
                            Center = t.Key.center,
                            City = t.Key.city,
                            ExpiredAmountSum = t.Sum(x => x.ADSLService.PriceSum),


                        }).ToList();
            }

        }
        public static List<ADSLChargedDischargedInfo> GetNumberofDisCharged(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate
                                                                                , List<int> ServiceIDs, List<int> GroupIDs,
                                                                                 List<int> BandWidthIDs, List<int> TrafficIDs,
                                                                                 List<int> DurationIDs,
                                                                                 List<int> SaleWayIDs, List<int> CustomerGroupIDs,
                                                                                 List<int> ServicePaymentTypeIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Where(t =>
                    ((cityIDs.Count == 0 || cityIDs.Contains((int)t.Center.Region.CityID)) &&
                        (t.RequestTypeID == (byte)DB.RequestType.ADSLDischarge)
                        && (centerIDs.Count == 0 || centerIDs.Contains((int)t.CenterID))
                        && (!fromDate.HasValue || fromDate <= t.EndDate)
                        && (!toDate.HasValue || toDate > t.EndDate)
                        && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ADSLDischarge.ADSLService.ID))
                        && (GroupIDs.Count == 0 || GroupIDs.Contains((int)t.ADSLDischarge.ADSLService.GroupID))
                        && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.ADSLDischarge.ADSLService.BandWidthID))
                        && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLDischarge.ADSLService.TrafficID))
                        && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLDischarge.ADSLService.DurationID))
                        && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLDischarge.ADSLService.ADSLServiceGroup.CustomerGroupID))
                        && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ADSLDischarge.ADSLService.PaymentTypeID))))
                        .GroupBy(t => new
                        {
                            center = t.Center.CenterName

                        }).Select(t => new ADSLChargedDischargedInfo
                        {
                            NumberOfDischarge = t.Count(),
                            Center = t.Key.center
                        }).ToList();
            }

        }

        public static List<ADSLChargedDischargedInfo> GetPrePaidIncome(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.RequestPayments.Where(
                   t => (
                       //t.EndDate == null &&
                       (cityIDs.Count == 0 || cityIDs.Contains((int)t.Request.Center.Region.CityID))
                       && (centerIDs.Count == 0 || centerIDs.Contains((int)t.Request.CenterID))
                       && (!fromDate.HasValue || fromDate <= t.Request.EndDate)
                       && (!toDate.HasValue || toDate > t.Request.EndDate)
                       && (t.PaymentType == (byte)DB.ADSLPaymentType.PrePaid)))
                       .GroupBy(t => new
                       {
                           center = t.Request.Center.CenterName,
                           //amountsum=t.AmountSum

                       }).Select(t => new ADSLChargedDischargedInfo
                       {
                           PrePaidIncome = t.Sum(x => x.AmountSum),
                           Center = t.Key.center
                       }).ToList();
            }

        }

        public static List<ADSLChargedDischargedInfo> GetPostPaidIncome(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.RequestPayments.Where(
                   t => (
                       //t.EndDate == null &&
                       (cityIDs.Count == 0 || cityIDs.Contains((int)t.Request.Center.Region.CityID))
                       && (centerIDs.Count == 0 || centerIDs.Contains((int)t.Request.CenterID))
                       && (!fromDate.HasValue || fromDate <= t.Request.EndDate)
                       && (!toDate.HasValue || toDate >= t.Request.EndDate)
                       && (t.PaymentType == (byte)DB.ADSLPaymentType.PostPaid)))
                       .GroupBy(t => new
                       {
                           center = t.Request.Center.CenterName,
                           //amountsum = t.AmountSum

                       }).Select(t => new ADSLChargedDischargedInfo
                       {
                           PostPaidIncome = t.Sum(x => x.AmountSum),
                           Center = t.Key.center
                       }).ToList();
            }

        }

        public static List<ADSLChargedDischargedInfo> GetNumberOfUsedPorts(List<int> Cities, List<int> centers)
        {
            using (MainDataContext context = new MainDataContext())
            {
                //return context.ADSLEquipments.Join(context.ADSLPorts, e => e.ID, p => p.ADSLEquipmentID, (e, p) => new { E = e, P = p })
                //    .Where(t =>
                //        (Cities.Count == 0 || Cities.Contains((int)t.E.Center.Region.CityID)) &&
                //        (centers.Count == 0 || centers.Contains((int)t.E.CenterID)) &&
                //        (t.P.Status == (byte)DB.ADSLPortStatus.Closed))
                //        .GroupBy(t => new
                //        {
                //            center = t.E.Center.CenterName
                //        }).Select(t => new ADSLChargedDischargedInfo
                //        {
                //            NumberOfUsedPorts = t.Count(),
                //            Center = t.Key.center

                //        }).ToList();
                return context.ADSLPorts
                   .Where(t =>
                       (t.Status == (byte)DB.ADSLPortStatus.Install)
                        && (Cities.Count == 0 || Cities.Contains(t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Center.Region.CityID))
                   && (centers.Count == 0 || centers.Contains(t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.CenterID)))
                   .GroupBy(t => new
                   {
                       center = t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Center.CenterName
                   }
                   ).Select(t => new ADSLChargedDischargedInfo
                   {
                       NumberOfUsedPorts = t.Count(),
                       Center = t.Key.center

                   }).ToList();
            }
        }

        public static List<ADSLChargedDischargedInfo> GetNumberOfActiveCustomers(List<int> cityIDs, List<int> centerIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLs.Join(context.Telephones, a => a.TelephoneNo, r => r.TelephoneNo, (a, r) => new { ADSl = a, Telephone = r })
                    .Where(t => (cityIDs.Count == 0 || cityIDs.Contains(t.Telephone.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains(t.Telephone.CenterID))
                    && (t.ADSl.Status == (int)DB.ADSLStatus.Connect) && t.ADSl.ExpDate > DB.GetServerDate()).GroupBy
                    (t => new
                    {
                        center = t.Telephone.Center.CenterName

                    }).Select(t => new ADSLChargedDischargedInfo
                    {
                        NumberOfActiveCustomers = t.Count(),
                        Center = t.Key.center
                    }).ToList();

                // so far ADSL table does not have ay relation with other tables so we can not chach city and center conditions!


            }
        }


        public static ADSLGeneralCustomerInfo GetGeneralADSLCustomersInfo()
        {
            ADSLGeneralCustomerInfo adslcustomerinfo = new ADSLGeneralCustomerInfo();

            adslcustomerinfo.NumberOfCutCustomers = NumberOfADSLCutCustomers();
            adslcustomerinfo.NumberOfDischargeCustomers = NumberOfADSLDischargeCustomers();
            adslcustomerinfo.NumberOfPendingCustomers = NumberOfADSLPendingCustomers();
            adslcustomerinfo.NumberOfConnectCustomers = NumberOfADSLConnetCustomers();
            adslcustomerinfo.NumberOfCustomers = NumberOfADSLCustomers();

            return adslcustomerinfo;
        }

        public static int NumberOfADSLCutCustomers()
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLs
                    .Where(t => (t.Status == (byte)DB.ADSLStatus.Cut)).Count();

            }
        }

        public static int NumberOfADSLDischargeCustomers()
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLs
                    .Where(t => (t.Status == (byte)DB.ADSLStatus.Discharge)).Count();

            }
        }

        public static int NumberOfADSLConnetCustomers()
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLs
                    .Where(t => (t.Status == (byte)DB.ADSLStatus.Connect)).Count();

            }
        }

        public static int NumberOfADSLPendingCustomers()
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLs
                    .Where(t => (t.Status == (byte)DB.ADSLStatus.Pending)).Count();

            }
        }

        public static int NumberOfADSLCustomers()
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLs.Count();

            }
        }

        public static List<ADSLRequestInfo> GetNumberAndCostSaledADSL(List<int> ADSLSellerAgentIDs, DateTime? fromDate,
                                                                        DateTime? toDate, List<int> cityIDs, List<int> centerIDs,
                                                                        List<int> serviceIDs, List<int> groupIDs, List<int> TypeIDs,
                                                                        List<int> bandWidthIDs, List<int> trafficIDs, List<int> durationIDs,
            //List<int> saleWays,
                                                                        bool? hasModem, List<int> preOrPostPaid, List<int> ADSLSellerAgentUserIDs,
                                                                        List<int> CustomerGrupIDs, List<int> ServiceTypeIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLSellerAgentUsers, a => a.ADSLSellerAgentID, u => u.SellerAgentID, (a, u) => new { ADSLRequest = a, ADSLSellerAgentUser = u })
                    .Join(context.RequestPayments, a => a.ADSLRequest.ID, p => p.RequestID, (a, p) => new { ALL = a, RequestPayment = p })
                    //.Join(context.ADSLCustomerGroups, m => m.ALL.ADSLRequest.ADSLService.GroupID, g => g.ID, (m, g) => new { ALLM = m, ADSLCustomerGroup = g })
                     .Where(t =>
                      (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ALL.ADSLRequest.ADSLSellerAgentID))
                    && (!fromDate.HasValue || fromDate <= t.ALL.ADSLRequest.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ALL.ADSLRequest.Request.EndDate)
                    && (cityIDs.Count == 0 || cityIDs.Contains((int)t.ALL.ADSLRequest.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains((int)t.ALL.ADSLRequest.Request.CenterID))
                    && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.ALL.ADSLRequest.ServiceID))
                    && (groupIDs.Count == 0 || groupIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.ADSLServiceGroup.ID))
                          //&& (saleWays.Count == 0 || saleWays.Contains((int)t.SaleWay))
                    && (bandWidthIDs.Count == 0 || bandWidthIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.BandWidthID))
                    && (trafficIDs.Count == 0 || trafficIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.TrafficID))
                    && (durationIDs.Count == 0 || durationIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.DurationID))
                    && (TypeIDs.Count == 0 || TypeIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.TypeID))
                    && (preOrPostPaid.Count == 0 || preOrPostPaid.Contains((int)t.RequestPayment.PaymentType))
                    && (ServiceTypeIDs.Count == 0 || ServiceTypeIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.PaymentTypeID))
                    && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ALL.ADSLSellerAgentUser.ID))
                    && (CustomerGrupIDs.Count == 0 || CustomerGrupIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (t.ALL.ADSLRequest.NeedModem == hasModem || hasModem == null)
                    && (t.ALL.ADSLRequest.Request.EndDate != null)
                    && (t.RequestPayment.PaymentDate != null || t.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment))
                     .Select(t => new
                     {

                         //SumCostOfSaledADSLService = (t.ALLM.ALL.ADSLRequest.ADSLService.Tax != null && t.ALLM.ALL.ADSLRequest.ADSLService.Abonman != null) ? Convert.ToInt64((Convert.ToDecimal(t.ALLM.ALL.ADSLRequest.ADSLService.Price) +
                         //(t.ALLM.ALL.ADSLRequest.ADSLService.Abonman * Convert.ToInt32(t.ALLM.ALL.ADSLRequest.ADSLService.ADSLServiceDuration.Title)) +
                         //Convert.ToDecimal((int)t.ALLM.ALL.ADSLRequest.ADSLService.Tax * 0.01 *
                         //(t.ALLM.ALL.ADSLRequest.ADSLService.Price + (t.ALLM.ALL.ADSLRequest.ADSLService.Abonman * Convert.ToInt32(t.ALLM.ALL.ADSLRequest.ADSLService.ADSLServiceDuration.Title))))))
                         //: (t.ALLM.ALL.ADSLRequest.ADSLService.Tax == null && t.ALLM.ALL.ADSLRequest.ADSLService.Abonman != null) ?
                         //(t.ALLM.ALL.ADSLRequest.ADSLService.Price + (t.ALLM.ALL.ADSLRequest.ADSLService.Price + t.ALLM.ALL.ADSLRequest.ADSLService.Abonman * Convert.ToInt32(t.ALLM.ALL.ADSLRequest.ADSLService.ADSLServiceDuration.Title))) :
                         //(t.ALLM.ALL.ADSLRequest.ADSLService.Tax != null && t.ALLM.ALL.ADSLRequest.ADSLService.Abonman == null) ?
                         //Convert.ToInt64((Convert.ToDecimal(t.ALLM.ALL.ADSLRequest.ADSLService.Price) +
                         //Convert.ToDecimal((int)t.ALLM.ALL.ADSLRequest.ADSLService.Tax * 0.01 *
                         //(t.ALLM.ALL.ADSLRequest.ADSLService.Price)))) :
                         //Convert.ToInt64((Convert.ToDecimal(t.ALLM.ALL.ADSLRequest.ADSLService.Price))),
                         SumCostOfSaledADSLService = t.ALL.ADSLRequest.ADSLService.PriceSum,
                         ServiceTitle = t.ALL.ADSLRequest.ADSLService.Title,
                         center = t.ALL.ADSLRequest.Request.Center.CenterName,
                         city = t.ALL.ADSLRequest.Request.Center.Region.City.Name
                     })
                        .GroupBy(t => new
                        {
                            ServiceTitle = t.ServiceTitle,
                            center = t.center,
                            city = t.city

                        }).Select(t => new ADSLRequestInfo
                        {
                            SumCostOfSaledADSLService = t.Sum(x => (long)x.SumCostOfSaledADSLService),
                            CustomerCount = t.Count(),
                            ServiceTitle = t.Key.ServiceTitle,
                            Center = t.Key.center,
                            CityName = t.Key.city
                        })
                                .ToList();

            }
        }

        public static List<ADSLRequestInfo> GetADSLSaleInfo(List<int> ADSLSellerAgentIDs, DateTime? fromDate,
                                                            DateTime? toDate, List<int> cityIDs, List<int> centerIDs,
                                                            List<int> serviceIDs, List<int> groupIDs, List<int> TypeIDs,
                                                            List<int> bandWidthIDs, List<int> trafficIDs, List<int> durationIDs,
                                                            bool? hasModem, List<int> preOrPostPaid, List<int> ADSLSellerAgentUserIDs,
                                                            List<int> CustomerGrupIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLSellerAgentUsers, a => a.ADSLSellerAgentID, u => u.SellerAgentID, (a, u) => new { ADSLRequest = a, ADSLSellerAgentUser = u })
                    .Join(context.RequestPayments, a => a.ADSLRequest.ID, p => p.RequestID, (a, p) => new { ALL = a, RequestPayment = p })
                    //.Join(context.ADSLCustomerGroups, m => m.ALL.ADSLRequest.ADSLService.GroupID, g => g.ID, (m, g) => new { ALLM = m, ADSLCustomerGroup = g })
                     .Where(t =>
                      (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ALL.ADSLRequest.ADSLSellerAgentID))
                    && (!fromDate.HasValue || fromDate <= t.ALL.ADSLRequest.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ALL.ADSLRequest.Request.EndDate)
                    && (cityIDs.Count == 0 || cityIDs.Contains((int)t.ALL.ADSLRequest.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains((int)t.ALL.ADSLRequest.Request.CenterID))
                    && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.ALL.ADSLRequest.ServiceID))
                    && (groupIDs.Count == 0 || groupIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.ADSLServiceGroup.ID))
                          //&& (saleWays.Count == 0 || saleWays.Contains((int)t.SaleWay))
                    && (bandWidthIDs.Count == 0 || bandWidthIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.BandWidthID))
                    && (trafficIDs.Count == 0 || trafficIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.TrafficID))
                    && (durationIDs.Count == 0 || durationIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.DurationID))
                    && (TypeIDs.Count == 0 || TypeIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.TypeID))
                    && (preOrPostPaid.Count == 0 || preOrPostPaid.Contains((int)t.RequestPayment.PaymentType))
                    && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ALL.ADSLSellerAgentUser.ID))
                    && (CustomerGrupIDs.Count == 0 || CustomerGrupIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (t.ALL.ADSLRequest.NeedModem == hasModem || hasModem == null)
                    && (t.ALL.ADSLRequest.Request.EndDate != null)
                    && (t.RequestPayment.PaymentDate != null || t.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Select(
                    t => new ADSLRequestInfo
                    {
                        CustomerOwnerName = t.ALL.ADSLRequest.Request.Customer.FirstNameOrTitle + " " + t.ALL.ADSLRequest.Request.Customer.LastName,
                        EndDate = Date.GetPersianDate(t.ALL.ADSLRequest.Request.EndDate, Date.DateStringType.Short),
                        TelephoneNo = t.ALL.ADSLRequest.Request.TelephoneNo.ToString(),
                        ServiceTitle = t.ALL.ADSLRequest.ADSLService.Title,
                        Cost = t.ALL.ADSLRequest.ADSLService.PriceSum
                    }).ToList();
            }

        }

        public static List<ADSLRequestInfo> GetReadyToInstallCustomers(List<int> centers,
                                                                             List<int> Cities,
                                                                             DateTime? fromdate,
                                                                             DateTime? todate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Where(t =>
                    (t.Request.StatusID == (byte)DB.ADSLRequestStep.ForeignSupport) &&
                    (Cities.Count == 0 || Cities.Contains((int)t.Request.Center.Region.CityID)) &&
                    (centers.Count == 0 || centers.Contains((int)t.Request.CenterID)) &&
                    (!fromdate.HasValue || fromdate >= t.Request.InsertDate) &&
                    (!todate.HasValue || todate <= t.Request.InsertDate)).Select
                    (t => new ADSLRequestInfo
                    {
                        CustomerOwnerName = t.Customer.FirstNameOrTitle + " " + t.Customer.LastName,
                        TelephoneNo = t.TelephoneNo.ToString(),
                        MobileNO = t.Customer.MobileNo,
                        MDFPortNo = t.ADSLPort.PortNo,
                        RegistrationDate = Date.GetPersianDate(t.Request.InsertDate, Date.DateStringType.Short),
                        MDFDate = Date.GetPersianDate(t.MDFDate, Date.DateStringType.Short)

                    }).ToList();


            }
        }

        public static List<ADSLRequestInfo> GetCustomersDeliveredModemInfo(List<int> cities,
                                                                            List<int> centers,
                                                                            DateTime? fromdate,
                                                                            DateTime? todate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests
                    .Join(context.ADSLModemProperties, m => m.ModemID, p => p.ADSLModemID, (m, p) => new { ADSLRequest = m, ADSLModemProperty = p })
                    .Where(t =>
                    (cities.Count == 0 || cities.Contains((int)t.ADSLRequest.Request.Center.Region.CityID)) &&
                    (t.ADSLRequest.NeedModem == true && t.ADSLRequest.ModemID != null && t.ADSLRequest.Request.EndDate != null) &&
                    (centers.Count == 0 || centers.Contains((int)t.ADSLRequest.Request.CenterID)) &&
                    (!fromdate.HasValue || fromdate <= t.ADSLRequest.InstallDate) &&
                    (!todate.HasValue || todate >= t.ADSLRequest.InstallDate)).Select(t => new ADSLRequestInfo
                    {
                        CustomerOwnerName = t.ADSLRequest.Customer.FirstNameOrTitle + " " + t.ADSLRequest.Customer.LastName,
                        TelephoneNo = t.ADSLRequest.Request.TelephoneNo.ToString(),
                        //ModemType = t.ADSLRequest.Title + "-" + t.All.ADSLModem.Model,
                        MDFPortNo = t.ADSLRequest.ADSLPort.PortNo,
                        RegistrationDate = Date.GetPersianDate(t.ADSLRequest.InstallDate, Date.DateStringType.Short),
                        ModemSetupUser = t.ADSLRequest.User3.UserName,
                        ModemSerial = t.ADSLModemProperty.SerialNo,
                        ServiceTitle = t.ADSLRequest.ADSLService.Title


                    }).Distinct().ToList();
            }
        }

        public static List<RequestInfo> GetCityCenterSaleStatistics(List<int> cities, List<int> centers)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Where(t =>

                    (cities.Count == 0 || cities.Contains((int)t.Center.Region.CityID)) &&
                    (centers.Count == 0 || centers.Contains((int)t.CenterID)) &&
                    (t.RequestTypeID == (byte)DB.RequestType.ADSL)
                    &&
                    (t.EndDate != null)
                    ).GroupBy
                    (t => new
                    {
                        center = t.Center.CenterName,
                        cityname = t.Center.Region.City.Name
                    }).
                    Select(t => new RequestInfo
                    {
                        CenterName = t.Key.center,
                        NumberOfSaledADSL = t.Count(),
                        CityName = t.Key.cityname
                    }).ToList();
            }
        }


        public static List<ADSLRequestInfo> GetCitySellerSaleStatistics(List<int> cities)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Where(t =>
                    (cities.Count == 0 || cities.Contains((int)t.Request.Center.Region.City.ID))
                    &&
                    (t.Request.EndDate != null)
                    ).GroupBy(t => new
                    {
                        seller = t.ADSLSellerAgent.Title
                    }).Select(t => new ADSLRequestInfo
                      {
                          SellerAgentName = t.Key.seller,
                          NumberOfADSLSaled = t.Count()
                      }).ToList();
            }
        }

        //public static List<ADSLRequestInfo> GetADSLSellerAgentSaleInfo(List<int> SellerAgents, DateTime? FromDate, DateTime? ToDate)
        //{
        //    using (MainDataContext context = new MainDataContext())
        //    {
        //        return context.ADSLRequests.Join(context.RequestPayments, r => r.ID, p => p.RequestID, (r, p) => new { R = r, P = p }).
        //            Where(t =>
        //            (SellerAgents.Count == 0 || SellerAgents.Contains((int)t.R.ADSLSellerAgentID)) &&
        //            (!FromDate.HasValue || FromDate <= t.R.Request.InsertDate) &&
        //            (!ToDate.HasValue || ToDate >= t.R.Request.InsertDate) &&
        //            (t.R.ADSLSellerAgentID != null)).GroupBy(t => new
        //            {
        //                ID=t.P.RequestID,
        //                ADSLSellerAgentName = t.R.ADSLSellerAgent.Title,
        //                SaleWay = t.R.SaleWay,
        //                cost = t.P.AmountSum

        //            }).GroupBy(t=> new
        //            {
        //                ADSLSellerAgent=t.Key.ADSLSellerAgentName,
        //                SaleWay = t.Key.SaleWay,
        //                cost = t.Key.cost

        //            }).Select(x => new ADSLRequestInfo
        //            {
        //                SellerAgentName = x.Key.ADSLSellerAgent,
        //                SaleWayByte = x.Key.SaleWay,
        //                NumberOfADSLSaled = x.Count(),
        //                Cost = x.Count() * x.Key.cost

        //            }).ToList();
        //    }
        //}

        public static List<ADSLRequestInfo> GetADSLSellerAgentSaleInfo(List<int> ADSLSellerAgentIDs, DateTime? fromDate,
                                                                                DateTime? toDate, List<int> cityIDs, List<int> centerIDs,
                                                                                List<int> serviceIDs, List<int> groupIDs, List<int> TypeIDs,
                                                                                List<int> bandWidthIDs, List<int> trafficIDs, List<int> durationIDs,
                                                                                 bool? hasModem, List<int> preOrPostPaid
                                                                                , List<int> ADSLSellerAgentUserIDs, List<int> ADSLCustomerGroupIDs, List<int> ServicePaymentTypeIDs
                                                                                , DateTime? FromPaymentDate, DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLRequests.Join(context.ADSLSellerAgentUsers, a => a.ADSLSellerAgentID, u => u.SellerAgentID, (a, u) => new { ADSLRequest = a, ADSLSellerAgentUser = u })
                    .Join(context.RequestPayments, a => a.ADSLRequest.ID, p => p.RequestID, (a, p) => new { ALL = a, RequestPayment = p })
                    //.Join(context.ADSLCustomerGroups, m => m.ALL.ADSLRequest.ADSLService.GroupID, g => g.ID, (m, g) => new { ALLM = m, ADSLCustomerGroup = g })
                    .Where(t =>
                    (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ALL.ADSLRequest.ADSLSellerAgentID))
                    && (!fromDate.HasValue || fromDate <= t.ALL.ADSLRequest.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ALL.ADSLRequest.Request.EndDate)
                    && (cityIDs.Count == 0 || cityIDs.Contains((int)t.ALL.ADSLRequest.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains((int)t.ALL.ADSLRequest.Request.CenterID))
                    && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.ALL.ADSLRequest.ServiceID))
                    && (groupIDs.Count == 0 || groupIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.GroupID))
                        //&& (saleWays.Count == 0 || saleWays.Contains((int)t.SaleWay))
                    && (bandWidthIDs.Count == 0 || bandWidthIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.BandWidthID))
                    && (trafficIDs.Count == 0 || trafficIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.TrafficID))
                    && (durationIDs.Count == 0 || durationIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.DurationID))
                    && (TypeIDs.Count == 0 || TypeIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.TypeID))
                    && (t.ALL.ADSLRequest.NeedModem == hasModem || hasModem == null)
                    && (preOrPostPaid.Count == 0 || preOrPostPaid.Contains((int)t.RequestPayment.PaymentType))
                    && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ALL.ADSLSellerAgentUser.ID))
                    && (ADSLCustomerGroupIDs.Count == 0 || ADSLCustomerGroupIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (t.ALL.ADSLRequest.Request.EndDate != null)
                    && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.PaymentTypeID))
                    && (t.ALL.ADSLRequest.ADSLSellerAgentID != null)
                    && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.RequestPayment.UserID))
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestPayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.RequestPayment.PaymentDate)
                    && (t.RequestPayment.PaymentDate != null || t.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment))
                    .Select(t => new ADSLRequestInfo
                     {
                         ADSLSellerAgentUSer = t.ALL.ADSLSellerAgentUser.User.FirstName + " " + t.ALL.ADSLSellerAgentUser.User.LastName,
                         SellerAgentName = t.ALL.ADSLRequest.ADSLSellerAgent.Title,
                         ServiceTitle = t.ALL.ADSLRequest.ADSLService.Title,
                         SaleWayByte = t.ALL.ADSLRequest.SaleWay,
                         ID = t.ALL.ADSLRequest.ID,
                         CityName = t.ALL.ADSLRequest.Request.Center.Region.City.Name,
                         Center = t.ALL.ADSLRequest.Request.Center.CenterName,
                         //Cost=t.ALLM.RequestPayment.AmountSum,
                         CustomerGroupName = t.ALL.ADSLRequest.ADSLCustomerGroup.Title,
                         NumberOfADSLSaled = 1,
                         PaymentDate = Date.GetPersianDate(t.RequestPayment.PaymentDate, Date.DateStringType.Short)
                         //{
                         //    ADSLSellerAgentUSer = x.Key.adslsellerAgentUserName,
                         //    SellerAgentName = x.Key.ADSLSellerAgentName,
                         //    SaleWayByte = x.Key.SaleWay,
                         //    ID = x.Key.ID,
                         //    //NumberOfADSLSaled = x.Count(),
                         //    NumberOfADSLSaled=1,
                         //    CityName = x.Key.city,
                         //    Center = x.Key.center,
                         //    ServiceTitle = x.Key.service,
                         //    Cost=x.Sum(t=>t.ALLM.Requestpayment.AmountSum),
                         //    CustomerGroupName=x.Key.CustomergroupName
                     }).Distinct().ToList();

            }
        }

        public static List<ADSLRequestInfo> GetADSLSellerAgentSaleCityChartInfo(List<int> ADSLSellerAgentIDs, DateTime? fromDate,
                                                                                DateTime? toDate, List<int> cityIDs, List<int> centerIDs,
                                                                                List<int> serviceIDs, List<int> groupIDs, List<int> TypeIDs,
                                                                                List<int> bandWidthIDs, List<int> trafficIDs, List<int> durationIDs,
                                                                                 bool? hasModem, List<int> preOrPostPaid,
                                                                                 List<int> ADSLSellerAgentUserIDs, List<int> ADSLCustomerGroupIDs, List<int> ServicePaymentTypeIDs
                                                                                , DateTime? FromPaymentDate, DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLRequests.Join(context.ADSLSellerAgentUsers, r => r.ADSLSellerAgentID, u => u.SellerAgentID, (r, u) => new { ADSLRequest = r, ADSLSellerAgentUser = u })
                    .Join(context.RequestPayments, t => t.ADSLRequest.ID, p => p.RequestID, (t, p) => new { All = t, Requestpayment = p })
                    //.Join(context.ADSLCustomerGroups, m => m.All.ADSLRequest.ADSLService.GroupID, g => g.ID, (m, g) => new { ALLM = m, ADSLCustomerGroup = g })
                    .Where(t =>
                    (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.All.ADSLRequest.ADSLSellerAgentID))
                    && (!fromDate.HasValue || fromDate <= t.All.ADSLRequest.Request.InsertDate)
                    && (!toDate.HasValue || toDate >= t.All.ADSLRequest.Request.InsertDate)
                    && (cityIDs.Count == 0 || cityIDs.Contains((int)t.All.ADSLRequest.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains((int)t.All.ADSLRequest.Request.CenterID))
                    && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.All.ADSLRequest.ServiceID))
                    && (groupIDs.Count == 0 || groupIDs.Contains((int)t.All.ADSLRequest.ADSLService.GroupID))
                        //&& (saleWays.Count == 0 || saleWays.Contains((int)t.SaleWay))
                    && (bandWidthIDs.Count == 0 || bandWidthIDs.Contains((int)t.All.ADSLRequest.ADSLService.BandWidthID))
                    && (trafficIDs.Count == 0 || trafficIDs.Contains((int)t.All.ADSLRequest.ADSLService.TrafficID))
                    && (durationIDs.Count == 0 || durationIDs.Contains((int)t.All.ADSLRequest.ADSLService.DurationID))
                    && (TypeIDs.Count == 0 || TypeIDs.Contains((int)t.All.ADSLRequest.ADSLService.TypeID))
                    && (t.All.ADSLRequest.NeedModem == hasModem || hasModem == null)
                    && (preOrPostPaid.Count == 0 || preOrPostPaid.Contains((int)t.Requestpayment.PaymentType))
                    && (t.All.ADSLRequest.ADSLSellerAgentID != null)
                    && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.All.ADSLSellerAgentUser.ID))
                    && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.All.ADSLRequest.ADSLService.PaymentTypeID))
                    && (ADSLCustomerGroupIDs.Count == 0 || ADSLCustomerGroupIDs.Contains((int)t.All.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.Requestpayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.Requestpayment.PaymentDate)
                    && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.Requestpayment.UserID))
                    && (t.Requestpayment.PaymentDate != null || t.Requestpayment.PaymentType == (byte)DB.PaymentType.Instalment))
                    .GroupBy(t => new
                     {
                         city = t.All.ADSLRequest.Request.Center.Region.City.Name,
                         cityID = t.All.ADSLRequest.Request.Center.Region.CityID
                         //cost=t.RequestPayment.AmountSum

                     }).Select(x => new ADSLRequestInfo
                     {
                         CityName = x.Key.city,
                         NumberOfSaledADSLService = x.Count(),
                         Cost = 0,
                         CityID = x.Key.cityID.ToString()
                     }).ToList();
            }
        }

        public static List<ADSLRequestInfo> GetADSLSellerAgentSaleCenterChartInfo(List<int> ADSLSellerAgentIDs, DateTime? fromDate,
                                                                                DateTime? toDate, List<int> cityIDs, List<int> centerIDs,
                                                                                List<int> serviceIDs, List<int> groupIDs, List<int> TypeIDs,
                                                                                List<int> bandWidthIDs, List<int> trafficIDs, List<int> durationIDs,
                                                                                 bool? hasModem, List<int> preOrPostPaid,
                                                                                List<int> ADSLSellerAgentUserIDs, List<int> ADSLCustomerGroupIDs, List<int> ServicePaymentTypeIDs
                                                                                , DateTime? FromPaymentDate, DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLRequests.Join(context.ADSLSellerAgentUsers, r => r.ADSLSellerAgentID, u => u.SellerAgentID, (r, u) => new { ADSLRequest = r, ADSLSellerAgentUser = u })
                    .Join(context.RequestPayments, t => t.ADSLRequest.ID, p => p.RequestID, (t, p) => new { All = t, Requestpayment = p })
                    //.Join(context.ADSLCustomerGroups, m => m.All.ADSLRequest.ADSLService.GroupID, g => g.ID, (m, g) => new { ALLM = m, ADSLCustomerGroup = g })
                    .Where(t =>
                    (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.All.ADSLRequest.ADSLSellerAgentID))
                    && (!fromDate.HasValue || fromDate <= t.All.ADSLRequest.Request.InsertDate)
                    && (!toDate.HasValue || toDate >= t.All.ADSLRequest.Request.InsertDate)
                    && (cityIDs.Count == 0 || cityIDs.Contains((int)t.All.ADSLRequest.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains((int)t.All.ADSLRequest.Request.CenterID))
                    && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.All.ADSLRequest.ServiceID))
                    && (groupIDs.Count == 0 || groupIDs.Contains((int)t.All.ADSLRequest.ADSLService.ADSLServiceGroup.ID))
                        //&& (saleWays.Count == 0 || saleWays.Contains((int)t.SaleWay))
                    && (bandWidthIDs.Count == 0 || bandWidthIDs.Contains((int)t.All.ADSLRequest.ADSLService.BandWidthID))
                    && (trafficIDs.Count == 0 || trafficIDs.Contains((int)t.All.ADSLRequest.ADSLService.TrafficID))
                    && (durationIDs.Count == 0 || durationIDs.Contains((int)t.All.ADSLRequest.ADSLService.DurationID))
                    && (TypeIDs.Count == 0 || TypeIDs.Contains((int)t.All.ADSLRequest.ADSLService.TypeID))
                    && (t.All.ADSLRequest.NeedModem == hasModem || hasModem == null)
                    && (preOrPostPaid.Count == 0 || preOrPostPaid.Contains((int)t.Requestpayment.PaymentType))
                    && (t.All.ADSLRequest.ADSLSellerAgentID != null)
                    && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.All.ADSLSellerAgentUser.ID))
                    && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.All.ADSLRequest.ADSLService.PaymentTypeID))
                    && (ADSLCustomerGroupIDs.Count == 0 || ADSLCustomerGroupIDs.Contains((int)t.All.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.Requestpayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.Requestpayment.PaymentDate)
                    && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.Requestpayment.UserID))
                    && (t.Requestpayment.PaymentDate != null || t.Requestpayment.PaymentType == (byte)DB.PaymentType.Instalment))
                    //.Join(context.RequestPayments, r => r.ID, p => p.RequestID, (r, p) => new { ADSLRequest = r, RequestPayment = p })
                    .GroupBy(t => new
                     {
                         center = t.All.ADSLRequest.Request.Center.CenterName,
                         cityid = t.All.ADSLRequest.Request.Center.Region.CityID
                         //cost = t.RequestPayment.AmountSum

                     }).Select(x => new ADSLRequestInfo
                     {
                         Center = x.Key.center,
                         NumberOfSaledADSLService = x.Count(),
                         Cost = 0,
                         CityID = x.Key.cityid.ToString()
                     }).ToList();
            }
        }

        public static List<RequestInfo> GetCenterSaleInfo(List<int> ADSLSellerAgentIDs, DateTime? fromDate,
                                                            DateTime? toDate, List<int> cityIDs, List<int> centerIDs,
                                                            List<int> serviceIDs, List<int> groupIDs, List<int> TypeIDs,
                                                            List<int> bandWidthIDs, List<int> trafficIDs, List<int> durationIDs,
                                                            bool? hasModem, List<int> preOrPostPaid, List<int> ADSLSellerAgentUserIDs,
                                                            List<int> ADSLCustomerGroupIDs, List<int> ServiceTypeIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLRequests.Join(context.ADSLSellerAgentUsers, r => r.ADSLSellerAgentID, u => u.SellerAgentID, (r, u) => new { ADSLRequest = r, ADSLSellerAgentUser = u })
                    .Join(context.RequestPayments, t => t.ADSLRequest.ID, p => p.RequestID, (t, p) => new { All = t, Requestpayment = p })
                    //.Join(context.ADSLCustomerGroups, m => m.All.ADSLRequest.ADSLService.GroupID, g => g.ID, (m, g) => new { ALLM = m, ADSLCustomerGroup = g })
                    .Where(t =>
                    (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.All.ADSLRequest.ADSLSellerAgentID))
                    && (!fromDate.HasValue || fromDate <= t.All.ADSLRequest.Request.InsertDate)
                    && (!toDate.HasValue || toDate >= t.All.ADSLRequest.Request.InsertDate)
                    && (cityIDs.Count == 0 || cityIDs.Contains((int)t.All.ADSLRequest.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains((int)t.All.ADSLRequest.Request.CenterID))
                    && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.All.ADSLRequest.ServiceID))
                    && (groupIDs.Count == 0 || groupIDs.Contains((int)t.All.ADSLRequest.ADSLService.ADSLServiceGroup.ID))
                        //&& (saleWays.Count == 0 || saleWays.Contains((int)t.SaleWay))
                    && (bandWidthIDs.Count == 0 || bandWidthIDs.Contains((int)t.All.ADSLRequest.ADSLService.BandWidthID))
                    && (trafficIDs.Count == 0 || trafficIDs.Contains((int)t.All.ADSLRequest.ADSLService.TrafficID))
                    && (durationIDs.Count == 0 || durationIDs.Contains((int)t.All.ADSLRequest.ADSLService.DurationID))
                    && (TypeIDs.Count == 0 || TypeIDs.Contains((int)t.All.ADSLRequest.ADSLService.TypeID))
                    && (preOrPostPaid.Count == 0 || preOrPostPaid.Contains((int)t.Requestpayment.PaymentType))
                    && (t.All.ADSLRequest.ADSLSellerAgentID != null)
                    && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.All.ADSLSellerAgentUser.ID))
                    && (ADSLCustomerGroupIDs.Count == 0 || ADSLCustomerGroupIDs.Contains((int)t.All.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (t.All.ADSLRequest.NeedModem == hasModem || hasModem == null)
                    && (ServiceTypeIDs.Count == 0 || ServiceTypeIDs.Contains((int)t.All.ADSLRequest.ADSLService.PaymentTypeID))
                    && (t.All.ADSLRequest.Request.EndDate != null)
                    && (t.Requestpayment.PaymentDate != null || t.Requestpayment.PaymentType == (byte)DB.PaymentType.Instalment)).GroupBy(t => new
                    {
                        Center = t.All.ADSLRequest.Request.Center.CenterName
                    }).Select(t => new RequestInfo
                    {
                        CenterName = t.Key.Center,
                        SaleCost = t.Sum(b => b.Requestpayment.AmountSum),
                        NumberOfSaledADSL = t.Count()
                    }).ToList();

            }
        }


        public static List<ADSLRequestInfo> GetCitySaleInfo(List<int> ADSLSellerAgentIDs, DateTime? fromDate,
                                                            DateTime? toDate, List<int> cityIDs, List<int> centerIDs,
                                                            List<int> serviceIDs, List<int> groupIDs, List<int> TypeIDs,
                                                            List<int> bandWidthIDs, List<int> trafficIDs, List<int> durationIDs,
            //List<int> saleWays,
            bool? hasModem, List<int> preOrPostPaid, List<int> ADSLSellerAgentUserIDs,
                                                            List<int> CustomerGrupIDs, List<int> ServiceTypeComboBox)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLRequests.Join(context.ADSLSellerAgentUsers, a => a.ADSLSellerAgentID, u => u.SellerAgentID, (a, u) => new { ADSLRequest = a, ADSLSellerAgentUser = u })
                    .Join(context.RequestPayments, a => a.ADSLRequest.ID, p => p.RequestID, (a, p) => new { ALL = a, RequestPayment = p })
                    //.Join(context.ADSLCustomerGroups, m => m.ALL.ADSLRequest.ADSLService.GroupID, g => g.ID, (m, g) => new { ALLM = m, ADSLCustomerGroup = g })
                     .Where(t =>
                      (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ALL.ADSLRequest.ADSLSellerAgentID))
                    && (!fromDate.HasValue || fromDate <= t.ALL.ADSLRequest.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ALL.ADSLRequest.Request.EndDate)
                    && (cityIDs.Count == 0 || cityIDs.Contains((int)t.ALL.ADSLRequest.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains((int)t.ALL.ADSLRequest.Request.CenterID))
                    && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.ALL.ADSLRequest.ServiceID))
                    && (groupIDs.Count == 0 || groupIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.ADSLServiceGroup.ID))
                          //&& (saleWays.Count == 0 || saleWays.Contains((int)t.SaleWay))
                    && (bandWidthIDs.Count == 0 || bandWidthIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.BandWidthID))
                    && (trafficIDs.Count == 0 || trafficIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.TrafficID))
                    && (durationIDs.Count == 0 || durationIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.DurationID))
                    && (TypeIDs.Count == 0 || TypeIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.TypeID))
                    && (preOrPostPaid.Count == 0 || preOrPostPaid.Contains((int)t.RequestPayment.PaymentType))
                    && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ALL.ADSLSellerAgentUser.ID))
                    && (CustomerGrupIDs.Count == 0 || CustomerGrupIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (t.ALL.ADSLRequest.NeedModem == hasModem || hasModem == null)
                    && (ServiceTypeComboBox.Count == 0 || ServiceTypeComboBox.Contains((int)t.ALL.ADSLRequest.ADSLService.PaymentTypeID))
                    && (t.ALL.ADSLRequest.Request.EndDate != null)
                    && (t.RequestPayment.PaymentDate != null || t.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).GroupBy(t => new
                    {
                        Day = t.ALL.ADSLRequest.Request.EndDate.Value.Date,
                        city = t.ALL.ADSLRequest.Request.Center.Region.City.Name

                    }).Select(t => new ADSLRequestInfo
                    {
                        CityName = t.Key.city,
                        SaleCost = t.Sum(b => b.RequestPayment.AmountSum),
                        NumberOfADSLSaled = t.Count(),
                        DayDate = Date.GetPersianDate(t.Key.Day, Date.DateStringType.Short)

                    }).ToList();
            }

        }

        public static List<ADSLRequestInfo> GetCityOnlineSaleStatistics(int city, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLRequests.Join(context.RequestPayments, ar => ar.Request.ID, p => p.RequestID, (ar, p) => new { AR = ar, P = p }).Where(t =>
               (city == ((int?)t.AR.Request.Center.Region.CityID)) &&
                    (!fromDate.HasValue || fromDate <= t.AR.Request.InsertDate) &&
                    (!toDate.HasValue || toDate >= t.AR.Request.InsertDate) &&
                    (t.AR.Request.EndDate != null) &&
                    (t.AR.SaleWay == (byte)DB.ADSLSaleWays.Internet)).GroupBy(t => new
                    {
                        Day = t.AR.Request.InsertDate,
                        city = t.AR.Request.Center.Region.City.Name,
                        Cost = t.P.Cost
                    }).Select(t => new ADSLRequestInfo
                    {

                        CityName = t.Key.city,
                        SaleCost = t.Key.Cost * t.Count(),
                        NumberOfADSLSaled = t.Count(),
                        DayDate = Date.GetPersianDate(t.Key.Day, Date.DateStringType.Short)
                    }).ToList();
            }
        }

        public static List<RequestInfo> GetCityDischargeStatistics(List<int> CityIDs, List<int> CenterIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Where(t =>
                    (CityIDs.Count == 0 || CityIDs.Contains((int)t.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.CenterID))
                    && (!fromDate.HasValue || fromDate <= t.EndDate)
                    && (!toDate.HasValue || toDate >= t.EndDate)
                    && (t.EndDate != null)
                    && (t.RequestTypeID == (byte)DB.RequestType.ADSLDischarge)).GroupBy(t => new
                    {
                        center = t.Center.CenterName,
                        city = t.Center.Region.City.Name,
                        Day = t.EndDate,


                    }).Select(t => new RequestInfo
                    {
                        CityName = t.Key.city,
                        CenterName = t.Key.center,
                        NumberOfDischarged = t.Count(),
                        DayDate = Date.GetPersianDate(t.Key.Day, Date.DateStringType.Short)
                    }).ToList();
            }
        }

        public static List<ADSLGeneralContactsInfo> GetGenrealContactsInfo(List<int> cityIDs,
                                                                           List<int> centerIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                var calendar = new PersianCalendar();
                var week = calendar
                          .GetWeekOfYear(DateTime.Now, CalendarWeekRule.FirstDay,
                                         DateTimeFormatInfo.CurrentInfo.FirstDayOfWeek);
                return context.Requests.Where(t =>
                    (cityIDs.Count == 0 || cityIDs.Contains((int)t.Center.Region.CityID)) &&
                    (centerIDs.Count == 0 || centerIDs.Contains((int)t.CenterID)))
                    .GroupBy(t => new
                {
                    center = t.Center.CenterName

                }).Select(t => new ADSLGeneralContactsInfo
                {
                    WeekNo = week,
                    CenterName = t.Key.center
                }).ToList();


            }

        }

        public static List<ADSLGeneralContactsInfo> NumberOfDayeriFromStartOfYear(List<int> cityIDs, List<int> centerIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Where(t =>
                    (t.EndDate.Value.Year == DB.GetServerDate().Year) &&
                    (cityIDs.Count == 0 || cityIDs.Contains((int)t.Center.Region.CityID)) &&
                    (centerIDs.Count == 0 || centerIDs.Contains((int)t.CenterID)) &&
                    (t.RequestTypeID == (byte)DB.RequestType.ADSL)).GroupBy(t => new
                    {
                        center = t.Center.CenterName
                    }).Select(t => new ADSLGeneralContactsInfo
                    {
                        CenterName = t.Key.center,
                        NumberOfDayeriStartOfYear = t.Count()

                    }).ToList();
            }
        }

        public static List<ADSLGeneralContactsInfo> NumberOfDischargedFromStartOfYear(List<int> cityIDs, List<int> centerIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Where(t =>
                    (t.EndDate.Value.Year == DB.GetServerDate().Year) &&
                    (cityIDs.Count == 0 || cityIDs.Contains((int)t.Center.Region.CityID)) &&
                    (centerIDs.Count == 0 || centerIDs.Contains((int)t.CenterID)) &&
                    (t.RequestTypeID == (byte)DB.RequestType.ADSLDischarge)).GroupBy(t => new
                    {
                        center = t.Center.CenterName
                    }).Select(t => new ADSLGeneralContactsInfo
                    {
                        CenterName = t.Key.center,
                        NumberOfDischargedStartOfYear = t.Count()

                    }).ToList();
            }
        }

        public static List<ADSLGeneralContactsInfo> WeekPrePaidInternet(List<int> cityIDs, List<int> centerIDs)
        {
            int DayOfWeekNo = 0;
            string DayOfWeek = System.DateTime.Now.DayOfWeek.ToString();
            switch (DayOfWeek)
            {
                case ("Saturday"):
                    DayOfWeekNo = 1;
                    break;
                case ("Sunday"):
                    DayOfWeekNo = 2;
                    break;
                case ("Monday"):
                    DayOfWeekNo = 3;
                    break;
                case ("Tuesday"):
                    DayOfWeekNo = 4;
                    break;
                case ("Wednesday"):
                    DayOfWeekNo = 5;
                    break;
                case ("Thurseday"):
                    DayOfWeekNo = 6;
                    break;
                case ("Friday"):
                    DayOfWeekNo = 7;
                    break;
            }
            DateTime StartDate = DB.GetServerDate().AddDays(-(DayOfWeekNo - 1));

            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                (t.S.PaymentTypeID == (byte)DB.ADSLPaymentType.PrePaid) &&
                (t.R.Request.EndDate >= StartDate) &&
                (t.R.Request.EndDate <= DB.GetServerDate())).GroupBy(t => new
                {
                    center = t.R.Request.Center.CenterName
                }).Select(t => new ADSLGeneralContactsInfo
                {
                    CenterName = t.Key.center,
                    WeekPrePaidInternet = t.Count()

                }).ToList();
            }
        }

        public static List<ADSLGeneralContactsInfo> WeekPostpaidInternet(List<int> cityIDs, List<int> centerIDs)
        {

            int DayOfWeekNo = 0;
            string DayOfWeek = System.DateTime.Now.DayOfWeek.ToString();
            switch (DayOfWeek)
            {
                case ("Saturday"):
                    DayOfWeekNo = 1;
                    break;
                case ("Sunday"):
                    DayOfWeekNo = 2;
                    break;
                case ("Monday"):
                    DayOfWeekNo = 3;
                    break;
                case ("Tuesday"):
                    DayOfWeekNo = 4;
                    break;
                case ("Wednesday"):
                    DayOfWeekNo = 5;
                    break;
                case ("Thurseday"):
                    DayOfWeekNo = 6;
                    break;
                case ("Friday"):
                    DayOfWeekNo = 7;
                    break;
            }
            DateTime StartDate = DB.GetServerDate().AddDays(-(DayOfWeekNo - 1));
            using (MainDataContext context = new MainDataContext())
            {

                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                (t.S.PaymentTypeID == (byte)DB.ADSLPaymentType.PostPaid) &&
                (t.R.Request.EndDate >= StartDate) &&
                (t.R.Request.EndDate <= DB.GetServerDate())).GroupBy(t => new
                {
                    center = t.R.Request.Center.CenterName
                }).Select(t => new ADSLGeneralContactsInfo
                {
                    CenterName = t.Key.center,
                    WeekPostpaidInternet = t.Count()

                }).ToList();
            }
        }

        public static List<ADSLGeneralContactsInfo> WeekNumberOfInteranet(List<int> cityIDs, List<int> centerIDs)
        {
            int DayOfWeekNo = 0;
            string DayOfWeek = System.DateTime.Now.DayOfWeek.ToString();
            switch (DayOfWeek)
            {
                case ("Saturday"):
                    DayOfWeekNo = 1;
                    break;
                case ("Sunday"):
                    DayOfWeekNo = 2;
                    break;
                case ("Monday"):
                    DayOfWeekNo = 3;
                    break;
                case ("Tuesday"):
                    DayOfWeekNo = 4;
                    break;
                case ("Wednesday"):
                    DayOfWeekNo = 5;
                    break;
                case ("Thurseday"):
                    DayOfWeekNo = 6;
                    break;
                case ("Friday"):
                    DayOfWeekNo = 7;
                    break;
            }
            DateTime StartDate = DB.GetServerDate().AddDays(-(DayOfWeekNo - 1));
            using (MainDataContext context = new MainDataContext())
            {

                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                (t.R.ServiceID == (byte)DB.ServiceType.Intranet) &&
                (t.R.Request.EndDate >= StartDate) &&
                (t.R.Request.EndDate <= DB.GetServerDate())).GroupBy(t => new
                {
                    center = t.R.Request.Center.CenterName
                }).Select(t => new ADSLGeneralContactsInfo
                {
                    CenterName = t.Key.center,
                    WeekInteranet = t.Count()

                }).ToList();
            }
        }

        public static List<ADSLGeneralContactsInfo> WeekTotalDayeri(List<int> cityIDs, List<int> centerIDs)
        {
            int DayOfWeekNo = 0;
            string DayOfWeek = System.DateTime.Now.DayOfWeek.ToString();
            switch (DayOfWeek)
            {
                case ("Saturday"):
                    DayOfWeekNo = 1;
                    break;
                case ("Sunday"):
                    DayOfWeekNo = 2;
                    break;
                case ("Monday"):
                    DayOfWeekNo = 3;
                    break;
                case ("Tuesday"):
                    DayOfWeekNo = 4;
                    break;
                case ("Wednesday"):
                    DayOfWeekNo = 5;
                    break;
                case ("Thurseday"):
                    DayOfWeekNo = 6;
                    break;
                case ("Friday"):
                    DayOfWeekNo = 7;
                    break;
            }
            DateTime StartDate = DB.GetServerDate().AddDays(-(DayOfWeekNo - 1));
            using (MainDataContext context = new MainDataContext())
            {

                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                (t.R.Request.EndDate >= StartDate) &&
                (t.R.Request.EndDate <= DB.GetServerDate())).GroupBy(t => new
                {
                    center = t.R.Request.Center.CenterName
                }).Select(t => new ADSLGeneralContactsInfo
                {
                    CenterName = t.Key.center,
                    WeekTotalDayeri = t.Count()

                }).ToList();
            }
        }

        public static List<ADSLGeneralContactsInfo> WeekNumberOfDischarge(List<int> cityIDs, List<int> centerIDs)
        {
            int DayOfWeekNo = 0;
            string DayOfWeek = System.DateTime.Now.DayOfWeek.ToString();
            switch (DayOfWeek)
            {
                case ("Saturday"):
                    DayOfWeekNo = 1;
                    break;
                case ("Sunday"):
                    DayOfWeekNo = 2;
                    break;
                case ("Monday"):
                    DayOfWeekNo = 3;
                    break;
                case ("Tuesday"):
                    DayOfWeekNo = 4;
                    break;
                case ("Wednesday"):
                    DayOfWeekNo = 5;
                    break;
                case ("Thurseday"):
                    DayOfWeekNo = 6;
                    break;
                case ("Friday"):
                    DayOfWeekNo = 7;
                    break;
            }
            DateTime StartDate = DB.GetServerDate().AddDays(-(DayOfWeekNo - 1));
            using (MainDataContext context = new MainDataContext())
            {

                return context.Requests.Where(t =>
                (cityIDs.Count == 0 || cityIDs.Contains((int)t.Center.Region.CityID)) &&
                (centerIDs.Count == 0 || centerIDs.Contains((int)t.CenterID)) &&
                (t.RequestTypeID == (byte)DB.RequestType.ADSLDischarge) &&
                (t.EndDate >= StartDate) &&
                (t.EndDate <= DB.GetServerDate())).GroupBy(t => new
                {
                    center = t.Center.CenterName
                }).Select(t => new ADSLGeneralContactsInfo
                {
                    CenterName = t.Key.center,
                    WeekDischarge = t.Count()

                }).ToList();
            }
        }

        public static List<ADSLGeneralContactsInfo> ADSLAssignedPortsYear91(List<int> cityIDs, List<int> centerIDs)
        {
            DateTime? dt1 = new DateTime(2012, 03, 20);
            DateTime? dt2 = new DateTime(2013, 03, 19);
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLPorts.Join(context.ADSLEquipments, p => p.ADSLEquipmentID, e => e.ID, (p, e) => new { P = p, E = e }).Where(t =>
                    (cityIDs.Count == 0 || cityIDs.Contains((int)t.E.Center.Region.CityID)) &&
                    (centerIDs.Count == 0 || centerIDs.Contains((int)t.E.CenterID)) &&
                    (t.P.InstalADSLDate >= dt1) &&
                    (t.P.InstalADSLDate <= dt2) &&
                    (t.P.Status == (byte)DB.ADSLPortStatus.Install)).GroupBy(t => new
                    {
                        center = t.E.Center.CenterName
                    }).Select(t => new ADSLGeneralContactsInfo
                    {
                        CenterName = t.Key.center,
                        WeekADSLAssignedPorts91 = t.Count()

                    }).ToList();
            }
        }

        public static List<ADSLGeneralContactsInfo> ADSLAssignedPortsYear(List<int> cityIDs, List<int> centerIDs)
        {
            //    DateTime? dt1 = new DateTime(2013, 03, 21);
            //    DateTime? dt2 = new DateTime(2014, 03, 20);

            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLPorts.Join(context.ADSLEquipments, p => p.ADSLEquipmentID, e => e.ID, (p, e) => new { P = p, E = e }).Where(t =>
                    (cityIDs.Count == 0 || cityIDs.Contains((int)t.E.Center.Region.CityID)) &&
                    (centerIDs.Count == 0 || centerIDs.Contains((int)t.E.CenterID)) &&
                    (t.P.InstalADSLDate.Value.Year == DB.GetServerDate().Year) &&
                    (t.P.Status == (byte)DB.ADSLPortStatus.Install)).GroupBy(t => new
                    {
                        center = t.E.Center.CenterName
                    }).Select(t => new ADSLGeneralContactsInfo
                    {
                        CenterName = t.Key.center,
                        WeekADSLAssignedPorts92 = t.Count()

                    }).ToList();
            }
        }

        public static List<ADSLGeneralContactsInfo> ADSLInstalledPortsYear(List<int> cityIDs, List<int> centerIDs)
        {
            //    DateTime? dt1 = new DateTime(2013, 03, 21);
            //    DateTime? dt2 = new DateTime(2014, 03, 20);

            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLPorts.Join(context.ADSLEquipments, p => p.ADSLEquipmentID, e => e.ID, (p, e) => new { P = p, E = e }).Where(t =>
                    (cityIDs.Count == 0 || cityIDs.Contains((int)t.E.Center.Region.CityID)) &&
                    (centerIDs.Count == 0 || centerIDs.Contains((int)t.E.CenterID)) &&
                    (t.P.InstalADSLDate.Value.Year == DB.GetServerDate().Year)).GroupBy(t => new
                    {
                        center = t.E.Center.CenterName
                    }).Select(t => new ADSLGeneralContactsInfo
                    {
                        CenterName = t.Key.center,
                        Installed = t.Count()

                    }).ToList();
            }
        }

        //public static List<ADSLGeneralContactsInfo> WeekADSLDayeriPorts(List<int> Cities, List<int> Centers)
        //{
        //    int DayOfWeekNo = 0;
        //    string DayOfWeek = System.DateTime.Now.DayOfWeek.ToString();
        //    switch (DayOfWeek)
        //    {
        //        case ("Saturday"):
        //            DayOfWeekNo = 1;
        //            break;
        //        case ("Sunday"):
        //            DayOfWeekNo = 2;
        //            break;
        //        case ("Monday"):
        //            DayOfWeekNo = 3;
        //            break;
        //        case ("Tuesday"):
        //            DayOfWeekNo = 4;
        //            break;
        //        case ("Wednesday"):
        //            DayOfWeekNo = 5;
        //            break;
        //        case ("Thurseday"):
        //            DayOfWeekNo = 6;
        //            break;
        //        case ("Friday"):
        //            DayOfWeekNo = 7;
        //            break;
        //    }
        //    DateTime StartDate = DB.GetServerDate().AddDays(-(DayOfWeekNo - 1));
        //    using (MainDataContext context = new MainDataContext())
        //    {
        //        return context.ADSLPorts.Join(context.ADSLEquipments, p => p.ADSLEquipmentID, e => e.ID, (p, e) => new { P = p, E = e }).Where(t =>
        //            (Cities.Count == 0 || Cities.Contains((int)t.E.Center.Region.CityID)) &&
        //            (Centers.Count == 0 || Centers.Contains((int)t.E.CenterID)) &&
        //            (t.P.InstalADSLDate >=StartDate) &&
        //            (t.P.InstalADSLDate <= DB.GetServerDate()) &&
        //            (t.P.Status == (byte)DB.ADSLPortStatus.Install)).GroupBy(t => new
        //            {
        //                center = t.R.Request.Center.CenterName
        //            }).Select(t => new ADSLGeneralContactsInfo
        //            {
        //                CenterName = t.Key.center,
        //                weekad = t.Count().ToString()

        //            }).ToList();
        //    }
        //}

        public static List<ADSLGeneralContactsInfo> CurrentWeekADSLIDayeriPorts(List<int> cityIDs, List<int> centerIDs)
        {
            int DayOfWeekNo = 0;
            string DayOfWeek = System.DateTime.Now.DayOfWeek.ToString();
            switch (DayOfWeek)
            {
                case ("Saturday"):
                    DayOfWeekNo = 1;
                    break;
                case ("Sunday"):
                    DayOfWeekNo = 2;
                    break;
                case ("Monday"):
                    DayOfWeekNo = 3;
                    break;
                case ("Tuesday"):
                    DayOfWeekNo = 4;
                    break;
                case ("Wednesday"):
                    DayOfWeekNo = 5;
                    break;
                case ("Thurseday"):
                    DayOfWeekNo = 6;
                    break;
                case ("Friday"):
                    DayOfWeekNo = 7;
                    break;
            }
            DateTime StartDate = DB.GetServerDate().AddDays(-(DayOfWeekNo - 1));
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLPorts.Join(context.ADSLEquipments, p => p.ADSLEquipmentID, e => e.ID, (p, e) => new { P = p, E = e }).Where(t =>
                    (cityIDs.Count == 0 || cityIDs.Contains((int)t.E.Center.Region.CityID)) &&
                    (centerIDs.Count == 0 || centerIDs.Contains((int)t.E.CenterID)) &&
                    (t.P.InstalADSLDate >= StartDate) &&
                    (t.P.InstalADSLDate <= DB.GetServerDate()) &&
                    (t.P.Status == (byte)DB.ADSLPortStatus.Install)).GroupBy(t => new
                    {
                        center = t.E.Center.CenterName
                    }).Select(t => new ADSLGeneralContactsInfo
                    {
                        CenterName = t.Key.center,
                        CurrentWeekNumberOfDayeriPorts = t.Count()

                    }).ToList();
            }
        }

        public static List<ADSLGeneralContactsInfo> CurrentWeekADSLInstalledPorts(List<int> cityIDs, List<int> centerIDs)
        {
            int DayOfWeekNo = 0;
            string DayOfWeek = System.DateTime.Now.DayOfWeek.ToString();
            switch (DayOfWeek)
            {
                case ("Saturday"):
                    DayOfWeekNo = 1;
                    break;
                case ("Sunday"):
                    DayOfWeekNo = 2;
                    break;
                case ("Monday"):
                    DayOfWeekNo = 3;
                    break;
                case ("Tuesday"):
                    DayOfWeekNo = 4;
                    break;
                case ("Wednesday"):
                    DayOfWeekNo = 5;
                    break;
                case ("Thurseday"):
                    DayOfWeekNo = 6;
                    break;
                case ("Friday"):
                    DayOfWeekNo = 7;
                    break;
            }
            DateTime StartDate = DB.GetServerDate().AddDays(-(DayOfWeekNo - 1));
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLPorts.Join(context.ADSLEquipments, p => p.ADSLEquipmentID, e => e.ID, (p, e) => new { P = p, E = e }).Where(t =>
                    (cityIDs.Count == 0 || cityIDs.Contains((int)t.E.Center.Region.CityID)) &&
                    (centerIDs.Count == 0 || centerIDs.Contains((int)t.E.CenterID)) &&
                    (t.P.InstalADSLDate >= StartDate) &&
                    (t.P.InstalADSLDate <= DB.GetServerDate())).GroupBy(t => new
                    {
                        center = t.E.Center.CenterName
                    }).Select(t => new ADSLGeneralContactsInfo
                    {
                        CenterName = t.Key.center,
                        CurrentWeekNumberOfDayeriPorts = t.Count()

                    }).ToList();
            }
        }

        public static List<ADSLGeneralContactsInfo> CurrentWeekADSLAssignmentFilePorts(List<int> cityIDs, List<int> centerIDs)
        {
            int DayOfWeekNo = 0;
            string DayOfWeek = System.DateTime.Now.DayOfWeek.ToString();
            switch (DayOfWeek)
            {
                case ("Saturday"):
                    DayOfWeekNo = 1;
                    break;
                case ("Sunday"):
                    DayOfWeekNo = 2;
                    break;
                case ("Monday"):
                    DayOfWeekNo = 3;
                    break;
                case ("Tuesday"):
                    DayOfWeekNo = 4;
                    break;
                case ("Wednesday"):
                    DayOfWeekNo = 5;
                    break;
                case ("Thurseday"):
                    DayOfWeekNo = 6;
                    break;
                case ("Friday"):
                    DayOfWeekNo = 7;
                    break;
            }
            DateTime StartDate = DB.GetServerDate().AddDays(-(DayOfWeekNo - 1));
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLPorts.Join(context.ADSLEquipments, p => p.ADSLEquipmentID, e => e.ID, (p, e) => new { P = p, E = e }).Where(t =>
                    (cityIDs.Count == 0 || cityIDs.Contains((int)t.E.Center.Region.CityID)) &&
                    (centerIDs.Count == 0 || centerIDs.Contains((int)t.E.CenterID)) &&
                    (t.P.InstalADSLDate >= StartDate) &&
                    (t.P.InstalADSLDate <= DB.GetServerDate()) &&
                    (t.P.Status == (byte)DB.ADSLPortStatus.Free)).GroupBy(t => new
                    {
                        center = t.E.Center.CenterName
                    }).Select(t => new ADSLGeneralContactsInfo
                    {
                        CenterName = t.Key.center,
                        WeekADSLAssignmentFilePorts = t.Count()

                    }).ToList();
            }
        }

        public static List<ADSLGeneralContactsInfo> YearADSLInstalledPorts(List<int> cityIDs, List<int> centerIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLPorts.Join(context.ADSLEquipments, p => p.ADSLEquipmentID, e => e.ID, (p, e) => new { P = p, E = e }).Where(t =>
                    (cityIDs.Count == 0 || cityIDs.Contains((int)t.E.Center.Region.CityID)) &&
                    (centerIDs.Count == 0 || centerIDs.Contains((int)t.E.CenterID)) &&
                     (t.P.InstalADSLDate.Value.Year == DB.GetServerDate().Year)).GroupBy(t => new
                    {
                        center = t.E.Center.CenterName
                    }).Select(t => new ADSLGeneralContactsInfo
                    {
                        CenterName = t.Key.center,
                        Installed = t.Count()

                    }).ToList();
            }
        }

        public static List<ADSLGeneralContactsInfo> GetCityGenrealContactsInfo(List<int> cityIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                var calendar = new PersianCalendar();
                var week = calendar
                          .GetWeekOfYear(DateTime.Now, CalendarWeekRule.FirstDay,
                                         DateTimeFormatInfo.CurrentInfo.FirstDayOfWeek);
                return context.Requests.Where(t =>
                    (cityIDs.Count == 0 || cityIDs.Contains((int)t.Center.Region.CityID)))
                    .GroupBy(t => new
                {
                    city = t.Center.Region.City.Name

                }).Select(t => new ADSLGeneralContactsInfo
                {
                    CityName = t.Key.city
                }).ToList();

            }
        }
        public static List<ADSLGeneralContactsInfo> GetCityNumberofInternetPorts(List<int> cityIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Join
                    (context.ADSLServiceGroups, e => e.S.GroupID, g => g.ID, (e, g) => new { E = e, G = g }).Where
                    (t => (t.G.ID == 1 || t.G.ID == 11 || t.G.ID == 12) &&
                        (cityIDs.Count == 0 || cityIDs.Contains((int)t.E.R.Request.Center.Region.CityID))).GroupBy(t => new
                        {
                            city = t.E.R.Request.Center.Region.City.Name

                        }).Select(t => new ADSLGeneralContactsInfo
                        {
                            CityName = t.Key.city,
                            ADSLInternetPorts = t.Count()

                        }).ToList();
            }
        }

        public static List<ADSLGeneralContactsInfo> GetCityNumberofInteranetPorts(List<int> cityIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Join
                    (context.ADSLServiceGroups, e => e.S.GroupID, g => g.ID, (e, g) => new { E = e, G = g }).Where
                    (t => (t.G.ID == 2 || t.G.ID == 3 || t.G.ID == 4 || t.G.ID == 6) &&
                        (cityIDs.Count == 0 || cityIDs.Contains((int)t.E.R.Request.Center.Region.CityID))).GroupBy(t => new
                        {
                            city = t.E.R.Request.Center.Region.City.Name

                        }).Select(t => new ADSLGeneralContactsInfo
                        {
                            CityName = t.Key.city,
                            ADSLInteranetPorts = t.Count()

                        }).ToList();
            }
        }
        public static List<ADSLGeneralContactsInfo> GetCenterNumberofInternetPorts(List<int> cityIDs, List<int> centerIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Join
                    (context.ADSLServiceGroups, e => e.S.GroupID, g => g.ID, (e, g) => new { E = e, G = g }).Where
                    (t => (t.G.ID == 1 || t.G.ID == 11 || t.G.ID == 12) &&
                        (cityIDs.Count == 0 || cityIDs.Contains((int)t.E.R.Request.Center.Region.CityID)) &&
                        (centerIDs.Count == 0 || centerIDs.Contains((int)t.E.R.Request.CenterID))).GroupBy(t => new
                        {
                            city = t.E.R.Request.Center.Region.City.Name

                        }).Select(t => new ADSLGeneralContactsInfo
                        {
                            CityName = t.Key.city,
                            ADSLInternetPorts = t.Count()

                        }).ToList();
            }
        }

        public static List<ADSLGeneralContactsInfo> GetCenterNumberofInteranetPorts(List<int> cityIDs, List<int> centerIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Join
                    (context.ADSLServiceGroups, e => e.S.GroupID, g => g.ID, (e, g) => new { E = e, G = g }).Where
                    (t => (t.G.ID == 2 || t.G.ID == 3 || t.G.ID == 4 || t.G.ID == 6) &&
                        (cityIDs.Count == 0 || cityIDs.Contains((int)t.E.R.Request.Center.Region.CityID)) &&
                        (centerIDs.Count == 0 || centerIDs.Contains((int)t.E.R.Request.CenterID))).GroupBy(t => new
                        {
                            city = t.E.R.Request.Center.Region.City.Name

                        }).Select(t => new ADSLGeneralContactsInfo
                        {
                            CityName = t.Key.city,
                            ADSLInteranetPorts = t.Count()

                        }).ToList();
            }
        }

        public static List<ADSLGeneralContactsInfo> CityYearADSLInstalledPorts(List<int> cityIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLPorts.Join(context.ADSLEquipments, p => p.ADSLEquipmentID, e => e.ID, (p, e) => new { P = p, E = e }).Where(t =>
                    (cityIDs.Count == 0 || cityIDs.Contains((int)t.E.Center.Region.CityID)) &&
                     (t.P.InstalADSLDate.Value.Year == DB.GetServerDate().Year)).GroupBy(t => new
                    {
                        city = t.E.Center.Region.City.Name
                    }).Select(t => new ADSLGeneralContactsInfo
                    {
                        CityName = t.Key.city,
                        CityInstalled = t.Count()

                    }).ToList();
            }
        }

        public static List<ADSLGeneralContactsInfo> CityADSLAssignedPortsYear91(List<int> cityIDs)
        {
            DateTime? dt1 = new DateTime(2012, 03, 20);
            DateTime? dt2 = new DateTime(2013, 03, 19);
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLPorts.Join(context.ADSLEquipments, p => p.ADSLEquipmentID, e => e.ID, (p, e) => new { P = p, E = e }).Where(t =>
                    (cityIDs.Count == 0 || cityIDs.Contains((int)t.E.Center.Region.CityID)) &&
                    (t.P.InstalADSLDate >= dt1) &&
                    (t.P.InstalADSLDate <= dt2) &&
                    (t.P.Status == (byte)DB.ADSLPortStatus.Install)).GroupBy(t => new
                    {
                        city = t.E.Center.Region.City.Name
                    }).Select(t => new ADSLGeneralContactsInfo
                    {
                        CityName = t.Key.city,
                        CityADSLAssignedPorts91 = t.Count()

                    }).ToList();
            }
        }

        public static List<ADSLGeneralContactsInfo> CityYearADSLAssignedPorts(List<int> cityIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLPorts.Join(context.ADSLEquipments, p => p.ADSLEquipmentID, e => e.ID, (p, e) => new { P = p, E = e }).Where(t =>
                    (cityIDs.Count == 0 || cityIDs.Contains((int)t.E.Center.Region.CityID)) &&
                     (t.P.InstalADSLDate.Value.Year == DB.GetServerDate().Year) &&
                     (t.P.Status == (byte)DB.ADSLPortStatus.Install)).GroupBy(t => new
                     {
                         city = t.E.Center.Region.City.Name
                     }).Select(t => new ADSLGeneralContactsInfo
                     {
                         CityName = t.Key.city,
                         CityADSLAssignedPorts92 = t.Count()

                     }).ToList();
            }
        }

        public static List<ADSLGeneralContactsInfo> CityNumberOfDayeriFromStartOfYear(List<int> cityIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Where(t =>
                    (t.EndDate.Value.Year == DB.GetServerDate().Year) &&
                    (cityIDs.Count == 0 || cityIDs.Contains((int)t.Center.Region.CityID)) &&
                    (t.RequestTypeID == (byte)DB.RequestType.ADSL)).GroupBy(t => new
                    {
                        city = t.Center.Region.City.Name
                    }).Select(t => new ADSLGeneralContactsInfo
                    {
                        CityName = t.Key.city,
                        CityADSLDayeriStartOfYear = t.Count()

                    }).ToList();
            }
        }

        public static List<ADSLGeneralContactsInfo> CityNumberOfDischargedFromStartOfYear(List<int> cityIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Where(t =>
                    (t.EndDate.Value.Year == DB.GetServerDate().Year) &&
                    (cityIDs.Count == 0 || cityIDs.Contains((int)t.Center.Region.CityID)) &&
                    (t.RequestTypeID == (byte)DB.RequestType.ADSLDischarge)).GroupBy(t => new
                    {
                        city = t.Center.Region.City.Name
                    }).Select(t => new ADSLGeneralContactsInfo
                    {
                        CityName = t.Key.city,
                        CityADSLDischargeStartOfYear = t.Count()

                    }).ToList();
            }
        }



        //public static List<ADSLMonthlyComparisionInfo> GetADSLMonthlyComparisionInfoList(List<int> cityIDs, List<int> centerIDs)
        //{
        //    DateTime dt1 = new DateTime(2012, 03, 20);
        //    DateTime? dt2 = new DateTime(2013, 03, 19);
        //    PersianCalendar jc = new PersianCalendar();

        //    using (MainDataContext context = new MainDataContext())
        //    {
        //        return context.Requests.Where(t =>
        //            (t.EndDate >= dt1) &&
        //            (t.EndDate <= dt2) &&
        //            (cityIDs.Count == 0 || cityIDs.Contains((int)t.Center.Region.CityID)) &&
        //            (centerIDs.Count == 0 || centerIDs.Contains((int)t.CenterID))).Select(t => new ADSLMonthlyComparisionInfo
        //            {

        //            }
        //            //    .GroupBy(t => new
        //            //    {

        //        //        Month = jc.GetMonth((DateTime)t.EndDate)

        //        //    }).
        //            //    Select(t => new ADSLMonthlyComparisionInfo
        //            //{
        //            //    Month = t.Key.Month.ToString()
        //            //}
        //        )
        //        .ToList();
        //    }

        //}


        public static List<ADSLContactsPAPComparisionInfo> GetADSLMonthlyComparisionInfo(List<int> cityIDs, List<int> centerIDs)
        {
            List<ADSLContactsPAPComparisionInfo> ADSLMonthlyComparisionInfos = new List<ADSLContactsPAPComparisionInfo>(12);

            DateTime StartDate = new DateTime(2012, 03, 20);
            DateTime EndDate = StartDate.AddDays(30);


            for (int i = 0; i < 12; i++)
            {
                ADSLContactsPAPComparisionInfo newItem = new ADSLContactsPAPComparisionInfo();

                if (i < 6 & i != 0)
                {

                    StartDate = EndDate.AddDays(1);
                    EndDate = StartDate.AddDays(30);
                }

                else if (i > 5 & i < 11)
                {
                    StartDate = EndDate.AddDays(1);
                    EndDate = StartDate.AddDays(29);
                }
                else if (i == 11)
                {
                    StartDate = EndDate.AddDays(1);
                    EndDate = StartDate.AddDays(28);
                }
                newItem.ContactsDayeri = GetContactsDayeriInfo(cityIDs, centerIDs, StartDate, EndDate);
                newItem.PAPDayeri = GetPAPDayeriInfo(cityIDs, centerIDs, StartDate, EndDate);
                newItem.ContactsDischarge = GetContactsDischargeInfo(cityIDs, centerIDs, StartDate, EndDate);
                newItem.PAPDischarge = GetPAPDischargeInfo(cityIDs, centerIDs, StartDate, EndDate);
                newItem.PureContacsDayeri = newItem.ContactsDayeri - newItem.ContactsDischarge;
                newItem.PurePAPDayeri = newItem.PAPDayeri - newItem.PAPDischarge;
                newItem.Month = DB.GetEnumDescriptionByValue(typeof(DB.PersianMonth), i + 1);

                ADSLMonthlyComparisionInfos.Add(newItem);
            }

            return ADSLMonthlyComparisionInfos;
        }

        public static int GetContactsDayeriInfo(List<int> cityIDs, List<int> centerIDs, DateTime StartDate, DateTime EndDate)
        {

            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Where(t =>
                         (t.EndDate >= StartDate) &&
                        (t.EndDate <= EndDate) &&
                        (t.RequestTypeID == (byte)DB.RequestType.ADSL) &&
                        (cityIDs.Count == 0 || cityIDs.Contains((int)t.Center.Region.CityID)) &&
                        (centerIDs.Count == 0 || centerIDs.Contains((int)t.CenterID))).Count();
            }
        }

        public static int GetContactsDischargeInfo(List<int> cityIDs, List<int> centerIDs, DateTime StartDate, DateTime EndDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Where(t =>
                         (t.EndDate >= StartDate) &&
                        (t.EndDate <= EndDate) &&
                        (t.RequestTypeID == (byte)DB.RequestType.ADSLDischarge)
                        &&
                    (cityIDs.Count == 0 || cityIDs.Contains((int)t.Center.Region.CityID)) &&
                    (centerIDs.Count == 0 || centerIDs.Contains((int)t.CenterID))).Count();
            }
        }

        public static int GetPAPDayeriInfo(List<int> cityIDs, List<int> centerIDs, DateTime StartDate, DateTime EndDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Where(t =>
                         (t.EndDate >= StartDate) &&
                        (t.EndDate <= EndDate) &&
                        (t.RequestTypeID == (byte)DB.RequestType.ADSLInstalPAPCompany)
                        &&
                    (cityIDs.Count == 0 || cityIDs.Contains((int)t.Center.Region.CityID)) &&
                    (centerIDs.Count == 0 || centerIDs.Contains((int)t.CenterID))).Count();
            }
        }

        public static int GetPAPDischargeInfo(List<int> cityIDs, List<int> centerIDs, DateTime StartDate, DateTime EndDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Where(t =>
                         (t.EndDate >= StartDate) &&
                        (t.EndDate <= EndDate) &&
                        (t.RequestTypeID == (byte)DB.RequestType.ADSLDischargePAPCompany) &&
                    (cityIDs.Count == 0 || cityIDs.Contains((int)t.Center.Region.CityID)) &&
                    (centerIDs.Count == 0 || centerIDs.Contains((int)t.CenterID))).Count();
            }
        }

        //public static List<ADSLGeneralContactsInfo> GetCityWeeklyContacts(List<int> cityIDs)
        //{
        //    using (MainDataContext context = new MainDataContext())
        //    {
        //        return context.Requests.Where(t =>
        //            (cityIDs.Count == 0 || cityIDs.Contains((int)t.Center.Region.CityID)))
        //            .GroupBy(t => new
        //            {
        //                city=t.Center.Region.City.Name,
        //                enddate=t.EndDate

        //            }).Select(t => new ADSLGeneralContactsInfo
        //            {
        //                CityName=t.Key.city,
        //                EndDate=t.Key.enddate
        //            }).ToList();


        //    }

        //}

        //public static List<ADSLGeneralContactsInfo> GetContactsADSL(List<int> cityIDs, DateTime StartDate, DateTime EndDate)
        //{
        //    using (MainDataContext context = new MainDataContext())
        //    {
        //        return context.Requests.Where(t =>
        //                 (t.EndDate >= StartDate) &&
        //                (t.EndDate <= EndDate) &&
        //                (t.RequestTypeID == (byte)DB.RequestType.ADSL) &&
        //            (cityIDs.Count == 0 || cityIDs.Contains((int)t.Center.Region.CityID))).GroupBy(t => new
        //                {
        //                    city=t.Center.Region.City.Name,
        //                    endDate=t.EndDate
        //                }).Select(t => new ADSLGeneralContactsInfo
        //                {
        //                    CityName=t.Key.city,
        //                    WeekTotalDayeri=t.Count(),
        //                    EndDate=t.Key.endDate
        //                }).ToList();
        //    }
        //}

        //public static List<ADSLGeneralContactsInfo> GetContactsDischarge(List<int> cityIDs, DateTime StartDate, DateTime EndDate)
        //{
        //    using (MainDataContext context = new MainDataContext())
        //    {
        //        return context.Requests.Where(t =>
        //                 (t.EndDate >= StartDate) &&
        //                (t.EndDate <= EndDate) &&
        //                (t.RequestTypeID == (byte)DB.RequestType.DischargeADSL) &&
        //            (cityIDs.Count == 0 || cityIDs.Contains((int)t.Center.Region.CityID))).GroupBy(t => new
        //            {
        //                city = t.Center.Region.City.Name,
        //                endDate=t.EndDate
        //            }).Select(t => new ADSLGeneralContactsInfo
        //            {
        //                CityName = t.Key.city,
        //                WeekDischarge=t.Count(),
        //                EndDate=t.Key.endDate
        //            }).ToList();
        //    }
        //}

        public static List<ADSLContactsPAPComparisionInfo> GetADSLWeeklyComparisionInfo(List<int> cityIDs, List<int> centerIDs)
        {
            List<ADSLContactsPAPComparisionInfo> ADSLWeeklyComparisionInfos = new List<ADSLContactsPAPComparisionInfo>(12);

            DateTime StartDate = new DateTime(2013, 03, 21);
            DateTime EndDate = StartDate.AddDays(6);

            var calendar = new PersianCalendar();
            var week = calendar
                      .GetWeekOfYear(DateTime.Now, CalendarWeekRule.FirstDay,
                                     DateTimeFormatInfo.CurrentInfo.FirstDayOfWeek);

            for (int i = 0; i < week; i++)
            {
                ADSLContactsPAPComparisionInfo newItem = new ADSLContactsPAPComparisionInfo();

                newItem.ContactsDayeri = GetContactsDayeriInfo(cityIDs, centerIDs, StartDate, EndDate);
                newItem.PAPDayeri = GetPAPDayeriInfo(cityIDs, centerIDs, StartDate, EndDate);
                newItem.ContactsDischarge = GetContactsDischargeInfo(cityIDs, centerIDs, StartDate, EndDate);
                newItem.PAPDischarge = GetPAPDischargeInfo(cityIDs, centerIDs, StartDate, EndDate);
                newItem.PureContacsDayeri = newItem.ContactsDayeri - newItem.ContactsDischarge;
                newItem.PurePAPDayeri = newItem.PAPDayeri - newItem.PAPDischarge;
                newItem.WeekNo = i;

                ADSLWeeklyComparisionInfos.Add(newItem);

                StartDate = EndDate.AddDays(1);
                EndDate = StartDate.AddDays(6);
            }

            return ADSLWeeklyComparisionInfos;
        }




        public static List<ADSLCityWeeklyContacts> GetADSLCityWeeklyContactsDayeri(List<int> cityIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ExecuteQuery<ADSLCityWeeklyContacts>("execute [dbo].[Report.ADSLCityWeeklyContactsDayeri] "
                                                                   + "'" + string.Join(",", cityIDs) + "'"
                                                                   ).ToList();

            }

        }

        public static List<ADSLCityWeeklyContacts> GetADSLCityWeeklyContactsDischarge(List<int> cityIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ExecuteQuery<ADSLCityWeeklyContacts>("execute [dbo].[Report.ADSLCityWeeklyContactsDischarge] "
                                                                   + "'" + string.Join(",", cityIDs) + "'"
                                                                   ).ToList();
            }

        }

        public static List<ADSLCityWeeklyContacts> GetADSLCityWeeklyContactsDayeriforChart(List<int> cityIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ExecuteQuery<ADSLCityWeeklyContacts>("execute [dbo].[Report.ADSLContactsWeeklyDayeriChart]"
                                                                        + "'" + string.Join(",", cityIDs) + "'").ToList();
            }
        }

        public static List<ADSLCityMonthlyInfo> GetADSLCityDayeriMonthlyInfo(List<int> cityIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ExecuteQuery<ADSLCityMonthlyInfo>("execute [dbo].[Report.ADSLCityMonthlyDayeriReport]"
                                                                   + "'" + string.Join(",", cityIDs) + "'").ToList();
            }
        }

        public static List<ADSLCityMonthlyInfo> GetADSLCityDischargeMonthlyInfo(List<int> cityIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ExecuteQuery<ADSLCityMonthlyInfo>("execute [dbo].[Report.ADSLCityMonthlyDischargeReport]"
                                                                   + "'" + string.Join(",", cityIDs) + "'").ToList();
            }
        }

        public static ADSLBandwidth GetADSLBandwidthInfo(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            ADSLBandwidth BandwidthInfo = new ADSLBandwidth();

            BandwidthInfo.OneMonth = GetOneMonthBandwidthCount(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.ThreeMonth = GetThreeMonthBandwidthCount(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.SixMonth = GetSixMonthBandwidthCount(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.TwelveMonth = GetTwelveMonthBandwidthCount(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.OneMonth_64 = GetOneMonthBandwidthCount_64(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.UnlimitedOneMonth = GetUnlimitedOneMonthBandwidthCount(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.OneMonth_128 = GetOneMonthBandwidthCount_128(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.OneMonth_256 = GetOneMonthBandwidthCount_256(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.OneMonth_512 = GetOneMonthBandwidthCount_512(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.OneMonth_1024 = GetOneMonthBandwidthCount_1024(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.OneMonth_2048 = GetOneMonthBandwidthCount_2048(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.UnlimitedThreeMonth = GetUnlimitedThreeMonthBandwidthCount(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.ThreeMonth_64 = GetThreeMonthBandwidthCount_64(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.ThreeMonth_128 = GetThreeMonthBandwidthCount_128(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.ThreeMonth_256 = GetThreeMonthBandwidthCount_256(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.ThreeMonth_512 = GetThreeMonthBandwidthCount_512(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.ThreeMonth_1024 = GetThreeMonthBandwidthCount_1024(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.ThreeMonth_2048 = GetThreeMonthBandwidthCount_2048(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.UnlimitedSixMonth = GetUnlimitedSixMonthBandwidthCount(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.SixMonth_64 = GetSixMonthBandwidthCount_64(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.SixMonth_128 = GetSixMonthBandwidthCount_128(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.SixMonth_256 = GetSixMonthBandwidthCount_256(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.SixMonth_512 = GetSixMonthBandwidthCount_512(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.SixMonth_1024 = GetSixMonthBandwidthCount_1024(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.SixMonth_2048 = GetSixMonthBandwidthCount_2048(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.UnlimitedTwelveMonth = GetUnlimitedTwelveMonthBandwidthCount(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.TwelveMonth_64 = GetTwelveMonthBandwidthCount_64(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.TwelveMonth_128 = GetTwelveMonthBandwidthCount_128(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.TwelveMonth_256 = GetTwelveMonthBandwidthCount_256(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.TwelveMonth_512 = GetTwelveMonthBandwidthCount_512(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.TwelveMonth_1024 = GetTwelveMonthBandwidthCount_1024(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.TwelveMonth_2048 = GetTwelveMonthBandwidthCount_2048(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.TotalUnlimited = GetUnlimitedTotalBandwidthCount(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.Total_64 = GetTotalBandwidthCount_64(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.Total_128 = GetTotalBandwidthCount_128(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.Total_256 = GetTotalBandwidthCount_256(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.Total_512 = GetTotalBandwidthCount_512(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.Total_1024 = GetTotalBandwidthCount_1024(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.Total_2048 = GetTotalBandwidthCount_2048(cityIDs, centerIDs, fromDate, toDate);
            BandwidthInfo.Total = GetTotalBandwidthCount(cityIDs, centerIDs, fromDate, toDate);

            return BandwidthInfo;
        }

        public static int GetOneMonthBandwidthCount(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.DurationID == 1) &&
                    (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                    (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                    (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                    (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                    (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetThreeMonthBandwidthCount(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.DurationID == 3) &&
                    (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                    (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                    (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                    (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                    (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetSixMonthBandwidthCount(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.DurationID == 6) &&
                    (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                    (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                    (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                    (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                    (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetTwelveMonthBandwidthCount(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.DurationID == 12) &&
                    (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                    (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                    (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                    (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                    (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetOneMonthBandwidthCount_64(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.BandWidthID == 1) && (t.S.DurationID == 1) &&
                    (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                    (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                    (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                    (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                    (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetUnlimitedOneMonthBandwidthCount(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.BandWidthID == 0) && (t.S.DurationID == 1) &&
                 (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                 (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                 (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                 (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                 (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetOneMonthBandwidthCount_128(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.BandWidthID == 2) && (t.S.DurationID == 1) &&
                 (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                 (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                 (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                 (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                 (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetOneMonthBandwidthCount_256(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.BandWidthID == 3) && (t.S.DurationID == 1) &&
                 (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                 (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                 (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                 (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                 (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetOneMonthBandwidthCount_512(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.BandWidthID == 4) && (t.S.DurationID == 1) &&
                 (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                 (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                 (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                 (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                 (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetOneMonthBandwidthCount_1024(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.BandWidthID == 5) && (t.S.DurationID == 1) &&
                 (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                 (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                 (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                 (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                 (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetOneMonthBandwidthCount_2048(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.BandWidthID == 6) && (t.S.DurationID == 1) &&
                 (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                 (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                 (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                 (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                 (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetUnlimitedThreeMonthBandwidthCount(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.BandWidthID == 0) && (t.S.DurationID == 3) &&
                 (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                 (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                 (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                 (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                 (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetThreeMonthBandwidthCount_64(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.BandWidthID == 1) && (t.S.DurationID == 3) &&
                 (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                 (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                 (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                 (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                 (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetThreeMonthBandwidthCount_128(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.BandWidthID == 2) && (t.S.DurationID == 3) &&
                 (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                 (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                 (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                 (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                 (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetThreeMonthBandwidthCount_256(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.BandWidthID == 3) && (t.S.DurationID == 3) &&
                 (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                 (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                 (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                 (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                 (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetThreeMonthBandwidthCount_512(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.BandWidthID == 4) && (t.S.DurationID == 3) &&
                 (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                 (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                 (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                 (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                 (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetThreeMonthBandwidthCount_1024(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.BandWidthID == 5) && (t.S.DurationID == 3) &&
                 (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                 (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                 (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                 (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                 (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetThreeMonthBandwidthCount_2048(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.BandWidthID == 6) && (t.S.DurationID == 3) &&
                 (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                 (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                 (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                 (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                 (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetUnlimitedSixMonthBandwidthCount(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.BandWidthID == 0) && (t.S.DurationID == 6) &&
                 (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                 (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                 (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                 (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                 (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetSixMonthBandwidthCount_64(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.BandWidthID == 1) && (t.S.DurationID == 6) &&
                 (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                 (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                 (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                 (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                 (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetSixMonthBandwidthCount_128(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.BandWidthID == 2) && (t.S.DurationID == 6) &&
                 (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                 (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                 (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                 (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                 (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetSixMonthBandwidthCount_256(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.BandWidthID == 3) && (t.S.DurationID == 6) &&
                 (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                 (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                 (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                 (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                 (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetSixMonthBandwidthCount_512(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.BandWidthID == 4) && (t.S.DurationID == 6) &&
                 (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                 (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                 (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                 (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                 (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetSixMonthBandwidthCount_1024(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.BandWidthID == 5) && (t.S.DurationID == 6) &&
                 (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                 (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                 (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                 (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                 (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetSixMonthBandwidthCount_2048(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.BandWidthID == 6) && (t.S.DurationID == 6) &&
                 (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                 (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                 (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                 (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                 (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetUnlimitedTwelveMonthBandwidthCount(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.BandWidthID == 0) && (t.S.DurationID == 12) &&
                 (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                 (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                 (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                 (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                 (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetTwelveMonthBandwidthCount_64(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.BandWidthID == 1) && (t.S.DurationID == 12) &&
                 (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                 (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                 (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                 (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                 (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetTwelveMonthBandwidthCount_128(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.BandWidthID == 2) && (t.S.DurationID == 12) &&
                 (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                 (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                 (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                 (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                 (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetTwelveMonthBandwidthCount_256(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.BandWidthID == 3) && (t.S.DurationID == 12) &&
                 (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                 (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                 (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                 (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                 (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetTwelveMonthBandwidthCount_512(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.BandWidthID == 4) && (t.S.DurationID == 12) &&
                 (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                 (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                 (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                 (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                 (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetTwelveMonthBandwidthCount_1024(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.BandWidthID == 5) && (t.S.DurationID == 12) &&
                 (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                 (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                 (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                 (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                 (t.R.Request.EndDate != null)).Count();
            }
        }
        public static int GetTwelveMonthBandwidthCount_2048(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.BandWidthID == 6) && (t.S.DurationID == 12) &&
                 (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                 (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                 (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                 (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                 (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetTotalBandwidthCount_64(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.BandWidthID == 1) &&
                 (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                 (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                 (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                 (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                 (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetTotalBandwidthCount_128(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.BandWidthID == 2) &&
                 (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                 (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                 (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                 (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                 (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetTotalBandwidthCount_256(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.BandWidthID == 3) &&
                 (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                 (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                 (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                 (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                 (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetTotalBandwidthCount_512(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.BandWidthID == 4) &&
                 (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                 (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                 (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                 (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                 (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetTotalBandwidthCount_1024(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.BandWidthID == 5) &&
                 (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                 (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                 (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                 (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                 (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetTotalBandwidthCount_2048(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.BandWidthID == 6) &&
                 (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                 (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                 (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                 (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                 (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetUnlimitedTotalBandwidthCount(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                    (t.S.BandWidthID == 0) &&
                 (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                 (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                 (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                 (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                 (t.R.Request.EndDate != null)).Count();
            }
        }

        public static int GetTotalBandwidthCount(List<int> cityIDs, List<int> centerIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLServices, r => r.ServiceID, s => s.ID, (r, s) => new { R = r, S = s }).Where(t =>
                 (cityIDs.Count == 0 || cityIDs.Contains((int)t.R.Request.Center.Region.CityID)) &&
                 (centerIDs.Count == 0 || centerIDs.Contains((int)t.R.Request.CenterID)) &&
                 (!fromDate.HasValue || fromDate <= t.R.Request.EndDate) &&
                 (!toDate.HasValue || toDate >= t.R.Request.EndDate) &&
                 (t.R.Request.EndDate != null)).Count();
            }
        }

        public static List<ADSLModemInfo> GetADSLSoldModem(List<int> sellerAgentIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Join(context.ADSLSellerAgentUsers, r => r.CreatorUserID, s => s.ID, (r, s) => new { R = r, S = s }).Select(item => item)
                     .Join(context.ADSLRequests, item => item.R.ID, ar => ar.ID, (item, ar) => new { Item = item, AR = ar }).Select(item2 => item2)
                     .Join(context.ADSLModems, item2 => item2.AR.ModemID, m => m.ID, (item2, m) => new { Item2 = item2, M = m }).Where(t =>

                     (sellerAgentIDs.Count == 0 || sellerAgentIDs.Contains((int)t.Item2.Item.S.ID)) &&
                     (!fromDate.HasValue || fromDate <= t.Item2.Item.R.EndDate) &&
                     (!toDate.HasValue || toDate >= t.Item2.Item.R.EndDate)
                    //&&
                    //(t.R.ADSLModemProperty.Status==(byte)DB.ADSLModemStatus.sold)
                     ).Select(t => new ADSLModemInfo
                         {
                             Model = t.M.Model,
                             Price = t.M.Price.ToString(),
                             Title = t.M.Title,
                             SellerAgentName = t.Item2.Item.S.User.UserName,
                             CenterName = t.Item2.Item.R.Center.CenterName
                             //SerialNo=t.R.ADSLModemProperty.SerialNo,
                             //CenterName=t.R.ADSLModemProperty.Center.CenterName,
                             //SellerAgentName=t.R.ADSLSellerAgent.Title

                         }).ToList();

            }

        }

        public static List<ADSLPAPRequestInfo> GetADSLDayeriPapRequests(int? Paps, DateTime? fromDate, DateTime? toDate, List<int> statusIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLPAPRequests.Where(t =>
                                    (!Paps.HasValue || Paps == ((int)t.PAPInfoID)) &&
                                    (t.RequestTypeID == ((byte)DB.RequestType.ADSLInstalPAPCompany)) &&
                                    (!fromDate.HasValue || t.Request.InsertDate >= fromDate) &&
                                    (!toDate.HasValue || t.Request.InsertDate <= toDate) &&
                                    (statusIDs.Count == 0 || statusIDs.Contains((int)t.Status)))
                    .Select(t => new ADSLPAPRequestInfo
                    {
                        ID = t.ID,
                        TelephoneNo = t.TelephoneNo,
                        Center = t.Request.Center.Region.City.Name + ":" + t.Request.Center.CenterName,
                        Customer = t.Customer,
                        Status = DB.GetEnumDescriptionByValue(typeof(DB.ADSLPAPRequestStatus), (int)t.Status),
                        EndDate = Date.GetPersianDate(t.Request.EndDate, Date.DateStringType.Short),
                        InsertDate = Date.GetPersianDate(t.Request.InsertDate, Date.DateStringType.Short),
                        CustomerStatus = DB.GetEnumDescriptionByValue(typeof(DB.ADSLOwnerStatus), (int)t.CustomerStatus),
                        CompanyName = t.PAPInfo.Title
                    }).ToList();
            }
        }

        public static List<ADSLPAPRequestInfo> GetADSLDischargePapRequests(int? Paps, DateTime? fromDate, DateTime? toDate, List<int> statusIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLPAPRequests.Where(t =>
                    (!Paps.HasValue || Paps == ((int)t.PAPInfoID)) &&
                    (t.RequestTypeID == ((byte)DB.RequestType.ADSLDischargePAPCompany)) &&
                    (!fromDate.HasValue || t.Request.InsertDate >= fromDate) &&
                    (!toDate.HasValue || t.Request.InsertDate <= toDate) &&
                    (statusIDs.Count == 0 || statusIDs.Contains((int)t.Status)))
                    .Select(t => new ADSLPAPRequestInfo
                    {
                        ID = t.ID,
                        TelephoneNo = t.TelephoneNo,
                        Center = t.Request.Center.Region.City.Name + ":" + t.Request.Center.CenterName,
                        Customer = t.Customer,
                        Status = DB.GetEnumDescriptionByValue(typeof(DB.ADSLPAPRequestStatus), (int)t.Status),
                        InsertDate = Date.GetPersianDate(t.Request.InsertDate, Date.DateStringType.Short),
                        EndDate = Date.GetPersianDate(t.Request.EndDate, Date.DateStringType.Short),
                        CustomerStatus = DB.GetEnumDescriptionByValue(typeof(DB.ADSLOwnerStatus), (int)t.CustomerStatus),
                        CompanyName = t.PAPInfo.Title

                    }).ToList();
            }
        }

        public static List<ADSLPAPRequestInfo> GetADSLChangePortPapRequests(int Paps, DateTime? fromDate, DateTime? toDate, List<int> statusIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLPAPRequests.Where(t =>
                    (Paps == 0 || Paps == ((int)t.PAPInfoID)) &&
                    (t.RequestTypeID == ((byte)DB.RequestType.ADSLExchangePAPCompany)) &&
                    (!fromDate.HasValue || t.Request.InsertDate >= fromDate) &&
                    (!toDate.HasValue || t.Request.InsertDate <= toDate) &&
                    (statusIDs.Count == 0 || statusIDs.Contains((int)t.Status)))

                    .Select(t => new ADSLPAPRequestInfo
                    {
                        ID = t.ID,
                        TelephoneNo = t.TelephoneNo,
                        Center = t.Request.Center.Region.City.Name + ":" + t.Request.Center.CenterName,
                        Customer = t.Customer,
                        Status = DB.GetEnumDescriptionByValue(typeof(DB.ADSLPAPRequestStatus), (int)t.Status),
                        InsertDate = Date.GetPersianDate(t.Request.InsertDate, Date.DateStringType.Short),
                        EndDate = Date.GetPersianDate(t.Request.EndDate, Date.DateStringType.Short),
                        CustomerStatus = DB.GetEnumDescriptionByValue(typeof(DB.ADSLOwnerStatus), (int)t.CustomerStatus),
                        CompanyName = t.PAPInfo.Title

                    }).ToList();
            }
        }

        public static ChangeLocationCenterInfo GetChangeLocationCenterInsideInfo(DateTime? fromDate, DateTime? toDate, List<long?> RequestNo, int? CenterId, long? TelephoneNo)
        {

            using (MainDataContext context = new MainDataContext())
            {
                return context.ChangeLocations.Where(t =>
                                                         (!fromDate.HasValue || t.Request.EndDate >= fromDate) &&
                                                         (!toDate.HasValue || t.Request.EndDate <= toDate) &&
                                                         (RequestNo.Count == 0 || RequestNo.Contains(t.ID)) &&
                                                         (!CenterId.HasValue || t.Request.CenterID == CenterId) &&
                                                         (!TelephoneNo.HasValue || t.Request.TelephoneNo == TelephoneNo) &&
                                                         (t.ChangeLocationTypeID == (byte)DB.ChangeLocationCenterType.InSideCenter || t.ChangeLocationTypeID == (byte)DB.ChangeLocationCenterType.itself)
                                                     )
                                               .Select(t => new ChangeLocationCenterInfo
                                                                {
                                                                    RequestNo = t.ID.ToString(),
                                                                    TelephoneNo = t.Request.TelephoneNo.ToString(),
                                                                    NewTelephoneNo = t.NewTelephone.ToString(),
                                                                    //CustomerName = t.Request.Customer.FirstNameOrTitle.ToString() + " " + (t.Request.Customer.LastName ?? ""),
                                                                    CustomerName = string.Format("{0} {1}", t.Request.Customer.FirstNameOrTitle, t.Request.Customer.LastName),
                                                                    InsertDate = t.Request.InsertDate.ToPersian(Date.DateStringType.Short),
                                                                    InstallationDate = context.Wirings
                                                                                              .Where(t2 => t2.IssueWiring.RequestID == t.ID && t2.WiringInsertDate != null)
                                                                                              .OrderByDescending(t2 => t2.WiringInsertDate)
                                                                                              .Take(1)
                                                                                              .Select(t2 => t2.WiringInsertDate)
                                                                                              .SingleOrDefault().ToPersian(Date.DateStringType.Short),
                                                                    OldInstallAddress = t.Address1.AddressContent,
                                                                    OldPostalCode = t.Address1.PostalCode,
                                                                    NewPostalCode = t.Address2.PostalCode,
                                                                    NewInstallAddress = t.Address2.AddressContent,

                                                                    CityName = t.Request.Center.Region.City.Name,
                                                                    CenterName = t.Request.Center.CenterName,
                                                                    //NewCustomerName = t.Customer != null ? (t.Customer.FirstNameOrTitle.ToString() + " " + (t.Customer.LastName ?? "")) : "",
                                                                    //OldCustomerName = t.Request.Customer.FirstNameOrTitle.ToString() + " " + (t.Request.Customer.LastName ?? ""),
                                                                    NewCustomerName = (t.Customer != null) ? string.Format("{0} {1}", t.Customer.FirstNameOrTitle, t.Customer.LastName) : "",
                                                                    OldCustomerName = string.Format("{0} {1}", t.Request.Customer.FirstNameOrTitle, t.Request.Customer.LastName)
                                                                }
                                                        )
                                             .SingleOrDefault();
            }
        }

        //TODO:rad.
        public static List<ChangeLocationCenterInfo> GetChangeLocationCenterInsideInfos(DateTime? fromDate, DateTime? toDate, List<int> cities, List<int> centers, bool hasChangeName, long telephoneNo)
        {
            using (MainDataContext context = new MainDataContext())
            {
                List<ChangeLocationCenterInfo> result = new List<ChangeLocationCenterInfo>();

                var query = context.ChangeLocations.Where(ch =>
                                                               (!fromDate.HasValue || ch.Request.EndDate >= fromDate) &&
                                                               (!toDate.HasValue || ch.Request.EndDate <= toDate) &&
                                                               (telephoneNo == -1 || ch.Request.TelephoneNo == telephoneNo) &&
                                                               (cities.Count == 0 || cities.Contains(ch.Request.Center.Region.CityID)) &&
                                                               (centers.Count == 0 || centers.Contains(ch.Request.CenterID)) &&
                                                               (ch.ChangeLocationTypeID == (byte?)DB.ChangeLocationCenterType.InSideCenter || ch.ChangeLocationTypeID == (byte?)DB.ChangeLocationCenterType.itself)
                                                          )
                                                    .AsQueryable();

                //به علت جدا کردن تغییر مکان داخل مرکز از تغییر مکان و نام داخل مرکز
                if (hasChangeName)//گواهی تغییر مکان و نام داخل مرکز
                {
                    result = query.Where(ch => ch.NewCustomerID.HasValue).Select(ch => new ChangeLocationCenterInfo
                                                                                    {
                                                                                        RequestNo = ch.ID.ToString(),
                                                                                        TelephoneNo = ch.Request.TelephoneNo.ToString(),
                                                                                        NewTelephoneNo = ch.NewTelephone.ToString(),
                                                                                        OldCustomerName = string.Format("{0} {1}", ch.Request.Customer.FirstNameOrTitle, ch.Request.Customer.LastName),
                                                                                        InsertDate = ch.Request.InsertDate.ToPersian(Date.DateStringType.Short),
                                                                                        InstallationDate = context.Wirings
                                                                                                                .Where(w => w.IssueWiring.RequestID == ch.ID && w.WiringInsertDate.HasValue)
                                                                                                                .OrderByDescending(w => w.WiringInsertDate)
                                                                                                                .Take(1)
                                                                                                                .Select(w => w.WiringInsertDate)
                                                                                                                .SingleOrDefault().ToPersian(Date.DateStringType.Short),
                                                                                        OldInstallAddress = ch.Address1.AddressContent,
                                                                                        OldPostalCode = ch.Address1.PostalCode,
                                                                                        NewInstallAddress = ch.Address2.AddressContent,
                                                                                        NewPostalCode = ch.Address2.PostalCode,

                                                                                        CityName = ch.Request.Center.Region.City.Name,
                                                                                        CenterName = ch.Request.Center.CenterName,
                                                                                        RequestDate = ch.Request.EndDate.ToPersian(Date.DateStringType.Short),
                                                                                        NewCustomerName = string.Format("{0} {1}", ch.Customer.FirstNameOrTitle, ch.Customer.LastName),


                                                                                    }
                                                                                 )
                                                                         .ToList();
                }
                else //گواهی تغییر مکان داخل مرکز
                {
                    result = query.Where(ch => !ch.NewCustomerID.HasValue).Select(ch => new ChangeLocationCenterInfo
                                                                                     {
                                                                                         RequestNo = ch.ID.ToString(),
                                                                                         TelephoneNo = ch.Request.TelephoneNo.ToString(),
                                                                                         NewTelephoneNo = ch.NewTelephone.ToString(),
                                                                                         CustomerName = string.Format("{0} {1}", ch.Request.Customer.FirstNameOrTitle, ch.Request.Customer.LastName),
                                                                                         InsertDate = ch.Request.InsertDate.ToPersian(Date.DateStringType.Short),
                                                                                         InstallationDate = context.Wirings
                                                                                                                 .Where(w => w.IssueWiring.RequestID == ch.ID && w.WiringInsertDate.HasValue)
                                                                                                                 .OrderByDescending(w => w.WiringInsertDate)
                                                                                                                 .Take(1)
                                                                                                                 .Select(w => w.WiringInsertDate)
                                                                                                                 .SingleOrDefault().ToPersian(Date.DateStringType.Short),
                                                                                         OldInstallAddress = ch.Address1.AddressContent,
                                                                                         OldPostalCode = ch.Address1.PostalCode,
                                                                                         NewInstallAddress = ch.Address2.AddressContent,
                                                                                         NewPostalCode = ch.Address2.PostalCode,
                                                                                         CityName = ch.Request.Center.Region.City.Name,
                                                                                         CenterName = ch.Request.Center.CenterName,
                                                                                         RequestDate = ch.Request.EndDate.ToPersian(Date.DateStringType.Short),


                                                                                     }
                                                                                )
                                                                         .ToList();
                }

                return result;
            }
        }

        //TODO:rad
        public static List<ChangeLocationCenterInfo> GetChangeLocationCenterToCenterInfos(DateTime? fromDate, DateTime? toDate, List<int> cities, List<int> centers, bool hasChangeName, long telephoneNo)
        {
            using (MainDataContext context = new MainDataContext())
            {
                List<ChangeLocationCenterInfo> result = new List<ChangeLocationCenterInfo>();
                if (toDate.HasValue)
                {
                    toDate = toDate.Value.AddDays(1);
                }
                var query = context.ChangeLocations.Where(ch =>
                                                            (!fromDate.HasValue || ch.Request.InsertDate >= fromDate) &&
                                                            (!toDate.HasValue || ch.Request.InsertDate <= toDate) &&
                                                            (cities.Count == 0 || cities.Contains(ch.Request.Center.Region.CityID)) &&
                                                            (centers.Count == 0 || centers.Contains(ch.Request.CenterID)) &&
                                                            (telephoneNo == -1 || ch.Request.TelephoneNo == telephoneNo) &&
                                                            (ch.ChangeLocationTypeID == (byte?)DB.ChangeLocationCenterType.CenterToCenter)
                                                         )
                                                    .AsQueryable();

                //  //به علت جدا کردن تغییر مکان مرکز به مرکز از تغییر مکان و نام مرکز به مرکز
                if (hasChangeName)//گواهی تغییر مکان و نام مرکز به مرکز
                {
                    result = query.Where(ch => ch.NewCustomerID.HasValue).Select(ch => new ChangeLocationCenterInfo
                                                                                        {
                                                                                            RequestNo = ch.ID.ToString(),
                                                                                            TelephoneNo = ch.Request.TelephoneNo.ToString(),
                                                                                            NewTelephoneNo = ch.NewTelephone.ToString(),
                                                                                            CustomerName = string.Format("{0} {1}", ch.Request.Customer.FirstNameOrTitle, ch.Request.Customer.LastName),
                                                                                            NewCustomerID = ch.Customer.ID,
                                                                                            NewCustomerName = string.Format("{0} {1}", ch.Customer.FirstNameOrTitle, ch.Customer.LastName),
                                                                                            InsertDate = ch.Request.InsertDate.ToPersian(Date.DateStringType.Short),
                                                                                            InstallationDate = context.Wirings
                                                                                                                      .Where(w =>
                                                                                                                                w.IssueWiring.RequestID == ch.ID && w.WiringInsertDate.HasValue
                                                                                                                            )
                                                                                                                      .OrderByDescending(w => w.WiringInsertDate)
                                                                                                                      .Take(1)
                                                                                                                      .Select(w => w.WiringInsertDate)
                                                                                                                      .SingleOrDefault()
                                                                                                                      .ToPersian(Date.DateStringType.Short),
                                                                                            OldInstallAddress = ch.Address1.AddressContent,
                                                                                            OldPostalCode = ch.Address1.PostalCode,
                                                                                            NewInstallAddress = ch.Address2.AddressContent,
                                                                                            NewPostalCode = ch.Address2.PostalCode,
                                                                                            CityName = ch.Request.Center.Region.City.Name,
                                                                                            Center = ch.Request.Center.CenterName,
                                                                                            OldCustomerName = string.Format("{0} {1}", ch.Request.Customer.FirstNameOrTitle, ch.Request.Customer.LastName),
                                                                                            ChangeLocationDate = ch.Request.EndDate.ToPersian(Date.DateStringType.Short),
                                                                                            LastInstallRequest = context.Requests
                                                                                                                        .Where(r => r.TelephoneNo.Value.Equals(ch.OldTelephone.Value))
                                                                                                                        .OrderByDescending(r => r.EndDate)
                                                                                                                        .FirstOrDefault()
                                                                                                                        .InstallRequests
                                                                                                                        .Select(ir => new InstallRequestShortInfo
                                                                                                                                          {
                                                                                                                                              ID = ir.ID,
                                                                                                                                              InstallationDate = (ir.InstallationDate.HasValue) ? ir.InstallationDate.ToString() : "-----",
                                                                                                                                              TelephoneType = ir.CustomerType.Title,
                                                                                                                                              TelephoneTypeGroup = ir.CustomerGroup.Title
                                                                                                                                          }
                                                                                                                               )
                                                                                                                        .SingleOrDefault(),


                                                                                        }
                                                                            ).ToList();
                }
                else//گواهی تغییر مکان مرکز به مرکز
                {
                    result = query.Where(ch => !ch.NewCustomerID.HasValue).Select(ch => new ChangeLocationCenterInfo
                                                                                    {
                                                                                        RequestNo = ch.ID.ToString(),
                                                                                        TelephoneNo = ch.Request.TelephoneNo.ToString(),
                                                                                        NewTelephoneNo = ch.NewTelephone.ToString(),
                                                                                        CustomerName = string.Format("{0} {1}", ch.Request.Customer.FirstNameOrTitle, ch.Request.Customer.LastName),
                                                                                        NewCustomerID = ch.Customer.ID,
                                                                                        NewCustomerName = string.Format("{0} {1}", ch.Customer.FirstNameOrTitle, ch.Customer.LastName),
                                                                                        InsertDate = ch.Request.InsertDate.ToPersian(Date.DateStringType.Short),
                                                                                        InstallationDate = context.Wirings
                                                                                                                  .Where(t2 =>
                                                                                                                                t2.IssueWiring.RequestID == ch.ID && t2.WiringInsertDate.HasValue
                                                                                                                         )
                                                                                                                  .OrderByDescending(t2 => t2.WiringInsertDate)
                                                                                                                  .Take(1)
                                                                                                                  .Select(t2 => t2.WiringInsertDate)
                                                                                                                  .SingleOrDefault()
                                                                                                                  .ToPersian(Date.DateStringType.Short),
                                                                                        OldInstallAddress = ch.Address1.AddressContent,
                                                                                        OldPostalCode = ch.Address1.PostalCode,
                                                                                        NewInstallAddress = ch.Address2.AddressContent,
                                                                                        NewPostalCode = ch.Address2.PostalCode,
                                                                                        CityName = ch.Request.Center.Region.City.Name,
                                                                                        CenterName = ch.Request.Center.CenterName,
                                                                                        OldCustomerName = string.Format("{0} {1}", ch.Request.Customer.FirstNameOrTitle, ch.Request.Customer.LastName),
                                                                                        ChangeLocationDate = ch.Request.EndDate.ToPersian(Date.DateStringType.Short),
                                                                                        LastInstallRequest = context.Requests
                                                                                                                    .Where(r => r.TelephoneNo.Value.Equals(ch.OldTelephone.Value))
                                                                                                                    .OrderByDescending(r => r.EndDate)
                                                                                                                    .FirstOrDefault()
                                                                                                                    .InstallRequests
                                                                                                                    .Select(ir => new
                                                                                                                                    InstallRequestShortInfo
                                                                                                                                    {
                                                                                                                                        ID = ir.ID,
                                                                                                                                        InstallationDate = (ir.InstallationDate.HasValue) ? ir.InstallationDate.ToString() : "-----",
                                                                                                                                        TelephoneType = ir.CustomerType.Title,
                                                                                                                                        TelephoneTypeGroup = ir.CustomerGroup.Title
                                                                                                                                    }
                                                                                                                            )
                                                                                                                    .SingleOrDefault(),
                                                                                    }
                                                                              )
                                                                          .ToList();
                }

                //برخی از فیلدها نباید در گزارش خالی باشند. جلوگیری از ایجاد درگیری روانی
                //در کد زیر آن فیلدها را مقداردهی پیش فرض میکنیم
                result.ForEach(ch =>
                                    {
                                        ch.TelephoneType = (!Object.ReferenceEquals(ch.LastInstallRequest, null)) ? ch.LastInstallRequest.TelephoneType : "-----";
                                        ch.TelephoneTypeGroup = (!Object.ReferenceEquals(ch.LastInstallRequest, null)) ? ch.LastInstallRequest.TelephoneTypeGroup : "-----";
                                        ch.NewTelephoneNo = !string.IsNullOrEmpty(ch.NewTelephoneNo) ? ch.NewTelephoneNo : "-----";
                                        ch.ChangeLocationDate = !string.IsNullOrEmpty(ch.ChangeLocationDate) ? ch.ChangeLocationDate : "-----";
                                        ch.InstallationDate = !string.IsNullOrEmpty(ch.InstallationDate) ? ch.InstallationDate : "-----";
                                    }
                              );
                return result;
            }
        }

        //TODO:rad
        public static List<ChangeNoInfo> GetChangeNoInfos(DateTime? fromDate, DateTime? toDate, List<int> cities, List<int> centers, List<int> causeOfChangeNos, long oldTelephoneNo, long newTelephoneNo)
        {
            using (MainDataContext context = new MainDataContext())
            {
                List<ChangeNoInfo> result = new List<ChangeNoInfo>();
                if (toDate.HasValue)
                {
                    toDate = toDate.Value.AddDays(1);
                }
                var query = context.ChangeNos.Where(cn =>
                                                        (!fromDate.HasValue || cn.ChangeDate >= fromDate) &&
                                                        (!toDate.HasValue || cn.ChangeDate <= toDate) &&
                                                        (cities.Count == 0 || cities.Contains(cn.Request.Center.Region.CityID)) &&
                                                        (centers.Count == 0 || centers.Contains(cn.Request.CenterID)) &&
                                                        (causeOfChangeNos.Count == 0 || causeOfChangeNos.Contains(cn.CauseOfChangeNoID)) &&
                                                        (oldTelephoneNo == -1 || cn.OldTelephoneNo == oldTelephoneNo) &&
                                                        (newTelephoneNo == -1 || (cn.NewTelephoneNo.HasValue && cn.NewTelephoneNo.Value == newTelephoneNo))
                                                    )
                                             .AsQueryable();
                result = query.Select(cn => new ChangeNoInfo
                                                {
                                                    CustomerName = string.Format("{0} {1}", cn.Customer.FirstNameOrTitle, cn.Customer.LastName),
                                                    NewTelephoneNo = cn.NewTelephoneNo.ToString(),
                                                    OldTelephoneNo = cn.OldTelephoneNo.ToString(),
                                                    Address = cn.Address.AddressContent,
                                                    PostalCode = cn.Address.PostalCode,
                                                    MelliCode = cn.Customer.NationalCodeOrRecordNo,
                                                    Center = cn.Request.Center.CenterName,
                                                    CityName = cn.Request.Center.Region.City.Name,
                                                    Description = cn.Description,
                                                    CauseOfChangeNo = cn.CauseOfChangeNo.Name,
                                                    InsertDate = cn.Request.InsertDate.ToPersian(Date.DateStringType.Short),
                                                    ChangeNoDate = cn.ChangeDate.ToPersian(Date.DateStringType.Short),
                                                    MobileNo = cn.Customer.MobileNo,
                                                    UrgentTelNo = cn.Customer.UrgentTelNo
                                                }
                                      )
                             .ToList();

                //برخی از فیلدها نباید در گزارش خالی باشند. جلوگیری از ایجاد درگیری روانی
                //در کد زیر آن فیلدها را مقداردهی پیش فرض میکنیم
                result.ForEach(cni =>
                                    {
                                        cni.CustomerName = !string.IsNullOrEmpty(cni.CustomerName) ? cni.CustomerName : "-----";
                                        cni.NewTelephoneNo = !string.IsNullOrEmpty(cni.NewTelephoneNo) ? cni.NewTelephoneNo : "-----";
                                        cni.ChangeNoDate = !string.IsNullOrEmpty(cni.ChangeNoDate) ? cni.ChangeNoDate : "-----";
                                        cni.UrgentTelNo = !string.IsNullOrEmpty(cni.UrgentTelNo) ? cni.UrgentTelNo : "-----";
                                        cni.MobileNo = !string.IsNullOrEmpty(cni.MobileNo) ? cni.MobileNo : "-----";
                                        cni.MelliCode = !string.IsNullOrEmpty(cni.MelliCode) ? cni.MelliCode : "-----";
                                    }
                              );

                return result;
            }
        }

        //TODO:rad
        public static List<RefundDepositInfo> GetRefundDepositInfos(DateTime? fromDate, DateTime? toDate, List<int> cities, List<int> centers, List<int> causeOfRefundDeposits, long telephoneNo, long requestNo)
        {
            using (MainDataContext context = new MainDataContext())
            {
                List<RefundDepositInfo> result = new List<RefundDepositInfo>();
                if (toDate.HasValue)
                {
                    toDate = toDate.Value.AddDays(1);
                }
                var query = context.RefundDeposits.Where(rd =>
                                                            (cities.Count == 0 || cities.Contains(rd.Request.Center.Region.CityID)) &&
                                                            (centers.Count == 0 || centers.Contains(rd.Request.CenterID)) &&
                                                            (!fromDate.HasValue || rd.RefundDate >= fromDate) &&
                                                            (!toDate.HasValue || rd.RefundDate <= toDate) &&
                                                            (requestNo == -1 ? rd.RefundDate.HasValue : rd.Request.ID == requestNo) &&
                                                            (telephoneNo == -1 || (rd.Request.TelephoneNo.HasValue && rd.Request.TelephoneNo.Value == telephoneNo)) &&
                                                            (causeOfRefundDeposits.Count == 0 || causeOfRefundDeposits.Contains(rd.CauseOfRefundDepositID))
                                                         )
                                                  .AsQueryable();
                result = query.Select(rd => new RefundDepositInfo
                                                {
                                                    RequestID = rd.Request.ID.ToString(),
                                                    AccountingdocumentNumber = rd.AccountingDocumentNumber,
                                                    CauseOfRefundDeposit = rd.CauseOfRefundDeposit.Name,
                                                    CorrespondenceAddress = rd.Address1.AddressContent,
                                                    InstallAddress = rd.Address.AddressContent,
                                                    Center = rd.Request.Center.CenterName,
                                                    City = rd.Request.Center.Region.City.Name,
                                                    CustomerName = string.Format("{0} {1}", rd.Request.Customer.FirstNameOrTitle, rd.Request.Customer.LastName),
                                                    RefundAmount = rd.RefundAmount.ToString(),
                                                    RefundDepositDate = rd.RefundDate.ToPersian(Date.DateStringType.Short),
                                                    TelNo = rd.TelephoneNo.ToString(),
                                                    UrgentTelNo = rd.Request.Customer.UrgentTelNo,
                                                    MobileNo = rd.Request.Customer.MobileNo
                                                }
                                     )
                              .ToList();

                //برخی از فیلدها نباید در گزارش خالی باشند. جلوگیری از ایجاد درگیری روانی
                //در کد زیر آن فیلدها را مقداردهی پیش فرض میکنیم
                result.ForEach(rd =>
                                    {
                                        rd.AccountingdocumentNumber = !string.IsNullOrEmpty(rd.AccountingdocumentNumber) ? rd.AccountingdocumentNumber : "-----";
                                        rd.CorrespondenceAddress = !string.IsNullOrEmpty(rd.CorrespondenceAddress) ? rd.CorrespondenceAddress : "-----";
                                        rd.InstallAddress = !string.IsNullOrEmpty(rd.InstallAddress) ? rd.InstallAddress : "-----";
                                        rd.CustomerName = !string.IsNullOrEmpty(rd.CustomerName) ? rd.CustomerName : "-----";
                                        rd.RefundAmount = !string.IsNullOrEmpty(rd.RefundAmount) ? rd.RefundAmount : "-----";
                                        rd.RefundDepositDate = !string.IsNullOrEmpty(rd.RefundDepositDate) ? rd.RefundDepositDate : "-----";
                                        rd.TelNo = !string.IsNullOrEmpty(rd.TelNo) ? rd.TelNo : "-----";
                                        rd.UrgentTelNo = !string.IsNullOrEmpty(rd.UrgentTelNo) ? rd.UrgentTelNo : "-----";
                                        rd.MobileNo = !string.IsNullOrEmpty(rd.MobileNo) ? rd.MobileNo : "-----";
                                    }
                              );
                return result;
            }
        }

        //TODO:rad Edit
        public static List<CutAndEstablishInfo> GetCutAndEstablishInfos(DateTime? fromDate, DateTime? toDate, List<int> cities, List<int> centers, long telephoneno, long requestId, bool isEstablishRequest)
        {
            //TODO:region Edited.
            using (MainDataContext context = new MainDataContext())
            {
                List<CutAndEstablishInfo> result = new List<CutAndEstablishInfo>();
                if (toDate.HasValue)
                {
                    toDate = toDate.Value.AddDays(1);
                }
                var primaryQuery = context.CutAndEstablishes.Where(ce =>
                                                                (!fromDate.HasValue || fromDate <= ce.Request.EndDate) &&
                                                                (!toDate.HasValue || toDate >= ce.Request.EndDate) &&
                                                                (cities.Count == 0 || cities.Contains(ce.Request.Center.Region.CityID)) &&
                                                                (centers.Count == 0 || centers.Contains(ce.Request.CenterID)) &&
                                                                (telephoneno == -1 || (ce.Request.TelephoneNo.HasValue && ce.Request.TelephoneNo.Value == telephoneno)) &&
                                                                (requestId == -1 ? ce.Request.EndDate.HasValue : requestId == ce.Request.ID) &&
                                                                (!ce.Request.IsCancelation && !ce.Request.IsWaitingList)
                                                           )
                                                      .AsQueryable();

                //در بلاک زیر چک میشود که خواسته مورد جستجو درخواست قطع میباشد یا در خواست وصل
                if (isEstablishRequest)
                {
                    primaryQuery = primaryQuery.Where(ce => ce.Status.HasValue && ce.Status.Value == (byte)DB.RequestType.Connect).AsQueryable();//درخواست وصل
                }
                else
                {
                    primaryQuery = primaryQuery.Where(ce => ce.Status.HasValue && ce.Status.Value == (byte)DB.RequestType.CutAndEstablish).AsQueryable();//درخواست قطع
                }

                result = primaryQuery.Select(t => new CutAndEstablishInfo
                                            {
                                                CutDate = Date.GetPersianDate(t.CutDate, Date.DateStringType.Short),
                                                EstablishDate = Date.GetPersianDate(t.EstablishDate, Date.DateStringType.Short),
                                                Hour = t.CutDate.Value.Hour.ToString() + " : " + t.CutDate.Value.Minute.ToString(),
                                                FICode = t.ID,
                                                Name = string.Format("{0} {1}", t.Request.Customer.FirstNameOrTitle, t.Request.Customer.LastName),
                                                TelNumber = t.Request.TelephoneNo,
                                                CounterValue = t.Counter,
                                                TypeValue = DB.GetEnumDescriptionByValue(typeof(DB.RequestType), t.Status),
                                                LetterNumber = t.CutReportID.ToString(),
                                                ReqName = t.Request.RequesterName,
                                                CutType = t.CutType.ToString(),
                                                NationalCodeOrRecordNo = t.Request.Customer.NationalCodeOrRecordNo,
                                                CauseOfCut = t.CauseOfCut.Name,
                                                PersonType = DB.GetEnumDescriptionByValue(typeof(DB.PersonType), t.Request.Customer.PersonType),
                                                City = t.Request.Center.Region.City.Name,
                                                CenterName = t.Request.Center.CenterName,
                                                RequestDate = Date.GetPersianDate(t.Request.InsertDate, Date.DateStringType.Short),
                                                UrgentTelNo = t.Request.Customer.UrgentTelNo
                                            }
                                    )
                            .ToList();

                //برخی از فیلدها نباید در گزارش خالی باشند. جلوگیری از ایجاد درگیری روانی
                //در کد زیر آن فیلدها را مقداردهی پیش فرض میکنیم
                result.ForEach(ce =>
                                    {
                                        ce.CutDate = !string.IsNullOrEmpty(ce.CutDate) ? ce.CutDate : "-----";
                                        ce.EstablishDate = !string.IsNullOrEmpty(ce.EstablishDate) ? ce.EstablishDate : "-----";
                                        ce.Hour = !string.IsNullOrEmpty(ce.Hour) ? ce.Hour : "-----";
                                        ce.TypeValue = !string.IsNullOrEmpty(ce.TypeValue) ? ce.TypeValue : "-----";
                                        ce.NationalCodeOrRecordNo = !string.IsNullOrEmpty(ce.NationalCodeOrRecordNo) ? ce.NationalCodeOrRecordNo : "-----";
                                        ce.RequestDate = !string.IsNullOrEmpty(ce.RequestDate) ? ce.RequestDate : "-----";
                                        ce.UrgentTelNo = !string.IsNullOrEmpty(ce.UrgentTelNo) ? ce.UrgentTelNo : "-----";
                                        ce.CounterValue = !string.IsNullOrEmpty(ce.CounterValue) ? ce.CounterValue : "-----";
                                    }
                              );
                return result;
            }
        }
        public static InstallRequestInfo GetLastInstallrequestInfo(DateTime? fromDate, DateTime? toDate, List<long?> RequestNo, int? CenterId, long? TelephoneNo)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.InstallRequests.Join(context.ChangeLocations, i => i.Request.TelephoneNo, c => c.Request.TelephoneNo, (i, c) => new
                {
                    ChangeLocation = c,
                    Request = i.Request,
                    Installrequest = i
                }).Where(t => (!fromDate.HasValue || t.Request.InsertDate >= fromDate)
                                     && (!toDate.HasValue || t.Request.InsertDate <= toDate)
                                     && (RequestNo.Count == 0 || RequestNo.Contains(t.Request.ChangeLocation.ID))
                                     && (!CenterId.HasValue || t.Request.CenterID == CenterId)
                                     && (!TelephoneNo.HasValue || t.Request.TelephoneNo == TelephoneNo)).Select(t => new InstallRequestInfo
                                     {
                                         TelephoneType = t.Installrequest.CustomerType.Title,
                                         TelephoneTypeGroup = t.Installrequest.CustomerGroup.Title,
                                         InstallationDate = Date.GetPersianDate(t.Installrequest.InstallationDate, Date.DateStringType.Short)


                                     }).ToList().LastOrDefault();
            }
        }
        public static CounterLastInfo GetLastCounterInfo(DateTime? fromDate, DateTime? toDate, List<long?> RequestNo, int? CenterId, long? TelephoneNo)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Counters.Join(context.ChangeLocations, c => c.ID, i => i.NewCounterID, (c, i) => new { Counter = c, ChangeLocation = i }).Where
                      (t => (!fromDate.HasValue || t.ChangeLocation.Request.InsertDate >= fromDate)
                                       && (!toDate.HasValue || t.ChangeLocation.Request.InsertDate <= toDate)
                                       && (RequestNo.Count == 0 || RequestNo.Contains(t.ChangeLocation.ID))
                                       && (!CenterId.HasValue || t.ChangeLocation.Request.CenterID == CenterId)
                                       && (!TelephoneNo.HasValue || t.ChangeLocation.Request.TelephoneNo == TelephoneNo)).Select(t => new CounterLastInfo

                                       {
                                           ID = t.Counter.ID,
                                           NonLocal = t.Counter.NonLocal.ToString(),
                                           Local = t.Counter.Local.ToString(),
                                           International = t.Counter.International.ToString(),
                                           BisTalk = t.Counter.BistTalk.ToString(),
                                           IA = t.Counter.IA.ToString(),
                                           TelephonNo = t.Counter.TelephoneNo,
                                           CounterNo = t.Counter.CounterNo,
                                           CounterReadDate = t.Counter.CounterReadDate

                                       }).ToList().LastOrDefault();
            }
        }

        public static ChangeLocationCenterInfo GetChangeLocationCenterToCenterInfo(DateTime? fromDate, DateTime? toDate, List<long?> RequestNo, int? CenterId, long? TelephoneNo)
        {

            using (MainDataContext context = new MainDataContext())
            {
                var result = context.ChangeLocations.Where(
                            t => (!fromDate.HasValue || t.Request.InsertDate >= fromDate)
                                    && (!toDate.HasValue || t.Request.InsertDate <= toDate)
                                    && (RequestNo.Count == 0 || RequestNo.Contains(t.ID))
                                    && (!CenterId.HasValue || t.Request.CenterID == CenterId)
                                    && (!TelephoneNo.HasValue || t.Request.TelephoneNo == TelephoneNo)
                                    && (t.ChangeLocationTypeID == (byte)DB.ChangeLocationCenterType.CenterToCenter)

                            ).Select(t => new ChangeLocationCenterInfo
                            {

                                RequestNo = t.ID.ToString(),
                                TelephoneNo = (t.Request.TelephoneNo.HasValue) ? t.Request.TelephoneNo.ToString() : "-----",
                                NewTelephoneNo = (t.NewTelephone.HasValue) ? t.NewTelephone.ToString() : "",
                                CustomerName = string.Format("{0} {1}", t.Request.Customer.FirstNameOrTitle, t.Request.Customer.LastName),
                                NewCustomerID = t.Customer.ID,
                                NewCustomerName = string.Format("{0} {1}", t.Customer.FirstNameOrTitle, t.Customer.LastName),
                                InsertDate = t.Request.InsertDate.ToPersian(Date.DateStringType.Short),
                                InstallationDate = context.Wirings.Where(t2 => t2.IssueWiring.RequestID == t.ID && t2.WiringInsertDate != null).OrderByDescending(t2 => t2.WiringInsertDate).Take(1).Select(t2 => t2.WiringInsertDate).SingleOrDefault().ToPersian(Date.DateStringType.Short),
                                OldInstallAddress = t.Address1.AddressContent,
                                NewInstallAddress = t.Address2.AddressContent,
                                CityName = t.Request.Center.Region.City.Name,
                                CenterName = t.Request.Center.CenterName,
                                OldCustomerName = t.Request.Customer.FirstNameOrTitle + " " + t.Request.Customer.LastName,
                                ChangeLocationDate = (t.Request.EndDate.HasValue) ? t.Request.EndDate.ToPersian(Date.DateStringType.Short) : "-----",
                                LastInstallRequest = context.Requests
                                                            .Where(r => r.TelephoneNo.Value.Equals(t.OldTelephone.Value))
                                                            .OrderByDescending(r => r.EndDate)
                                                            .FirstOrDefault()
                                                            .InstallRequests
                                                            .Select(ir => new InstallRequestShortInfo { ID = ir.ID, InstallationDate = (ir.InstallationDate.HasValue) ? ir.InstallationDate.ToString() : string.Empty, TelephoneType = ir.CustomerType.Title, TelephoneTypeGroup = ir.CustomerGroup.Title })
                                                            .SingleOrDefault(),
                                OldPostalCode = t.Address1.PostalCode,
                                NewPostalCode = t.Address2.PostalCode
                            }
                           )
                         .SingleOrDefault();
                // result.InstallationDate = (!Object.ReferenceEquals(result.LastInstallRequest, null)) ? result.LastInstallRequest.InstallationDate : "-----";
                result.TelephoneType = (!Object.ReferenceEquals(result.LastInstallRequest, null)) ? result.LastInstallRequest.TelephoneType : "-----";
                result.TelephoneTypeGroup = (!Object.ReferenceEquals(result.LastInstallRequest, null)) ? result.LastInstallRequest.TelephoneTypeGroup : "-----";
                return result;
            }
        }

        public static List<ADSLPortsInfo> GetADSLTransferablePortsInfo(List<int> cityIds, List<int> centerIds)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLPorts.Join(context.ADSLRequests, p => p.ID, r => r.ADSLPortID, (p, r) => new { ADSLPorts = p, ADSLRequests = r }).Where
                    (t =>
                        (cityIds.Count == 0 || cityIds.Contains(t.ADSLRequests.Request.Center.Region.CityID))
                        && (centerIds.Count == 0 || centerIds.Contains(t.ADSLRequests.Request.CenterID))).Select(t => new ADSLPortsInfo
                        {
                            CenterName = t.ADSLRequests.Request.Center.CenterName,
                            CityName = t.ADSLRequests.Request.Center.Region.City.Name,
                            Province = t.ADSLRequests.Request.Center.Region.City.Province.Name,


                        }).ToList();
            }
        }

        public static List<ADSLPortsInfo> GetNumberOfFreeADSLPorts(List<int> cityIds, List<int> centerIds, List<int> MDfIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLPorts.Where(t => (cityIds.Count == 0 || cityIds.Contains(t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Center.Region.CityID)) &&
                                                    (centerIds.Count == 0 || centerIds.Contains(t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.CenterID)) &&
                                                    (MDfIDs.Count == 0 || MDfIDs.Contains(t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.ID))
                    ).GroupBy(t => new
                    {
                        Cityname = t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Center.Region.City.Name,
                        CityID = t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Center.Region.CityID,
                        center = t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Center.CenterName,
                        CenterID = t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.CenterID,
                        MDFName = t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Description,
                        MDFID = t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDFID
                    }).Select(t => new ADSLPortsInfo
                    {
                        NumberOfFreePorts = context.ADSLPorts.Where(a => (a.Status == (byte)DB.ADSLPortStatus.Free) &&
                                                                         (a.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Center.Region.CityID == t.Key.CityID) &&
                                                                         (a.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.CenterID == t.Key.CenterID) &&
                                                                         (a.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.ID == t.Key.MDFID)).Count(),
                        NumberOfDestructionPorts = context.ADSLPorts.Where(a => (a.Status == (byte)DB.ADSLPortStatus.Destruction) &&
                                                                                (a.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Center.Region.CityID == t.Key.CityID) &&
                                                                                (a.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.CenterID == t.Key.CenterID) &&
                                                                                (a.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.ID == t.Key.MDFID)).Count(),
                        NumberOfReservedPorts = context.ADSLPorts.Where(a => (a.Status == (byte)DB.ADSLPortStatus.reserve) &&
                                                                             (a.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Center.Region.CityID == t.Key.CityID) &&
                                                                             (a.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.CenterID == t.Key.CenterID) &&
                                                                             (a.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.ID == t.Key.MDFID)).Count(),
                        NumberOfClosedPorts = context.ADSLPorts.Where(a => (a.Status == (byte)DB.ADSLPortStatus.Closed) &&
                                                                           (a.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Center.Region.CityID == t.Key.CityID) &&
                                                                           (a.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.CenterID == t.Key.CenterID) &&
                                                                           (a.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.ID == t.Key.MDFID)).Count(),
                        NumberOfUsedPorts = context.ADSLPorts.Where(a => (a.Status == (byte)DB.ADSLPortStatus.Install) &&
                                                                         (a.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Center.Region.CityID == t.Key.CityID) &&
                                                                         (a.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.CenterID == t.Key.CenterID) &&
                                                                         (a.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.ID == t.Key.MDFID)).Count(),
                        CenterName = t.Key.center,
                        CityName = t.Key.Cityname,
                        MDFTitle = t.Key.MDFName
                    }).ToList();
            }
        }

        public static List<ADSLPortsInfo> GetNumberOfUsedADSLPorts(List<int> cityIds, List<int> centerIds, List<int> MDF)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLPorts
                    .Where(t => (t.Status == (byte)DB.ADSLPortStatus.Install) &&
                                (cityIds.Count == 0 || cityIds.Contains(t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Center.Region.CityID)) &&
                                (centerIds.Count == 0 || centerIds.Contains(t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.CenterID)) &&
                                (MDF.Count == 0 || MDF.Contains(t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDFID)))
                    .GroupBy(t => new
                    {
                        Cityname = t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Center.Region.City.Name,
                        center = t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Center.CenterName,
                        MDFName = t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.FrameNo + " - " + t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Description
                    }).Select(t => new ADSLPortsInfo
                    {
                        NumberOfUsedPorts = t.Count(),
                        CenterName = t.Key.center,
                        CityName = t.Key.Cityname,
                        MDFTitle = t.Key.MDFName
                    }).ToList();
            }
        }

        public static List<ADSLPortsInfo> GetNumberOfADSLPorts(List<int> cityIds, List<int> centerIds)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLPorts
                   .Where(t =>
                   (cityIds.Count == 0 || cityIds.Contains(t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Center.Region.CityID))
                    && (centerIds.Count == 0 || centerIds.Contains(t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.CenterID))).GroupBy(t => new
                                 {
                                     Cityname = t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Center.Region.City.Name,
                                     center = t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Center.CenterName


                                 }
                                 ).Select(t => new ADSLPortsInfo
                                 {
                                     NumberOfPorts = t.Count().ToString(),
                                     CenterName = t.Key.center,
                                     CityName = t.Key.Cityname
                                 }).ToList();
            }
        }


        public static List<ADSLPortsInfo> GetNumberOfDestructionPorts(List<int> cityIds, List<int> centerIds, List<int> MDF)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLPorts
                    .Where(t => (t.Status == (byte)DB.ADSLPortStatus.Destruction) &&
                               (cityIds.Count == 0 || cityIds.Contains(t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Center.Region.CityID)) &&
                               (centerIds.Count == 0 || centerIds.Contains(t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.CenterID)) &&
                               (MDF.Count == 0 || MDF.Contains(t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDFID)))
                    .GroupBy(t => new
                    {
                        Cityname = t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Center.Region.City.Name,
                        center = t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Center.CenterName,
                        MDFName = t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.FrameNo + " - " + t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Description
                    }).Select(t => new ADSLPortsInfo
                    {
                        NumberOfDestructionPorts = context.ADSLPorts.Where(a => a.Status == (byte)DB.ADSLPortStatus.Destruction).Count(),
                        CenterName = t.Key.center,
                        CityName = t.Key.Cityname,
                        MDFTitle = t.Key.MDFName
                    }).ToList();
            }
        }

        public static List<ADSLPortsInfo> GetNumberOfReservedPorts(List<int> cityIds, List<int> centerIds, List<int> MDF)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLPorts
                    .Where(t =>
                        (t.Status == (byte)DB.ADSLPortStatus.reserve)
                         && (cityIds.Count == 0 || cityIds.Contains(t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Center.Region.CityID))
                    && (centerIds.Count == 0 || centerIds.Contains(t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.CenterID))
                    && (MDF.Count == 0 || MDF.Contains(t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDFID))).GroupBy(t => new
                    {
                        Cityname = t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Center.Region.City.Name,
                        center = t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Center.CenterName,
                        MDFName = t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.FrameNo + " - " + t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Description
                    }).Select(t => new ADSLPortsInfo
                    {
                        NumberOfReservedPorts = t.Count(),
                        CenterName = t.Key.center,
                        CityName = t.Key.Cityname,
                        MDFTitle = t.Key.MDFName
                    }).ToList();
            }
        }

        public static List<ADSLPortsInfo> GetNumberOfClosedPorts(List<int> cityIds, List<int> centerIds, List<int> MDF)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLPorts
                    .Where(t =>
                        (t.Status == (byte)DB.ADSLPortStatus.Closed)
                        && (cityIds.Count == 0 || cityIds.Contains(t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Center.Region.CityID))
                    && (centerIds.Count == 0 || centerIds.Contains(t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.CenterID))
                    && (MDF.Count == 0 || MDF.Contains(t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDFID))).GroupBy(t => new
                    {
                        Cityname = t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Center.Region.City.Name,
                        center = t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Center.CenterName,
                        MDFName = t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.FrameNo + " - " + t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Description
                    }).Select(t => new ADSLPortsInfo
                    {
                        NumberOfClosedPorts = t.Count(),
                        CenterName = t.Key.center,
                        CityName = t.Key.Cityname,
                        MDFTitle = t.Key.MDFName
                    }).ToList();
            }
        }

        public static List<ADSLRequestInfo> GetADSLSaleServiceSalChanell(List<int> CityIds, List<int> CenterIDs, List<int> serviceIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Where(t =>
                    (CityIds.Count == 0 || CityIds.Contains(t.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.Request.CenterID))
                    && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.ServiceID))
                        //&& (saleChanells.Count == 0 || saleChanells.Contains((int)t.SaleWay))
                    && (!fromDate.HasValue || fromDate <= (t.Request.EndDate))
                    && (!toDate.HasValue || toDate >= t.Request.EndDate)
                    ).GroupBy(t => new
                    {
                        Service = t.ADSLService.Title,
                        SaleWay = t.SaleWay,
                        ProviceName = t.Request.Center.Region.City.Province.Name,
                        ServiceID = t.ServiceID,
                        centerid = t.Request.CenterID,
                        CtyName = t.Request.Center.Region.City.Name,
                        center = t.Request.Center.CenterName
                    }
                    ).Select(t => new ADSLRequestInfo
                    {
                        ServiceTitle = t.Key.Service,
                        ProvinceName = t.Key.ProviceName,
                        SaleWayByte = t.Key.SaleWay,
                        ServiceID = t.Key.ServiceID,
                        CityName = t.Key.CtyName,
                        CenterId = t.Key.centerid.ToString(),
                        Center = t.Key.center
                    }).ToList();
            }
        }

        public static int GetNumberOfDayeriService(int? serviceID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Where(t =>
                    t.ServiceID == serviceID
                        //&&t.Request.Center.Region.City.ProvinceID==ProvinceID
                    && t.ADSLService.IsActive == true).Count();
            }
        }

        public static List<ADSLRequestInfo> GetADSLIncomeSellChanell(List<int> serviceIDs,
            //List<int> saleChanells, 
            DateTime? fromDate, DateTime? toDate,
                                                                     List<int> cityIDs, List<int> centerIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests
                    //.Join(context.RequestPayments, r=>r.ID, p=>p.RequestID, (r,p)=>new{ADSLRequest=r,RequestPayment=p})
                    .Where(t =>
                    (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.ServiceID))
                        //&& (saleChanells.Count == 0 || saleChanells.Contains((int)t.SaleWay))
                   && (!fromDate.HasValue || fromDate <= (t.Request.EndDate))
                   && (!toDate.HasValue || toDate >= t.Request.EndDate)
                   ).GroupBy(t => new
                   {
                       Service = t.ADSLService.Title,
                       SaleWay = t.SaleWay,
                       ProviceName = t.Request.Center.Region.City.Province.Name,
                       ServiceID = t.ServiceID,
                       centerid = t.Request.CenterID,
                       CtyName = t.Request.Center.Region.City.Name,
                       ID = t.ID
                       //AmountSum=t.RequestPayment.AmountSum
                   }
                   ).Select(t => new ADSLRequestInfo
                   {
                       ServiceTitle = t.Key.Service,
                       ProvinceName = t.Key.ProviceName,
                       SaleWayByte = t.Key.SaleWay,
                       ServiceID = t.Key.ServiceID,
                       CityName = t.Key.CtyName,
                       CenterId = t.Key.centerid.ToString(),
                       ID = t.Key.ID
                       //AMountSUm=t.Sum(x=>x.RequestPayment.AmountSum).ToString()
                   }).ToList();
            }
        }

        public static RequestPaymentInfo GetAmountSum(long? RequestID)
        {

            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.RequestPayments.Where(t =>
                    (!RequestID.HasValue || t.RequestID == RequestID)).
                    GroupBy(t => new
                    {
                        ID = t.RequestID,
                    })
                    .Select(t => new RequestPaymentInfo
                    {
                        AmountSum = t.Sum(x => x.AmountSum)
                    }).SingleOrDefault();
            }
        }

        public static List<ADSLChangeServiceInfo> GetADSLChangeServiceInfo(List<int> sellChanells, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLChangeServices.Where(t =>
                    sellChanells.Count == 0 || sellChanells.Contains((byte)t.SaleWay)
                    && (!fromDate.HasValue || fromDate <= t.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.Request.EndDate))
                    .GroupBy(t => new
                        {
                            saleway = t.SaleWay,
                            newservice = t.ADSLService.Title,
                            serviceid = t.NewServiceID
                        }).
                        Select(t => new ADSLChangeServiceInfo
                    {
                        SaleWayByte = t.Key.saleway,
                        NewServiceTitle = t.Key.newservice,
                        NumberOfRequest = t.Count().ToString(),
                        NewServiceID = t.Key.serviceid.ToString()

                    }).ToList();
            }
        }

        public static List<ADSLServiceInfo> GetADSLAdditinalTrafficSaleInfo(List<int> serviceIDs, DateTime? fromDate, DateTime? toDate,
                                                                            List<int> cityIDs, List<int> centerIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLServices.Join(context.ADSLRequests, s => s.ID, r => r.AdditionalServiceID, (s, r) => new { ADSLService = s, ADSLRequest = r })
                    .Where(t =>
                    (serviceIDs.Count == 0 || serviceIDs.Contains(t.ADSLService.ID))
                    && (!fromDate.HasValue || t.ADSLRequest.Request.EndDate >= fromDate)
                    && (!toDate.HasValue || t.ADSLRequest.Request.EndDate <= toDate)
                    && (cityIDs.Count == 0 || cityIDs.Contains(t.ADSLRequest.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains(t.ADSLRequest.Request.CenterID))
                    && (t.ADSLRequest.AdditionalServiceID != null)).
                    GroupBy(t => new
                    {
                        Service = t.ADSLService.Title,
                        SaleWay = t.ADSLRequest.SaleWay,
                        TrafficTitle = t.ADSLService.ADSLServiceTraffic.Title,
                        id = t.ADSLService.ID,
                        Province = t.ADSLRequest.Request.Center.Region.City.Province.Name,
                        center = t.ADSLRequest.Request.Center.CenterName,
                        city = t.ADSLRequest.Request.Center.Region.City.Name

                    }).Select(t => new ADSLServiceInfo
                    {
                        Title = t.Key.Service,
                        SaleWayByte = t.Key.SaleWay,
                        SoldTraffic = ((Convert.ToInt32(t.Key.TrafficTitle)) * t.Count()).ToString(),
                        NumberOfSoldTraffic = t.Count().ToString(),
                        ID = t.Key.id,
                        Province = t.Key.Province,
                        Center = t.Key.center,
                        City = t.Key.city

                    }).ToList();
            }
        }

        public static List<ADSLRequestInfo> GetInstalledADSLInfo(
            //List<int> saleWays,
                                                                 DateTime? fromDate,
                                                                 DateTime? toDate,
                                                                List<int> serviceIDs,
            //List<int> provinceIDs,
                                                                 List<int> cityIDs,
                                                                  List<int> centerIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Where(t =>
                    //(saleWays.Count == 0 || saleWays.Contains((int)t.SaleWay))

                    (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.ServiceID))
                        //&& (provinceIDs.Count == 0 || provinceIDs.Contains(t.Request.Center.Region.City.ProvinceID))
                    && (cityIDs.Count == 0 || cityIDs.Contains(t.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains(t.Request.CenterID))
                    && (!fromDate.HasValue || fromDate >= t.Request.EndDate)
                    && (!toDate.HasValue || toDate <= t.Request.EndDate)
                    && (t.InstallDate != null)).GroupBy(t => new
                    {
                        //province = t.Request.Center.Region.City.Province.Name,
                        center = t.Request.Center.CenterName,
                        city = t.Request.Center.Region.City.Name,
                        service = t.ADSLService.Title,
                        saleway = t.SaleWay

                    }).Select(t => new ADSLRequestInfo
                    {
                        //ProvinceName = t.Key.province,
                        Center = t.Key.center,
                        CityName = t.Key.city,
                        ServiceTitle = t.Key.service,
                        SaleWayByte = t.Key.saleway,
                        NumberOfInstalledServices = t.Count().ToString()

                    }).ToList();

            }
        }

        public static List<ADSLRequestInfo> GetMostSoldServicesInfo(DateTime? fromDate, DateTime? toDate,
                                                                    List<int> cityIDs, List<int> centerIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Where(t =>
                    //(saleWays.Count == 0 || saleWays.Contains((int)t.SaleWay))
                     (!fromDate.HasValue || fromDate <= t.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.Request.EndDate)).GroupBy(t => new
                    {
                        //saleWay = t.SaleWay,
                        service = t.ADSLService.Title,
                        province = t.Request.Center.Region.City.Province.Name,
                        center = t.Request.Center.CenterName,
                        city = t.Request.Center.Region.City.Name
                    }).Select(t => new ADSLRequestInfo

                    {
                        //SaleWayByte = t.Key.saleWay,
                        ServiceTitle = t.Key.service,
                        ProvinceName = t.Key.province,
                        Center = t.Key.center,
                        CityName = t.Key.city,
                        NumberOfSubscribers = t.Count().ToString()
                    }).ToList();
            }
        }

        public static List<ADSLDischargeInfo> GetADSLDischargeInfo(DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLDischarges.Where(t =>
                    (!fromDate.HasValue || fromDate <= t.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.Request.EndDate)).GroupBy(t => new
                    {
                        service = t.ADSLService.Title,
                        //province = t.Request.Center.Region.City.Province.Name,
                        //center = t.Request.Center.CenterName
                    }).Select(t => new ADSLDischargeInfo
                    {
                        Service = t.Key.service,
                        NumberOfADSLDischarge = t.Count().ToString(),
                        //Center=t.Key.center,
                        //Province=t.Key.province

                    }).ToList();
            }
        }

        public static List<InstallRequestInfo> GetDayeriInfo(List<int> TelType,
                                                                     List<int> TelTypeGroup,
                                                                      long fromTel,
                                                                      long toTel, List<int> centers, DateTime? fromData, DateTime? toData)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.InstallRequests.Where(t =>
                   (TelType.Count == 0 || TelType.Contains(t.TelephoneType))
                   && (TelTypeGroup.Count == 0 || TelTypeGroup.Contains((int)t.TelephoneTypeGroup))
                   && (fromTel == 0 || fromTel <= t.Request.TelephoneNo)
                   && (toTel == 0 || toTel >= t.Request.TelephoneNo)
                    && (!fromData.HasValue || fromData >= t.Request.InsertDate)
                     && (!toData.HasValue || toData >= t.Request.InsertDate)
                   && (centers.Count == 0 || centers.Contains(t.Request.CenterID))
  ).Select(t => new InstallRequestInfo
                   {
                       TelephoneNo = t.Request.TelephoneNo.ToString(),
                       TelephoneTypeGroup = t.CustomerGroup.Title,
                       TelephoneType = t.CustomerType.Title,
                       ID = t.ID,
                       InstallationDate = Date.GetPersianDate(t.InstallationDate, Date.DateStringType.Short),
                       InstallationDatedate = t.InstallationDate,
                       InsertDatedate = t.InsertDate

                   }).ToList();
            }
        }

        public static List<TakePossessionInfo> GetTakePossessionInfo(
                                                                     List<int> cites,
                                                                     List<int> center,
                                                                     DateTime? fromDate,
                                                                     DateTime? toDate,
                                                                     long fromTele,
                                                                     long toTele,
                                                                     List<int> Dischargereason,
                                                                     List<int> TelephoneType,
                                                                     List<int> TelephoneGroup,
                                                                     List<long?> RequestNo)
        {
            //List<InstallRequestInfo> List = new List<InstallRequestInfo>();
            List<TakePossessionInfo> result = new List<TakePossessionInfo>();
            #region CommentCode
            //List<long> telNoList = new List<long>();
            //DateTime? temp;

            //for (int i = 0; i < InstallRequestList.Count; i++)
            //{
            //    temp = InstallRequestList[i].InstallationDatedate;

            //    for (int j = i + 1; j < InstallRequestList.Count; j++)
            //    {
            //        if (InstallRequestList[i].TelephoneNo == InstallRequestList[j].TelephoneNo
            //            && temp > InstallRequestList[j].InstallationDatedate)
            //        {
            //            temp = InstallRequestList[j].InstallationDatedate;
            //        }
            //    }
            //    for (int y = 0; y < InstallRequestList.Count; y++)
            //    {
            //        if (InstallRequestList[y].InstallationDatedate == temp && InstallRequestList[y].TelephoneNo == InstallRequestList[i].TelephoneNo)
            //        {
            //            List.Add(InstallRequestList[y]);
            //            telNoList.Add(Convert.ToInt64(InstallRequestList[y].TelephoneNo));
            //        }
            //    }

            //}
            //            using (MainDataContext context = new MainDataContext())
            //            {

            //                string query = @";WITH CTEDischarge AS
            //                                    (
            //	                                SELECT 
            //		                              *
            //	                                FROM TakePossession TP
            //                                     )
            //                                    , CTERequest AS
            //                                        (
            //                                            SELECT * From Request r
            //                                            LeFT JOIN CTEDischarge CD on CD.ID=r.ID
            //                                         )
            //                                   
            //
            //                                    , CTEInstallRequest AS
            //                                    (
            //	                                  SELECT 
            //		                                TelephoneNo, 
            //		                                ROW_NUMBER() OVER(PARTITION BY TelephoneNo ORDER BY InsertDate DESC) RowNo,InsertDate
            //	                                    * FROM InstallRequest IR
            //                                            LeFT JOIN Request Re on IR.ID=Re.ID
            //                                      ) 
            //                                , CTELastInstallRequest AS  -- فقط آخرين تاريخ در جدول ....   
            //                                    (
            //	                                   SELECT *
            //	                                    FROM CTEInstallRequest
            //	                                    WHERE RowNo = 1
            //                                     )  
            //                                    (	
            //	                                    SELECT
            //		                                *
            //	                                    FROM
            //		                                CTERequest TPS
            //	                                 LEFT JOIN CTELastInstallRequest C ON TPS.TelephoneNo = C.TelephoneNo
            //                                    )";


            //                if (fromDate.HasValue)
            //                    query += " and TP.TakePossessionDate>= CONVERT(datetime, '" + fromDate.Value.ToShortDateString() + "', 101)";
            //                if (toDate.HasValue)
            //                    query += " andTP.TakePossessionDate <= CONVERT(datetime, '" + toDate.Value.ToShortDateString() + "', 101)";
            //                if (fromTel != -1)
            //                    query += " and C.TelephoneNo >='" + fromTel + "'";

            //                if (toTel != -1)
            //                    query += " and C.TelephoneNo <='" + toTel + "'";

            //                if (TelType.Count > 0)
            //                {
            //                    string TelTypeList = MakeTheList(TelType.ConvertAll<string>(x => x.ToString()));
            //                    query += " and C.TelephoneType in " + TelTypeList;
            //                }

            //                if (TelTypeGroup.Count > 0)
            //                {
            //                    string TelTypeGroupList = MakeTheList(TelTypeGroup.ConvertAll<string>(x => x.ToString()));
            //                    query += " and C.TelephoneTypeGroup in " + TelTypeGroupList;
            //                }

            //                if (Dischargereason.Count > 0)
            //                {
            //                    string DischargereasonList = MakeTheList(Dischargereason.ConvertAll<string>(x => x.ToString()));
            //                    query += " and C.CauseOfTakePossessionID in " + DischargereasonList;
            //                }

            //                List<TakePossessionInfo> result = context.ExecuteQuery<TakePossessionInfo>(string.Format(query)).ToList();

            //                return result;
            //            }

            #endregion
            if (toDate.HasValue)
                toDate = toDate.Value.AddDays(1);

            using (MainDataContext context = new MainDataContext())
            {
                result = context.TakePossessions.Where(t =>
                                                            (!fromDate.HasValue || fromDate <= t.TakePossessionDate) &&
                                                            (!toDate.HasValue || toDate >= t.TakePossessionDate) &&
                                                            (cites.Count == 0 || cites.Contains(t.Request.Center.Region.CityID)) &&
                                                            (center.Count == 0 || center.Contains(t.Request.CenterID)) &&
                                                            (fromTele == 0 || t.Request.TelephoneNo >= fromTele) &&
                                                            (toTele == 0 || t.Request.TelephoneNo <= toTele) &&
                                                            (Dischargereason.Count == 0 || Dischargereason.Contains((int)t.CauseOfTakePossessionID)) &&
                                                            (RequestNo.Count == 0 ? t.TakePossessionDate != null : RequestNo.Contains(t.ID))
                                                       )
                                                .OrderBy(t => t.TakePossessionDate)
                                                .Select(t => new TakePossessionInfo
                                                                {
                                                                    ID = t.ID,
                                                                    RequestID = t.Request.ID,
                                                                    TelNo = t.Request.TelephoneNo.ToString(),
                                                                    DischargeReason = t.CauseOfTakePossession.Name,
                                                                    DischargeDate = t.TakePossessionDate.ToPersian(Date.DateStringType.Short),
                                                                    InsertRequestDate = t.Request.InsertDate.ToPersian(Date.DateStringType.Short),
                                                                    Name = string.Format("{0} {1}", t.Customer.FirstNameOrTitle, t.Customer.LastName),
                                                                    Counter = t.CounterNoTakePossession,
                                                                    MelliCode = t.Customer.NationalCodeOrRecordNo,
                                                                    PostalCode = t.Telephone.Address.PostalCode,
                                                                    Address = t.Telephone.Address.AddressContent,
                                                                    City = t.Request.Center.Region.City.Name,
                                                                    Center = t.Request.Center.CenterName,
                                                                    Region = t.Request.Center.Region.Title,
                                                                    PersonType = DB.GetEnumDescriptionByValue(typeof(DB.PersonType), (int?)t.Customer.PersonType),
                                                                    MobileNo = t.Customer.MobileNo,
                                                                    UrgentTelNo = t.Customer.UrgentTelNo,
                                                                    installRequest = context.InstallRequests.Where(t2 =>
                                                                                                                        (t2.Request.TelephoneNo == t.Request.TelephoneNo) &&
                                                                                                                        (TelephoneType.Count == 0 || TelephoneType.Contains(t2.CustomerType.ID)) &&
                                                                                                                        (TelephoneGroup.Count == 0 || TelephoneGroup.Contains(t2.CustomerGroup.ID))
                                                                                                                   )
                                                                                                            .OrderByDescending(t2 => t2.InsertDate).Take(1)
                                                                                                            .Select(t2 => new InstallRequestInfo
                                                                                                                       {
                                                                                                                           ID = t2.RequestID,
                                                                                                                           TelephoneType = t2.CustomerType.Title,
                                                                                                                           TelephoneTypeGroup = t2.CustomerGroup.Title,
                                                                                                                           OtherCostsAmount = t2.Request.RequestPayments.Where(t3 => !t3.BaseCost.IsDeposit && t3.IsPaid == true).Sum(t3 => t3.AmountSum),
                                                                                                                           DepositAmount = t2.Request.RequestPayments.Where(t3 => t3.BaseCost.IsDeposit && t3.IsPaid == true).Sum(t3 => t3.AmountSum)
                                                                                                                       })
                                                                                                            .SingleOrDefault(),
                                                                }
                                                         )
                                                .ToList();

                result.ForEach(t =>
                {
                    t.TelphoneType = (t.installRequest != null ? t.installRequest.TelephoneType : "نامشخص");
                    t.TelephoneTypeGroup = (t.installRequest != null ? t.installRequest.TelephoneTypeGroup : "نامشخص");
                    t.DepositAmount = (t.installRequest != null ? t.installRequest.DepositAmount : 0);
                    t.OtherCostsAmount = (t.installRequest != null ? t.installRequest.OtherCostsAmount : 0);
                });

                return result;
            }

            //foreach (TakePossessionInfo info in Result)
            //{
            //    for (int i = 0; i < List.Count; i++)
            //        if (Convert.ToInt64(List[i].TelephoneNo) == Convert.ToInt64(info.TelNo))
            //        {
            //            info.TelphoneType = List[i].TelephoneType;
            //            info.TelephoneTypeGroup = List[i].TelephoneTypeGroup;
            //            info.ChargingType = List[i].ChargingType;
            //            info.Order = List[i].OrderType;
            //            info.PossessionType = List[i].PosessionType;
            //        }

            //}
        }

        public static List<_118Info> Get118InstallRequestInfo(DateTime? fromDate, DateTime? toDate, List<int> centers)
        {
            // List<_118Info> List = new List<_118Info>();
            List<_118Info> Result = new List<_118Info>();
            // DateTime? temp;



            if (toDate.HasValue)
                toDate = toDate.Value.AddDays(1);
            using (MainDataContext context = new MainDataContext())
            {
                Result = context.InstallRequests.Where(t =>

                 (!fromDate.HasValue || fromDate <= t.Request.EndDate)
                && (!toDate.HasValue || toDate >= t.Request.EndDate)
                && (centers.Count == 0 || centers.Contains(t.Request.CenterID))
                && (!t.Request.IsCancelation && !t.Request.IsWaitingList && t.Request.EndDate != null)
                && (t.RegisterAt118 == true))
                .Select(t => new _118Info
                {
                    ID = t.RequestID.ToString(),
                    TelNo = t.Request.TelephoneNo.ToString(),
                    RequestInsertDate = t.Request.InsertDate.ToPersian(Date.DateStringType.Short),
                    RequestEndDate = t.Request.EndDate.ToPersian(Date.DateStringType.Short),
                    Address = t.Address.AddressContent,
                    Name = t.Request.Customer.FirstNameOrTitle ?? "" + " " + t.Request.Customer.LastName ?? "",
                    TelephoneNo = t.Request.TelephoneNo,
                    LastNameAt118 = t.LastNameAt118,
                    NameTitleAt118 = t.NameTitleAt118,
                    TitleAt118 = t.TitleAt118,
                    type = "دایری"


                }).ToList();
            }

            //for (int i = 0; i < Result.Count; i++)
            //{
            //    temp = Result[i].DayeriDatedate;

            //    for (int j = 0; j < Result.Count; j++)
            //    {
            //        if (Result[i].TelNo == Result[j].TelNo
            //            && temp < Result[j].DayeriDatedate)
            //        {
            //            temp = Result[j].DayeriDatedate;
            //        }
            //    }
            //    for (int y = 0; y < Result.Count; y++)
            //    {
            //        if (Result[i].TelNo == Result[y].TelNo && Result[y].DayeriDatedate == temp && i <= y && !List.Contains(Result[y]))
            //        {
            //            List.Add(Result[y]);
            //            break;
            //        }
            //    }

            //}
            return Result;
        }

        public static List<_118Info> GetInstallRequestInfo(DateTime? fromdate, DateTime? todate, List<int> centers)
        {
            // List<_118Info> List = new List<_118Info>();
            List<_118Info> Result = new List<_118Info>();
            // DateTime? temp;

            using (MainDataContext context = new MainDataContext())
            {
                Result = context.InstallRequests.Where(t =>
                   (!fromdate.HasValue || fromdate <= t.InstallationDate)
                   && (!todate.HasValue || todate >= t.InstallationDate)
                   && (centers.Count == 0 || centers.Contains(t.Request.CenterID)))
                   .Select(t => new _118Info
                   {
                       ID = t.RequestID.ToString(),
                       TelNo = t.Request.TelephoneNo.ToString(),
                       RequestInsertDate = Date.GetPersianDate(t.InsertDate, Date.DateStringType.Short),
                       Address = t.Address.AddressContent,
                       TelephoneNo = t.Request.TelephoneNo

                   }).ToList();
            }

            //for (int i = 0; i < Result.Count; i++)
            //{
            //    temp = Result[i].DayeriDatedate;

            //    for (int j = 0; j < Result.Count; j++)
            //    {
            //        if (Result[i].TelNo == Result[j].TelNo
            //            && temp < Result[j].DayeriDatedate)
            //        {
            //            temp = Result[j].DayeriDatedate;
            //        }
            //    }
            //    for (int y = 0; y < Result.Count; y++)
            //    {
            //        if (Result[i].TelNo == Result[y].TelNo && Result[y].DayeriDatedate == temp && i <= y && !List.Contains(Result[y]))
            //        {
            //            List.Add(Result[y]);
            //            break;
            //        }
            //    }

            //}
            return Result;
        }
        public static List<_118Info> Get118TitleInInfo(DateTime? fromDate, DateTime? toDate, List<int> centers)
        {
            // IEnumerable<_118Info> List = GetInstallRequestInfo(fromDate, toDate , centers);

            using (MainDataContext context = new MainDataContext())
            {
                return //List.Join(context.TitleIn118s.AsEnumerable(), l => l.TelephoneNo, t => t.Request.TelephoneNo, (l, t) => new { Titlein118 = t, List = l })
                    context.TitleIn118s.Where(t =>
                       (!fromDate.HasValue || fromDate <= t.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.Request.EndDate)
                    && (centers.Count == 0 || centers.Contains(t.Request.CenterID))
                    && (!t.Request.IsCancelation && !t.Request.IsWaitingList && t.Request.EndDate != null))
                    .Select(t => new _118Info
                    {
                        TelephoneNo = t.TelephoneNo,
                        TelNo = t.TelephoneNo.ToString(),
                        RequestInsertDate = t.Request.InsertDate.ToPersian(Date.DateStringType.Short),
                        RequestEndDate = t.Request.EndDate.ToPersian(Date.DateStringType.Short),
                        Address = context.InstallRequests.Where(t2 => t2.ID == t.ID).OrderByDescending(t2 => t2.InstallationDate).Take(1).Select(t2 => t2.Address.AddressContent).SingleOrDefault(),
                        ID = t.ID.ToString(),
                        Name = (t.Request.Customer.FirstNameOrTitle == null ? string.Empty : t.Request.Customer.FirstNameOrTitle) + " " + (t.Request.Customer.LastName == null ? string.Empty : t.Request.Customer.LastName),
                        LastNameAt118 = t.LastNameAt118,
                        NameTitleAt118 = t.NameTitleAt118,
                        TitleAt118 = t.TitleAt118,
                        type = "ثبت عنوان",

                    }).ToList();
            }
        }



        public static List<ChangeNoInfo> GetChangeNoInfo(DateTime? fromDate, DateTime? toDate, long fromOldTel, long toOldTel, long fromNewTel, long toNewTel, List<int> changeNoReasonIDs, List<int> centers)
        {
            //List<ChangeNoInfo> List1 = new List<ChangeNoInfo>();
            //List<ChangeNoInfo> List2 = new List<ChangeNoInfo>();
            //List<ChangeNoInfo> Result = new List<ChangeNoInfo>();
            //List<ChangeNoInfo> OldList = new List<ChangeNoInfo>();
            //List<ChangeNoInfo> OldListfinal = new List<ChangeNoInfo>();

            //DateTime? temp;

            using (MainDataContext context = new MainDataContext())
            {
                //    List1 = context.ChangeNos.Join(context.Counters, c => c.NewTelephoneNo, o => o.TelephoneNo, (c, o) => new { ChangeNo = c, Counter = o })
                //       .Where(t =>
                //       (!fromDate.HasValue || fromDate <= t.ChangeNo.Request.EndDate)
                //       && (!toDate.HasValue || toDate >= t.ChangeNo.Request.EndDate)
                //       && (fromOldTel == -1 || fromOldTel <= t.ChangeNo.OldTelephoneNo)
                //       && (toOldTel == -1 || toOldTel >= t.ChangeNo.OldTelephoneNo)
                //       && (fromNewTel == -1 || fromNewTel <= t.ChangeNo.NewTelephoneNo)
                //       && (toNewTel == -1 || toNewTel >= t.ChangeNo.NewTelephoneNo)
                //       && (changeNoReasonIDs.Count == 0 || changeNoReasonIDs.Contains((int)t.ChangeNo.CauseOfChangeNoID)))
                //       .Select(t => new ChangeNoInfo

                //       {
                //           ID = t.ChangeNo.ID.ToString(),
                //           NewTelephoneNo = t.ChangeNo.NewTelephoneNo.ToString(),
                //           OldTelephoneNo = t.ChangeNo.OldTelephoneNo.ToString(),
                //           NewTelCounterNo = t.Counter.CounterNo.ToString(),
                //           InsertDatedate = t.Counter.InsertDate,
                //           CustomerName = t.ChangeNo.Customer.FirstNameOrTitle + " " + t.ChangeNo.Customer.LastName,
                //           CauseOfChangeNo = t.ChangeNo.CauseOfChangeNo.Name,
                //           EndDate = Date.GetPersianDate(t.ChangeNo.Request.EndDate, Date.DateStringType.Short),
                //           Address = t.ChangeNo.Address.AddressContent,

                //       }).ToList();



                //    for (int i = 0; i < List1.Count; i++)
                //    {
                //        temp = List1[i].InsertDatedate;

                //        for (int j = 0; j < List1.Count; j++)
                //        {
                //            if (List1[i].ID == List1[j].ID && temp < List1[j].InsertDatedate)
                //            {
                //                temp = List1[j].InsertDatedate;
                //            }
                //        }

                //        for (int y = 0; y < List1.Count; y++)
                //        {
                //            if (List1[y].ID == List1[i].ID && temp == List1[y].InsertDatedate && !List2.Contains(List1[y]))
                //            {
                //                List2.Add(List1[y]);
                //                break;
                //            }
                //        }
                //    }

                //    OldList = context.ChangeNos.Join(context.Counters, c => c.OldTelephoneNo, o => o.TelephoneNo, (c, o) => new { ChangeNo = c, Counter = o })
                //        .Where(t =>
                //        (!fromDate.HasValue || fromDate <= t.ChangeNo.Request.EndDate)
                //        && (!toDate.HasValue || toDate >= t.ChangeNo.Request.EndDate)
                //        && (fromOldTel == -1 || fromOldTel <= t.ChangeNo.OldTelephoneNo)
                //        && (toOldTel == -1 || toOldTel >= t.ChangeNo.OldTelephoneNo)
                //        && (fromNewTel == -1 || fromNewTel <= t.ChangeNo.NewTelephoneNo)
                //        && (toNewTel == -1 || toNewTel >= t.ChangeNo.NewTelephoneNo)
                //        && (changeNoReasonIDs.Count == 0 || changeNoReasonIDs.Contains((int)t.ChangeNo.CauseOfChangeNoID))).Select(t => new ChangeNoInfo

                //        {
                //            ID = t.ChangeNo.ID.ToString(),
                //            NewTelephoneNo = t.ChangeNo.NewTelephoneNo.ToString(),
                //            OldTelephoneNo = t.ChangeNo.OldTelephoneNo.ToString(),
                //            OldTelCounterNo = t.Counter.CounterNo.ToString(),
                //            InsertDatedate = t.Counter.InsertDate,
                //            CustomerName = t.ChangeNo.Customer.FirstNameOrTitle + " " + t.ChangeNo.Customer.LastName,
                //            CauseOfChangeNo = t.ChangeNo.CauseOfChangeNo.Name
                //            InsertDate = Date.GetPersianDate(t.ChangeNo.Request.EndDate, Date.DateStringType.Short),
                //            Address = t.ChangeNo.Address.AddressContent


                //        }).ToList();
                //    for (int i = 0; i < OldList.Count; i++)
                //    {
                //        temp = OldList[i].InsertDatedate;

                //        for (int j = 0; j < List1.Count; j++)
                //        {
                //            if (OldList[i].ID == OldList[j].ID && temp < OldList[j].InsertDatedate)
                //            {
                //                temp = OldList[j].InsertDatedate;
                //            }
                //        }

                //        for (int y = 0; y < OldList.Count; y++)
                //        {
                //            if (OldList[y].ID == OldList[i].ID && temp == OldList[y].InsertDatedate && !OldListfinal.Contains(OldList[y]))
                //            {
                //                OldListfinal.Add(OldList[y]);
                //                break;
                //            }
                //        }


                //    }
                //    for (int y = 0; y < OldListfinal.Count; y++)
                //    {
                //        for (int u = 0; u < List2.Count; u++)
                //            if (OldListfinal[y].ID == List2[u].ID)
                //            {
                //                List2[u].OldTelCounterNo = OldListfinal[y].OldTelCounterNo;
                //                break;
                //            }
                //    }

                //}
                //return List2;


                string query = @";WITH CTEChangeNo AS
                                    (
	                                SELECT 
		                              OldTelephoneNo, NewTelephoneNo,ID as ChangeNoID,InstallAddressID,CauseOfChangeNoID,CustomerID,ChangeDate
	                                FROM ChangeNo CH
                                     )
                                    , CTECounter AS
                                    (
	                                  SELECT 
		                                TelephoneNo, CounterNo, 
		                                ROW_NUMBER() OVER(PARTITION BY TelephoneNo ORDER BY InsertDate DESC) RowNo,InsertDate
	                                    FROM [Counter] Counter
                                      ) 
                                , CTELastCounter AS  -- فقط آخرين تاريخ در جدول ....   
                                    (
	                                   SELECT *
	                                    FROM CTECounter
	                                    WHERE RowNo = 1
                                     )

                                , CTENewCounter AS    
                                    (	
	                                    SELECT
		                                OldTelephoneNo,NewTelephoneNo,InsertDate as NewInsertDate,
                                        CounterNo as NewCounterNo,ChangeNoID,InstallAddressID,CauseOfChangeNoID,CustomerID,cn.ChangeDate
	                                    FROM
		                                CTEChangeNo cn
	                                 LEFT JOIN CTELastCounter c ON cn.NewTelephoneNo = c.TelephoneNo
                                    )
                                , CTEOldCounter as
                                        (
                                        SELECT 
	                                        OldTelephoneNo,NewTelephoneNo, NewCounterNo, 
                                            InsertDate as OldInsertDate,NewInsertDate, CounterNo as OlCounterNo,
                                            ChangeNoID,InstallAddressID,CauseOfChangeNoID,CustomerID,nc.ChangeDate
                                        FROM
	                                        CTENewCounter nc
                                        LEFT JOIN CTELastCounter lc ON nc.OldTelephoneNo = lc.TelephoneNo

                                        )
                                    , CTECauseOfChangeNo As
                                    (
                                        select 
                                            oldTelephoneNo,OlCounterNo,NewTelephoneNo,NewCounterNo,
                                            NewInsertDate,OldInsertDate,InstallAddressID,
                                            Name as CauseofChangeNo,CustomerID,ChangeNoID,CauseOfChangeNoID,oc.ChangeDate
                                        from
                                            Causeofchangeno CO
                                        Inner Join CTEoldCounter OC On co.id=OC.CauseOfChangeNoID
                                    )
                                    , CTEAddress AS
                                    (
                                    Select 
                                        cast (oldtelephoneno as varchar(max)) as OldTelephoneNo ,cast(OlCounterNo as varchar(max)) OldTelCounterNo ,
                                        cast(NewTelephoneNo as varchar(max)) NewTelephoneNo,
                                        cast (NewCounterNo as varchar(max)) NewTelCounterNo,CauseOfChangeNo,AddressContent as Address, CustomerID,ChangeNoID,CauseOfChangeNoID,n.ChangeDate
                                    from 
                                    [Address] ad
                                    Inner Join CTECauseOfChangeNo N on ad.id=N.InstallAddressID
                                    )

                                    , CTECustomer AS
                                    (
                                    select 
                                    OldTelephoneNo,OldTelCounterNo,NewTelephoneNo,NewTelCounterNo,CauseOfChangeNo,Address,(FirstNameorTitle+' '+LastName) as CustomerName ,ChangeNoID,CauseOfChangeNoID,ad.ChangeDate
                                      from 
                                    [Customer] c
                                    Inner Join CTEAddress ad on c.ID=ad.CustomerID   
                                    )

                                    select 
                                        OldTelephoneNo,
                                        OldTelCounterNo,
                                        NewTelephoneNo,
                                        NewTelCounterNo,
                                        CauseOfChangeNo,
                                        C.Address, 
                                        CustomerName , 
                                        Cast(ChangeNoID as Varchar(Max)) as ID, 
                                        EndDate as InsertDatedate,
                                        CauseOfChangeNoID,
                                        cast(c.ChangeDate as varchar) ChangeNoDate,
                                        CE.ID CenterID,
                                        CE.CenterName [Center],
                                        CI.Name CityName,
                                        CI.ID CityID
                                    from 
                                        [Request] r
                                    Inner Join 
                                        CTECustomer C on r.ID=C.ChangeNoID 
                                    INNER JOIN 
                                        Center CE ON R.CenterID=CE.ID 
                                    INNER JOIN 
                                        Region RE ON RE.ID = CE.RegionID
                                    INNER JOIN 
                                        City CI ON CI.ID = RE.CityID
                                    where 
                                        1=1
                                                                                                            
                                    ";
                if (fromDate.HasValue)
                    query += " and CONVERT(date  , c.ChangeDate , 101 ) >= CONVERT(date, '" + fromDate.Value.ToShortDateString() + "', 101)";

                if (toDate.HasValue)
                    query += " and CONVERT(date  , c.ChangeDate , 101 ) <= CONVERT(date, '" + toDate.Value.ToShortDateString() + "', 101)";

                if (fromOldTel != -1)
                    query += " and C.OldTelephoneNo >='" + fromOldTel + "'";

                if (toOldTel != -1)
                    query += " and C.OldTelephoneNo <='" + toOldTel + "'";
                if (fromNewTel != -1)
                    query += " and C.NewTelephoneNo >='" + fromNewTel + "'";

                if (toNewTel != -1)
                    query += " and C.NewTelephoneNo <='" + toNewTel + "'";

                if (changeNoReasonIDs.Count > 0)
                {
                    string ChangeReasonList = MakeTheList(changeNoReasonIDs.ConvertAll<string>(x => x.ToString()));
                    query += " and C.CauseOfChangeNoID in " + ChangeReasonList;
                }

                if (centers.Count > 0)
                {
                    string centersList = MakeTheList(centers.ConvertAll<string>(x => x.ToString()));
                    query += " and r.CenterID in " + centersList;
                }

                List<ChangeNoInfo> result = context.ExecuteQuery<ChangeNoInfo>(string.Format(query)).ToList();

                if (result.Count() > 0)
                {
                    result.ForEach(cni =>
                                        {
                                            cni.PersianChangeNoDate = (!string.IsNullOrEmpty(cni.ChangeNoDate) ? DateTime.Parse(cni.ChangeNoDate).ToPersian(Date.DateStringType.Short) : "-----");
                                        }
                                  );
                }
                return result;
            }

        }

        public static List<CutAndEstablishInfo> GetCutAndEstablishInfo(DateTime? fromDate, DateTime? toDate, long fromTelNo, long toTelNo, List<int> ReasonIDs, List<int> statusIDs, List<int> centers)
        {
            using (MainDataContext context = new MainDataContext())
            {
                string query = @"WITH CTECutAndEstablish AS
                                    (
	                                SELECT 
		                              CutDate, EstablishDate,ID as CutAndEstablishID,CutType,Status
	                                FROM CutANdEstablish CU
                                     )
                                    , CTECounter AS
                                    (
	                                  SELECT 
		                                TelephoneNo, CounterNo, 
		                                ROW_NUMBER() OVER(PARTITION BY TelephoneNo ORDER BY InsertDate DESC) RowNo,InsertDate
	                                    FROM [Counter] Counter
                                      ) 
                                , CTELastCounter AS  -- فقط آخرين تاريخ در جدول ....   
                                    (
	                                   SELECT *
	                                    FROM CTECounter
	                                    WHERE RowNo = 1
                                     )
                                ,CTERequest AS
                                (
                                    SELECT 
                                          CutDate, EstablishDate,CutAndEstablishID,CutType,status,CustomerID,EndDate,RequestLetterNo,RequesterName,TelephoneNo , CenterID 
                                    FROM
                                        [Request] R
                                        Inner Join CTECutAndEstablish CTC on R.ID=CTC.CutAndEstablishID
                                  )
                                , CTECounterNo AS
                                    (
                                      SELECT 
                                          CutDate, EstablishDate, CutAndEstablishID,CutType,Status,CR.TelephoneNo,CustomerID,EndDate, CounterNo, InsertDate,RequestLetterNo,RequesterName , CenterID 
                                       FROM
                                       CTERequest CR
	                                 LEFT JOIN CTELastCounter Lc ON CR.TelephoneNo = Lc.TelephoneNo
                                        
                                      )
                                  , CTECustomer AS
                                    (
                                    select 
                                     CutDate, EstablishDate, CutAndEstablishID,CutType,Status,TelephoneNo,c.CustomerID,EndDate, CounterNo, CCN.InsertDate,RequestLetterNo,RequesterName,(FirstNameorTitle+' '+LastName) as CustomerName , CenterID 
                                      from 
                                    [Customer] c
                                    Inner Join CTECounterNo CCN on c.ID=CCN.CustomerID   
                                    )
                                    Select
                                        CutDate as CutDatedate, EstablishDate as EstablishDatedate, Cast(CutAndEstablishID as VarChar(Max)) CutAndEstablishID
                                        , CAST(CutType as VarChar(MAX)) as CutType,Status, TelephoneNo,Cast(TelephoneNo as VarChar(max)) as TelNumber ,CustomerID,
                                        EndDate, CASt( CounterNo as VARCHAR(MAX)) CounterNo, InsertDate, CAST(RequestLetterNo AS VARCHAR(MAX)) RequestLetterNo
                                        ,RequesterName,CustomerName,Name as CauseOfCut
                                        FROM 
                                        [CauseOfCut] CoC
                                        INNER JOIN CTECustomer CTU on CoC.ID=CTU.CutType where 1=1";

                if (fromDate.HasValue)
                    query += " and CONVERT(date, CTU.EndDate , 101 ) >= CONVERT(date, '" + toDate.Value.ToShortDateString() + "', 101)";

                else if (toDate.HasValue)
                    query += "  and CONVERT(date, CTU.EndDate  , 101) <= CONVERT(date, '" + fromDate.Value.ToShortDateString() + "', 101)";

                if (fromTelNo != -1)
                    query += " and CTU.TelephoneNo >='" + fromTelNo + "'";

                if (toTelNo != -1)
                    query += " and CTU.TelephoneNo <='" + toTelNo + "'";

                if (ReasonIDs.Count > 0)
                {
                    string ReasonList = MakeTheList(ReasonIDs.ConvertAll<string>(x => x.ToString()));
                    query += " and CoC.ID in " + ReasonList;
                }

                if (statusIDs.Count > 0)
                {
                    string StatusList = MakeTheList(statusIDs.ConvertAll<string>(x => x.ToString()));
                    query += " and CTU.Status in " + StatusList;
                }

                if (centers.Count > 0)
                {
                    string centersList = MakeTheList(centers.ConvertAll<string>(x => x.ToString()));
                    query += " and CTU.CenterID in " + centersList;
                }

                List<CutAndEstablishInfo> result = context.ExecuteQuery<CutAndEstablishInfo>(string.Format(query)).ToList();

                return result;
            }


        }

        public static List<InstalmentRequestPaymentInfo> GetInstalmentRequestPaymentInfo(DateTime? fromStartDate, DateTime? toStartDate,
                                                                                 DateTime? fromEndDate, DateTime? toEndDate,
                                                                                  long fromTelNo, long toTelNo)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.InstallmentRequestPayments.Where(t =>
                    (!fromStartDate.HasValue || fromStartDate <= t.PaymentDate)
                    && (!toStartDate.HasValue || toStartDate >= t.PaymentDate)
                    && (!fromEndDate.HasValue || fromEndDate <= t.EndDate)
                    && (!toEndDate.HasValue || toEndDate >= t.EndDate)
                    && (fromTelNo == -1 || fromTelNo <= t.TelephoneNo)
                    && (toTelNo == -1 || toTelNo >= t.TelephoneNo)).Select(t => new InstalmentRequestPaymentInfo
                    {
                        ID = t.ID.ToString(),
                        TelephoneNo = t.TelephoneNo.ToString(),
                        PaymentDate = Date.GetPersianDate(t.PaymentDate, Date.DateStringType.Short),
                        EndDate = Date.GetPersianDate(t.EndDate, Date.DateStringType.Short),
                        Cost = t.Cost.ToString(),
                        CustomerName = t.RequestPayment.Request.Customer.FirstNameOrTitle + " " + t.RequestPayment.Request.Customer.LastName,
                        PersonType = DB.GetEnumDescriptionByValue(typeof(DB.PersonType), (int)t.RequestPayment.Request.Customer.PersonType)
                    }).ToList();
            }
        }

        public static List<GeneralRequestPaymentInfo> GetGeneralRequestPaymentInfo(
                                                                                    List<int> cites, List<int> centers, DateTime? fromDate,
                                                                                    DateTime? toDate, long fromTel, long toTel,
                                                                                    long fromCost, long toCost, List<int> costTypeIDs
                                                                                   )
        {

            if (toDate.HasValue)
                toDate = toDate.Value.AddDays(1);

            using (MainDataContext context = new MainDataContext())
            {
                //*****************************************************************************************************************************************************************************************************
                List<RequestPaymentInfo> primaryResult = context.RequestPayments.Where(t =>
                                                                                                (cites.Count == 0 || cites.Contains(t.Request.Center.Region.CityID)) &&
                                                                                                (centers.Count == 0 || centers.Contains(t.Request.CenterID)) &&
                                                                                                (!fromDate.HasValue || fromDate <= t.Request.EndDate) &&
                                                                                                (!toDate.HasValue || toDate >= t.Request.EndDate) &&
                                                                                                (fromTel == -1 || fromTel <= t.Request.TelephoneNo) &&
                                                                                                (toTel == -1 || toTel >= t.Request.TelephoneNo) &&
                                                                                                (fromCost == -1 || fromCost <= t.Cost) &&
                                                                                                (toCost == -1 || toCost >= t.Cost) &&
                                                                                                (t.IsPaid == true) &&
                                                                                                (costTypeIDs.Count == 0 || costTypeIDs.Contains((int)t.BaseCostID) || costTypeIDs.Contains((int)t.OtherCostID))
                                                                                        )
                                                                                .Select(t => new RequestPaymentInfo
                                                                                                 {
                                                                                                     TelephoneNo = t.Request.TelephoneNo.ToString(),
                                                                                                     AmountSum = t.AmountSum,
                                                                                                     BaseCostTitle = t.BaseCost.Title,
                                                                                                     OtherCostTitle = t.OtherCost.CostTitle,
                                                                                                     FicheNumber = t.FicheNunmber,
                                                                                                     Center = t.Request.Center.CenterName,
                                                                                                     City = t.Request.Center.Region.City.Name,
                                                                                                     Cost = t.Cost.ToString()
                                                                                                 }
                                                                                       )
                                                                                .ToList();
                //*****************************************************************************************************************************************************************************************************
                foreach (RequestPaymentInfo info in primaryResult)
                {
                    if (!string.IsNullOrEmpty(info.BaseCostTitle))
                    {
                        info.CostType = info.BaseCostTitle;
                    }
                    else if (!string.IsNullOrEmpty(info.OtherCostTitle))
                    {
                        info.CostType = info.OtherCostTitle;
                    }
                }
                //*****************************************************************************************************************************************************************************************************
                List<GeneralRequestPaymentInfo> result = primaryResult.GroupBy(t =>
                                                                                  new
                                                                                  {
                                                                                      CostType = t.CostType,
                                                                                      //AmountSum = t.AmountSum,
                                                                                      //Cost = t.Cost,
                                                                                      Center = t.Center,
                                                                                      City = t.City
                                                                                  }
                                                                               )
                                                                       .Select(t => new GeneralRequestPaymentInfo
                                                                                        {
                                                                                            NumberOfCostType = t.Count().ToString(),
                                                                                            CostType = t.Key.CostType,
                                                                                            AmountSum = t.Sum(a => a.AmountSum).ToString(),
                                                                                            CostSum = t.Sum(a => Convert.ToInt64(a.Cost)).ToString(),
                                                                                            Cost = t.Min(a => a.Cost),
                                                                                            City = t.Key.City,
                                                                                            Center = t.Key.Center
                                                                                        }
                                                                               )
                                                                       .ToList();
                //*****************************************************************************************************************************************************************************************************

                return result;
            }
        }

        //TODO:rad New version of Get General cost - 13941208
        public static List<GeneralRequestPaymentInfo> GetGeneralRequestPaymentInfo(
                                                                                    List<int> cites, List<int> centers, DateTime? fromDate,
                                                                                    DateTime? toDate, List<int> baseCostsID
                                                                                   )
        {

            if (toDate.HasValue)
                toDate = toDate.Value.AddDays(1);

            using (MainDataContext context = new MainDataContext())
            {
                //*****************************************************************************************************************************************************************************************************
                var query = context.RequestPayments.Where(t =>
                                                               (t.IsPaid == true) &&
                                                               (t.Request.EndDate.HasValue) &&
                                                               (cites.Count == 0 || cites.Contains(t.Request.Center.Region.CityID)) &&
                                                               (centers.Count == 0 || centers.Contains(t.Request.CenterID)) &&
                                                               (!fromDate.HasValue || fromDate <= t.Request.EndDate) &&
                                                               (!toDate.HasValue || toDate >= t.Request.EndDate) &&
                                                               (baseCostsID.Count == 0 || baseCostsID.Contains((int)t.BaseCostID) || baseCostsID.Contains((int)t.OtherCostID))
                                                           )
                                                   .Select(t => new RequestPaymentInfo
                                                               {
                                                                   City = t.Request.Center.Region.City.Name,
                                                                   Center = t.Request.Center.CenterName,
                                                                   BaseCostID = t.BaseCostID,
                                                                   BaseCostTitle = t.BaseCost.Title,
                                                                   AmountSum = t.AmountSum,
                                                                   OtherCostTitle = t.OtherCost.CostTitle,
                                                                   Cost = t.Cost.ToString()
                                                               }
                                                          )
                                                   .AsQueryable();
                //*****************************************************************************************************************************************************************************************************
                List<GeneralRequestPaymentInfo> result = query.GroupBy(t =>
                                                                          new
                                                                          {
                                                                              CityName = t.City,
                                                                              CenterName = t.Center,
                                                                              BaseCostID = t.BaseCostID,
                                                                              BaseCostTitle = t.BaseCostTitle
                                                                          }
                                                                       )
                                                               .Select(t => new GeneralRequestPaymentInfo
                                                                            {
                                                                                CountOfRequestPayment = t.Count(),
                                                                                BaseCostID = t.Key.BaseCostID,
                                                                                BaseCostTitle = t.Key.BaseCostTitle,
                                                                                TotalOfAmountSum = t.Sum(a => a.AmountSum),
                                                                                TotalOfCost = t.Sum(a => Convert.ToInt64(a.Cost)),
                                                                                NumericCost = context.BaseCosts.Where(bc => bc.ID == t.Key.BaseCostID).Select(bc => bc.Cost).FirstOrDefault(),
                                                                                BaseCostFromDateTime = context.BaseCosts.Where(bc => bc.ID == t.Key.BaseCostID).Select(bc => bc.FromDate).FirstOrDefault(),
                                                                                BaseCostToDateTime = context.BaseCosts.Where(bc => bc.ID == t.Key.BaseCostID).Select(bc => bc.ToDate).FirstOrDefault(),
                                                                                CityName = t.Key.CityName,
                                                                                CenterName = t.Key.CenterName
                                                                            }
                                                                       )
                                                               .ToList();
                //*****************************************************************************************************************************************************************************************************

                //چون در اطلاعات پایه ، عناوین تکراری برای هزینه ها وجود دارد باید تاریخ تعریف هزینه مربوطه را به همراه عنوان فرمت دهی نماییم
                result.ForEach(new Action<GeneralRequestPaymentInfo>(gp =>
                                                                          {
                                                                              string fromDatePersianString = gp.BaseCostFromDateTime.ToPersian(Date.DateStringType.Short);
                                                                              string toDatePersianString = gp.BaseCostToDateTime.ToPersian(Date.DateStringType.Short);
                                                                              gp.BaseCostFromDatePersianString = string.IsNullOrEmpty(fromDatePersianString) ? "-----" : fromDatePersianString;
                                                                              gp.BaseCostToDatePersianString = string.IsNullOrEmpty(toDatePersianString) ? "-----" : toDatePersianString;
                                                                          }
                                                                    )
                              );

                return result;
            }
        }

        //milad doran
        //public static List<FineToFineRequestPaymentInfo> GetFineToFineRequestPaymentInfo(List<int> cites, List<int> centers,
        //                                                                DateTime? fromDate, DateTime? toDate, long fromTel, long toTel,
        //                                                                long fromCost, long toCost, List<int> costTypeIDs, bool? isPaid)
        //{



        //    if (toDate.HasValue)
        //        toDate = toDate.Value.AddDays(1);

        //    using (MainDataContext context = new MainDataContext())
        //    {
        //        return context.RequestPayments.Where(t =>

        //               (cites.Count() == 0 || cites.Contains(t.Request.Center.Region.CityID)) &&
        //               (centers.Count() == 0 || centers.Contains(t.Request.CenterID)) &&
        //               (!fromDate.HasValue || fromDate <= t.Request.EndDate)
        //            && (!toDate.HasValue || toDate >= t.Request.EndDate)
        //            && (fromTel == -1 || fromTel <= t.Request.TelephoneNo)
        //            && (toTel == -1 || toTel >= t.Request.TelephoneNo)
        //            && (fromCost == -1 || fromCost <= t.Cost)
        //            && (toCost == -1 || toCost >= t.Cost)
        //            && (isPaid == null || (isPaid == true ? t.IsPaid == true : (t.IsPaid == false || t.IsPaid == null)))
        //            && (costTypeIDs.Count == 0 || costTypeIDs.Contains((int)t.BaseCostID)) || costTypeIDs.Contains((int)t.OtherCostID))

        //            .OrderBy(t => t.Request.EndDate)
        //            .Select(t => new FineToFineRequestPaymentInfo
        //            {
        //                ID = t.RequestID,
        //                TelephoneNo = t.Request.TelephoneNo,
        //                EndDate = Date.GetPersianDate(t.Request.EndDate, Date.DateStringType.Short),
        //                CustomerName = t.Request.Customer.FirstNameOrTitle.ToString() + " " + (t.Request.Customer.LastName ?? ""),
        //                Cost = t.Cost,
        //                PaymentDate = Date.GetPersianDate(t.PaymentDate, Date.DateStringType.Short),
        //                FicheNumber = t.FicheNunmber.ToString(),
        //                PersonType = DB.GetEnumDescriptionByValue(typeof(DB.PersonType), t.Request.Customer.PersonType),
        //                BaseCostTitle = t.BaseCost.Title,
        //                OtherCostTitle = t.OtherCost.CostTitle,
        //                Center = t.Request.Center.Region.City.Name + ":" + t.Request.Center.CenterName,
        //                IsPaid = t.IsPaid == true ? "پرداخت شده" : "پرداخت نشده",



        //            }).ToList();
        //    }
        //}

        //TODO:rad 13950229

        public static List<FineToFineRequestPaymentInfo> GetFineToFineRequestPaymentInfo(
                                                                                         List<int> cities, List<int> centers, 
                                                                                         DateTime? fromDate, DateTime? toDate, 
                                                                                         long fromTelephoneNo, long toTelephoneNo, 
                                                                                         long fromCost, long toCost, 
                                                                                         List<int> costTypes, bool? isPaid
                                                                                        )
        {
            if (toDate.HasValue)
                toDate = toDate.Value.AddDays(1);

            using (MainDataContext context = new MainDataContext())
            {
                context.ObjectTrackingEnabled = false;

                List<FineToFineRequestPaymentInfo> result = new List<FineToFineRequestPaymentInfo>();

                var query = context.RequestPayments.Where(t =>
                                                               (cities.Count() == 0 || cities.Contains(t.Request.Center.Region.CityID)) &&
                                                               (centers.Count() == 0 || centers.Contains(t.Request.CenterID)) &&
                                                               (!fromDate.HasValue || fromDate <= t.Request.EndDate) &&
                                                               (!toDate.HasValue || toDate >= t.Request.EndDate) &&
                                                               (fromTelephoneNo == -1 || fromTelephoneNo <= t.Request.TelephoneNo) &&
                                                               (toTelephoneNo == -1 || toTelephoneNo >= t.Request.TelephoneNo) &&
                                                               (fromCost == -1 || fromCost <= t.Cost) &&
                                                               (toCost == -1 || toCost >= t.Cost) &&
                                                               (isPaid == null || (isPaid == true ? t.IsPaid == true : (t.IsPaid == false || t.IsPaid == null))) &&
                                                               (costTypes.Count == 0 || costTypes.Contains((int)t.BaseCostID)) ||
                                                               costTypes.Contains((int)t.OtherCostID)
                                                         )
                                                   .OrderBy(t => t.Request.EndDate)
                                                   .Select(t => new FineToFineRequestPaymentInfo
                                                               {
                                                                   ID = t.RequestID,
                                                                   TelephoneNo = t.Request.TelephoneNo,
                                                                   EndDate = t.Request.EndDate.ToPersian(Date.DateStringType.Short),
                                                                   CustomerName = t.Request.Customer.FirstNameOrTitle.ToString() + " " + (t.Request.Customer.LastName ?? ""),
                                                                   Cost = t.Cost,
                                                                   PaymentDate = t.PaymentDate.ToPersian(Date.DateStringType.Short),
                                                                   FicheNumber = t.FicheNunmber.ToString(),
                                                                   PersonType = DB.GetEnumDescriptionByValue(typeof(DB.PersonType), t.Request.Customer.PersonType),
                                                                   BaseCostTitle = t.BaseCost.Title,
                                                                   OtherCostTitle = t.OtherCost.CostTitle,
                                                                   Center = t.Request.Center.Region.City.Name + ":" + t.Request.Center.CenterName,
                                                                   IsPaid = t.IsPaid == true ? "پرداخت شده" : "پرداخت نشده"
                                                               }
                                                           )
                                                   .AsQueryable();
                result = query.ToList();
                return result;
            }
        }


        public static List<CounterLastInfo> GetCounterLast()
        {
            DateTime? temp;
            List<CounterLastInfo> Result = new List<CounterLastInfo>();
            using (MainDataContext context = new MainDataContext())
            {
                List<CounterLastInfo> CounterList = context.Counters.Select(t => new CounterLastInfo
                {
                    CounterNo = t.CounterNo,
                    BisTalk = t.BistTalk.ToString(),
                    CounterReadDate = t.CounterReadDate,
                    IA = t.IA.ToString(),
                    ID = t.ID,
                    International = t.International.ToString(),
                    Local = t.Local.ToString(),
                    NonLocal = t.NonLocal.ToString(),
                    TelephonNo = t.TelephoneNo,
                    InsertDate = t.InsertDate

                }).ToList();

                for (int i = 0; i < CounterList.Count; i++)
                {
                    temp = CounterList[i].InsertDate;
                    for (int j = 0; j < CounterList.Count; j++)
                    {
                        if (CounterList[i].TelephonNo == CounterList[j].TelephonNo
                            && CounterList[j].InsertDate < temp)
                        {
                            temp = CounterList[j].InsertDate;
                        }
                    }

                    for (int k = 0; k < CounterList.Count; k++)
                    {
                        if (CounterList[i].TelephonNo == CounterList[k].TelephonNo && CounterList[k].InsertDate == temp && !Result.Contains(CounterList[k]))
                        {
                            Result.Add(CounterList[k]);
                        }
                    }

                }
                return Result;
            }
        }

        public static List<InstallRequestInfo> GetDayeriInstallRequestInfo(DateTime? fromDate, DateTime? toDate, long fromTel, long toTel,
                                                                            int? TelephoneType, int? TelephoneTypeGroup,
                                                                            int? chargingType, int? orderType, int? possessionType, long TelNo, int? center)
        {



            if (toDate.HasValue)
                toDate = toDate.Value.AddDays(1);
            using (MainDataContext context = new MainDataContext())
            {
                return context.InstallRequests.Where(t =>

                       (!fromDate.HasValue || fromDate <= t.InstallationDate)
                    && (!toDate.HasValue || toDate >= t.InstallationDate)
                    && (fromTel == -1 || fromTel <= t.Request.TelephoneNo)
                    && (toTel == -1 || toTel >= t.Request.TelephoneNo)
                    && (TelNo == -1 || TelNo == t.Request.TelephoneNo)
                    && (!TelephoneType.HasValue || TelephoneType == t.TelephoneType)
                    && (!TelephoneTypeGroup.HasValue || TelephoneTypeGroup == t.TelephoneTypeGroup)
                    && (!chargingType.HasValue || chargingType == t.ChargingType)
                    && (!orderType.HasValue || orderType == t.OrderType)
                    && (!possessionType.HasValue || possessionType == t.PosessionType)
                    && (!center.HasValue || t.Request.CenterID == center)
                    && (!t.Request.IsCancelation && !t.Request.IsWaitingList && t.InstallationDate != null)
                    )
                    .Select(t => new InstallRequestInfo
                    {
                        ID = t.ID,
                        CustomerName = (t.Request.Customer.FirstNameOrTitle ?? "") + " " + (t.Request.Customer.LastName ?? ""),
                        TelephoneNo = t.Request.TelephoneNo.ToString(),
                        InsertDate = t.Request.InsertDate.ToPersian(Date.DateStringType.Short),
                        InstallationDate = t.InstallationDate.ToPersian(Date.DateStringType.Short),
                        //FichNumber = t.RequestPayment.FicheNunmber,
                        Address = t.Address.AddressContent,
                        InstallRequestType = DB.GetEnumDescriptionByValue(typeof(DB.RequestType), t.InstallRequestTypeID),
                        RequestID = t.RequestID.ToString(),
                        TelephoneType = t.CustomerType.Title,
                        PosessionType = DB.GetEnumDescriptionByValue(typeof(DB.PossessionType), (int?)t.PosessionType),
                        OrderType = DB.GetEnumDescriptionByValue(typeof(DB.OrderType), (int?)t.OrderType),
                        ChargingType = DB.GetEnumDescriptionByValue(typeof(DB.ChargingGroup), (int?)t.ChargingType),
                        TelephoneTypeGroup = t.CustomerGroup.Title,
                        CenterName = t.Request.Center.CenterName,
                        CityName = t.Request.Center.Region.City.Name

                    }).ToList();
            }
        }

        public static List<RegisterInfo> GetRegisterRequestInfo(DateTime? fromDate, DateTime? toDate, long fromTel, long toTel,
                                                                            int? TelephoneType, int? TelephoneTypeGroup,
                                                                            int? chargingType, int? orderType,
                                                                            int? possessionType, int? ReportType, List<int> cities, List<int> centers)
        {


            if (toDate.HasValue)
                toDate = toDate.Value.AddDays(1);
            List<RegisterInfo> Result = new List<RegisterInfo>();
            using (MainDataContext context = new MainDataContext())
            {

                switch (ReportType)
                {
                    case (1):
                        Result = context.Requests.Join(context.InstallRequests, r => r.ID, i => i.RequestID, (r, i) => new { Request = r, installRequest = i })
                            //.Join(context.RequestPayments, m => m.Request.ID, p => p.RequestID, (m, p) => new {Installrequest=m, RequestPayment=p })
                           .Where(t =>
                                (cities.Count == 0 || cities.Contains(t.Request.Center.Region.CityID))
                           && (centers.Count == 0 || centers.Contains(t.Request.CenterID))
                            && (!fromDate.HasValue || fromDate <= t.Request.EndDate)
                           && (!toDate.HasValue || toDate >= t.Request.EndDate)
                           && (fromTel == -1 || fromTel <= t.Request.TelephoneNo)
                           && (toTel == -1 || toTel >= t.Request.TelephoneNo)
                           && (!TelephoneType.HasValue || TelephoneType == t.installRequest.TelephoneType)
                           && (!TelephoneTypeGroup.HasValue || TelephoneTypeGroup == t.installRequest.TelephoneTypeGroup)
                           && (!chargingType.HasValue || chargingType == t.installRequest.ChargingType)
                           && (!orderType.HasValue || orderType == t.installRequest.OrderType)
                           && (!possessionType.HasValue || possessionType == t.installRequest.PosessionType)
                           && (t.Request.EndDate == null && t.Request.StatusID == (int)DB.RequestStatusType.Start))
                           .Select(t => new RegisterInfo
                           {
                               RequestID = t.Request.ID.ToString(),
                               TelephoneNo = t.Request.TelephoneNo.ToString(),
                               InsertDate = Date.GetPersianDate(t.Request.InsertDate, Date.DateStringType.Short),
                               DayeriDate = Date.GetPersianDate(t.installRequest.InstallationDate, Date.DateStringType.Short),
                               CustomerName = t.Request.Customer.FirstNameOrTitle + " " + t.Request.Customer.LastName,
                               //FicheNumber = t.RequestPayment.FicheNunmber.ToString(),
                               //FicheDate=Date.GetPersianDate(t.RequestPayment.FicheDate,Date.DateStringType.Short),

                           }).ToList();
                        break;

                    case (2):
                        List<long> WaitingList = context.WaitingLists.Where(t => t.ExitDate == null).Select(t => t.RequestID).ToList();

                        Result = context.Requests.Join(context.InstallRequests, r => r.ID, i => i.RequestID, (r, i) => new { Request = r, installRequest = i })
                            //.Join(context.RequestPayments, m => m.Request.ID, p => p.RequestID, (m, p) => new {Installrequest=m, RequestPayment=p })
                           .Where(t =>
                                (cities.Count == 0 || cities.Contains(t.Request.Center.Region.CityID))
                           && (centers.Count == 0 || centers.Contains(t.Request.CenterID))
                           && (!fromDate.HasValue || fromDate <= t.Request.InsertDate)
                           && (!toDate.HasValue || toDate >= t.Request.InsertDate)
                           && (fromTel == -1 || fromTel <= t.Request.TelephoneNo)
                           && (toTel == -1 || toTel >= t.Request.TelephoneNo)
                           && (!TelephoneType.HasValue || TelephoneType == t.installRequest.TelephoneType)
                           && (!TelephoneTypeGroup.HasValue || TelephoneTypeGroup == t.installRequest.TelephoneTypeGroup)
                           && (!chargingType.HasValue || chargingType == t.installRequest.ChargingType)
                           && (!orderType.HasValue || orderType == t.installRequest.OrderType)
                           && (!possessionType.HasValue || possessionType == t.installRequest.PosessionType)
                           && (t.Request.EndDate == null && t.Request.StatusID != (int)DB.RequestStatusType.Start
                           && WaitingList.Contains(t.Request.ID)))
                           .Select(t => new RegisterInfo
                           {
                               RequestID = t.Request.ID.ToString(),
                               TelephoneNo = t.Request.TelephoneNo.ToString(),
                               InsertDate = Date.GetPersianDate(t.Request.InsertDate, Date.DateStringType.Short),
                               DayeriDate = Date.GetPersianDate(t.installRequest.InstallationDate, Date.DateStringType.Short),
                               CustomerName = t.Request.Customer.FirstNameOrTitle + " " + t.Request.Customer.LastName
                               //FicheNumber = t.RequestPayment.FicheNunmber.ToString(),
                               //FicheDate=Date.GetPersianDate(t.RequestPayment.FicheDate,Date.DateStringType.Short),

                           }).ToList();
                        break;

                    case (3):

                        Result = context.Requests.Join(context.InstallRequests, r => r.ID, i => i.RequestID, (r, i) => new { Request = r, installRequest = i })
                            //.Join(context.RequestPayments, m => m.Request.ID, p => p.RequestID, (m, p) => new {Installrequest=m, RequestPayment=p })
                          .Where(t =>
                              (cities.Count == 0 || cities.Contains(t.Request.Center.Region.CityID))
                           && (centers.Count == 0 || centers.Contains(t.Request.CenterID))
                          && (!fromDate.HasValue || fromDate <= t.Request.EndDate)
                          && (!toDate.HasValue || toDate >= t.Request.EndDate)
                          && (fromTel == -1 || fromTel <= t.Request.TelephoneNo)
                          && (toTel == -1 || toTel >= t.Request.TelephoneNo)
                          && (!TelephoneType.HasValue || TelephoneType == t.installRequest.TelephoneType)
                          && (!TelephoneTypeGroup.HasValue || TelephoneTypeGroup == t.installRequest.TelephoneTypeGroup)
                          && (!chargingType.HasValue || chargingType == t.installRequest.ChargingType)
                          && (!orderType.HasValue || orderType == t.installRequest.OrderType)
                          && (!possessionType.HasValue || possessionType == t.installRequest.PosessionType))
                          .Select(t => new RegisterInfo
                          {
                              RequestID = t.Request.ID.ToString(),
                              TelephoneNo = t.Request.TelephoneNo.ToString(),
                              InsertDate = Date.GetPersianDate(t.Request.InsertDate, Date.DateStringType.Short),
                              DayeriDate = Date.GetPersianDate(t.installRequest.InstallationDate, Date.DateStringType.Short),
                              CustomerName = t.Request.Customer.FirstNameOrTitle + " " + t.Request.Customer.LastName,
                              //FicheNumber = t.RequestPayment.FicheNunmber.ToString(),
                              //FicheDate=Date.GetPersianDate(t.RequestPayment.FicheDate,Date.DateStringType.Short),

                          }).ToList();
                        break;

                    case (4):
                        Result = context.Requests.Join(context.InstallRequests, r => r.ID, i => i.RequestID, (r, i) => new { Request = r, installRequest = i })
                            //.Join(context.RequestPayments, m => m.Request.ID, p => p.RequestID, (m, p) => new {Installrequest=m, RequestPayment=p })
                           .Where(t =>
                                (cities.Count == 0 || cities.Contains(t.Request.Center.Region.CityID))
                           && (centers.Count == 0 || centers.Contains(t.Request.CenterID))
                           && (!fromDate.HasValue || fromDate <= t.Request.InsertDate)
                           && (!toDate.HasValue || toDate >= t.Request.InsertDate)
                           && (fromTel == -1 || fromTel <= t.Request.TelephoneNo)
                           && (toTel == -1 || toTel >= t.Request.TelephoneNo)
                           && (!TelephoneType.HasValue || TelephoneType == t.installRequest.TelephoneType)
                           && (!TelephoneTypeGroup.HasValue || TelephoneTypeGroup == t.installRequest.TelephoneTypeGroup)
                           && (!chargingType.HasValue || chargingType == t.installRequest.ChargingType)
                           && (!orderType.HasValue || orderType == t.installRequest.OrderType)
                           && (!possessionType.HasValue || possessionType == t.installRequest.PosessionType)
                           && (t.Request.EndDate == null && t.Request.StatusID != (int)DB.RequestStatusType.Start))
                           .Select(t => new RegisterInfo
                           {
                               RequestID = t.Request.ID.ToString(),
                               TelephoneNo = t.Request.TelephoneNo.ToString(),
                               InsertDate = Date.GetPersianDate(t.Request.InsertDate, Date.DateStringType.Short),
                               DayeriDate = Date.GetPersianDate(t.installRequest.InstallationDate, Date.DateStringType.Short),
                               CustomerName = t.Request.Customer.FirstNameOrTitle + " " + t.Request.Customer.LastName,
                               //FicheNumber = t.RequestPayment.FicheNunmber.ToString(),
                               //FicheDate=Date.GetPersianDate(t.RequestPayment.FicheDate,Date.DateStringType.Short),

                           }).ToList();
                        break;

                }

                return Result;
            }
        }

        public static IEnumerable GetSpecialServiceStatisticsInfo(DateTime? fromDate, DateTime? toDate, long fromTel, long toTel, List<int> specialServiceIDs, List<int> StatusSpecialIds, int cityId, int centerId)
        {
            using (MainDataContext context = new MainDataContext())
            {
                List<SpecialServiceInfo> result = new List<SpecialServiceInfo>();

                result = context.SpecialServices
                                .Join(context.TelephoneSpecialServiceTypes, s => s.Request.TelephoneNo, T => T.TelephoneNo, (s, T) => new { Specialservice = s, TelephoneSpecialservice = T })
                                .Join(context.SpecialServiceTypes, t => t.TelephoneSpecialservice.SpecialServiceTypeID, st => st.ID, (t, st) => new { SpecailServicetype = st, SpecialService = t.Specialservice, TelephoneSpecialService = t.TelephoneSpecialservice })
                                .Where(t =>
                                              (t.SpecialService.Request.EndDate != null) &&
                                              (cityId == -1 || cityId == t.SpecialService.Request.Center.Region.CityID) &&
                                              (centerId == -1 || centerId == t.SpecialService.Request.CenterID) &&
                                              (!fromDate.HasValue || fromDate <= t.SpecialService.Request.EndDate.Value.Date) &&
                                              (!toDate.HasValue || toDate >= t.SpecialService.Request.EndDate.Value.Date) &&
                                              (fromTel == -1 || fromTel <= t.TelephoneSpecialService.TelephoneNo) &&
                                              (toTel == -1 || toTel >= t.TelephoneSpecialService.TelephoneNo) &&
                                              (specialServiceIDs.Count == 0 || specialServiceIDs.Contains(t.TelephoneSpecialService.SpecialServiceTypeID))
                                       )
                                .Select(t => new SpecialServiceInfo
                                            {
                                                Center = t.SpecialService.Request.Center.CenterName,
                                                CityName = t.SpecialService.Request.Center.Region.City.Name,
                                                RequestNo = t.SpecialService.ID.ToString(),
                                                TelephoneNo = t.SpecialService.Request.TelephoneNo.ToString(),
                                                SpecialServiceTitle = t.SpecailServicetype.Title,
                                                InstallDate = Date.GetPersianDate(t.SpecialService.InstallDate, Date.DateStringType.Short)
                                            }
                                        )
                                .ToList();
                //چون در گزارش سرویس ویژه باید عنوان نوع سرویس ویژه را از داخل  یک ستون ایکس ام ال بدست می آوردیم، ناچار به تعریف یک ویژگی جدید برای کلاس زیر شدیم
                //SpecialServiceInfo
                //اما از انجایی که در استیمول توقع چنین عضوی را ندارد باید نوع برگشتی را از نوع بی نام قرار دهیم
                //در غیر این با خطای زیر مواجه میشویم
                //ContextDeadLockSwitch
                return result.Select(spi => new
                                            {
                                                Center = spi.Center,
                                                CityName = spi.CityName,
                                                RequestNo = spi.RequestNo,
                                                TelephoneNo = spi.TelephoneNo,
                                                SpecialServiceTitle = spi.SpecialServiceTitle,
                                                InstallDate = spi.InstallDate
                                            })
                             .ToList();
            }
        }

        public static List<ZeroStatusInfo> GetZeroStatusReportInfo(DateTime? fromDate, DateTime? toDate,
                                                                    long? fromtel, long? toTel
            //,int? actionTypeID, int? ZeroTypeID
                                                                  )
        {
            List<ZeroStatusInfo> Result = new List<ZeroStatusInfo>();
            List<ZeroStatusInfo> List = new List<ZeroStatusInfo>();
            DateTime? temp;

            using (MainDataContext context = new MainDataContext())
            {
                Result = context.ZeroStatus
                                .Join(context.InstallRequests, z => z.Request.TelephoneNo, i => i.Request.TelephoneNo, (z, i) => new { ZeroStatus = z, InstallRequest = i })
                                .Where(t =>
                                    (t.ZeroStatus.Request.EndDate != null)
                                && (!fromDate.HasValue || fromDate <= t.ZeroStatus.Request.EndDate.Value.Date)
                                && (!toDate.HasValue || toDate >= t.ZeroStatus.Request.EndDate.Value.Date)
                                && (fromtel == -1 || fromtel <= t.ZeroStatus.Request.TelephoneNo)
                                && (toTel == -1 || toTel >= t.ZeroStatus.Request.TelephoneNo)
                    //&& (!actionTypeID.HasValue || actionTypeID == t.ZeroStatus.ClassTelephone)
                    //&& (!ZeroTypeID.HasValue || ZeroTypeID == t.ZeroStatus.ClassTelephone)
                                )
                    .Select(t => new ZeroStatusInfo
                    {
                        RequestNo = t.ZeroStatus.ID.ToString(),
                        TelephoneNo = t.ZeroStatus.Request.TelephoneNo.ToString(),
                        DayeriDate = t.InstallRequest.InstallationDate,
                        TelephoneType = t.InstallRequest.CustomerType.Title,
                        TelephoneTypeGroup = t.InstallRequest.CustomerGroup.Title,
                        ClassTelephone = t.ZeroStatus.ClassTelephone,
                        InstallDate = t.ZeroStatus.InstallDate

                    }).ToList();
            }

            for (int i = 0; i < Result.Count; i++)
            {
                temp = Result[i].DayeriDate;

                for (int j = 0; j < Result.Count; j++)
                {
                    if (Result[i].TelephoneNo == Result[j].TelephoneNo
                        && temp < Result[j].DayeriDate)
                    {
                        temp = Result[j].DayeriDate;
                    }
                }
                for (int y = 0; y < Result.Count; y++)
                {
                    if (Result[i].TelephoneNo == Result[y].TelephoneNo && Result[y].DayeriDate == temp && i <= y && !List.Contains(Result[y]))
                    {
                        List.Add(Result[y]);
                        break;
                    }
                }

                foreach (ZeroStatusInfo info in List)
                {
                    if (info.ClassTelephone == (byte)DB.ClassTelephone.FirstZeroBlock || info.ClassTelephone == (byte)DB.ClassTelephone.SecondZeroBlock)
                        info.BlockingDate = Date.GetPersianDate(info.InstallDate, Date.DateStringType.Short);
                    else
                        info.UnBlockingDate = Date.GetPersianDate(info.InstallDate, Date.DateStringType.Short);
                    if (!string.IsNullOrEmpty(info.TelephoneType) && !string.IsNullOrEmpty(info.TelephoneTypeGroup))
                    {
                        info.InstallationPlaceType = info.TelephoneType + ":" + info.TelephoneTypeGroup;
                    }
                    else if (!string.IsNullOrEmpty(info.TelephoneType) && string.IsNullOrEmpty(info.TelephoneTypeGroup))
                    {
                        info.InstallationPlaceType = info.TelephoneType;
                    }
                    else if (!string.IsNullOrEmpty(info.TelephoneType) && string.IsNullOrEmpty(info.TelephoneTypeGroup))
                    {
                        info.InstallationPlaceType = info.TelephoneTypeGroup;
                    }
                }
            }
            return List;

        }

        public static List<ADSLPortsInfo> GetADSLPortsInfo(List<int> cityIDs, List<int> centerIDs, List<int> portTypes, List<int> MDF,
                                                           List<int> Radif, List<int> tabaghe, List<int> Ettesali, string telephoneNo)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLPorts.Where(t =>
                    (cityIDs.Count == 0 || cityIDs.Contains(t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains((int)t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.CenterID))
                    && (portTypes.Count == 0 || portTypes.Contains((int)t.Status))
                    && (MDF.Count == 0 || MDF.Contains((int)t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.ID))
                    && (Radif.Count == 0 || Radif.Contains((int)t.Bucht.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo))
                    && (tabaghe.Count == 0 || tabaghe.Contains((int)t.Bucht.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo))
                    && (Ettesali.Count == 0 || Ettesali.Contains((int)t.Bucht.BuchtNo))
                    && (string.IsNullOrWhiteSpace(telephoneNo) || t.TelephoneNo.ToString().Contains(telephoneNo)))
                    .Select(t => new ADSLPortsInfo
                    {
                        PortNo = t.PortNo,
                        CenterName = t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Center.CenterName,
                        TelephoneNo = t.TelephoneNo,
                        Radif = t.Bucht.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString(),
                        Tabaghe = t.Bucht.VerticalMDFRow.VerticalRowNo.ToString(),
                        Etesali = t.Bucht.BuchtNo.ToString(),
                        Address = t.Address,
                        CityName = t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Center.Region.City.Name,
                        Status = DB.GetEnumDescriptionByValue(typeof(DB.ADSLPortStatus), t.Status),
                        InstalADSLDate = Date.GetPersianDate(t.InstalADSLDate, Date.DateStringType.Short),
                        InputBucht = t.InputBucht,
                        OutBucht = t.OutBucht,
                        ID = t.ID,
                        MDFTitle = t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.FrameNo + " - " + t.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Description

                    }).ToList();
            }
        }

        public static List<ADSLRequestInfo> GetADSLSellerAgnetSaleDetailesInfo(List<int> ADSLSellerAgentIDs, DateTime? fromDate,
                                                                                DateTime? toDate, List<int> cityIDs, List<int> centerIDs,
                                                                                List<int> serviceIDs, List<int> groupIDs, List<int> TypeIDs,
                                                                                List<int> bandWidthIDs, List<int> trafficIDs, List<int> durationIDs,
            //List<int> saleWays,
                                                                                bool? hasModem, List<int> preOrPostPaid, List<int> ADSLSellerAgentUserIDs,
                                                                                 List<int> CustomerGrupIDs, List<int> ServicePaymentTypeIDs,
                                                                                DateTime? FromPaymentDate, DateTime? ToPaymentDate, DateTime? FromInsertDate, DateTime? ToInsertDate)
        {
            //because all of the saleways all null i commented it untill it gets alright
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLSellerAgentUsers, a => a.ADSLSellerAgentID, u => u.SellerAgentID, (a, u) => new { ADSLRequest = a, ADSLSellerAgentUser = u })
                    .Join(context.RequestPayments, a => a.ADSLRequest.ID, p => p.RequestID, (a, p) => new { ALL = a, RequestPayment = p })
                    //.Join(context.ADSLCustomerGroups, m => m.ALL.ADSLRequest.ADSLService.GroupID, g => g.ID, (m, g) => new { ALLM = m, ADSLCustomerGroup = g })
                    .Where(t =>
                    (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ALL.ADSLRequest.ADSLSellerAgentID))
                    && (!fromDate.HasValue || fromDate <= t.ALL.ADSLRequest.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ALL.ADSLRequest.Request.EndDate)
                    && (cityIDs.Count == 0 || cityIDs.Contains((int)t.ALL.ADSLRequest.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains((int)t.ALL.ADSLRequest.Request.CenterID))
                    && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.ALL.ADSLRequest.ServiceID))
                    && (groupIDs.Count == 0 || groupIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.GroupID))
                        //&& (saleWays.Count == 0 || saleWays.Contains((int)t.SaleWay))
                    && (bandWidthIDs.Count == 0 || bandWidthIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.BandWidthID))
                    && (trafficIDs.Count == 0 || trafficIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.TrafficID))
                    && (durationIDs.Count == 0 || durationIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.DurationID))
                    && (TypeIDs.Count == 0 || TypeIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.TypeID))
                    && (t.ALL.ADSLRequest.NeedModem == hasModem || hasModem == null)
                    && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.RequestPayment.UserID))
                    && (preOrPostPaid.Count == 0 || preOrPostPaid.Contains((int)t.RequestPayment.PaymentType))
                    && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ALL.ADSLSellerAgentUser.ID))
                    && (CustomerGrupIDs.Count == 0 || CustomerGrupIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (t.ALL.ADSLRequest.Request.EndDate != null)
                    && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.PaymentTypeID))
                    && (t.ALL.ADSLRequest.ADSLSellerAgentID != null)
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestPayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.RequestPayment.PaymentDate)
                    && (!FromInsertDate.HasValue || FromInsertDate <= t.ALL.ADSLRequest.Request.InsertDate)
                    && (!ToInsertDate.HasValue || ToInsertDate >= t.ALL.ADSLRequest.Request.InsertDate)
                    ).Select(t => new ADSLRequestInfo
                        {
                            TelephoneNo = t.ALL.ADSLRequest.Request.TelephoneNo.ToString(),
                            ServiceTitle = t.ALL.ADSLRequest.ADSLService.Title,
                            RegistrationDate = Date.GetPersianDate(t.ALL.ADSLRequest.Request.EndDate, Date.DateStringType.Short),
                            CityName = t.ALL.ADSLRequest.Request.Center.Region.City.Name,
                            Center = t.ALL.ADSLRequest.Request.Center.CenterName,
                            ADSLSellerAgent = t.ALL.ADSLRequest.ADSLSellerAgent.Title,
                            ID = t.ALL.ADSLRequest.Request.ID,
                            SaleWayByte = t.ALL.ADSLRequest.SaleWay,
                            //RequestPaymentType = t.ALLM.RequestPayment.PaymentType,
                            NeedModem = t.ALL.ADSLRequest.NeedModem,
                            ADSLSellerAgentID = t.ALL.ADSLRequest.ADSLSellerAgentID,
                            ADSLSellerAgentUSer = t.ALL.ADSLSellerAgentUser.User.FirstName + " " + t.ALL.ADSLSellerAgentUser.User.LastName,
                            ADSLSellerAgentUserID = t.ALL.ADSLSellerAgentUser.ID,
                            CustomerGroupName = t.ALL.ADSLRequest.ADSLCustomerGroup.Title,
                            PaymentDate = Date.GetPersianDate(t.RequestPayment.PaymentDate, Date.DateStringType.Short)
                            //Cost=t.ALLM.RequestPayment.AmountSum
                        })
                    .Distinct().ToList();
            }
        }

        public static List<ADSLRequestInfo> GetADSLRequestIPSellerAgnetSaleDetailesInfo(List<int> ADSLSellerAgentIDs, DateTime? fromDate,
                                                                                DateTime? toDate, List<int> cityIDs, List<int> centerIDs,
                                                                                List<int> serviceIDs, List<int> groupIDs, List<int> TypeIDs,
                                                                                List<int> bandWidthIDs, List<int> trafficIDs, List<int> durationIDs,
            //List<int> saleWays,
                                                                                bool? hasModem, List<int> preOrPostPaid, List<int> ADSLSellerAgentUserIDs,
                                                                                 List<int> CustomerGrupIDs, List<int> ServicePaymentTypeIDs,
                                                                                DateTime? FromPaymentDate, DateTime? ToPaymentDate, DateTime? FromInsertDate, DateTime? ToInsertDate)
        {
            //because all of the saleways all null i commented it untill it gets alright
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLSellerAgentUsers, a => a.ADSLSellerAgentID, u => u.SellerAgentID, (a, u) => new { ADSLRequest = a, ADSLSellerAgentUser = u })
                    .Join(context.RequestPayments, a => a.ADSLRequest.ID, p => p.RequestID, (a, p) => new { ALL = a, RequestPayment = p })
                    //.Join(context.ADSLCustomerGroups, m => m.ALL.ADSLRequest.ADSLService.GroupID, g => g.ID, (m, g) => new { ALLM = m, ADSLCustomerGroup = g })
                    .Where(t =>
                    (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ALL.ADSLRequest.ADSLSellerAgentID))
                    && (!fromDate.HasValue || fromDate <= t.ALL.ADSLRequest.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ALL.ADSLRequest.Request.EndDate)
                    && (cityIDs.Count == 0 || cityIDs.Contains((int)t.ALL.ADSLRequest.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains((int)t.ALL.ADSLRequest.Request.CenterID))
                    && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.ALL.ADSLRequest.ServiceID))
                    && (groupIDs.Count == 0 || groupIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.GroupID))
                        //&& (saleWays.Count == 0 || saleWays.Contains((int)t.SaleWay))
                    && (bandWidthIDs.Count == 0 || bandWidthIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.BandWidthID))
                    && (trafficIDs.Count == 0 || trafficIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.TrafficID))
                    && (durationIDs.Count == 0 || durationIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.DurationID))
                    && (TypeIDs.Count == 0 || TypeIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.TypeID))
                    && (t.ALL.ADSLRequest.NeedModem == hasModem || hasModem == null)
                    && (preOrPostPaid.Count == 0 || preOrPostPaid.Contains((int)t.RequestPayment.PaymentType))
                    && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ALL.ADSLSellerAgentUser.ID))
                    && (CustomerGrupIDs.Count == 0 || CustomerGrupIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (t.ALL.ADSLRequest.Request.EndDate != null)
                    && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.PaymentTypeID))
                    && (t.ALL.ADSLRequest.IPStaticID != null || t.ALL.ADSLRequest.GroupIPStaticID != null)
                    && (t.RequestPayment.BaseCostID == 48)
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestPayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.RequestPayment.PaymentDate)
                    && (!FromInsertDate.HasValue || FromInsertDate <= t.ALL.ADSLRequest.Request.InsertDate)
                    && (!ToInsertDate.HasValue || ToInsertDate >= t.ALL.ADSLRequest.Request.InsertDate)
                    )
                    .GroupBy(t => new
                    {
                        ID = t.ALL.ADSLRequest.Request.ID,
                    })
                    .Select(t => new ADSLRequestInfo
                    {
                        IPCost = t.Sum(x => x.RequestPayment.AmountSum)

                    }).Distinct().ToList();
            }
        }

        public static List<ADSLRequestInfo> GetADSLRequestModemSellerAgnetSaleDetailesInfo(List<int> ADSLSellerAgentIDs, DateTime? fromDate,
                                                                                DateTime? toDate, List<int> cityIDs, List<int> centerIDs,
                                                                                List<int> serviceIDs, List<int> groupIDs, List<int> TypeIDs,
                                                                                List<int> bandWidthIDs, List<int> trafficIDs, List<int> durationIDs,            //List<int> saleWays,
                                                                                bool? hasModem, List<int> preOrPostPaid, List<int> ADSLSellerAgentUserIDs,
                                                                                List<int> CustomerGrupIDs, List<int> ServicePaymentTypeIDs,
                                                                                DateTime? FromPaymentDate, DateTime? ToPaymentDate, DateTime? FromInsertDate, DateTime? ToInsertDate)
        {
            //because all of the saleways all null i commented it untill it gets alright
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLSellerAgentUsers, a => a.ADSLSellerAgentID, u => u.SellerAgentID, (a, u) => new { ADSLRequest = a, ADSLSellerAgentUser = u })
                    .Join(context.RequestPayments, a => a.ADSLRequest.ID, p => p.RequestID, (a, p) => new { ALL = a, RequestPayment = p })
                    //.Join(context.ADSLCustomerGroups, m => m.ALL.ADSLRequest.ADSLService.GroupID, g => g.ID, (m, g) => new { ALLM = m, ADSLCustomerGroup = g })
                    .Where(t =>
                    (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ALL.ADSLRequest.ADSLSellerAgentID))
                    && (!fromDate.HasValue || fromDate <= t.ALL.ADSLRequest.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ALL.ADSLRequest.Request.EndDate)
                    && (cityIDs.Count == 0 || cityIDs.Contains((int)t.ALL.ADSLRequest.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains((int)t.ALL.ADSLRequest.Request.CenterID))
                    && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.ALL.ADSLRequest.ServiceID))
                    && (groupIDs.Count == 0 || groupIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.GroupID))
                        //&& (saleWays.Count == 0 || saleWays.Contains((int)t.SaleWay))
                    && (bandWidthIDs.Count == 0 || bandWidthIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.BandWidthID))
                    && (trafficIDs.Count == 0 || trafficIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.TrafficID))
                    && (durationIDs.Count == 0 || durationIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.DurationID))
                    && (TypeIDs.Count == 0 || TypeIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.TypeID))
                    && (t.ALL.ADSLRequest.NeedModem == hasModem || hasModem == null)
                    && (preOrPostPaid.Count == 0 || preOrPostPaid.Contains((int)t.RequestPayment.PaymentType))
                    && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ALL.ADSLSellerAgentUser.ID))
                    && (CustomerGrupIDs.Count == 0 || CustomerGrupIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (t.ALL.ADSLRequest.Request.EndDate != null)
                    && (t.ALL.ADSLRequest.ModemID != null)
                    && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.PaymentTypeID))
                    && (t.RequestPayment.BaseCostID == 40)
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestPayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.RequestPayment.PaymentDate)
                    && (!FromInsertDate.HasValue || FromInsertDate <= t.ALL.ADSLRequest.Request.InsertDate)
                    && (!ToInsertDate.HasValue || ToInsertDate >= t.ALL.ADSLRequest.Request.InsertDate)
                    )
                    .GroupBy(t => new
                    {
                        ID = t.ALL.ADSLRequest.Request.ID
                    })
                    .Select(t => new ADSLRequestInfo
                    {
                        ModemCost = t.Sum(x => x.RequestPayment.AmountSum),
                        ID = t.Key.ID

                    }).Distinct().ToList();
            }
        }

        public static List<ADSLRequestInfo> GetADSLRequestTrafficSellerAgnetSaleDetailesInfo(List<int> ADSLSellerAgentIDs, DateTime? fromDate,
                                                                                DateTime? toDate, List<int> cityIDs, List<int> centerIDs,
                                                                                List<int> serviceIDs, List<int> groupIDs, List<int> TypeIDs,
                                                                                List<int> bandWidthIDs, List<int> trafficIDs, List<int> durationIDs,
            //List<int> saleWays,
                                                                                bool? hasModem, List<int> preOrPostPaid, List<int> ADSLSellerAgentUserIDs,
                                                                                 List<int> CustomerGrupIDs, List<int> ServicePaymentTypeIDs,
                                                                                DateTime? FromPaymentDate, DateTime? ToPaymentDate, DateTime? FromInsertDate, DateTime? ToInsertDate)
        {
            //because all of the saleways all null i commented it untill it gets alright
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLSellerAgentUsers, a => a.ADSLSellerAgentID, u => u.SellerAgentID, (a, u) => new { ADSLRequest = a, ADSLSellerAgentUser = u })
                    .Join(context.RequestPayments, a => a.ADSLRequest.ID, p => p.RequestID, (a, p) => new { ALL = a, RequestPayment = p })
                    //.Join(context.ADSLCustomerGroups, m => m.ALL.ADSLRequest.ADSLService.GroupID, g => g.ID, (m, g) => new { ALLM = m, ADSLCustomerGroup = g })
                    .Join(context.ADSLServices, a => a.ALL.ADSLRequest.AdditionalServiceID, s => s.ID, (a, s) => new { ALLJoin = a, ADSLService = s })
                     .Where(t =>
                    (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ALLJoin.ALL.ADSLRequest.ADSLSellerAgentID))
                    && (!fromDate.HasValue || fromDate <= t.ALLJoin.ALL.ADSLRequest.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ALLJoin.ALL.ADSLRequest.Request.EndDate)
                    && (cityIDs.Count == 0 || cityIDs.Contains((int)t.ALLJoin.ALL.ADSLRequest.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains((int)t.ALLJoin.ALL.ADSLRequest.Request.CenterID))
                    && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.ALLJoin.ALL.ADSLRequest.AdditionalServiceID))
                    && (groupIDs.Count == 0 || groupIDs.Contains((int)t.ADSLService.GroupID))
                        //&& (saleWays.Count == 0 || saleWays.Contains((int)t.SaleWay))
                    && (bandWidthIDs.Count == 0 || bandWidthIDs.Contains((int)t.ADSLService.BandWidthID))
                    && (trafficIDs.Count == 0 || trafficIDs.Contains((int)t.ADSLService.TrafficID))
                    && (durationIDs.Count == 0 || durationIDs.Contains((int)t.ADSLService.DurationID))
                    && (TypeIDs.Count == 0 || TypeIDs.Contains((int)t.ADSLService.TypeID))
                    && (t.ALLJoin.ALL.ADSLRequest.NeedModem == hasModem || hasModem == null)
                    && (preOrPostPaid.Count == 0 || preOrPostPaid.Contains((int)t.ALLJoin.RequestPayment.PaymentType))
                    && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ALLJoin.ALL.ADSLSellerAgentUser.ID))
                    && (CustomerGrupIDs.Count == 0 || CustomerGrupIDs.Contains((int)t.ALLJoin.ALL.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (t.ALLJoin.ALL.ADSLRequest.Request.EndDate != null)
                    && (t.ALLJoin.ALL.ADSLRequest.AdditionalServiceID != null)
                    && (t.ALLJoin.RequestPayment.BaseCostID == 46)
                    && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ADSLService.PaymentTypeID))
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.ALLJoin.RequestPayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.ALLJoin.RequestPayment.PaymentDate)
                    && (!FromInsertDate.HasValue || FromInsertDate <= t.ALLJoin.ALL.ADSLRequest.Request.InsertDate)
                    && (!ToInsertDate.HasValue || ToInsertDate >= t.ALLJoin.ALL.ADSLRequest.Request.InsertDate)
                    )
                    .GroupBy(t => new
                    {
                        ID = t.ALLJoin.ALL.ADSLRequest.Request.ID,
                    })
                    .Select(t => new ADSLRequestInfo
                    {
                        TrafficCost = t.Sum(x => x.ALLJoin.RequestPayment.AmountSum),
                        ID = t.Key.ID

                    }).Distinct().ToList();
            }
        }

        public static List<ADSLRequestInfo> GetADSLRequestServiceSellerAgnetSaleDetailesInfo(List<int> ADSLSellerAgentIDs, DateTime? fromDate,
                                                                                DateTime? toDate, List<int> cityIDs, List<int> centerIDs,
                                                                                List<int> serviceIDs, List<int> groupIDs, List<int> TypeIDs,
                                                                                List<int> bandWidthIDs, List<int> trafficIDs, List<int> durationIDs,
            //List<int> saleWays,
                                                                                bool? hasModem, List<int> preOrPostPaid, List<int> ADSLSellerAgentUserIDs,
                                                                                 List<int> CustomerGrupIDs, List<int> ServicePaymenTypeIDs,
                                                                                DateTime? FromPaymentDate, DateTime? ToPaymentDate, DateTime? FromInsertdate, DateTime? ToInsertDate)
        {
            //because all of the saleways all null i commented it untill it gets alright
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLSellerAgentUsers, a => a.ADSLSellerAgentID, u => u.SellerAgentID, (a, u) => new { ADSLRequest = a, ADSLSellerAgentUser = u })
                    .Join(context.RequestPayments, a => a.ADSLRequest.ID, p => p.RequestID, (a, p) => new { ALL = a, RequestPayment = p })
                    //.Join(context.ADSLCustomerGroups, m => m.ALL.ADSLRequest.ADSLService.GroupID, g => g.ID, (m, g) => new { ALLM = m, ADSLCustomerGroup = g })
                    .Where(t =>
                    (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ALL.ADSLRequest.ADSLSellerAgentID))
                    && (!fromDate.HasValue || fromDate <= t.ALL.ADSLRequest.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ALL.ADSLRequest.Request.EndDate)
                    && (cityIDs.Count == 0 || cityIDs.Contains((int)t.ALL.ADSLRequest.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains((int)t.ALL.ADSLRequest.Request.CenterID))
                    && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.ALL.ADSLRequest.ServiceID))
                    && (groupIDs.Count == 0 || groupIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.GroupID))
                        //&& (saleWays.Count == 0 || saleWays.Contains((int)t.SaleWay))
                    && (bandWidthIDs.Count == 0 || bandWidthIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.BandWidthID))
                    && (trafficIDs.Count == 0 || trafficIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.TrafficID))
                    && (durationIDs.Count == 0 || durationIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.DurationID))
                    && (TypeIDs.Count == 0 || TypeIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.TypeID))
                    && (t.ALL.ADSLRequest.NeedModem == hasModem || hasModem == null)
                    && (preOrPostPaid.Count == 0 || preOrPostPaid.Contains((int)t.RequestPayment.PaymentType))
                    && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ALL.ADSLSellerAgentUser.ID))
                    && (CustomerGrupIDs.Count == 0 || CustomerGrupIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (t.ALL.ADSLRequest.Request.EndDate != null)
                    && (ServicePaymenTypeIDs.Count == 0 || ServicePaymenTypeIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.PaymentTypeID))
                    && (t.RequestPayment.BaseCostID == 44)
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestPayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.RequestPayment.PaymentDate)
                    && (!FromInsertdate.HasValue || FromInsertdate <= t.ALL.ADSLRequest.Request.InsertDate)
                    && (!ToInsertDate.HasValue || ToInsertDate >= t.ALL.ADSLRequest.Request.InsertDate)
                    )
                    .GroupBy(t => new
                    {
                        ID = t.ALL.ADSLRequest.Request.ID,
                        requestPayment = t.RequestPayment.PaymentType
                    })
                    .Select(t => new ADSLRequestInfo
                    {
                        ServiceCost = t.Sum(x => x.RequestPayment.AmountSum),
                        ID = t.Key.ID,
                        RequestPaymentType = DB.GetEnumDescriptionByValue(typeof(DB.PaymentType), t.Key.requestPayment)

                    }).Distinct().ToList();
            }
        }

        //public static List<ADSLRequestInfo> GetADSLSellerAgnetADSLChangeServiceSaleDetailesInfo(List<int> ADSLSellerAgentIDs, DateTime? fromDate,
        //                                                                       DateTime? toDate, List<int> cityIDs, List<int> centerIDs,
        //                                                                       List<int> serviceIDs, List<int> groupIDs, List<int> TypeIDs,
        //                                                                       List<int> bandWidthIDs, List<int> trafficIDs, List<int> durationIDs,
        //                                                                       List<int> saleWays,
        //                                                                       bool? hasModem, List<int> preOrPostPaid, List<int> ADSLSellerAgentUserIDs,
        //                                                                        List<int> CustomerGrupIDs)
        //{
        //    //because all of the saleways all null i commented it untill it gets alright
        //    using (MainDataContext context = new MainDataContext())
        //    {
        //        return context.ADSLChangeServices.Join(context.ADSLSellerAgentUsers, a => a.Request.CreatorUserID, u => u.ID, (a, u) => new { ADSLChangeService = a, ADSLSellerAgentUser = u })
        //            .Join(context.RequestPayments, a => a.ADSLChangeService.ID, p => p.RequestID, (a, p) => new { ALL = a, RequestPayment = p })
        //             .Join(context.ADSLCustomerGroups, m => m.ALL.ADSLChangeService.ADSLService.GroupID, g => g.ID, (m, g) => new { ALLM = m, ADSLCustomerGroup = g })
        //            .Where(t =>
        //            (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ALLM.ALL.ADSLSellerAgentUser.SellerAgentID))
        //            && (!fromDate.HasValue || fromDate <= t.ALLM.ALL.ADSLChangeService.Request.EndDate)
        //            && (!toDate.HasValue || toDate >= t.ALLM.ALL.ADSLChangeService.Request.EndDate)
        //            && (cityIDs.Count == 0 || cityIDs.Contains((int)t.ALLM.ALL.ADSLChangeService.Request.Center.Region.CityID))
        //            && (centerIDs.Count == 0 || centerIDs.Contains((int)t.ALLM.ALL.ADSLChangeService.Request.CenterID))
        //            && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.ALLM.ALL.ADSLChangeService.AdditionalTrafficeID))
        //            && (groupIDs.Count == 0 || groupIDs.Contains((int)t.ALLM.ALL.ADSLChangeService.ADSLService.ADSLServiceGroup.ID))
        //                //&& (saleWays.Count == 0 || saleWays.Contains((int)t.SaleWay))
        //            && (bandWidthIDs.Count == 0 || bandWidthIDs.Contains((int)t.ALLM.ALL.ADSLChangeService.ADSLService.BandWidthID))
        //            && (trafficIDs.Count == 0 || trafficIDs.Contains((int)t.ALLM.ALL.ADSLChangeService.ADSLService.TrafficID))
        //            && (durationIDs.Count == 0 || durationIDs.Contains((int)t.ALLM.ALL.ADSLChangeService.ADSLService.DurationID))
        //            && (TypeIDs.Count == 0 || TypeIDs.Contains((int)t.ALLM.ALL.ADSLChangeService.ADSLService.TypeID))
        //            && (t.ALLM.ALL.ADSLChangeService.NeedModem == hasModem || hasModem == null)
        //            && (preOrPostPaid.Count == 0 || preOrPostPaid.Contains((int)t.ALLM.RequestPayment.PaymentType))
        //            && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ALLM.ALL.ADSLSellerAgentUser.ID))
        //            && (CustomerGrupIDs.Count == 0 || CustomerGrupIDs.Contains((int)t.ADSLCustomerGroup.ID))
        //            && (t.ALLM.ALL.ADSLChangeService.Request.EndDate != null)
        //            ).GroupBy(t=> new
        //            {
        //           TelephoneNo = t.ALLM.ALL.ADSLChangeService.Request.TelephoneNo.ToString(),
        //                ServiceTitle = t.ALLM.ALL.ADSLChangeService.ADSLService.Title,
        //                RegistrationDate = Date.GetPersianDate(t.ALLM.ALL.ADSLChangeService.Request.EndDate, Date.DateStringType.Short),
        //                CityName = t.ALLM.ALL.ADSLChangeService.Request.Center.Region.City.Name,
        //                Center = t.ALLM.ALL.ADSLChangeService.Request.Center.CenterName,
        //                ADSLSellerAgent = t.ALLM.ALL.ADSLSellerAgentUser.ADSLSellerAgent.Title,
        //                ID = t.ALLM.ALL.ADSLChangeService.Request.ID,
        //                SaleWayByte = t.ALLM.ALL.ADSLChangeService.SaleWay,
        //                RequestPaymentType = DB.GetEnumDescriptionByValue(typeof(DB.PaymentType), t.ALLM.RequestPayment.PaymentType),
        //                NeedModem = t.ALLM.ALL.ADSLChangeService.NeedModem,
        //                ADSLSellerAgentID = t.ALLM.ALL.ADSLSellerAgentUser.SellerAgentID,
        //                ADSLSellerAgentUSer = t.ALLM.ALL.ADSLSellerAgentUser.User.FirstName + " " + t.ALLM.ALL.ADSLSellerAgentUser.User.LastName,
        //                ADSLSellerAgentUserID = t.ALLM.ALL.ADSLSellerAgentUser.ID,
        //                CustomerGroupName = t.ADSLCustomerGroup.Title,
        //                Cost=t.ALLM.RequestPayment.AmountSum

        //                })
        //            .Select(t => new ADSLRequestInfo
        //            {
        //                TelephoneNo = t.Key.TelephoneNo,
        //                ServiceTitle = t.Key.ServiceTitle,
        //                RegistrationDate = t.Key.RegistrationDate,
        //                CityName = t.Key.CityName,
        //                Center = t.Key.Center,
        //                ADSLSellerAgent = t.Key.ADSLSellerAgent,
        //                ID = t.Key.ID,
        //                SaleWayByte = t.Key.SaleWayByte,
        //                RequestPaymentType = t.Key.RequestPaymentType,
        //                NeedModem = t.Key.NeedModem,
        //                ADSLSellerAgentID = t.Key.ADSLSellerAgentID,
        //                ADSLSellerAgentUSer = t.Key.ADSLSellerAgentUSer,
        //                ADSLSellerAgentUserID = t.Key.ADSLSellerAgentUserID,
        //                CustomerGroupName = t.Key.CustomerGroupName,
        //                Cost=t.Key.Cost,
        //                NumberOfADSLSaled=t.Count()

        //            }).Distinct().ToList();
        //    }
        //}


        //public static List<ADSLRequestInfo> GetADSLRequestChangeIPADSLSellerAgentUserDeetailsInfo(List<int> ADSLSellerAgentIDs, DateTime? fromDate,
        //                                                                       DateTime? toDate, List<int> cityIDs, List<int> centerIDs,
        //                                                                       List<int> serviceIDs, List<int> groupIDs, List<int> TypeIDs,
        //                                                                       List<int> bandWidthIDs, List<int> trafficIDs, List<int> durationIDs,
        //                                                                       List<int> saleWays,
        //                                                                       bool? hasModem, List<int> preOrPostPaid, List<int> ADSLSellerAgentUserIDs,
        //                                                                        List<int> CustomerGrupIDs)
        //{

        //     using (MainDataContext context = new MainDataContext())
        //    {
        //         return context.ADSLRequests.Join(context.ADSLSellerAgentUsers, a => a.ADSLSellerAgentID, u => u.SellerAgentID, (a, u) => new { ADSLRequest = a, ADSLSellerAgentUser = u })
        //            .Join(context.RequestPayments, a => a.ADSLRequest.ID, p => p.RequestID, (a, p) => new { ALL=a, RequestPayment=p})
        //             .Join(context.ADSLCustomerGroups, m => m.ALL.ADSLRequest.ADSLService.GroupID, g => g.ID, (m, g) => new { ALLM = m, ADSLCustomerGroup = g })
        //            .Where(t =>
        //            (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ALLM.ALL.ADSLRequest.ADSLSellerAgentID))
        //            && (!fromDate.HasValue || fromDate <= t.ALLM.ALL.ADSLRequest.Request.EndDate)
        //            && (!toDate.HasValue || toDate >= t.ALLM.ALL.ADSLRequest.Request.EndDate)
        //            && (cityIDs.Count == 0 || cityIDs.Contains((int)t.ALLM.ALL.ADSLRequest.Request.Center.Region.CityID))
        //            && (centerIDs.Count == 0 || centerIDs.Contains((int)t.ALLM.ALL.ADSLRequest.Request.CenterID))
        //            && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.ALLM.ALL.ADSLRequest.ServiceID))
        //            && (groupIDs.Count == 0 || groupIDs.Contains((int)t.ALLM.ALL.ADSLRequest.ADSLService.ADSLServiceGroup.ID))
        //                //&& (saleWays.Count == 0 || saleWays.Contains((int)t.SaleWay))
        //            && (bandWidthIDs.Count == 0 || bandWidthIDs.Contains((int)t.ALLM.ALL.ADSLRequest.ADSLService.BandWidthID))
        //            && (trafficIDs.Count == 0 || trafficIDs.Contains((int)t.ALLM.ALL.ADSLRequest.ADSLService.TrafficID))
        //            && (durationIDs.Count == 0 || durationIDs.Contains((int)t.ALLM.ALL.ADSLRequest.ADSLService.DurationID))
        //            && (TypeIDs.Count == 0 || TypeIDs.Contains((int)t.ALLM.ALL.ADSLRequest.ADSLService.TypeID))
        //            && (t.ALLM.ALL.ADSLRequest.NeedModem == hasModem || hasModem == null)
        //            && (preOrPostPaid.Count == 0 || preOrPostPaid.Contains((int)t.ALLM.RequestPayment.PaymentType))
        //            && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ALLM.ALL.ADSLSellerAgentUser.ID))
        //            && (CustomerGrupIDs.Count == 0 || CustomerGrupIDs.Contains((int)t.ADSLCustomerGroup.ID))
        //            && (t.ALLM.ALL.ADSLRequest.Request.EndDate != null)
        //            &&(t.ALLM.ALL.ADSLRequest.IPStaticID!=null || t.ALLM.ALL.ADSLRequest.GroupIPStaticID!=null))
        //            .GroupBy(t=> new
        //            {
        //               TelephoneNo = t.ALLM.ALL.ADSLRequest.TelephoneNo.ToString(),
        //                ServiceTitle = t.ALLM.ALL.ADSLRequest.ADSLService.Title,
        //                RegistrationDate = Date.GetPersianDate(t.ALLM.ALL.ADSLRequest.Request.EndDate, Date.DateStringType.Short),
        //                CityName = t.ALLM.ALL.ADSLRequest.Request.Center.Region.City.Name,
        //                Center = t.ALLM.ALL.ADSLRequest.Request.Center.CenterName,
        //                ADSLSellerAgent = t.ALLM.ALL.ADSLRequest.ADSLSellerAgent.Title,
        //                ID = t.ALLM.ALL.ADSLRequest.Request.ID,
        //                SaleWayByte = t.ALLM.ALL.ADSLRequest.SaleWay,
        //                RequestPaymentType = DB.GetEnumDescriptionByValue(typeof(DB.PaymentType), t.ALLM.RequestPayment.PaymentType),
        //                NeedModem = t.ALLM.ALL.ADSLRequest.NeedModem,
        //                ADSLSellerAgentID = t.ALLM.ALL.ADSLRequest.ADSLSellerAgentID,
        //                ADSLSellerAgentUSer = t.ALLM.ALL.ADSLSellerAgentUser.User.FirstName + " " + t.ALLM.ALL.ADSLSellerAgentUser.User.LastName,
        //                ADSLSellerAgentUserID = t.ALLM.ALL.ADSLSellerAgentUser.ID,
        //                CustomerGroupName = t.ALLM.ALL.ADSLRequest.ADSLCustomerGroup.Title,
        //                Cost=t.ALLM.RequestPayment.AmountSum

        //                })
        //            .Select(t => new ADSLRequestInfo
        //            {
        //                TelephoneNo = t.Key.TelephoneNo,
        //                ServiceTitle = t.Key.ServiceTitle,
        //                RegistrationDate = t.Key.RegistrationDate,
        //                CityName = t.Key.CityName,
        //                Center = t.Key.Center,
        //                ADSLSellerAgent = t.Key.ADSLSellerAgent,
        //                ID = t.Key.ID,
        //                SaleWayByte = t.Key.SaleWayByte,
        //                RequestPaymentType = t.Key.RequestPaymentType,
        //                NeedModem = t.Key.NeedModem,
        //                ADSLSellerAgentID = t.Key.ADSLSellerAgentID,
        //                ADSLSellerAgentUSer = t.Key.ADSLSellerAgentUSer,
        //                ADSLSellerAgentUserID = t.Key.ADSLSellerAgentUserID,
        //                CustomerGroupName = t.Key.CustomerGroupName,
        //                Cost=t.Key.Cost,
        //                NumberOfADSLSaled=t.Count()


        //            }).Distinct().ToList();

        //     }
        //}


        public static List<ADSLRequestInfo> GetChangeStaticIPADSLSellerAgentUserDeetailsInfo(List<int> ADSLSellerAgentIDs, DateTime? fromDate,
                                                                               DateTime? toDate, List<int> cityIDs, List<int> centerIDs,
                                                                               List<int> serviceIDs, List<int> groupIDs, List<int> TypeIDs,
                                                                               List<int> bandWidthIDs, List<int> trafficIDs, List<int> durationIDs,
                                                                               List<int> saleWays,
                                                                               bool? hasModem, List<int> preOrPostPaid, List<int> ADSLSellerAgentUserIDs,
                                                                                List<int> CustomerGrupIDs)
        {

            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLChangeIPRequests.Join(context.ADSLSellerAgentUsers, a => a.Request.CreatorUserID, u => u.ID, (a, u) => new { ADSLChangeIPRequest = a, ADSLSellerAgentUser = u })
                   .Join(context.RequestPayments, a => a.ADSLChangeIPRequest.ID, p => p.RequestID, (a, p) => new { ALL = a, RequestPayment = p })
                    .Join(context.ADSLIPs, m => m.ALL.ADSLChangeIPRequest.NewIPStaticID, I => I.ID, (m, I) => new { ALLM = m, ADSLIps = I })
                   .Where(t =>
                   (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ALLM.ALL.ADSLSellerAgentUser.SellerAgentID))
                   && (!fromDate.HasValue || fromDate <= t.ALLM.ALL.ADSLChangeIPRequest.Request.EndDate)
                   && (!toDate.HasValue || toDate >= t.ALLM.ALL.ADSLChangeIPRequest.Request.EndDate)
                   && (cityIDs.Count == 0 || cityIDs.Contains((int)t.ALLM.ALL.ADSLChangeIPRequest.Request.Center.Region.CityID))
                   && (centerIDs.Count == 0 || centerIDs.Contains((int)t.ALLM.ALL.ADSLChangeIPRequest.Request.CenterID))
                   && (preOrPostPaid.Count == 0 || preOrPostPaid.Contains((int)t.ALLM.RequestPayment.PaymentType))
                   && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ALLM.ALL.ADSLSellerAgentUser.ID))
                   && (CustomerGrupIDs.Count == 0 || CustomerGrupIDs.Contains((int)t.ADSLIps.CustometGroupID))
                   && (t.ALLM.ALL.ADSLChangeIPRequest.Request.EndDate != null))
                   .GroupBy(t => new
                   {
                       TelephoneNo = t.ALLM.ALL.ADSLChangeIPRequest.Request.TelephoneNo.ToString(),
                       RegistrationDate = Date.GetPersianDate(t.ALLM.ALL.ADSLChangeIPRequest.Request.EndDate, Date.DateStringType.Short),
                       CityName = t.ALLM.ALL.ADSLChangeIPRequest.Request.Center.Region.City.Name,
                       Center = t.ALLM.ALL.ADSLChangeIPRequest.Request.Center.CenterName,
                       ADSLSellerAgent = t.ALLM.ALL.ADSLSellerAgentUser.ADSLSellerAgent.Title,
                       ID = t.ALLM.ALL.ADSLChangeIPRequest.Request.ID,
                       RequestPaymentType = DB.GetEnumDescriptionByValue(typeof(DB.PaymentType), t.ALLM.RequestPayment.PaymentType),
                       ADSLSellerAgentID = t.ALLM.ALL.ADSLSellerAgentUser.SellerAgentID,
                       ADSLSellerAgentUSer = t.ALLM.ALL.ADSLSellerAgentUser.User.FirstName + " " + t.ALLM.ALL.ADSLSellerAgentUser.User.LastName,
                       ADSLSellerAgentUserID = t.ALLM.ALL.ADSLSellerAgentUser.ID,
                       CustomerGroupName = t.ADSLIps.ADSLCustomerGroup.Title,
                       Cost = t.ALLM.RequestPayment.AmountSum

                   })
                   .Select(t => new ADSLRequestInfo
                   {
                       TelephoneNo = t.Key.TelephoneNo,
                       RegistrationDate = t.Key.RegistrationDate,
                       CityName = t.Key.CityName,
                       Center = t.Key.Center,
                       ADSLSellerAgent = t.Key.ADSLSellerAgent,
                       ID = t.Key.ID,
                       RequestPaymentType = t.Key.RequestPaymentType,
                       ADSLSellerAgentID = t.Key.ADSLSellerAgentID,
                       ADSLSellerAgentUSer = t.Key.ADSLSellerAgentUSer,
                       ADSLSellerAgentUserID = t.Key.ADSLSellerAgentUserID,
                       CustomerGroupName = t.Key.CustomerGroupName,
                       Cost = t.Key.Cost,
                       NumberOfADSLSaled = t.Count()
                   }).Distinct().ToList();

            }
        }

        public static List<ADSLRequestInfo> GetChangeGroupStaticIPADSLSellerAgentUserDeetailsInfo(List<int> ADSLSellerAgentIDs, DateTime? fromDate,
                                                                               DateTime? toDate, List<int> cityIDs, List<int> centerIDs,
                                                                               List<int> serviceIDs, List<int> groupIDs, List<int> TypeIDs,
                                                                               List<int> bandWidthIDs, List<int> trafficIDs, List<int> durationIDs,
                                                                               List<int> saleWays,
                                                                               bool? hasModem, List<int> preOrPostPaid, List<int> ADSLSellerAgentUserIDs,
                                                                                List<int> CustomerGrupIDs)
        {

            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLChangeIPRequests.Join(context.ADSLSellerAgentUsers, a => a.Request.CreatorUserID, u => u.ID, (a, u) => new { ADSLChangeIPRequest = a, ADSLSellerAgentUser = u })
                   .Join(context.RequestPayments, a => a.ADSLChangeIPRequest.ID, p => p.RequestID, (a, p) => new { ALL = a, RequestPayment = p })
                    .Join(context.ADSLIPs, m => m.ALL.ADSLChangeIPRequest.NewGroupIPStaticID, I => I.ID, (m, I) => new { ALLM = m, ADSLIps = I })
                   .Where(t =>
                   (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ALLM.ALL.ADSLSellerAgentUser.SellerAgentID))
                   && (!fromDate.HasValue || fromDate <= t.ALLM.ALL.ADSLChangeIPRequest.Request.EndDate)
                   && (!toDate.HasValue || toDate >= t.ALLM.ALL.ADSLChangeIPRequest.Request.EndDate)
                   && (cityIDs.Count == 0 || cityIDs.Contains((int)t.ALLM.ALL.ADSLChangeIPRequest.Request.Center.Region.CityID))
                   && (centerIDs.Count == 0 || centerIDs.Contains((int)t.ALLM.ALL.ADSLChangeIPRequest.Request.CenterID))
                   && (preOrPostPaid.Count == 0 || preOrPostPaid.Contains((int)t.ALLM.RequestPayment.PaymentType))
                   && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ALLM.ALL.ADSLSellerAgentUser.ID))
                   && (CustomerGrupIDs.Count == 0 || CustomerGrupIDs.Contains((int)t.ADSLIps.CustometGroupID))
                   && (t.ALLM.ALL.ADSLChangeIPRequest.Request.EndDate != null))
                   .GroupBy(t => new
                   {
                       TelephoneNo = t.ALLM.ALL.ADSLChangeIPRequest.Request.TelephoneNo.ToString(),
                       RegistrationDate = Date.GetPersianDate(t.ALLM.ALL.ADSLChangeIPRequest.Request.EndDate, Date.DateStringType.Short),
                       CityName = t.ALLM.ALL.ADSLChangeIPRequest.Request.Center.Region.City.Name,
                       Center = t.ALLM.ALL.ADSLChangeIPRequest.Request.Center.CenterName,
                       ADSLSellerAgent = t.ALLM.ALL.ADSLSellerAgentUser.ADSLSellerAgent.Title,
                       ID = t.ALLM.ALL.ADSLChangeIPRequest.Request.ID,
                       RequestPaymentType = DB.GetEnumDescriptionByValue(typeof(DB.PaymentType), t.ALLM.RequestPayment.PaymentType),
                       ADSLSellerAgentID = t.ALLM.ALL.ADSLSellerAgentUser.SellerAgentID,
                       ADSLSellerAgentUSer = t.ALLM.ALL.ADSLSellerAgentUser.User.FirstName + " " + t.ALLM.ALL.ADSLSellerAgentUser.User.LastName,
                       ADSLSellerAgentUserID = t.ALLM.ALL.ADSLSellerAgentUser.ID,
                       CustomerGroupName = t.ADSLIps.ADSLCustomerGroup.Title,
                       Cost = t.ALLM.RequestPayment.AmountSum

                   })
                   .Select(t => new ADSLRequestInfo
                   {
                       TelephoneNo = t.Key.TelephoneNo,
                       RegistrationDate = t.Key.RegistrationDate,
                       CityName = t.Key.CityName,
                       Center = t.Key.Center,
                       ADSLSellerAgent = t.Key.ADSLSellerAgent,
                       ID = t.Key.ID,
                       RequestPaymentType = t.Key.RequestPaymentType,
                       ADSLSellerAgentID = t.Key.ADSLSellerAgentID,
                       ADSLSellerAgentUSer = t.Key.ADSLSellerAgentUSer,
                       ADSLSellerAgentUserID = t.Key.ADSLSellerAgentUserID,
                       CustomerGroupName = t.Key.CustomerGroupName,
                       Cost = t.Key.Cost,
                       NumberOfADSLSaled = t.Count()

                   }).Distinct().ToList();

            }
        }

        public static List<ADSLRequestInfo> ADslSellerAgentSaleCount(List<int> ADSLSellerAgentIDs, DateTime? fromDate,
                                                                                DateTime? toDate, List<int> cityIDs, List<int> centerIDs,
                                                                                List<int> serviceIDs, List<int> groupIDs, List<int> TypeIDs,
                                                                                List<int> bandWidthIDs, List<int> trafficIDs, List<int> durationIDs,
            //List<int> saleWays,
                                                                                bool? hasModem, List<int> preOrPostPaid, List<int> ADSLSellerAgentUserIDs,
                                                                                List<int> ADSLCustomerGroupIDs, List<int> ServicePaymentTypeIDs,
                                                                                DateTime? FromPaymentDate, DateTime? ToPaymentDate, DateTime? FromInsertDate, DateTime? ToInsertDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.ADSLSellerAgentUsers, a => a.ADSLSellerAgentID, u => u.SellerAgentID, (a, u) => new { ADSLRequest = a, ADSLSellerAgentUser = u })
                    .Join(context.RequestPayments, a => a.ADSLRequest.ID, p => p.RequestID, (a, p) => new { ALL = a, RequestPayment = p })
                    //.Join(context.ADSLCustomerGroups, m => m.ALL.ADSLRequest.ADSLService.GroupID, g => g.ID, (m, g) => new { ALLM = m, ADSLCustomerGroup = g })
                    .Where(t =>
                    (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ALL.ADSLRequest.ADSLSellerAgentID))
                    && (!fromDate.HasValue || fromDate <= t.ALL.ADSLRequest.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ALL.ADSLRequest.Request.EndDate)
                    && (cityIDs.Count == 0 || cityIDs.Contains((int)t.ALL.ADSLRequest.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains((int)t.ALL.ADSLRequest.Request.CenterID))
                    && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.ALL.ADSLRequest.ServiceID))
                    && (groupIDs.Count == 0 || groupIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.GroupID))
                        //&& (saleWays.Count == 0 || saleWays.Contains((int)t.SaleWay))
                    && (bandWidthIDs.Count == 0 || bandWidthIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.BandWidthID))
                    && (trafficIDs.Count == 0 || trafficIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.TrafficID))
                    && (durationIDs.Count == 0 || durationIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.DurationID))
                    && (TypeIDs.Count == 0 || TypeIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.TypeID))
                    && (t.ALL.ADSLRequest.NeedModem == hasModem || hasModem == null)
                    && (preOrPostPaid.Count == 0 || preOrPostPaid.Contains((int)t.RequestPayment.PaymentType))
                    && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ALL.ADSLSellerAgentUser.ID))
                    && (ADSLCustomerGroupIDs.Count == 0 || ADSLCustomerGroupIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.PaymentTypeID))
                    && (t.ALL.ADSLRequest.Request.EndDate != null)
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestPayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.RequestPayment.PaymentDate)
                    && (!FromInsertDate.HasValue || FromInsertDate <= t.ALL.ADSLRequest.Request.InsertDate)
                    && (!ToInsertDate.HasValue || ToInsertDate >= t.ALL.ADSLRequest.Request.InsertDate)
                    )
                    .GroupBy(t => new
                    {
                        adslselleragentUser = t.ALL.ADSLSellerAgentUser.ID

                    }).Distinct().Select(t => new ADSLRequestInfo
                    {
                        NumberOfSaledADSLService = t.Count(),
                        ADSLSellerAgentUserID = t.Key.adslselleragentUser

                    }).ToList();


            }
        }

        //public static List<ADSLRequestInfo> GetNumberOfADSLSellerAgentADSLChangeService(List<int> ADSLSellerAgentIDs, DateTime? fromDate,
        //                                                                        DateTime? toDate, List<int> cityIDs, List<int> centerIDs,
        //                                                                        List<int> serviceIDs, List<int> groupIDs, List<int> TypeIDs,
        //                                                                        List<int> bandWidthIDs, List<int> trafficIDs, List<int> durationIDs,
        //                                                                        List<int> saleWays,
        //                                                                        bool? hasModem, List<int> preOrPostPaid, List<int> ADSLSellerAgentUseIDs,
        //                                                                        List<int> ADSLCustomerGroupIDs)
        //{
        //    using (MainDataContext context = new MainDataContext())
        //    {
        //        return context.ADSLChangeServices.Join(context.ADSLSellerAgentUsers, a => a.Request.CreatorUserID, u => u.ID, (a, u) => new { ADSLChangeService = a, ADSLSellerAgentUser = u })
        //            .Join(context.RequestPayments, a => a.ADSLChangeService.ID, p => p.RequestID, (a, p) => new { ALL = a, RequestPayment = p })
        //             .Join(context.ADSLCustomerGroups, m => m.ALL.ADSLChangeService.ADSLService.GroupID, g => g.ID, (m, g) => new { ALLM = m, ADSLCustomerGroup = g })
        //            .Where(t =>
        //            (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ALLM.ALL.ADSLSellerAgentUser.SellerAgentID))
        //            && (!fromDate.HasValue || fromDate <= t.ALLM.ALL.ADSLChangeService.Request.EndDate)
        //            && (!toDate.HasValue || toDate >= t.ALLM.ALL.ADSLChangeService.Request.EndDate)
        //            && (cityIDs.Count == 0 || cityIDs.Contains((int)t.ALLM.ALL.ADSLChangeService.Request.Center.Region.CityID))
        //            && (centerIDs.Count == 0 || centerIDs.Contains((int)t.ALLM.ALL.ADSLChangeService.Request.CenterID))
        //            && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.ALLM.ALL.ADSLChangeService.AdditionalTrafficeID))
        //            && (groupIDs.Count == 0 || groupIDs.Contains((int)t.ALLM.ALL.ADSLChangeService.ADSLService.ADSLServiceGroup.ID))
        //                //&& (saleWays.Count == 0 || saleWays.Contains((int)t.SaleWay))
        //            && (bandWidthIDs.Count == 0 || bandWidthIDs.Contains((int)t.ALLM.ALL.ADSLChangeService.ADSLService.BandWidthID))
        //            && (trafficIDs.Count == 0 || trafficIDs.Contains((int)t.ALLM.ALL.ADSLChangeService.ADSLService.TrafficID))
        //            && (durationIDs.Count == 0 || durationIDs.Contains((int)t.ALLM.ALL.ADSLChangeService.ADSLService.DurationID))
        //            && (TypeIDs.Count == 0 || TypeIDs.Contains((int)t.ALLM.ALL.ADSLChangeService.ADSLService.TypeID))
        //            && (t.ALLM.ALL.ADSLChangeService.NeedModem == hasModem || hasModem == null)
        //            && (preOrPostPaid.Count == 0 || preOrPostPaid.Contains((int)t.ALLM.RequestPayment.PaymentType))
        //            && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ALLM.ALL.ADSLSellerAgentUser.ID))
        //            && (CustomerGrupIDs.Count == 0 || CustomerGrupIDs.Contains((int)t.ADSLCustomerGroup.ID))
        //            && (t.ALLM.ALL.ADSLChangeService.Request.EndDate != null)
        //            )
        //            ).GroupBy(t => new
        //            {
        //                adslselleragentUser = t.ALLM.ALL.ADSLSellerAgentUser.ID
        //            }).Select(t => new ADSLRequestInfo
        //            {
        //                NumberOfSaledADSLService = t.Count(),
        //                ADSLSellerAgentUserID = t.Key.adslselleragentUser
        //            }).ToList();

        //}

        public static List<ADSLRequestInfo> GetADSLOnlineRegistrationInfo(DateTime? fromDate, DateTime? toDate,
                                                                            List<int> cityIDs, List<int> centerIDs,
                                                                            List<int> serviceIDs, List<int> groupIDs, List<int> TypeIDs,
                                                                                List<int> bandWidthIDs, List<int> trafficIDs, List<int> durationIDs,
                                                                                List<int> preOrPostPaid)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLChangeServices.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLChangeService = a, RequestPayment = p }).Where(t =>
                    (cityIDs.Count == 0 || cityIDs.Contains((int)t.ADSLChangeService.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains((int)t.ADSLChangeService.Request.CenterID))
                    && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.ADSLChangeService.NewServiceID))
                    && (!fromDate.HasValue || fromDate <= t.ADSLChangeService.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ADSLChangeService.Request.EndDate)
                    && (t.ADSLChangeService.ChangeServiceType == 2)
                    && (groupIDs.Count == 0 || groupIDs.Contains((int)t.ADSLChangeService.ADSLService.ADSLServiceGroup.ID))
                        //&& (saleWays.Count == 0 || saleWays.Contains((int)t.SaleWay))
                    && (bandWidthIDs.Count == 0 || bandWidthIDs.Contains((int)t.ADSLChangeService.ADSLService.BandWidthID))
                    && (trafficIDs.Count == 0 || trafficIDs.Contains((int)t.ADSLChangeService.ADSLService.TrafficID))
                    && (durationIDs.Count == 0 || durationIDs.Contains((int)t.ADSLChangeService.ADSLService.DurationID))
                    && (TypeIDs.Count == 0 || TypeIDs.Contains((int)t.ADSLChangeService.ADSLService.TypeID))
                    && (preOrPostPaid.Count == 0 || preOrPostPaid.Contains((int)t.RequestPayment.PaymentType))
                    && (t.RequestPayment.PaymentDate != null))
                    .GroupBy(t => new
                    {
                        requestid = t.ADSLChangeService.ID,
                        service = t.ADSLChangeService.ADSLService.Title,
                        city = t.ADSLChangeService.Request.Center.Region.City.Name,
                        center = t.ADSLChangeService.Request.Center.CenterName,
                        enddate = t.ADSLChangeService.Request.EndDate,
                        tel = t.ADSLChangeService.Request.TelephoneNo,
                        id = t.ADSLChangeService.ID,
                        isIBSNG = t.ADSLChangeService.IsIBSngUpdated,
                        fichnumber = t.RequestPayment.FicheNunmber
                    })
                    .Select(t => new ADSLRequestInfo
                    {
                        ServiceTitle = t.Key.service,
                        CityName = t.Key.city,
                        Center = t.Key.center,
                        EndDate = Date.GetPersianDate(t.Key.enddate, Date.DateStringType.Short),
                        TelephoneNo = t.Key.tel.ToString(),
                        NumberOfSaledADSLService = t.Count(),
                        ID = t.Key.id,
                        Cost = t.Sum(m => m.RequestPayment.AmountSum),
                        IsIBSNG = t.Key.isIBSNG,
                        FicheNumber = t.Key.fichnumber

                    }).Union(context.ADSLSellTraffics.Join(context.RequestPayments, c => c.ID, r => r.RequestID, (c, r) => new { ADSLSellTraffics = c, RequestPayment = r })
                    .Where(t =>
                    (cityIDs.Count == 0 || cityIDs.Contains((int)t.ADSLSellTraffics.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains((int)t.ADSLSellTraffics.Request.CenterID))
                    && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.ADSLSellTraffics.AdditionalServiceID))
                    && (!fromDate.HasValue || fromDate <= t.ADSLSellTraffics.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ADSLSellTraffics.Request.EndDate)
                    && (t.ADSLSellTraffics.ChangeServiceType == 2)
                    && (groupIDs.Count == 0 || groupIDs.Contains((int)t.ADSLSellTraffics.ADSLService.ADSLServiceGroup.ID))
                        //&& (saleWays.Count == 0 || saleWays.Contains((int)t.SaleWay))
                    && (bandWidthIDs.Count == 0 || bandWidthIDs.Contains((int)t.ADSLSellTraffics.ADSLService.BandWidthID))
                    && (trafficIDs.Count == 0 || trafficIDs.Contains((int)t.ADSLSellTraffics.ADSLService.TrafficID))
                    && (durationIDs.Count == 0 || durationIDs.Contains((int)t.ADSLSellTraffics.ADSLService.DurationID))
                    && (TypeIDs.Count == 0 || TypeIDs.Contains((int)t.ADSLSellTraffics.ADSLService.TypeID))
                    && (preOrPostPaid.Count == 0 || preOrPostPaid.Contains((int)t.RequestPayment.PaymentType))
                    && (t.RequestPayment.PaymentDate != null))

                    .GroupBy(t => new
                    {
                        requestid = t.ADSLSellTraffics.ID,
                        service = t.ADSLSellTraffics.ADSLService.Title,
                        city = t.ADSLSellTraffics.Request.Center.Region.City.Name,
                        center = t.ADSLSellTraffics.Request.Center.CenterName,
                        enddate = t.ADSLSellTraffics.Request.EndDate,
                        tel = t.ADSLSellTraffics.Request.TelephoneNo,
                        id = t.ADSLSellTraffics.ID,
                        isIBSNG = t.ADSLSellTraffics.IsIBSngUpdated,
                        fichenumber = t.RequestPayment.FicheNunmber
                    })
                    .Select(t => new ADSLRequestInfo
                    {
                        ServiceTitle = t.Key.service,
                        CityName = t.Key.city,
                        Center = t.Key.center,
                        EndDate = Date.GetPersianDate(t.Key.enddate, Date.DateStringType.Short),
                        TelephoneNo = t.Key.tel.ToString(),
                        NumberOfSaledADSLService = t.Count(),
                        ID = t.Key.id,
                        Cost = t.Sum(x => x.RequestPayment.AmountSum),
                        IsIBSNG = t.Key.isIBSNG,
                        FicheNumber = t.Key.fichenumber

                    })).ToList();
            }
        }

        public static List<ADSLRequestInfo> GetADSLOnlineRegistrationBaseOnCity(DateTime? fromDate, DateTime? toDate,
                                                                            List<int> cityIDs, List<int> centerIDs,
                                                                            List<int> serviceIDs, List<int> groupIDs, List<int> TypeIDs,
                                                                                List<int> bandWidthIDs, List<int> trafficIDs, List<int> durationIDs,
                                                                                List<int> preOrPostPaid)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLChangeServices.Join(context.RequestPayments, c => c.ID, r => r.RequestID, (c, r) => new { ADSLChangeSevice = c, RequestPayment = r }).Where(t =>
                    (cityIDs.Count == 0 || cityIDs.Contains((int)t.ADSLChangeSevice.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains((int)t.ADSLChangeSevice.Request.CenterID))
                    && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.ADSLChangeSevice.NewServiceID))
                    && (!fromDate.HasValue || fromDate <= t.ADSLChangeSevice.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ADSLChangeSevice.Request.EndDate)
                    && (t.ADSLChangeSevice.ChangeServiceType == 2)

                    && (groupIDs.Count == 0 || groupIDs.Contains((int)t.ADSLChangeSevice.ADSLService.ADSLServiceGroup.ID))
                    && (bandWidthIDs.Count == 0 || bandWidthIDs.Contains((int)t.ADSLChangeSevice.ADSLService.BandWidthID))
                    && (trafficIDs.Count == 0 || trafficIDs.Contains((int)t.ADSLChangeSevice.ADSLService.TrafficID))
                    && (durationIDs.Count == 0 || durationIDs.Contains((int)t.ADSLChangeSevice.ADSLService.DurationID))
                    && (TypeIDs.Count == 0 || TypeIDs.Contains((int)t.ADSLChangeSevice.ADSLService.TypeID))
                    && (preOrPostPaid.Count == 0 || preOrPostPaid.Contains((int)t.RequestPayment.PaymentType))
                    && (t.RequestPayment.PaymentDate != null))

                    .GroupBy(t => new
                    {
                        city = t.ADSLChangeSevice.Request.Center.Region.City.Name,
                        //requestid = t.ADSLChangeSevice.ID,

                    })
                    .Select(t => new ADSLRequestInfo
                    {
                        CityName = t.Key.city,
                        NumberOfSold = t.Count(),
                        Cost = t.Sum(m => m.RequestPayment.AmountSum)

                    }).Union(context.ADSLSellTraffics.Join(context.RequestPayments, c => c.ID, r => r.RequestID, (c, r) => new { ADSLSellTraffics = c, RequestPayment = r })
                    .Where(t =>
                    (cityIDs.Count == 0 || cityIDs.Contains((int)t.ADSLSellTraffics.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains((int)t.ADSLSellTraffics.Request.CenterID))
                    && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.ADSLSellTraffics.AdditionalServiceID))
                    && (!fromDate.HasValue || fromDate <= t.ADSLSellTraffics.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ADSLSellTraffics.Request.EndDate)
                    && (t.ADSLSellTraffics.ChangeServiceType == 2)

                    && (groupIDs.Count == 0 || groupIDs.Contains((int)t.ADSLSellTraffics.ADSLService.ADSLServiceGroup.ID))
                    && (bandWidthIDs.Count == 0 || bandWidthIDs.Contains((int)t.ADSLSellTraffics.ADSLService.BandWidthID))
                    && (trafficIDs.Count == 0 || trafficIDs.Contains((int)t.ADSLSellTraffics.ADSLService.TrafficID))
                    && (durationIDs.Count == 0 || durationIDs.Contains((int)t.ADSLSellTraffics.ADSLService.DurationID))
                    && (TypeIDs.Count == 0 || TypeIDs.Contains((int)t.ADSLSellTraffics.ADSLService.TypeID))
                    && (preOrPostPaid.Count == 0 || preOrPostPaid.Contains((int)t.RequestPayment.PaymentType))
                    && (t.RequestPayment.PaymentDate != null))

                    .GroupBy(t => new
                    {
                        city = t.ADSLSellTraffics.Request.Center.Region.City.Name,
                        //requestid = t.ADSLSellTraffics.ID,

                    })
                    .Select(t => new ADSLRequestInfo
                    {
                        CityName = t.Key.city,
                        NumberOfSold = t.Count(),
                        Cost = t.Sum(x => x.RequestPayment.AmountSum)

                    })).ToList();
            }
        }

        public static List<ADSLRequestInfo> GetADSLOnlineRegistrationBaseOnCenter(DateTime? fromDate, DateTime? toDate,
                                                                            List<int> cityIDs, List<int> centerIDs,
                                                                            List<int> serviceIDs, List<int> groupIDs, List<int> TypeIDs,
                                                                                List<int> bandWidthIDs, List<int> trafficIDs, List<int> durationIDs,
                                                                                 List<int> preOrPostPaid)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLChangeServices.Join(context.RequestPayments, c => c.ID, r => r.RequestID, (c, r) => new { ADSLChangeSevice = c, RequestPayment = r })
                    .Where(t =>
                    (cityIDs.Count == 0 || cityIDs.Contains((int)t.ADSLChangeSevice.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains((int)t.ADSLChangeSevice.Request.CenterID))
                    && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.ADSLChangeSevice.NewServiceID))
                    && (!fromDate.HasValue || fromDate <= t.ADSLChangeSevice.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ADSLChangeSevice.Request.EndDate)
                    && (t.ADSLChangeSevice.ChangeServiceType == 2)

                    && (groupIDs.Count == 0 || groupIDs.Contains((int)t.ADSLChangeSevice.ADSLService.ADSLServiceGroup.ID))
                    && (bandWidthIDs.Count == 0 || bandWidthIDs.Contains((int)t.ADSLChangeSevice.ADSLService.BandWidthID))
                    && (trafficIDs.Count == 0 || trafficIDs.Contains((int)t.ADSLChangeSevice.ADSLService.TrafficID))
                    && (durationIDs.Count == 0 || durationIDs.Contains((int)t.ADSLChangeSevice.ADSLService.DurationID))
                    && (TypeIDs.Count == 0 || TypeIDs.Contains((int)t.ADSLChangeSevice.ADSLService.TypeID))
                    && (preOrPostPaid.Count == 0 || preOrPostPaid.Contains((int)t.RequestPayment.PaymentType))
                    && (t.RequestPayment.PaymentType != null))
                    .GroupBy(t => new
                    {
                        center = t.ADSLChangeSevice.Request.Center.CenterName,

                    })
                    .Select(t => new ADSLRequestInfo
                    {
                        Center = t.Key.center,
                        NumberOfSaledADSLService = t.Count(),
                        Cost = t.Sum(m => m.RequestPayment.AmountSum) * t.Count()

                    }).Union(context.ADSLSellTraffics.Join(context.RequestPayments, c => c.ID, r => r.RequestID, (c, r) => new { ADSLSellTraffics = c, RequestPayment = r })
                    .Where(t =>
                    (cityIDs.Count == 0 || cityIDs.Contains((int)t.ADSLSellTraffics.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains((int)t.ADSLSellTraffics.Request.CenterID))
                    && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.ADSLSellTraffics.AdditionalServiceID))
                    && (!fromDate.HasValue || fromDate <= t.ADSLSellTraffics.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ADSLSellTraffics.Request.EndDate)
                    && (t.ADSLSellTraffics.ChangeServiceType == 2)
                    && (groupIDs.Count == 0 || groupIDs.Contains((int)t.ADSLSellTraffics.ADSLService.ADSLServiceGroup.ID))
                    && (bandWidthIDs.Count == 0 || bandWidthIDs.Contains((int)t.ADSLSellTraffics.ADSLService.BandWidthID))
                    && (trafficIDs.Count == 0 || trafficIDs.Contains((int)t.ADSLSellTraffics.ADSLService.TrafficID))
                    && (durationIDs.Count == 0 || durationIDs.Contains((int)t.ADSLSellTraffics.ADSLService.DurationID))
                    && (TypeIDs.Count == 0 || TypeIDs.Contains((int)t.ADSLSellTraffics.ADSLService.TypeID))
                    && (preOrPostPaid.Count == 0 || preOrPostPaid.Contains((int)t.RequestPayment.PaymentType))
                    && (t.RequestPayment.PaymentDate != null))

                    .GroupBy(t => new
                    {
                        center = t.ADSLSellTraffics.Request.Center.CenterName,


                    })
                    .Select(t => new ADSLRequestInfo
                    {
                        Center = t.Key.center,
                        NumberOfSaledADSLService = t.Count(),
                        Cost = t.Sum(m => m.RequestPayment.AmountSum) * t.Count()

                    })).ToList();
            }
        }

        public static List<ADSLCityCenterBandwidthDailyInfo> GetADSLCityCenterBandwidthDayeriDailyInfo(List<int> cityIDs, List<int> centerIDs,
                                                                                                   DateTime? fromDate, DateTime? toDate, List<int> paymentTypeID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.RequestPayments, a => a.ID, r => r.RequestID, (a, r) => new { ADSlRequest = a, RequestPayment = r }).Where(t =>
                    (cityIDs.Count == 0 || cityIDs.Contains(t.ADSlRequest.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains(t.ADSlRequest.Request.CenterID))
                    && (!fromDate.HasValue || fromDate <= t.ADSlRequest.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ADSlRequest.Request.EndDate)
                        //&& ((byte)paymentTypeID == t.RequestPayment.PaymentType)
                    && (paymentTypeID.Count == 0 || paymentTypeID.Contains((int)t.RequestPayment.PaymentType))
                    && (t.ADSlRequest.Request.EndDate != null)
                    && (t.RequestPayment.BaseCostID == 44))
                    .GroupBy(t => new
                    {
                        CityName = t.ADSlRequest.Request.Center.Region.City.Name,
                        CenterName = t.ADSlRequest.Request.Center.CenterName,
                        DayName = t.ADSlRequest.Request.EndDate.Value.DayOfWeek,
                        BandWidth = t.ADSlRequest.ADSLService.ADSLServiceBandWidth.Title,


                    }).Select(t => new ADSLCityCenterBandwidthDailyInfo
                    {
                        DayName = t.Key.DayName,
                        CityName = t.Key.CityName,
                        CenterName = t.Key.CenterName,
                        NumberOfDayeri = t.Count(),
                        BandWidth = t.Key.BandWidth
                    }).Distinct().ToList();

            }
        }

        public static List<ADSLCityCenterBandwidthDailyInfo> GetADSLChangeSErviceCityCenterBandwidthDayeriDailyInfo(List<int> cityIDs, List<int> centerIDs,
                                                                                                  DateTime? fromDate, DateTime? toDate, List<int> paymentTypeID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLChangeServices.Join(context.RequestPayments, a => a.ID, r => r.RequestID, (a, r) => new { ADSLchangeService = a, RequestPayment = r }).Where(t =>
                    (cityIDs.Count == 0 || cityIDs.Contains(t.ADSLchangeService.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains(t.ADSLchangeService.Request.CenterID))
                    && (!fromDate.HasValue || fromDate <= t.ADSLchangeService.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ADSLchangeService.Request.EndDate)
                        //&& ((byte)paymentTypeID == t.RequestPayment.PaymentType)
                    && (paymentTypeID.Count == 0 || paymentTypeID.Contains((int)t.RequestPayment.PaymentType))
                    && (t.ADSLchangeService.Request.EndDate != null)
                    && (t.RequestPayment.BaseCostID == 44 || t.RequestPayment.BaseCostID == 45))
                    .GroupBy(t => new
                    {
                        CityName = t.ADSLchangeService.Request.Center.Region.City.Name,
                        CenterName = t.ADSLchangeService.Request.Center.CenterName,
                        DayName = t.ADSLchangeService.Request.EndDate.Value.DayOfWeek,
                        BandWidth = t.ADSLchangeService.ADSLService.ADSLServiceBandWidth.Title,


                    }).Select(t => new ADSLCityCenterBandwidthDailyInfo
                    {
                        DayName = t.Key.DayName,
                        CityName = t.Key.CityName,
                        CenterName = t.Key.CenterName,
                        NumberOfDayeri = t.Count(),
                        BandWidth = t.Key.BandWidth
                    }).Distinct().ToList();

            }
        }

        public static List<ADSLCityCenterBandwidthDailyInfo> GetADSLCityCenterDischargeDailyInfo(List<int> cityIDs, List<int> centerIDs,
                                                                                                   DateTime? fromDate, DateTime? toDate, List<int> paymentTypeID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLDischarges.Where(t =>
                    (cityIDs.Count == 0 || cityIDs.Contains(t.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains(t.Request.CenterID))
                    && (!fromDate.HasValue || fromDate <= t.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.Request.EndDate)
                        //&& (paymentTypeID.Count==0 || paymentTypeID.Contains((int)t.RequestPayment.PaymentType))
                     && (t.Request.EndDate != null))
                     .GroupBy(t => new
                    {
                        city = t.Request.Center.Region.City.Name,
                        center = t.Request.Center.CenterName,
                        day = t.Request.EndDate.Value.DayOfWeek,
                        //paymentType = DB.GetEnumDescriptionByValue(typeof(DB.ADSLPaymentTypeWithoutFree), t.RequestPaymentTypeID)
                    }).Select(t => new ADSLCityCenterBandwidthDailyInfo
                    {
                        DayName = t.Key.day,
                        CityName = t.Key.city,
                        CenterName = t.Key.center,
                        NumberOfDischarge = t.Count()
                        //PaymentType=t.Key.paymentType
                    }).ToList();

            }
        }

        public static List<ADSLIntarnetDailySaleInfo> GetADSLIntarnetDayeriCityCenterDailyInfo(List<int> cityIDs, List<int> CenterIDs, string fromDate, string toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                string query = "execute [dbo].[Report.ADSLDayeriInteranetCityDailyReport] "
                                                                             + ((cityIDs.Count == 0) ? "null" : ("'" + string.Join(",", cityIDs) + "'")) + ","
                                                                             + ((CenterIDs.Count == 0) ? "null" : ("'" + string.Join(",", CenterIDs) + "'")) + ","
                                                                              + "'" + fromDate + "'" + "," + "'" + toDate + "'";

                return context.ExecuteQuery<ADSLIntarnetDailySaleInfo>(query).ToList();
            }
        }

        public static List<ADSLIntarnetDailySaleInfo> GetADSLIntarnetDischargeCityCenterDailyInfo(List<int> cityIDs, List<int> CenterIDs, string fromDate, string toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {


                string query = "execute [dbo].[Report.ADSLDischargeInteranetCityDailyReport] "
                                                                            + ((cityIDs.Count == 0) ? "null" : ("'" + string.Join(",", cityIDs) + "'")) + ","
                                                                            + ((CenterIDs.Count == 0) ? "null" : ("'" + string.Join(",", CenterIDs) + "'")) + ","
                                                                             + "'" + fromDate + "'" + "," + "'" + toDate + "'";

                return context.ExecuteQuery<ADSLIntarnetDailySaleInfo>(query).ToList();
            }
        }

        public static List<ADSLServiceInfo> GetADSLServiceSaleInfo(List<int> ADSLSellerAgentIDs, DateTime? fromDate,
                                                                               DateTime? toDate, List<int> cityIDs, List<int> centerIDs,
                                                                               List<int> serviceIDs, List<int> groupIDs, List<int> TypeIDs,
                                                                               List<int> bandWidthIDs, List<int> trafficIDs, List<int> durationIDs,
                                                                               bool? hasModem, List<int> preOrPostPaid
                                                                               , List<int> ADSLSellerAgentUserIDs, List<int> ADSLCustomerGroupIDs,
                                                                                DateTime? FrompaymentDate, DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Join(context.RequestPayments, t => t.ID, p => p.RequestID, (t, p) => new { Request = t, Requestpayment = p })
                      .Join(context.ADSLSellerAgentUsers, a => a.Requestpayment.UserID, s => s.ID, (a, s) => new { All = a, ADSLSellerAgentUser = s })
                    //.GroupJoin(context.ADSLSellerAgentUsers, r => r.Requestpayment.UserID, u => u.ID, (r, u) => new { All = r, ADSLSellerAgentUser = u })
                    // .SelectMany(u => u.ADSLSellerAgentUser.DefaultIfEmpty(), (r, u) => new { All = r.All, ADSLSellerAgentUser = u })
                    //.GroupJoin(context.ADSLCustomerGroups, m => m.All.Request.ADSLRequest.ADSLService.GroupID, g => g.ID, (m, g) => new { ALLM = m, ADSLCustomerGroup = g })
                    //.SelectMany(g => g.ADSLCustomerGroup.DefaultIfEmpty(), (a, g) => new {ALLM=a.ALLM, ADSLCustomerGroup=g })
                    .Where(t =>
                       (cityIDs.Count == 0 || cityIDs.Contains(t.All.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains(t.All.Request.CenterID))
                    && (bandWidthIDs.Count == 0 || bandWidthIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.ADSLServiceBandWidth.ID))
                    && (!fromDate.HasValue || fromDate <= t.All.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.All.Request.EndDate)
                    && (t.All.Request.RequestTypeID == (byte)DB.RequestType.ADSL)
                    && (t.All.Request.EndDate != null)
                           //&& (t.All.Requestpayment.PaymentDate != null || t.All.Requestpayment.PaymentType == (byte)DB.PaymentType.Instalment)
                    && (!FrompaymentDate.HasValue || FrompaymentDate <= t.All.Requestpayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.All.Requestpayment.PaymentDate)
                    && (t.All.Requestpayment.BaseCostID == 44)
                    && (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ADSLSellerAgentUser.SellerAgentID))
                    && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ADSLSellerAgentUser.ID))
                           //&& (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.ALLM.All.Requestpayment.UserID))
                    && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.ID))
                    && (groupIDs.Count == 0 || groupIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.GroupID))
                    && (TypeIDs.Count == 0 || TypeIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.TypeID))
                    && (trafficIDs.Count == 0 || trafficIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.ADSLServiceTraffic.ID))
                    && (durationIDs.Count == 0 || trafficIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.ADSLServiceDuration.ID))
                    && (!hasModem.HasValue || t.All.Request.ADSLRequest.NeedModem == hasModem)
                    && (preOrPostPaid.Count == 0 || preOrPostPaid.Contains((int)t.All.Requestpayment.PaymentType))
                    && (ADSLCustomerGroupIDs.Count == 0 || ADSLCustomerGroupIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID)))

                    .Select(t => new ADSLServiceInfo
                    {
                        TelephoneNo = t.All.Request.TelephoneNo.ToString(),
                        CustomerName = t.All.Request.ADSLRequest.Customer.FirstNameOrTitle + " " + t.All.Request.ADSLRequest.Customer.LastName,
                        CenterName = t.All.Request.ADSLRequest.Request.Center.CenterName,
                        BillID = t.All.Requestpayment.BillID.ToString(),
                        PaymentID = t.All.Requestpayment.PaymentID,
                        Title = t.All.Request.ADSLRequest.ADSLService.Title,
                        PriceSum = (t.All.Requestpayment.AmountSum).ToString(),
                        BandWidth = t.All.Request.ADSLRequest.ADSLService.ADSLServiceBandWidth.Title,
                        RequiredInstallation = t.All.Request.ADSLRequest.RequiredInstalation,
                        CenterID = t.All.Request.ADSLRequest.Request.CenterID.ToString(),
                        IsPaid = t.All.Requestpayment.IsPaid,
                        CenterCode = t.All.Request.ADSLRequest.Request.Center.CenterCode.ToString(),
                        paymentDate = Date.GetPersianDate(t.All.Requestpayment.PaymentDate, Date.DateStringType.Short),
                        Tax = t.All.Requestpayment.Tax.ToString()

                    }).ToList();
            }
        }

        public static List<ADSLServiceInfo> GetADSLServiceADSLRequestAmountSumSaleInfo(List<int> ADSLSellerAgentIDs, DateTime? fromDate,
                                                                               DateTime? toDate, List<int> cityIDs, List<int> centerIDs,
                                                                               List<int> serviceIDs, List<int> groupIDs, List<int> TypeIDs,
                                                                               List<int> bandWidthIDs, List<int> trafficIDs, List<int> durationIDs,
                                                                               bool? hasModem, List<int> preOrPostPaid
                                                                               , List<int> ADSLSellerAgentUserIDs, List<int> ADSLCustomerGroupIDs,
                                                                                DateTime? FrompaymentDate, DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Join(context.RequestPayments, t => t.ID, p => p.RequestID, (t, p) => new { Request = t, Requestpayment = p })

                      .Join(context.ADSLSellerAgentUsers, a => a.Requestpayment.UserID, s => s.ID, (a, s) => new { All = a, ADSLSellerAgentUser = s })
                    //.GroupJoin(context.ADSLSellerAgentUsers, r => r.Requestpayment.UserID, u => u.ID, (r, u) => new { All = r, ADSLSellerAgentUser = u })
                    // .SelectMany(u => u.ADSLSellerAgentUser.DefaultIfEmpty(), (r, u) => new { All = r.All, ADSLSellerAgentUser = u })
                    //.GroupJoin(context.ADSLCustomerGroups, m => m.All.Request.ADSLRequest.ADSLService.GroupID, g => g.ID, (m, g) => new { ALLM = m, ADSLCustomerGroup = g })
                    //.SelectMany(g => g.ADSLCustomerGroup.DefaultIfEmpty(), (a, g) => new {ALLM=a.ALLM, ADSLCustomerGroup=g })
                    .Where(t =>
                       (cityIDs.Count == 0 || cityIDs.Contains(t.All.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains(t.All.Request.CenterID))
                    && (bandWidthIDs.Count == 0 || bandWidthIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.ADSLServiceBandWidth.ID))
                    && (!fromDate.HasValue || fromDate <= t.All.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.All.Request.EndDate)
                    && (t.All.Request.RequestTypeID == (byte)DB.RequestType.ADSL)
                    && (t.All.Request.EndDate != null)
                           //&& (t.All.Requestpayment.PaymentDate != null || t.All.Requestpayment.PaymentType == (byte)DB.PaymentType.Instalment)
                    && (!FrompaymentDate.HasValue || FrompaymentDate <= t.All.Requestpayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.All.Requestpayment.PaymentDate)
                    && (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ADSLSellerAgentUser.SellerAgentID))
                    && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ADSLSellerAgentUser.ID))
                           //&& (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.ALLM.All.Requestpayment.UserID))
                    && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.ID))
                    && (groupIDs.Count == 0 || groupIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.GroupID))
                    && (TypeIDs.Count == 0 || TypeIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.TypeID))
                    && (trafficIDs.Count == 0 || trafficIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.ADSLServiceTraffic.ID))
                    && (durationIDs.Count == 0 || trafficIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.ADSLServiceDuration.ID))
                    && (!hasModem.HasValue || t.All.Request.ADSLRequest.NeedModem == hasModem)
                    && (preOrPostPaid.Count == 0 || preOrPostPaid.Contains((int)t.All.Requestpayment.PaymentType))
                    && (ADSLCustomerGroupIDs.Count == 0 || ADSLCustomerGroupIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID)))

                    .Select(t => new ADSLServiceInfo
                    {
                        TelephoneNo = t.All.Request.TelephoneNo.ToString(),
                        CustomerName = t.All.Request.ADSLRequest.Customer.FirstNameOrTitle + " " + t.All.Request.ADSLRequest.Customer.LastName,
                        CenterName = t.All.Request.ADSLRequest.Request.Center.CenterName,
                        BillID = t.All.Requestpayment.BillID.ToString(),
                        PaymentID = t.All.Requestpayment.PaymentID,
                        Title = t.All.Request.ADSLRequest.ADSLService.Title,
                        SumAmount = (t.All.Requestpayment.AmountSum).ToString(),
                        BandWidth = t.All.Request.ADSLRequest.ADSLService.ADSLServiceBandWidth.Title,
                        RequiredInstallation = t.All.Request.ADSLRequest.RequiredInstalation,
                        CenterID = t.All.Request.ADSLRequest.Request.CenterID.ToString(),
                        IsPaid = t.All.Requestpayment.IsPaid,
                        CenterCode = t.All.Request.ADSLRequest.Request.Center.CenterCode.ToString(),
                        paymentDate = Date.GetPersianDate(t.All.Requestpayment.PaymentDate, Date.DateStringType.Short),
                        Tax = t.All.Requestpayment.Tax.ToString()

                    }).ToList();
            }
        }


        public static List<ADSLServiceInfo> GetADSLServiceADSlRequestModemSaleInfo(List<int> ADSLSellerAgentIDs, DateTime? fromDate,
                                                                              DateTime? toDate, List<int> cityIDs, List<int> centerIDs,
                                                                              List<int> serviceIDs, List<int> groupIDs, List<int> TypeIDs,
                                                                              List<int> bandWidthIDs, List<int> trafficIDs, List<int> durationIDs,
                                                                              bool? hasModem, List<int> preOrPostPaid
                                                                              , List<int> ADSLSellerAgentUserIDs, List<int> ADSLCustomerGroupIDs,
                                                                               DateTime? FrompaymentDate, DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Join(context.RequestPayments, t => t.ID, p => p.RequestID, (t, p) => new { Request = t, Requestpayment = p })

                      .Join(context.ADSLSellerAgentUsers, a => a.Requestpayment.UserID, s => s.ID, (a, s) => new { All = a, ADSLSellerAgentUser = s })
                    //.GroupJoin(context.ADSLSellerAgentUsers, r => r.Requestpayment.UserID, u => u.ID, (r, u) => new { All = r, ADSLSellerAgentUser = u })
                    // .SelectMany(u => u.ADSLSellerAgentUser.DefaultIfEmpty(), (r, u) => new { All = r.All, ADSLSellerAgentUser = u })
                    //.GroupJoin(context.ADSLCustomerGroups, m => m.All.Request.ADSLRequest.ADSLService.GroupID, g => g.ID, (m, g) => new { ALLM = m, ADSLCustomerGroup = g })
                    //.SelectMany(g => g.ADSLCustomerGroup.DefaultIfEmpty(), (a, g) => new {ALLM=a.ALLM, ADSLCustomerGroup=g })
                    .Where(t =>
                       (cityIDs.Count == 0 || cityIDs.Contains(t.All.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains(t.All.Request.CenterID))
                    && (bandWidthIDs.Count == 0 || bandWidthIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.ADSLServiceBandWidth.ID))
                    && (!fromDate.HasValue || fromDate <= t.All.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.All.Request.EndDate)
                    && (t.All.Request.RequestTypeID == (byte)DB.RequestType.ADSL)
                    && (t.All.Request.EndDate != null)
                           //&& (t.All.Requestpayment.PaymentDate != null || t.All.Requestpayment.PaymentType == (byte)DB.PaymentType.Instalment)
                    && (!FrompaymentDate.HasValue || FrompaymentDate <= t.All.Requestpayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.All.Requestpayment.PaymentDate)
                    && (t.All.Requestpayment.BaseCostID == 40)
                    && (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ADSLSellerAgentUser.SellerAgentID))
                    && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ADSLSellerAgentUser.ID))
                           //&& (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.ALLM.All.Requestpayment.UserID))
                    && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.ID))
                    && (groupIDs.Count == 0 || groupIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.GroupID))
                    && (TypeIDs.Count == 0 || TypeIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.TypeID))
                    && (trafficIDs.Count == 0 || trafficIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.ADSLServiceTraffic.ID))
                    && (durationIDs.Count == 0 || trafficIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.ADSLServiceDuration.ID))
                    && (t.All.Request.ADSLRequest.NeedModem == true)
                    && (preOrPostPaid.Count == 0 || preOrPostPaid.Contains((int)t.All.Requestpayment.PaymentType))
                    && (ADSLCustomerGroupIDs.Count == 0 || ADSLCustomerGroupIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID)))

                    .Select(t => new ADSLServiceInfo
                    {
                        TelephoneNo = t.All.Request.TelephoneNo.ToString(),
                        CustomerName = t.All.Request.ADSLRequest.Customer.FirstNameOrTitle + " " + t.All.Request.ADSLRequest.Customer.LastName,
                        CenterName = t.All.Request.ADSLRequest.Request.Center.CenterName,
                        BillID = t.All.Requestpayment.BillID.ToString(),
                        ModemPrice = (t.All.Requestpayment.AmountSum).ToString(),
                        CenterID = t.All.Request.ADSLRequest.Request.CenterID.ToString(),
                        IsPaid = t.All.Requestpayment.IsPaid,
                        CenterCode = t.All.Request.ADSLRequest.Request.Center.CenterCode.ToString(),
                        paymentDate = Date.GetPersianDate(t.All.Requestpayment.PaymentDate, Date.DateStringType.Short),
                        Title = t.All.Request.ADSLRequest.ADSLService.Title,
                        Tax = t.All.Requestpayment.Tax.ToString()

                    }).ToList();
            }
        }

        public static List<ADSLServiceInfo> GetADSLServiceADSlRequestIPSaleInfo(List<int> ADSLSellerAgentIDs, DateTime? fromDate,
                                                                              DateTime? toDate, List<int> cityIDs, List<int> centerIDs,
                                                                              List<int> serviceIDs, List<int> groupIDs, List<int> TypeIDs,
                                                                              List<int> bandWidthIDs, List<int> trafficIDs, List<int> durationIDs,
                                                                              bool? hasModem, List<int> preOrPostPaid
                                                                              , List<int> ADSLSellerAgentUserIDs, List<int> ADSLCustomerGroupIDs,
                                                                               DateTime? FrompaymentDate, DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Join(context.RequestPayments, t => t.ID, p => p.RequestID, (t, p) => new { Request = t, Requestpayment = p })

                      .Join(context.ADSLSellerAgentUsers, a => a.Requestpayment.UserID, s => s.ID, (a, s) => new { All = a, ADSLSellerAgentUser = s })
                    //.GroupJoin(context.ADSLSellerAgentUsers, r => r.Requestpayment.UserID, u => u.ID, (r, u) => new { All = r, ADSLSellerAgentUser = u })
                    // .SelectMany(u => u.ADSLSellerAgentUser.DefaultIfEmpty(), (r, u) => new { All = r.All, ADSLSellerAgentUser = u })
                    //.GroupJoin(context.ADSLCustomerGroups, m => m.All.Request.ADSLRequest.ADSLService.GroupID, g => g.ID, (m, g) => new { ALLM = m, ADSLCustomerGroup = g })
                    //.SelectMany(g => g.ADSLCustomerGroup.DefaultIfEmpty(), (a, g) => new {ALLM=a.ALLM, ADSLCustomerGroup=g })
                    .Where(t =>
                       (cityIDs.Count == 0 || cityIDs.Contains(t.All.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains(t.All.Request.CenterID))
                    && (bandWidthIDs.Count == 0 || bandWidthIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.ADSLServiceBandWidth.ID))
                    && (!fromDate.HasValue || fromDate <= t.All.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.All.Request.EndDate)
                    && (t.All.Request.RequestTypeID == (byte)DB.RequestType.ADSL)
                    && (t.All.Request.EndDate != null)
                           //&& (t.All.Requestpayment.PaymentDate != null || t.All.Requestpayment.PaymentType == (byte)DB.PaymentType.Instalment)
                    && (!FrompaymentDate.HasValue || FrompaymentDate <= t.All.Requestpayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.All.Requestpayment.PaymentDate)
                    && (t.All.Requestpayment.BaseCostID == 48)
                    && (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ADSLSellerAgentUser.SellerAgentID))
                    && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ADSLSellerAgentUser.ID))
                           //&& (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.ALLM.All.Requestpayment.UserID))
                    && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.ID))
                    && (groupIDs.Count == 0 || groupIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.GroupID))
                    && (TypeIDs.Count == 0 || TypeIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.TypeID))
                    && (trafficIDs.Count == 0 || trafficIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.ADSLServiceTraffic.ID))
                    && (durationIDs.Count == 0 || trafficIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.ADSLServiceDuration.ID))
                    && (preOrPostPaid.Count == 0 || preOrPostPaid.Contains((int)t.All.Requestpayment.PaymentType))
                    && (ADSLCustomerGroupIDs.Count == 0 || ADSLCustomerGroupIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID)))

                    .Select(t => new ADSLServiceInfo
                    {
                        TelephoneNo = t.All.Request.TelephoneNo.ToString(),
                        CustomerName = t.All.Request.ADSLRequest.Customer.FirstNameOrTitle + " " + t.All.Request.ADSLRequest.Customer.LastName,
                        CenterName = t.All.Request.ADSLRequest.Request.Center.CenterName,
                        IPPrice = (t.All.Requestpayment.AmountSum).ToString(),
                        CenterID = t.All.Request.ADSLRequest.Request.CenterID.ToString(),
                        IsPaid = t.All.Requestpayment.IsPaid,
                        CenterCode = t.All.Request.ADSLRequest.Request.Center.CenterCode.ToString(),
                        paymentDate = Date.GetPersianDate(t.All.Requestpayment.PaymentDate, Date.DateStringType.Short),
                        Title = t.All.Request.ADSLRequest.ADSLService.Title,
                        Tax = t.All.Requestpayment.Tax.ToString()

                    }).ToList();
            }
        }

        public static List<ADSLServiceInfo> GetADSLServiceADSlRequestInstallmentSaleInfo(List<int> ADSLSellerAgentIDs, DateTime? fromDate,
                                                                             DateTime? toDate, List<int> cityIDs, List<int> centerIDs,
                                                                             List<int> serviceIDs, List<int> groupIDs, List<int> TypeIDs,
                                                                             List<int> bandWidthIDs, List<int> trafficIDs, List<int> durationIDs,
                                                                             bool? hasModem, List<int> preOrPostPaid
                                                                             , List<int> ADSLSellerAgentUserIDs, List<int> ADSLCustomerGroupIDs,
                                                                              DateTime? FrompaymentDate, DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Join(context.RequestPayments, t => t.ID, p => p.RequestID, (t, p) => new { Request = t, Requestpayment = p })

                      .Join(context.ADSLSellerAgentUsers, a => a.Requestpayment.UserID, s => s.ID, (a, s) => new { All = a, ADSLSellerAgentUser = s })
                    //.GroupJoin(context.ADSLSellerAgentUsers, r => r.Requestpayment.UserID, u => u.ID, (r, u) => new { All = r, ADSLSellerAgentUser = u })
                    // .SelectMany(u => u.ADSLSellerAgentUser.DefaultIfEmpty(), (r, u) => new { All = r.All, ADSLSellerAgentUser = u })
                    //.GroupJoin(context.ADSLCustomerGroups, m => m.All.Request.ADSLRequest.ADSLService.GroupID, g => g.ID, (m, g) => new { ALLM = m, ADSLCustomerGroup = g })
                    //.SelectMany(g => g.ADSLCustomerGroup.DefaultIfEmpty(), (a, g) => new {ALLM=a.ALLM, ADSLCustomerGroup=g })
                    .Where(t =>
                       (cityIDs.Count == 0 || cityIDs.Contains(t.All.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains(t.All.Request.CenterID))
                    && (bandWidthIDs.Count == 0 || bandWidthIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.ADSLServiceBandWidth.ID))
                    && (!fromDate.HasValue || fromDate <= t.All.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.All.Request.EndDate)
                    && (t.All.Request.RequestTypeID == (byte)DB.RequestType.ADSL)
                    && (t.All.Request.EndDate != null)
                           //&& (t.All.Requestpayment.PaymentDate != null || t.All.Requestpayment.PaymentType == (byte)DB.PaymentType.Instalment)
                    && (!FrompaymentDate.HasValue || FrompaymentDate <= t.All.Requestpayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.All.Requestpayment.PaymentDate)
                    && (t.All.Requestpayment.BaseCostID == 37)
                    && (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ADSLSellerAgentUser.SellerAgentID))
                    && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ADSLSellerAgentUser.ID))
                           //&& (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.ALLM.All.Requestpayment.UserID))
                    && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.ID))
                    && (groupIDs.Count == 0 || groupIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.GroupID))
                    && (TypeIDs.Count == 0 || TypeIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.TypeID))
                    && (trafficIDs.Count == 0 || trafficIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.ADSLServiceTraffic.ID))
                    && (durationIDs.Count == 0 || trafficIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.ADSLServiceDuration.ID))
                    && (preOrPostPaid.Count == 0 || preOrPostPaid.Contains((int)t.All.Requestpayment.PaymentType))
                    && (ADSLCustomerGroupIDs.Count == 0 || ADSLCustomerGroupIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID)))

                    .Select(t => new ADSLServiceInfo
                    {
                        TelephoneNo = t.All.Request.TelephoneNo.ToString(),
                        CustomerName = t.All.Request.ADSLRequest.Customer.FirstNameOrTitle + " " + t.All.Request.ADSLRequest.Customer.LastName,
                        CenterName = t.All.Request.ADSLRequest.Request.Center.CenterName,
                        InstallmentPrice = (t.All.Requestpayment.AmountSum).ToString(),
                        CenterID = t.All.Request.ADSLRequest.Request.CenterID.ToString(),
                        IsPaid = t.All.Requestpayment.IsPaid,
                        CenterCode = t.All.Request.ADSLRequest.Request.Center.CenterCode.ToString(),
                        paymentDate = Date.GetPersianDate(t.All.Requestpayment.PaymentDate, Date.DateStringType.Short),
                        Title = t.All.Request.ADSLRequest.ADSLService.Title,
                        Tax = t.All.Requestpayment.Tax.ToString()

                    }).ToList();
            }
        }

        public static List<ADSLServiceInfo> GetADSLServiceADSlRequestRanjeSaleInfo(List<int> ADSLSellerAgentIDs, DateTime? fromDate,
                                                                            DateTime? toDate, List<int> cityIDs, List<int> centerIDs,
                                                                            List<int> serviceIDs, List<int> groupIDs, List<int> TypeIDs,
                                                                            List<int> bandWidthIDs, List<int> trafficIDs, List<int> durationIDs,
                                                                            bool? hasModem, List<int> preOrPostPaid
                                                                            , List<int> ADSLSellerAgentUserIDs, List<int> ADSLCustomerGroupIDs,
                                                                             DateTime? FrompaymentDate, DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Join(context.RequestPayments, t => t.ID, p => p.RequestID, (t, p) => new { Request = t, Requestpayment = p })

                      .Join(context.ADSLSellerAgentUsers, a => a.Requestpayment.UserID, s => s.ID, (a, s) => new { All = a, ADSLSellerAgentUser = s })
                    //.GroupJoin(context.ADSLSellerAgentUsers, r => r.Requestpayment.UserID, u => u.ID, (r, u) => new { All = r, ADSLSellerAgentUser = u })
                    // .SelectMany(u => u.ADSLSellerAgentUser.DefaultIfEmpty(), (r, u) => new { All = r.All, ADSLSellerAgentUser = u })
                    //.GroupJoin(context.ADSLCustomerGroups, m => m.All.Request.ADSLRequest.ADSLService.GroupID, g => g.ID, (m, g) => new { ALLM = m, ADSLCustomerGroup = g })
                    //.SelectMany(g => g.ADSLCustomerGroup.DefaultIfEmpty(), (a, g) => new {ALLM=a.ALLM, ADSLCustomerGroup=g })
                    .Where(t =>
                       (cityIDs.Count == 0 || cityIDs.Contains(t.All.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains(t.All.Request.CenterID))
                    && (bandWidthIDs.Count == 0 || bandWidthIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.ADSLServiceBandWidth.ID))
                    && (!fromDate.HasValue || fromDate <= t.All.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.All.Request.EndDate)
                    && (t.All.Request.RequestTypeID == (byte)DB.RequestType.ADSL)
                    && (t.All.Request.EndDate != null)
                           //&& (t.All.Requestpayment.PaymentDate != null || t.All.Requestpayment.PaymentType == (byte)DB.PaymentType.Instalment)
                    && (!FrompaymentDate.HasValue || FrompaymentDate <= t.All.Requestpayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.All.Requestpayment.PaymentDate)
                    && (t.All.Requestpayment.BaseCostID == 107)
                    && (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ADSLSellerAgentUser.SellerAgentID))
                    && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ADSLSellerAgentUser.ID))
                           //&& (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.ALLM.All.Requestpayment.UserID))
                    && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.ID))
                    && (groupIDs.Count == 0 || groupIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.GroupID))
                    && (TypeIDs.Count == 0 || TypeIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.TypeID))
                    && (trafficIDs.Count == 0 || trafficIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.ADSLServiceTraffic.ID))
                    && (durationIDs.Count == 0 || trafficIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.ADSLServiceDuration.ID))
                    && (preOrPostPaid.Count == 0 || preOrPostPaid.Contains((int)t.All.Requestpayment.PaymentType))
                    && (ADSLCustomerGroupIDs.Count == 0 || ADSLCustomerGroupIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID)))

                    .Select(t => new ADSLServiceInfo
                    {
                        TelephoneNo = t.All.Request.TelephoneNo.ToString(),
                        CustomerName = t.All.Request.ADSLRequest.Customer.FirstNameOrTitle + " " + t.All.Request.ADSLRequest.Customer.LastName,
                        CenterName = t.All.Request.ADSLRequest.Request.Center.CenterName,
                        RanjePrice = (t.All.Requestpayment.AmountSum).ToString(),
                        CenterID = t.All.Request.ADSLRequest.Request.CenterID.ToString(),
                        CenterCode = t.All.Request.ADSLRequest.Request.Center.CenterCode.ToString(),
                        paymentDate = Date.GetPersianDate(t.All.Requestpayment.PaymentDate, Date.DateStringType.Short),
                        Title = t.All.Request.ADSLRequest.ADSLService.Title,
                        Tax = t.All.Requestpayment.Tax.ToString()

                    }).ToList();
            }
        }

        public static List<ADSLServiceInfo> GetADSLTrafficSaleInfo(List<int> cityIDs, List<int> centerIDs, List<int> TrafficIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLSellTraffics.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLSellTraffic = a, RequestPayment = p })
                    .Where(t =>
                   (cityIDs.Count == 0 || cityIDs.Contains(t.ADSLSellTraffic.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains(t.ADSLSellTraffic.Request.CenterID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLSellTraffic.ADSLService.TrafficID))
                    && (!fromDate.HasValue || fromDate <= t.ADSLSellTraffic.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ADSLSellTraffic.Request.EndDate)
                       //&& (t.ADSLSellTraffic.Request.EndDate != null)
                       //&& (t.ADSLSellTraffic.ADSLService.TypeID == 2)
                    && (t.RequestPayment.BaseCostID == 105)
                    && (t.RequestPayment.PaymentDate != null || t.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Select(t => new ADSLServiceInfo
                    {
                        TelephoneNo = t.ADSLSellTraffic.Request.TelephoneNo.ToString(),
                        CustomerName = t.ADSLSellTraffic.Request.Customer.FirstNameOrTitle + " " + t.ADSLSellTraffic.Request.Customer.LastName,
                        CenterName = t.ADSLSellTraffic.Request.Center.CenterName,
                        BillID = t.RequestPayment.BillID.ToString(),
                        PaymentID = t.RequestPayment.PaymentID,
                        Title = t.ADSLSellTraffic.ADSLService.ADSLServiceTraffic.Title,
                        PriceSum = (t.RequestPayment.AmountSum).ToString(),
                        Tax = ((int)(t.RequestPayment.AmountSum * t.RequestPayment.Tax * 0.01)).ToString(),
                        TotalProceeds = ((int)((t.RequestPayment.AmountSum * t.RequestPayment.Tax * 0.01) + (t.RequestPayment.AmountSum))).ToString(),
                        CenterID = t.ADSLSellTraffic.Request.CenterID.ToString(),
                        IsPaid = t.RequestPayment.IsPaid,
                        CenterCode = t.ADSLSellTraffic.Request.Center.CenterCode.ToString()
                    }).ToList();
            }
        }

        public static List<ADSLServiceInfo> GetADSLRequestTrafficSaleInfo(List<int> cityIDs, List<int> centerIDs, List<int> TrafficIDs, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLRequest = a, RequestPayment = p })
                    .Join(context.ADSLServices, a => a.ADSLRequest.AdditionalServiceID, s => s.ID, (a, s) => new { ALL = a, ADSlServiceAdditional = s })
                    .Where(t =>
                   (cityIDs.Count == 0 || cityIDs.Contains(t.ALL.ADSLRequest.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains(t.ALL.ADSLRequest.Request.CenterID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSlServiceAdditional.TrafficID))
                    && (!fromDate.HasValue || fromDate <= t.ALL.ADSLRequest.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ALL.ADSLRequest.Request.EndDate)
                       //&& (t.ALL.ADSLRequest.Request.EndDate != null)
                    && (t.ALL.ADSLRequest.AdditionalServiceID != null)
                    && (t.ALL.RequestPayment.BaseCostID == 46)
                    && (t.ALL.RequestPayment.PaymentDate != null || t.ALL.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Select(t => new ADSLServiceInfo
                    {
                        TelephoneNo = t.ALL.ADSLRequest.Request.TelephoneNo.ToString(),
                        CustomerName = t.ALL.ADSLRequest.Request.Customer.FirstNameOrTitle + " " + t.ALL.ADSLRequest.Request.Customer.LastName,
                        CenterName = t.ALL.ADSLRequest.Request.Center.CenterName,
                        BillID = t.ALL.RequestPayment.BillID.ToString(),
                        PaymentID = t.ALL.RequestPayment.PaymentID,
                        Title = t.ADSlServiceAdditional.ADSLServiceTraffic.Title,
                        PriceSum = (t.ALL.RequestPayment.AmountSum).ToString(),
                        Tax = ((int)(t.ALL.RequestPayment.AmountSum * t.ALL.RequestPayment.Tax * 0.01)).ToString(),
                        TotalProceeds = ((int)((t.ALL.RequestPayment.AmountSum * t.ALL.RequestPayment.Tax * 0.01) + (t.ALL.RequestPayment.AmountSum))).ToString(),
                        CenterID = t.ALL.ADSLRequest.Request.CenterID.ToString(),
                        IsPaid = t.ALL.RequestPayment.IsPaid,
                        CenterCode = t.ALL.ADSLRequest.Request.Center.CenterCode.ToString()
                    }).ToList();
            }
        }
        //public static List<ADSLRequestInfo> GetADSLSellerAgentUsersServiceSaleAmount(List<int> ADSLSellerAgentIDs, DateTime? fromDate,
        //                                                                        DateTime? toDate, List<int> cityIDs, List<int> centerIDs,
        //                                                                        List<int> serviceIDs, List<int> groupIDs, List<int> TypeIDs,
        //                                                                        List<int> bandWidthIDs, List<int> trafficIDs, List<int> durationIDs,
        //                                                                        List<int> saleWays, bool? hasModem, int? preOrPostPaid
        //                                                                        , List<int> ADSLSellerAgentUserIDs, List<int> ADSLCustomerGroupIDs)
        //{
        //    using (MainDataContext context = new MainDataContext())
        //    {
        //        return context.ADSLRequests.Join(context.ADSLSellerAgentUsers, r => r.ADSLSellerAgentID, u => u.SellerAgentID, (r, u) => new { ADSLRequest = r, ADSLSellerAgentUser = u })
        //            .Where(t =>
        //            //(t.Request.RequestTypeID == 35)
        //            (cityIDs.Count == 0 || cityIDs.Contains((int)t.ADSLRequest.Request.Center.Region.CityID))
        //            &&(centerIDs.Count==0 || centerIDs.Contains((int)t.ADSLRequest.Request.CenterID))
        //            && (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ADSLSellerAgentUser.SellerAgentID))
        //            && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ADSLSellerAgentUser.ID))
        //            && (!fromDate.HasValue || fromDate <= t.ADSLRequest.Request.EndDate)
        //            && (!toDate.HasValue || toDate >= t.ADSLRequest.Request.EndDate)
        //            && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.ADSLRequest.Request.CreatorUserID))
        //            &&(serviceIDs.Count==0 || serviceIDs.Contains((int)t.ADSLRequest.Request.ADSLRequest.ADSLService.ID))
        //            &&(groupIDs.Count==0 || groupIDs.Contains((int)t.ADSLRequest.Request.ADSLRequest.ADSLService.ADSLServiceGroup.ID))
        //            &&(TypeIDs.Count==0 || TypeIDs.Contains((int)t.ADSLRequest.Request.ADSLRequest.ADSLService.TypeID))
        //            &&(bandWidthIDs.Count==0 || bandWidthIDs.Contains((int)t.ADSLRequest.Request.ADSLRequest.ADSLService.ADSLServiceBandWidth.ID))
        //            &&(trafficIDs.Count==0 || trafficIDs.Contains((int)t.ADSLRequest.Request.ADSLRequest.ADSLService.ADSLServiceTraffic.ID))
        //            &&(durationIDs.Count==0 || trafficIDs.Contains((int)t.ADSLRequest.Request.ADSLRequest.ADSLService.ADSLServiceDuration.ID))
        //            &&(!hasModem.HasValue || t.ADSLRequest.Request.ADSLRequest.NeedModem==hasModem)
        //            &&(!preOrPostPaid.HasValue || preOrPostPaid==(int)t.ADSLRequest.Request.RequestPaymentTypeID)
        //            //&&(preOrPostPaid.Count==0 || preOrPostPaid.Contains((int)t.Request.RequestPaymentTypeID))
        //            &&(ADSLCustomerGroupIDs.Count==0 || ADSLCustomerGroupIDs.Contains((int)t.ADSLRequest.Request.ADSLRequest.ADSLCustomerGroup.ID)))
        //            .GroupBy(t => new
        //            {
        //                ADSLSellerUser=t.ADSLSellerAgentUser.User.FirstName+" "+t.ADSLSellerAgentUser.User.LastName,
        //                ADSLSellerAgent = t.ADSLRequest.ADSLSellerAgent.Title,

        //            })
        //            .Select(t => new ADSLRequestInfo
        //            {
        //                ADSLSellerAgentUSer=t.Key.ADSLSellerUser,
        //                ServiceSaleAmount = t.Sum(x => x.ADSLRequest.ADSLService.PriceSum),
        //                ADSLSellerAgent = t.Key.ADSLSellerAgent
        //            }).Distinct().ToList();

        //    }
        //}

        public static List<ADSLRequestInfo> GetADSLSellerAgentUsersServiceSaleAmount(List<int> ADSLSellerAgentIDs, DateTime? fromDate,
                                                                               DateTime? toDate, List<int> cityIDs, List<int> centerIDs,
                                                                               List<int> serviceIDs, List<int> groupIDs, List<int> TypeIDs,
                                                                               List<int> bandWidthIDs, List<int> trafficIDs, List<int> durationIDs,
                                                                               List<int> saleWays, bool? hasModem, int? preOrPostPaid
                                                                               , List<int> ADSLSellerAgentUserIDs, List<int> ADSLCustomerGroupIDs,
                                                                               DateTime? FromPaymentDate, DateTime? ToPaymentDate, DateTime? FromInsertDate, DateTime? ToInsertDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Join(context.RequestPayments, t => t.ID, p => p.RequestID, (t, p) => new { Request = t, Requestpayment = p })
                    .Join(context.ADSLSellerAgentUsers, r => r.Requestpayment.UserID, u => u.ID, (r, u) => new { All = r, ADSLSellerAgentUser = u })
                    //.Join(context.ADSLCustomerGroups, m => m.All.Request.ADSLRequest.ADSLService.GroupID, g => g.ID, (m, g) => new { ALLM = m, ADSLCustomerGroup = g })
                    .Where(t =>
                     (t.All.Request.RequestTypeID == (byte)DB.RequestType.ADSL)
                    && (cityIDs.Count == 0 || cityIDs.Contains((int)t.All.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains((int)t.All.Request.CenterID))
                    && (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ADSLSellerAgentUser.SellerAgentID))
                    && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ADSLSellerAgentUser.ID))
                    && (!fromDate.HasValue || fromDate <= t.All.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.All.Request.EndDate)
                    && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.All.Request.CreatorUserID))
                    && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.ID))
                    && (groupIDs.Count == 0 || groupIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.GroupID))
                    && (TypeIDs.Count == 0 || TypeIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.TypeID))
                    && (bandWidthIDs.Count == 0 || bandWidthIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.ADSLServiceBandWidth.ID))
                    && (trafficIDs.Count == 0 || trafficIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.ADSLServiceTraffic.ID))
                    && (durationIDs.Count == 0 || trafficIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.ADSLServiceDuration.ID))
                    && (!hasModem.HasValue || t.All.Request.ADSLRequest.NeedModem == hasModem)
                    && (!preOrPostPaid.HasValue || preOrPostPaid == (int)t.All.Request.ADSLRequest.ADSLService.PaymentTypeID)
                         //&&(preOrPostPaid.Count==0 || preOrPostPaid.Contains((int)t.Request.RequestPaymentTypeID))
                    && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.All.Requestpayment.UserID))
                    && (ADSLCustomerGroupIDs.Count == 0 || ADSLCustomerGroupIDs.Contains((int)t.All.Request.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.All.Requestpayment.UserID))
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.All.Requestpayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.All.Requestpayment.PaymentDate)
                    && (!FromInsertDate.HasValue || FromInsertDate <= t.All.Request.InsertDate)
                    && (!ToInsertDate.HasValue || ToInsertDate >= t.All.Request.InsertDate)
                    && (t.All.Requestpayment.PaymentDate != null || t.All.Requestpayment.PaymentType == (byte)DB.PaymentType.Instalment))
                    .GroupBy(t => new
                    {
                        ADSLSellerUser = t.ADSLSellerAgentUser.User.FirstName + " " + t.ADSLSellerAgentUser.User.LastName,
                        ADSLSellerAgent = t.ADSLSellerAgentUser.ADSLSellerAgent.Title,

                    })
                    .Select(t => new ADSLRequestInfo
                    {
                        ADSLSellerAgentUSer = t.Key.ADSLSellerUser,
                        ServiceSaleAmount = t.Sum(x => x.All.Request.ADSLRequest.ADSLService.PriceSum),
                        ADSLSellerAgent = t.Key.ADSLSellerAgent
                    }).Distinct().ToList();

            }
        }

        public static List<ADSLRequestInfo> getADSLSEllerAGnetUserAdditionalServiceSaleAmount(List<int> ADSLSellerAgentIDs, DateTime? fromDate,
                                                                               DateTime? toDate, List<int> cityIDs, List<int> centerIDs,
                                                                               List<int> serviceIDs, List<int> groupIDs, List<int> TypeIDs,
                                                                               List<int> bandWidthIDs, List<int> trafficIDs, List<int> durationIDs,
                                                                               List<int> saleWays, bool? hasModem, int? preOrPostPaid
                                                                               , List<int> ADSLSellerAgentUserIDs, List<int> ADSLCustomerGroupIDs,
                                                                                DateTime? FromPaymentDate, DateTime? ToPaymentDate, DateTime? FromInsertDate, DateTime? ToInsertDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Join(context.RequestPayments, t => t.ID, p => p.RequestID, (t, p) => new { Request = t, Requestpayment = p })
                    .Join(context.ADSLSellerAgentUsers, r => r.Requestpayment.UserID, u => u.ID, (r, u) => new { All = r, ADSLSellerAgentUser = u })
                    //.Join(context.ADSLCustomerGroups, m => m.All.Request.ADSLRequest.ADSLService.GroupID, g => g.ID, (m, g) => new { ALLM = m, ADSLCustomerGroup = g })
                     .Join(context.ADSLServices, all => all.All.Request.ADSLRequest.AdditionalServiceID, s => s.ID, (all, s) => new { Join3 = all, ADSLService = s })
                     .Where(t =>
                      (t.Join3.All.Request.RequestTypeID == (byte)DB.RequestType.ADSL)
                     && (cityIDs.Count == 0 || cityIDs.Contains((int)t.Join3.All.Request.Center.Region.CityID))
                     && (centerIDs.Count == 0 || centerIDs.Contains((int)t.Join3.All.Request.CenterID))
                     && (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.Join3.ADSLSellerAgentUser.SellerAgentID))
                     && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.Join3.ADSLSellerAgentUser.ID))
                     && (!fromDate.HasValue || fromDate <= t.Join3.All.Request.EndDate)
                     && (!toDate.HasValue || toDate >= t.Join3.All.Request.EndDate)
                     && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.Join3.All.Request.CreatorUserID))
                     && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.ADSLService.ID))
                     && (groupIDs.Count == 0 || groupIDs.Contains((int)t.Join3.All.Request.ADSLRequest.ADSLService.GroupID))
                     && (TypeIDs.Count == 0 || TypeIDs.Contains((int)t.Join3.All.Request.ADSLRequest.ADSLService.TypeID))
                     && (bandWidthIDs.Count == 0 || bandWidthIDs.Contains((int)t.Join3.All.Request.ADSLRequest.ADSLService.ADSLServiceBandWidth.ID))
                     && (trafficIDs.Count == 0 || trafficIDs.Contains((int)t.Join3.All.Request.ADSLRequest.ADSLService.ADSLServiceTraffic.ID))
                     && (durationIDs.Count == 0 || trafficIDs.Contains((int)t.Join3.All.Request.ADSLRequest.ADSLService.ADSLServiceDuration.ID))
                     && (!hasModem.HasValue || t.Join3.All.Request.ADSLRequest.NeedModem == hasModem)
                     && (!preOrPostPaid.HasValue || preOrPostPaid == (int)t.Join3.All.Request.ADSLRequest.ADSLService.PaymentTypeID)
                     && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.Join3.All.Requestpayment.UserID))
                     && (ADSLCustomerGroupIDs.Count == 0 || ADSLCustomerGroupIDs.Contains((int)t.Join3.All.Request.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                     && (t.Join3.All.Request.ADSLRequest.AdditionalServiceID != null)
                     && (!FromPaymentDate.HasValue || FromPaymentDate <= t.Join3.All.Requestpayment.PaymentDate)
                     && (!ToPaymentDate.HasValue || ToPaymentDate >= t.Join3.All.Requestpayment.PaymentDate)
                     && (!FromInsertDate.HasValue || FromInsertDate <= t.Join3.All.Request.InsertDate)
                     && (!ToInsertDate.HasValue || ToInsertDate >= t.Join3.All.Request.InsertDate)
                     && (t.Join3.All.Requestpayment.PaymentDate != null || t.Join3.All.Requestpayment.PaymentType == (byte)DB.PaymentType.Instalment))
                     .GroupBy(t => new
                     {
                         ADSLSellerUser = t.Join3.ADSLSellerAgentUser.User.FirstName + " " + t.Join3.ADSLSellerAgentUser.User.LastName,
                         ADSLSellerAgent = t.Join3.ADSLSellerAgentUser.ADSLSellerAgent.Title,

                     })
                     .Select(t => new ADSLRequestInfo
                     {
                         ADSLSellerAgentUSer = t.Key.ADSLSellerUser,
                         ServiceSaleAmount = t.Sum(x => x.Join3.All.Request.ADSLRequest.ADSLService.PriceSum),
                         ADSLSellerAgent = t.Key.ADSLSellerAgent
                     }).Distinct().ToList();
            }
        }

        public static List<ADSLRequestInfo> GetADSLSellerAgentUsersTrafficSaleAmount(List<int> ADSLSellerAgentIDs, DateTime? fromDate,
                                                                                DateTime? toDate, List<int> cityIDs, List<int> centerIDs,
                                                                                List<int> serviceIDs, List<int> groupIDs, List<int> TypeIDs,
                                                                                List<int> bandWidthIDs, List<int> trafficIDs, List<int> durationIDs,
                                                                                List<int> saleWays, List<int> ADSLSellerAgentUserIDs, List<int> ADSLCustomerGroupIDs,
                                                                                DateTime? FromPaymentDate, DateTime? ToPaymentDate, DateTime? FromInsertDate, DateTime? ToInsertDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Join(context.RequestPayments, a => a.ID, r => r.RequestID, (a, r) => new { Request = a, RequestPayment = r })
                    .Join(context.ADSLSellerAgentUsers, r => r.RequestPayment.UserID, u => u.ID, (r, u) => new { ALLJoin = r, ADSLSellerAgentUser = u })
                    //.Join(context.ADSLCustomerGroups, m => m.ALLJoin.Request.ADSLSellTraffic.ADSLService.GroupID, g => g.ID, (m, g) => new { ALL = m, ADSLCustomerGroup = g })

                     .Where(t =>
                    (t.ALLJoin.Request.RequestTypeID == (byte)DB.RequestType.ADSLSellTraffic)
                    && (cityIDs.Count == 0 || cityIDs.Contains((int)t.ALLJoin.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains((int)t.ALLJoin.Request.CenterID))
                    && (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ADSLSellerAgentUser.SellerAgentID))
                    && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ADSLSellerAgentUser.ID))
                    && (!fromDate.HasValue || fromDate <= t.ALLJoin.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ALLJoin.Request.EndDate)
                    && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.ALLJoin.Request.CreatorUserID))
                    && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.ALLJoin.Request.ADSLSellTraffic.ADSLService.ID))
                    && (groupIDs.Count == 0 || groupIDs.Contains((int)t.ALLJoin.Request.ADSLSellTraffic.ADSLService.GroupID))
                    && (TypeIDs.Count == 0 || TypeIDs.Contains((int)t.ALLJoin.Request.ADSLSellTraffic.ADSLService.TypeID))
                    && (bandWidthIDs.Count == 0 || bandWidthIDs.Contains((int)t.ALLJoin.Request.ADSLSellTraffic.ADSLService.ADSLServiceBandWidth.ID))
                    && (trafficIDs.Count == 0 || trafficIDs.Contains((int)t.ALLJoin.Request.ADSLSellTraffic.ADSLService.ADSLServiceTraffic.ID))
                    && (durationIDs.Count == 0 || trafficIDs.Contains((int)t.ALLJoin.Request.ADSLSellTraffic.ADSLService.ADSLServiceDuration.ID))
                     && (ADSLCustomerGroupIDs.Count == 0 || ADSLCustomerGroupIDs.Contains((int)t.ALLJoin.Request.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                     && (!FromPaymentDate.HasValue || FromPaymentDate <= t.ALLJoin.RequestPayment.PaymentDate)
                     && (!ToPaymentDate.HasValue || ToPaymentDate >= t.ALLJoin.RequestPayment.PaymentDate)
                     && (!FromInsertDate.HasValue || FromInsertDate <= t.ALLJoin.Request.InsertDate)
                     && (!ToInsertDate.HasValue || ToInsertDate >= t.ALLJoin.Request.InsertDate)
                     && (t.ALLJoin.RequestPayment.PaymentDate != null || t.ALLJoin.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)
                     && (saleWays.Count == 0 || saleWays.Contains((int)t.ALLJoin.Request.ADSLSellTraffic.ChangeServiceType)))
                    //&& (preOrPostPaid.Count == 0 || preOrPostPaid.Contains((int)t.Request.RequestPaymentTypeID))
                    .GroupBy(t => new
                    {
                        ADSLSellerUser = t.ADSLSellerAgentUser.User.FirstName + " " + t.ADSLSellerAgentUser.User.LastName,
                        ADSLSellerAgnet = t.ADSLSellerAgentUser.ADSLSellerAgent.Title
                    })
                    .Select(t => new ADSLRequestInfo
                    {
                        ADSLSellerAgentUSer = t.Key.ADSLSellerUser,
                        TrafficSaleAmount = t.Sum(x => x.ALLJoin.Request.ADSLSellTraffic.ADSLService.PriceSum),
                        ADSLSellerAgent = t.Key.ADSLSellerAgnet
                    }).Distinct().ToList();

            }
        }

        public static List<ADSLRequestInfo> GetADSLSellerAgentUsersADSLChangeServiceSaleAmount(List<int> ADSLSellerAgentIDs, DateTime? fromDate,
                                                                                DateTime? toDate, List<int> cityIDs, List<int> centerIDs,
                                                                                List<int> serviceIDs, List<int> groupIDs, List<int> TypeIDs,
                                                                                List<int> bandWidthIDs, List<int> trafficIDs, List<int> durationIDs,
                                                                                List<int> saleWays, List<int> ADSLSellerAgentUserIDs, List<int> ADSLCustomerGroupIDs,
                                                                                DateTime? FromPaymentDate, DateTime? ToPaymentDate, DateTime? FromInsertDate, DateTime? ToInsertDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Join(context.RequestPayments, a => a.ID, r => r.RequestID, (a, r) => new { Request = a, RequestPayment = r })
                        .Join(context.ADSLSellerAgentUsers, r => r.RequestPayment.UserID, u => u.ID, (r, u) => new { ALLJoin = r, ADSLSellerAgentUser = u })
                    //.Join(context.ADSLCustomerGroups, m => m.ALLJoin.Request.ADSLChangeService.ADSLService.GroupID, g => g.ID, (m, g) => new { ALL = m, ADSLCustomerGroup = g })

                        .Where(t =>
                       (t.ALLJoin.Request.RequestTypeID == (byte)DB.RequestType.ADSLChangeService)
                       && (cityIDs.Count == 0 || cityIDs.Contains((int)t.ALLJoin.Request.Center.Region.CityID))
                       && (centerIDs.Count == 0 || centerIDs.Contains((int)t.ALLJoin.Request.CenterID))
                       && (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ADSLSellerAgentUser.SellerAgentID))
                       && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ADSLSellerAgentUser.ID))
                       && (!fromDate.HasValue || fromDate <= t.ALLJoin.Request.EndDate)
                       && (!toDate.HasValue || toDate >= t.ALLJoin.Request.EndDate)
                       && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.ALLJoin.Request.CreatorUserID))
                       && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.ALLJoin.Request.ADSLChangeService.ADSLService.ID))
                       && (groupIDs.Count == 0 || groupIDs.Contains((int)t.ALLJoin.Request.ADSLChangeService.ADSLService.GroupID))
                       && (TypeIDs.Count == 0 || TypeIDs.Contains((int)t.ALLJoin.Request.ADSLChangeService.ADSLService.TypeID))
                       && (bandWidthIDs.Count == 0 || bandWidthIDs.Contains((int)t.ALLJoin.Request.ADSLChangeService.ADSLService.ADSLServiceBandWidth.ID))
                       && (trafficIDs.Count == 0 || trafficIDs.Contains((int)t.ALLJoin.Request.ADSLChangeService.ADSLService.ADSLServiceTraffic.ID))
                       && (durationIDs.Count == 0 || trafficIDs.Contains((int)t.ALLJoin.Request.ADSLChangeService.ADSLService.ADSLServiceDuration.ID))
                        && (ADSLCustomerGroupIDs.Count == 0 || ADSLCustomerGroupIDs.Contains((int)t.ALLJoin.Request.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                        && (!FromPaymentDate.HasValue || FromPaymentDate <= t.ALLJoin.RequestPayment.PaymentDate)
                        && (!ToPaymentDate.HasValue || ToPaymentDate >= t.ALLJoin.RequestPayment.PaymentDate)
                        && (!FromInsertDate.HasValue || FromInsertDate <= t.ALLJoin.Request.InsertDate)
                        && (!ToInsertDate.HasValue || ToInsertDate >= t.ALLJoin.Request.InsertDate)
                        && (t.ALLJoin.RequestPayment.PaymentDate != null || t.ALLJoin.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)
                        && (saleWays.Count == 0 || saleWays.Contains((int)t.ALLJoin.Request.ADSLChangeService.ChangeServiceType)))
                    //&& (preOrPostPaid.Count == 0 || preOrPostPaid.Contains((int)t.Request.RequestPaymentTypeID))
                       .GroupBy(t => new
                       {
                           ADSLSellerUser = t.ADSLSellerAgentUser.User.FirstName + " " + t.ADSLSellerAgentUser.User.LastName,
                           ADSLSellerAgnet = t.ADSLSellerAgentUser.ADSLSellerAgent.Title
                       })
                       .Select(t => new ADSLRequestInfo
                       {
                           ADSLSellerAgentUSer = t.Key.ADSLSellerUser,
                           ServiceSaleAmount = t.Sum(x => x.ALLJoin.Request.ADSLChangeService.ADSLService.PriceSum),
                           ADSLSellerAgent = t.Key.ADSLSellerAgnet
                       }).Distinct().ToList();

            }
        }

        public static List<ADSLTelephoneExpirationeDate> GetADSLPassedExpirationDateAndLastServiceTelephoneNoInfo(List<int> cityIDs, List<int> centerIDs,
                                                                                                            long TelNo, DateTime? fromDate, DateTime? toDate,
                                                                                                            DateTime? PassedDays, bool? HasPort)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLs.Where(t =>
                    (cityIDs.Count == 0 || cityIDs.Contains((int)t.Telephone.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains((int)t.Telephone.CenterID))
                    && (TelNo == -1 || TelNo == t.TelephoneNo)
                    && (!fromDate.HasValue || fromDate <= t.ExpDate)
                    && (!toDate.HasValue || toDate >= t.ExpDate)
                        //&& (t.ExpDate < DB.GetServerDate().Date)
                    && (!PassedDays.HasValue || (t.ExpDate.Value.Date) <= PassedDays)
                    && (!HasPort.HasValue || ((HasPort == false) ? (t.ADSLPortID == null) : (t.ADSLPortID != null)))).OrderBy(t => t.ExpDate)
                        .Select(t => new ADSLTelephoneExpirationeDate
                    {
                        CityName = t.Telephone.Center.Region.City.Name,
                        CenterName = t.Telephone.Center.CenterName,
                        ExpirationDate = Date.GetPersianDate(t.ExpDate, Date.DateStringType.Short),
                        TelephoneNo = t.TelephoneNo.ToString(),
                        TheLastServiceName = t.ADSLService.Title,
                        ServiceStartDate = Date.GetPersianDate(t.InstallDate, Date.DateStringType.Short),
                        ServiceCost = t.ADSLService.PriceSum.ToString(),
                        PortNo = t.ADSLPort.Bucht.VerticalMDFRow.VerticalRowNo.ToString() + "-" + (t.ADSLPort.Bucht.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString())
                                  + "-" + t.ADSLPort.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Number.ToString(),
                        NumberOfPassedDays = (DB.GetServerDate().Date.AddDays(1).Subtract(t.ExpDate.Value.Date).Days),

                    }).ToList();
            }
        }

        public static List<ADSLTelephoneExpirationeDate> GetADSLRemainExpirationDateAndLastServiceTelephoneNoInfo(List<int> cityIDs, List<int> centerIDs,
                                                                                                            long TelNo, DateTime? fromDate, DateTime? toDate,
                                                                                                            DateTime? RemainDays, bool? HasPort)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLs.Where(t =>
                    (cityIDs.Count == 0 || cityIDs.Contains((int)t.Telephone.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains((int)t.Telephone.CenterID))
                    && (TelNo == -1 || TelNo == t.TelephoneNo)
                    && (!fromDate.HasValue || fromDate <= t.ExpDate)
                    && (!toDate.HasValue || toDate >= t.ExpDate)
                    && (t.ExpDate > DB.GetServerDate().Date)
                   && (!RemainDays.HasValue || (t.ExpDate.Value.Date) == RemainDays)
                    && (!HasPort.HasValue || ((HasPort == false) ? (t.ADSLPortID == null) : (t.ADSLPortID != null))))
                        .Select(t => new ADSLTelephoneExpirationeDate
                        {
                            CityName = t.Telephone.Center.Region.City.Name,
                            CenterName = t.Telephone.Center.CenterName,
                            ExpirationDate = Date.GetPersianDate(t.ExpDate, Date.DateStringType.Short),
                            TelephoneNo = t.TelephoneNo.ToString(),
                            TheLastServiceName = t.ADSLService.Title,
                            ServiceStartDate = Date.GetPersianDate(t.InstallDate, Date.DateStringType.Short),
                            ServiceCost = t.ADSLService.PriceSum.ToString(),
                            PortNo = t.ADSLPort.Bucht.VerticalMDFRow.VerticalRowNo.ToString() + "-" + (t.ADSLPort.Bucht.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString())
                                      + "-" + t.ADSLPort.Bucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Number.ToString(),
                            NumberOfRemainDays = (t.ExpDate.Value.Date.Subtract(DB.GetServerDate().Date.AddDays(0 - 1)).Days),

                        }).ToList();
            }
        }

        public static List<ADSLSellerAgentCashIncomeInfo> GetADSlSellerAgentADSLRequestCashInfo(List<int> CityIds, List<int> CenterID
                                                                                                , List<int> ADSLSellerAgnetIDs, List<int> ADSLSellerAGnetUserIDs,
                                                                                                DateTime? fromDate, DateTime? toDate, bool? ISAccepted,
                                                                                                DateTime? FromPaymentDate, DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { Request = a, RequestPayment = p })
                    .Join(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, u => u.ID, (a, u) => new { RequestSeller = a, ADSLSellerAgnetUser = u })

                    .Where(t =>
                      (CityIds.Count == 0 || CityIds.Contains(t.RequestSeller.Request.Center.Region.CityID))
                      && (CenterID.Count == 0 || CenterID.Contains(t.RequestSeller.Request.CenterID))
                      && (ADSLSellerAgnetIDs.Count == 0 || ADSLSellerAgnetIDs.Contains((int)t.ADSLSellerAgnetUser.SellerAgentID))
                      && (ADSLSellerAGnetUserIDs.Count == 0 || ADSLSellerAGnetUserIDs.Contains((int)t.ADSLSellerAgnetUser.ID))
                      && (!fromDate.HasValue || fromDate <= t.RequestSeller.Request.EndDate)
                      && (!toDate.HasValue || toDate >= t.RequestSeller.Request.EndDate)
                          //&& (t.RequestSeller.Request.EndDate != null)
                      && (t.RequestSeller.Request.RequestTypeID == (byte)DB.RequestType.ADSL)
                      && (t.RequestSeller.RequestPayment.PaymentType == (byte)DB.PaymentType.Cash)
                      && (!ISAccepted.HasValue || t.RequestSeller.RequestPayment.IsAccepted == ISAccepted)
                      && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestSeller.RequestPayment.PaymentDate)
                      && (!ToPaymentDate.HasValue || ToPaymentDate >= t.RequestSeller.RequestPayment.PaymentDate)
                       && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.RequestSeller.RequestPayment.UserID))
                       && (t.RequestSeller.RequestPayment.PaymentDate != null || t.RequestSeller.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)
                       && (t.RequestSeller.RequestPayment.BaseCostID == 44))
                      .GroupBy(t => new
                      {
                          ADSLSellerAGnetUser = t.ADSLSellerAgnetUser.User.FirstName + " " + t.ADSLSellerAgnetUser.User.LastName,
                          ADSLSellerAGnet = t.ADSLSellerAgnetUser.ADSLSellerAgent.Title

                      }).Select(t => new ADSLSellerAgentCashIncomeInfo
                      {
                          ADSLRequestCost = t.Sum(x => x.RequestSeller.RequestPayment.AmountSum),
                          ADSLSEllerAgnetUserName = t.Key.ADSLSellerAGnetUser,
                          ADSlSellerAgnetName = t.Key.ADSLSellerAGnet

                      }).ToList();

            }
        }

        public static List<ADSLSellerAgentCashIncomeInfo> GetADSlSellerAgentADSLChangeServiceCashInfo(List<int> CityIds, List<int> CenterID
                                                                                               , List<int> ADSLSellerAgnetIDs, List<int> ADSLSellerAGnetUserIDs,
                                                                                               DateTime? fromDate, DateTime? toDate, bool? ISAccepted,
                                                                                                DateTime? FromPaymentDate, DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLChangeService = a, RequestPayment = p })
                    .Join(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, u => u.ID, (a, u) => new { RequestSeller = a, ADSLSellerAgnetUser = u })

                    .Where(t =>
                      (CityIds.Count == 0 || CityIds.Contains(t.RequestSeller.ADSLChangeService.Center.Region.CityID))
                      && (CenterID.Count == 0 || CenterID.Contains(t.RequestSeller.ADSLChangeService.CenterID))
                      && (ADSLSellerAgnetIDs.Count == 0 || ADSLSellerAgnetIDs.Contains((int)t.ADSLSellerAgnetUser.SellerAgentID))
                      && (ADSLSellerAGnetUserIDs.Count == 0 || ADSLSellerAGnetUserIDs.Contains((int)t.ADSLSellerAgnetUser.ID))
                      && (!fromDate.HasValue || fromDate <= t.RequestSeller.ADSLChangeService.EndDate)
                      && (!toDate.HasValue || toDate >= t.RequestSeller.ADSLChangeService.EndDate)
                          //&& (t.RequestSeller.ADSLChangeService.EndDate != null)
                      && (t.RequestSeller.ADSLChangeService.RequestTypeID == (byte)DB.RequestType.ADSLChangeService)
                      && (t.RequestSeller.RequestPayment.PaymentType == (byte)DB.PaymentType.Cash)
                      && (!ISAccepted.HasValue || t.RequestSeller.RequestPayment.IsAccepted == ISAccepted)
                       && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.RequestSeller.RequestPayment.UserID))
                      && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestSeller.RequestPayment.PaymentDate)
                      && (!ToPaymentDate.HasValue || ToPaymentDate >= t.RequestSeller.RequestPayment.PaymentDate)
                      && (t.RequestSeller.RequestPayment.PaymentDate != null || t.RequestSeller.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment))
                      .GroupBy(t => new
                      {
                          ADSLSellerAGnetUser = t.ADSLSellerAgnetUser.User.FirstName + " " + t.ADSLSellerAgnetUser.User.LastName,
                          ADSLSellerAgent = t.ADSLSellerAgnetUser.ADSLSellerAgent.Title,

                      }).Select(t => new ADSLSellerAgentCashIncomeInfo
                      {
                          ADSLChangeServiceCost = t.Sum(x => x.RequestSeller.RequestPayment.AmountSum),
                          ADSLSEllerAgnetUserName = t.Key.ADSLSellerAGnetUser,
                          ADSlSellerAgnetName = t.Key.ADSLSellerAgent

                      }).ToList();
            }
        }

        public static List<ADSLSellerAgentCashIncomeInfo> GetADSlSellerAgentADSLSellTrafficCashInfo(List<int> CityIds, List<int> CenterID
                                                                                            , List<int> ADSLSellerAgnetIDs, List<int> ADSLSellerAGnetUserIDs,
                                                                                            DateTime? fromDate, DateTime? toDate, bool? ISAccepted,
                                                                                            DateTime? FromPaymentDate, DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLSellTraffic = a, RequestPayment = p })
                    .Join(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, u => u.ID, (a, u) => new { RequestSeller = a, ADSLSellerAgnetUser = u })

                    .Where(t =>
                      (CityIds.Count == 0 || CityIds.Contains(t.RequestSeller.ADSLSellTraffic.Center.Region.CityID))
                      && (CenterID.Count == 0 || CenterID.Contains(t.RequestSeller.ADSLSellTraffic.CenterID))
                      && (ADSLSellerAgnetIDs.Count == 0 || ADSLSellerAgnetIDs.Contains((int)t.ADSLSellerAgnetUser.SellerAgentID))
                      && (ADSLSellerAGnetUserIDs.Count == 0 || ADSLSellerAGnetUserIDs.Contains((int)t.ADSLSellerAgnetUser.ID))
                      && (!fromDate.HasValue || fromDate <= t.RequestSeller.ADSLSellTraffic.EndDate)
                      && (!toDate.HasValue || toDate >= t.RequestSeller.ADSLSellTraffic.EndDate)
                          //&& (t.RequestSeller.ADSLSellTraffic.EndDate != null)
                      && ((t.RequestSeller.ADSLSellTraffic.RequestTypeID == (byte)DB.RequestType.ADSLSellTraffic) || (t.RequestSeller.ADSLSellTraffic.RequestTypeID == (byte)DB.RequestType.ADSL && t.RequestSeller.RequestPayment.BaseCostID == 46))
                      && (t.RequestSeller.RequestPayment.PaymentType == (byte)DB.PaymentType.Cash)
                      && (!ISAccepted.HasValue || t.RequestSeller.RequestPayment.IsAccepted == ISAccepted)
                      && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.RequestSeller.RequestPayment.UserID))
                      && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestSeller.RequestPayment.PaymentDate)
                      && (!ToPaymentDate.HasValue || ToPaymentDate >= t.RequestSeller.RequestPayment.PaymentDate)
                      && (t.RequestSeller.RequestPayment.PaymentDate != null || t.RequestSeller.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment))
                      .GroupBy(t => new
                      {
                          ADSLSellerAGnetUser = t.ADSLSellerAgnetUser.User.FirstName + " " + t.ADSLSellerAgnetUser.User.LastName,
                          ADSLSellerAgent = t.ADSLSellerAgnetUser.ADSLSellerAgent.Title,
                      })
                      .Select(t => new ADSLSellerAgentCashIncomeInfo
                      {
                          ADSLSellTrafficCost = t.Sum(x => x.RequestSeller.RequestPayment.AmountSum),
                          ADSLSEllerAgnetUserName = t.Key.ADSLSellerAGnetUser,
                          ADSlSellerAgnetName = t.Key.ADSLSellerAgent

                      }).ToList();
            }
        }

        public static List<ADSLSellerAgentCashIncomeInfo> GetADSlSellerAgentADSLChangeIPCashInfo(List<int> CityIds, List<int> CenterID
                                                                                            , List<int> ADSLSellerAgnetIDs, List<int> ADSLSellerAGnetUserIDs,
                                                                                            DateTime? fromDate, DateTime? toDate, bool? ISAccepted,
                                                                                            DateTime? FromPaymentDate, DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLChangeIPRequest = a, RequestPayment = p })
                    .Join(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, u => u.ID, (a, u) => new { RequestSeller = a, ADSLSellerAgnetUser = u })

                    .Where(t =>
                      (CityIds.Count == 0 || CityIds.Contains(t.RequestSeller.ADSLChangeIPRequest.Center.Region.CityID))
                      && (CenterID.Count == 0 || CenterID.Contains(t.RequestSeller.ADSLChangeIPRequest.CenterID))
                      && (ADSLSellerAgnetIDs.Count == 0 || ADSLSellerAgnetIDs.Contains((int)t.ADSLSellerAgnetUser.SellerAgentID))
                      && (ADSLSellerAGnetUserIDs.Count == 0 || ADSLSellerAGnetUserIDs.Contains((int)t.ADSLSellerAgnetUser.ID))
                      && (!fromDate.HasValue || fromDate <= t.RequestSeller.ADSLChangeIPRequest.EndDate)
                      && (!toDate.HasValue || toDate >= t.RequestSeller.ADSLChangeIPRequest.EndDate)
                          //&& (t.RequestSeller.ADSLChangeIPRequest.EndDate != null)
                      && ((t.RequestSeller.ADSLChangeIPRequest.RequestTypeID == (byte)DB.RequestType.ADSLChangeIP) || (t.RequestSeller.ADSLChangeIPRequest.RequestTypeID == (byte)DB.RequestType.ADSL && t.RequestSeller.RequestPayment.BaseCostID == 48))
                      && (t.RequestSeller.RequestPayment.PaymentType == (byte)DB.PaymentType.Cash)
                      && (!ISAccepted.HasValue || t.RequestSeller.RequestPayment.IsAccepted == ISAccepted)
                      && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.RequestSeller.RequestPayment.UserID))
                      && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestSeller.RequestPayment.PaymentDate)
                      && (!ToPaymentDate.HasValue || ToPaymentDate >= t.RequestSeller.RequestPayment.PaymentDate)
                      && (t.RequestSeller.RequestPayment.PaymentDate != null))
                      .GroupBy(t => new
                      {
                          ADSLSellerAGnetUser = t.ADSLSellerAgnetUser.User.FirstName + " " + t.ADSLSellerAgnetUser.User.LastName,
                          ADSLSellerAgent = t.ADSLSellerAgnetUser.ADSLSellerAgent.Title,
                      }).Select(t => new ADSLSellerAgentCashIncomeInfo
                      {
                          ADSLChangeIPCost = t.Sum(x => x.RequestSeller.RequestPayment.AmountSum),
                          ADSLSEllerAgnetUserName = t.Key.ADSLSellerAGnetUser,
                          ADSlSellerAgnetName = t.Key.ADSLSellerAgent

                      }).ToList();

            }
        }

        public static List<ADSLSellerAgentCashIncomeInfo> GetADSLSellerAgentCashSaleChangeNoInfo(List<int> CityIds, List<int> CenterID
                                                                                          , List<int> ADSLSellerAgnetIDs, List<int> ADSLSellerAGnetUserIDs,
                                                                                          DateTime? fromDate, DateTime? toDate, bool? ISAccepted,
                                                                                          DateTime? FromPaymentDate, DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLChangeIPRequest = a, RequestPayment = p })
                    .Join(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, u => u.ID, (a, u) => new { RequestSeller = a, ADSLSellerAgnetUser = u })

                    .Where(t =>
                      (CityIds.Count == 0 || CityIds.Contains(t.RequestSeller.ADSLChangeIPRequest.Center.Region.CityID))
                      && (CenterID.Count == 0 || CenterID.Contains(t.RequestSeller.ADSLChangeIPRequest.CenterID))
                      && (ADSLSellerAgnetIDs.Count == 0 || ADSLSellerAgnetIDs.Contains((int)t.ADSLSellerAgnetUser.SellerAgentID))
                      && (ADSLSellerAGnetUserIDs.Count == 0 || ADSLSellerAGnetUserIDs.Contains((int)t.ADSLSellerAgnetUser.ID))
                      && (!fromDate.HasValue || fromDate <= t.RequestSeller.ADSLChangeIPRequest.EndDate)
                      && (!toDate.HasValue || toDate >= t.RequestSeller.ADSLChangeIPRequest.EndDate)
                          //&& (t.RequestSeller.ADSLChangeIPRequest.EndDate != null)
                      && (t.RequestSeller.ADSLChangeIPRequest.RequestTypeID == (byte)DB.RequestType.ADSLChangePlace)
                      && (t.RequestSeller.RequestPayment.PaymentType == (byte)DB.PaymentType.Cash)
                      && (!ISAccepted.HasValue || t.RequestSeller.RequestPayment.IsAccepted == ISAccepted)
                      && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.RequestSeller.RequestPayment.UserID))
                      && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestSeller.RequestPayment.PaymentDate)
                      && (!ToPaymentDate.HasValue || ToPaymentDate >= t.RequestSeller.RequestPayment.PaymentDate)
                      && (t.RequestSeller.RequestPayment.PaymentDate != null))
                      .GroupBy(t => new
                      {
                          ADSLSellerAGnetUser = t.ADSLSellerAgnetUser.User.FirstName + " " + t.ADSLSellerAgnetUser.User.LastName,
                          ADSLSellerAgent = t.ADSLSellerAgnetUser.ADSLSellerAgent.Title,
                      }).Select(t => new ADSLSellerAgentCashIncomeInfo
                      {
                          ADSLChangeNoCost = t.Sum(x => x.RequestSeller.RequestPayment.AmountSum),
                          ADSLSEllerAgnetUserName = t.Key.ADSLSellerAGnetUser,
                          ADSlSellerAgnetName = t.Key.ADSLSellerAgent

                      }).ToList();

            }
        }

        public static List<ADSLSellerAgentCashIncomeInfo> GetADSLsellerAgentCashADSLModemCost(List<int> CityIds, List<int> CenterID
                                                                                         , List<int> ADSLSellerAgnetIDs, List<int> ADSLSellerAGnetUserIDs,
                                                                                         DateTime? fromDate, DateTime? toDate, bool? ISAccepted,
                                                                                         DateTime? FromPaymentDate, DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLChangeIPRequest = a, RequestPayment = p })
                    .Join(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, u => u.ID, (a, u) => new { RequestSeller = a, ADSLSellerAgnetUser = u })

                    .Where(t =>
                      (CityIds.Count == 0 || CityIds.Contains(t.RequestSeller.ADSLChangeIPRequest.Center.Region.CityID))
                      && (CenterID.Count == 0 || CenterID.Contains(t.RequestSeller.ADSLChangeIPRequest.CenterID))
                      && (ADSLSellerAgnetIDs.Count == 0 || ADSLSellerAgnetIDs.Contains((int)t.ADSLSellerAgnetUser.SellerAgentID))
                      && (ADSLSellerAGnetUserIDs.Count == 0 || ADSLSellerAGnetUserIDs.Contains((int)t.ADSLSellerAgnetUser.ID))
                      && (!fromDate.HasValue || fromDate <= t.RequestSeller.ADSLChangeIPRequest.EndDate)
                      && (!toDate.HasValue || toDate >= t.RequestSeller.ADSLChangeIPRequest.EndDate)
                          //&& (t.RequestSeller.ADSLChangeIPRequest.EndDate != null)
                      && (t.RequestSeller.ADSLChangeIPRequest.RequestTypeID == (byte)DB.RequestType.ADSL)
                      && (t.RequestSeller.RequestPayment.PaymentType == (byte)DB.PaymentType.Cash)
                      && (!ISAccepted.HasValue || t.RequestSeller.RequestPayment.IsAccepted == ISAccepted)
                      && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.RequestSeller.RequestPayment.UserID))
                      && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestSeller.RequestPayment.PaymentDate)
                      && (!ToPaymentDate.HasValue || ToPaymentDate >= t.RequestSeller.RequestPayment.PaymentDate)
                      && (t.RequestSeller.RequestPayment.PaymentDate != null)
                      && (t.RequestSeller.RequestPayment.BaseCostID == 40))
                      .GroupBy(t => new
                      {
                          ADSLSellerAGnetUser = t.ADSLSellerAgnetUser.User.FirstName + " " + t.ADSLSellerAgnetUser.User.LastName,
                          ADSLSellerAgent = t.ADSLSellerAgnetUser.ADSLSellerAgent.Title,
                      }).Select(t => new ADSLSellerAgentCashIncomeInfo
                      {
                          ADSLModemCost = t.Sum(x => x.RequestSeller.RequestPayment.AmountSum),
                          ADSLSEllerAgnetUserName = t.Key.ADSLSellerAGnetUser,
                          ADSlSellerAgnetName = t.Key.ADSLSellerAgent

                      }).ToList();

            }
        }

        public static List<ADSLSellerAgentCashIncomeInfo> GetADSLsellerAgentCashADSLRequestInstallment(List<int> CityIds, List<int> CenterID
                                                                                         , List<int> ADSLSellerAgnetIDs, List<int> ADSLSellerAGnetUserIDs,
                                                                                         DateTime? fromDate, DateTime? toDate, bool? ISAccepted,
                                                                                         DateTime? FromPaymentDate, DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLChangeIPRequest = a, RequestPayment = p })
                    .Join(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, u => u.ID, (a, u) => new { RequestSeller = a, ADSLSellerAgnetUser = u })

                    .Where(t =>
                      (CityIds.Count == 0 || CityIds.Contains(t.RequestSeller.ADSLChangeIPRequest.Center.Region.CityID))
                      && (CenterID.Count == 0 || CenterID.Contains(t.RequestSeller.ADSLChangeIPRequest.CenterID))
                      && (ADSLSellerAgnetIDs.Count == 0 || ADSLSellerAgnetIDs.Contains((int)t.ADSLSellerAgnetUser.SellerAgentID))
                      && (ADSLSellerAGnetUserIDs.Count == 0 || ADSLSellerAGnetUserIDs.Contains((int)t.ADSLSellerAgnetUser.ID))
                      && (!fromDate.HasValue || fromDate <= t.RequestSeller.ADSLChangeIPRequest.EndDate)
                      && (!toDate.HasValue || toDate >= t.RequestSeller.ADSLChangeIPRequest.EndDate)
                          //&& (t.RequestSeller.ADSLChangeIPRequest.EndDate != null)
                      && (t.RequestSeller.ADSLChangeIPRequest.RequestTypeID == (byte)DB.RequestType.ADSL)
                      && (t.RequestSeller.RequestPayment.PaymentType == (byte)DB.PaymentType.Cash)
                      && (!ISAccepted.HasValue || t.RequestSeller.RequestPayment.IsAccepted == ISAccepted)
                      && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.RequestSeller.RequestPayment.UserID))
                      && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestSeller.RequestPayment.PaymentDate)
                      && (!ToPaymentDate.HasValue || ToPaymentDate >= t.RequestSeller.RequestPayment.PaymentDate)
                      && (t.RequestSeller.RequestPayment.PaymentDate != null)
                      && (t.RequestSeller.RequestPayment.BaseCostID == 37))
                      .GroupBy(t => new
                      {
                          ADSLSellerAGnetUser = t.ADSLSellerAgnetUser.User.FirstName + " " + t.ADSLSellerAgnetUser.User.LastName,
                          ADSLSellerAgent = t.ADSLSellerAgnetUser.ADSLSellerAgent.Title,
                      }).Select(t => new ADSLSellerAgentCashIncomeInfo
                      {
                          ADSLRequestInstallmentCost = t.Sum(x => x.RequestSeller.RequestPayment.AmountSum),
                          ADSLSEllerAgnetUserName = t.Key.ADSLSellerAGnetUser,
                          ADSlSellerAgnetName = t.Key.ADSLSellerAgent

                      }).ToList();

            }
        }

        public static List<ADSLSellerAgentCashIncomeInfo> GetADSLsellerAgentCashADSLRequestRanje(List<int> CityIds, List<int> CenterID
                                                                                        , List<int> ADSLSellerAgnetIDs, List<int> ADSLSellerAGnetUserIDs,
                                                                                        DateTime? fromDate, DateTime? toDate, bool? ISAccepted,
                                                                                        DateTime? FromPaymentDate, DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLChangeIPRequest = a, RequestPayment = p })
                    .Join(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, u => u.ID, (a, u) => new { RequestSeller = a, ADSLSellerAgnetUser = u })

                    .Where(t =>
                      (CityIds.Count == 0 || CityIds.Contains(t.RequestSeller.ADSLChangeIPRequest.Center.Region.CityID))
                      && (CenterID.Count == 0 || CenterID.Contains(t.RequestSeller.ADSLChangeIPRequest.CenterID))
                      && (ADSLSellerAgnetIDs.Count == 0 || ADSLSellerAgnetIDs.Contains((int)t.ADSLSellerAgnetUser.SellerAgentID))
                      && (ADSLSellerAGnetUserIDs.Count == 0 || ADSLSellerAGnetUserIDs.Contains((int)t.ADSLSellerAgnetUser.ID))
                      && (!fromDate.HasValue || fromDate <= t.RequestSeller.ADSLChangeIPRequest.EndDate)
                      && (!toDate.HasValue || toDate >= t.RequestSeller.ADSLChangeIPRequest.EndDate)
                          //&& (t.RequestSeller.ADSLChangeIPRequest.EndDate != null)
                      && (t.RequestSeller.ADSLChangeIPRequest.RequestTypeID == (byte)DB.RequestType.ADSL)
                      && (t.RequestSeller.RequestPayment.PaymentType == (byte)DB.PaymentType.Cash)
                      && (!ISAccepted.HasValue || t.RequestSeller.RequestPayment.IsAccepted == ISAccepted)
                      && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.RequestSeller.RequestPayment.UserID))
                      && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestSeller.RequestPayment.PaymentDate)
                      && (!ToPaymentDate.HasValue || ToPaymentDate >= t.RequestSeller.RequestPayment.PaymentDate)
                      && (t.RequestSeller.RequestPayment.PaymentDate != null)
                      && (t.RequestSeller.RequestPayment.BaseCostID == 107))
                      .GroupBy(t => new
                      {
                          ADSLSellerAGnetUser = t.ADSLSellerAgnetUser.User.FirstName + " " + t.ADSLSellerAgnetUser.User.LastName,
                          ADSLSellerAgent = t.ADSLSellerAgnetUser.ADSLSellerAgent.Title,
                      }).Select(t => new ADSLSellerAgentCashIncomeInfo
                      {
                          ADSLRequestRanjeCost = t.Sum(x => x.RequestSeller.RequestPayment.AmountSum),
                          ADSLSEllerAgnetUserName = t.Key.ADSLSellerAGnetUser,
                          ADSlSellerAgnetName = t.Key.ADSLSellerAgent

                      }).ToList();

            }
        }
        public static List<ADSLSellerAgentSaleDetailsInfo> GetADSLSellerAgnetsaleDetailsADSLRequestServiceInfo(List<int> CityIDs,
                                                                                                               List<int> CenterIDs,
                                                                                                                List<int> ADSLSellerAgentIDs,
                                                                                                                List<int> ADSLSellerAgentUserIDs,
                                                                                                                List<int> SaleWaysIDs,
                                                                                                                List<int> PaymentTypeIDs,
                                                                                                                List<int> ServiceGroupIDs,
                                                                                                                List<int> CustomerGroupIDs,
                                                                                                                List<int> BandWidthIDs,
                                                                                                                List<int> DurationIDs,
                                                                                                                List<int> TrafficIDs,
                                                                                                                List<int> ServiceIDs,
                                                                                                                DateTime? fromDate,
                                                                                                                DateTime? toDate,
                                                                                                                bool? ISAccepted,
                                                                                                                List<int> ServiceTypeID,
                                                                                                                long? TelNo,
                                                                                                                DateTime? FromPaymentDate,
                                                                                                                DateTime? ToPaymentDate,
                                                                                                                DateTime? FromInsertDate,
                                                                                                                DateTime? ToInsertDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { Request = a, RequestPayment = p })
                    .Join(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, u => u.ID, (a, u) => new { RequestSeller = a, ADSLSellerAgnetUser = u })
                    .Where(t =>
                    (CityIDs.Count == 0 || CityIDs.Contains(t.RequestSeller.Request.Center.Region.CityID))
                      && (CenterIDs.Count == 0 || CenterIDs.Contains(t.RequestSeller.Request.CenterID))
                      && (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ADSLSellerAgnetUser.SellerAgentID))
                      && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ADSLSellerAgnetUser.ID))
                      && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestSeller.RequestPayment.PaymentType))
                      && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.RequestSeller.Request.ADSLRequest.ADSLService.GroupID))
                      && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.RequestSeller.Request.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                      && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.RequestSeller.Request.ADSLRequest.ADSLService.BandWidthID))
                      && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.RequestSeller.Request.ADSLRequest.ADSLService.DurationID))
                      && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.RequestSeller.Request.ADSLRequest.ADSLService.TrafficID))
                      && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.RequestSeller.Request.ADSLRequest.ServiceID))
                      && (!fromDate.HasValue || fromDate <= t.RequestSeller.Request.EndDate)
                      && (!toDate.HasValue || toDate >= t.RequestSeller.Request.EndDate)
                      && (t.RequestSeller.RequestPayment.PaymentDate != null || t.RequestSeller.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)
                      && (t.RequestSeller.Request.RequestTypeID == (byte)DB.RequestType.ADSL)
                      && (ServiceTypeID.Count == 0 || ServiceTypeID.Contains((int)t.RequestSeller.Request.ADSLRequest.ADSLService.PaymentTypeID))
                        //&& (t.RequestSeller.Request.ADSLRequest.ADSLService.TypeID==(byte)DB.ADSLServiceType.Traffic)
                      && (t.RequestSeller.RequestPayment.BaseCostID == 44)
                      && (TelNo == -1 || TelNo == t.RequestSeller.Request.TelephoneNo)
                      && (!ISAccepted.HasValue || ISAccepted == t.RequestSeller.RequestPayment.IsAccepted)
                      && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestSeller.RequestPayment.PaymentDate)
                      && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.RequestSeller.RequestPayment.UserID))
                      && (!ToPaymentDate.HasValue || ToPaymentDate >= t.RequestSeller.RequestPayment.PaymentDate)
                      && (!FromInsertDate.HasValue || FromInsertDate <= t.RequestSeller.Request.InsertDate)
                      && (!ToInsertDate.HasValue || ToInsertDate >= t.RequestSeller.Request.InsertDate)
                      && (t.RequestSeller.RequestPayment.PaymentDate != null || t.RequestSeller.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Distinct()
                      .Select(t => new ADSLSellerAgentSaleDetailsInfo
                      {
                          ADSLSellerAgentUSerName = t.ADSLSellerAgnetUser.User.FirstName + " " + t.ADSLSellerAgnetUser.User.LastName,
                          ADSLSellerAgnetName = t.ADSLSellerAgnetUser.ADSLSellerAgent.Title,
                          Customername = t.RequestSeller.Request.Customer.FirstNameOrTitle + " " + t.RequestSeller.Request.Customer.LastName,
                          TelephoneNo = t.RequestSeller.Request.TelephoneNo.ToString(),
                          Title = t.RequestSeller.Request.ADSLRequest.ADSLService.Title,
                          Cost = t.RequestSeller.RequestPayment.Cost,
                          Tax = t.RequestSeller.RequestPayment.Tax,
                          AmountSum = t.RequestSeller.RequestPayment.AmountSum,
                          WorkFlow = "ADSLثبت نام ",
                          ADSLSaleType = "سرویس",
                          EndDate = Date.GetPersianDate(t.RequestSeller.Request.EndDate, Date.DateStringType.Short),
                          PaymentDate = Date.GetPersianDate(t.RequestSeller.RequestPayment.PaymentDate, Date.DateStringType.Short),
                          FicheNumber = t.RequestSeller.RequestPayment.FicheNunmber.ToString(),
                          PaymentType = DB.GetEnumDescriptionByValue(typeof(DB.PaymentType), t.RequestSeller.RequestPayment.PaymentType),
                          CenterCodeCost = t.RequestSeller.Request.Center.BillingCode.ToString()

                      }).OrderBy(t => t.ADSLSellerAgentUSerName).ToList();

            }

        }

        public static List<ADSLSellerAgentSaleDetailsInfo> GetADSLSellerAgnetsaleDetailsADSLChangeServiceInfo(List<int> CityIDs,
                                                                                                               List<int> CenterIDs,
                                                                                                                List<int> ADSLSellerAgentIDs,
                                                                                                                List<int> ADSLSellerAgentUserIDs,
                                                                                                                List<int> SaleWaysIDs,
                                                                                                                List<int> PaymentTypeIDs,
                                                                                                                List<int> ServiceGroupIDs,
                                                                                                                List<int> CustomerGroupIDs,
                                                                                                                List<int> BandWidthIDs,
                                                                                                                List<int> DurationIDs,
                                                                                                                List<int> TrafficIDs,
                                                                                                                List<int> ServiceIDs,
                                                                                                                DateTime? fromDate,
                                                                                                                DateTime? toDate,
                                                                                                                bool? ISAccepted,
                                                                                                                List<int> ServiceTypeIDs,
                                                                                                                long? TelNo,
                                                                                                                DateTime? FromPaymentDate,
                                                                                                                DateTime? ToPaymentDate,
                                                                                                                DateTime? FromInsertDate,
                                                                                                                DateTime? ToInsertDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.Requests
                    .Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { Request = a, RequestPayment = p })
                    .Join(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, u => u.ID, (a, u) => new { RequestSeller = a, ADSLSellerAgnetUser = u })
                    .Where(t =>
                    (CityIDs.Count == 0 || CityIDs.Contains(t.RequestSeller.Request.Center.Region.CityID))
                      && (CenterIDs.Count == 0 || CenterIDs.Contains(t.RequestSeller.Request.CenterID))
                      && (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ADSLSellerAgnetUser.SellerAgentID))
                      && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ADSLSellerAgnetUser.ID))
                      && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestSeller.RequestPayment.PaymentType))
                      && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.RequestSeller.Request.ADSLChangeService.ADSLService.GroupID))
                      && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.RequestSeller.Request.ADSLChangeService.ADSLService.ADSLServiceGroup.CustomerGroupID))
                      && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.RequestSeller.Request.ADSLChangeService.ADSLService.BandWidthID))
                      && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.RequestSeller.Request.ADSLChangeService.ADSLService.DurationID))
                      && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.RequestSeller.Request.ADSLChangeService.ADSLService.TrafficID))
                      && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.RequestSeller.Request.ADSLChangeService.NewServiceID))
                      && (!fromDate.HasValue || fromDate <= t.RequestSeller.Request.EndDate)
                      && (!toDate.HasValue || toDate >= t.RequestSeller.Request.EndDate)
                      && (t.RequestSeller.Request.RequestTypeID == (byte)DB.RequestType.ADSLChangeService)
                      && (ServiceTypeIDs.Count == 0 || ServiceTypeIDs.Contains((int)t.RequestSeller.Request.ADSLChangeService.ADSLService.PaymentTypeID))
                      && (t.RequestSeller.RequestPayment.BaseCostID == 45 || t.RequestSeller.RequestPayment.BaseCostID == 44)
                      && (TelNo == -1 || TelNo == t.RequestSeller.Request.TelephoneNo)
                      && (!ISAccepted.HasValue || ISAccepted == t.RequestSeller.RequestPayment.IsAccepted)
                      && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestSeller.RequestPayment.PaymentDate)
                      && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.RequestSeller.RequestPayment.UserID))
                      && (!ToPaymentDate.HasValue || ToPaymentDate >= t.RequestSeller.RequestPayment.PaymentDate)
                      && (SaleWaysIDs.Count == 0 || SaleWaysIDs.Contains((int)t.RequestSeller.Request.ADSLChangeService.ChangeServiceType))
                      && (!FromInsertDate.HasValue || FromInsertDate <= t.RequestSeller.Request.InsertDate)
                      && (!ToInsertDate.HasValue || ToInsertDate >= t.RequestSeller.Request.InsertDate)
                      && (t.RequestSeller.RequestPayment.PaymentDate != null || t.RequestSeller.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Distinct()
                      .Select(t => new ADSLSellerAgentSaleDetailsInfo
                      {
                          ADSLSellerAgentUSerName = t.ADSLSellerAgnetUser.User.FirstName + " " + t.ADSLSellerAgnetUser.User.LastName,
                          ADSLSellerAgnetName = t.ADSLSellerAgnetUser.ADSLSellerAgent.Title,
                          Customername = t.RequestSeller.Request.Customer.FirstNameOrTitle + " " + t.RequestSeller.Request.Customer.LastName,
                          TelephoneNo = t.RequestSeller.Request.TelephoneNo.ToString(),
                          Title = t.RequestSeller.Request.ADSLChangeService.ADSLService.Title,
                          Cost = t.RequestSeller.RequestPayment.Cost,
                          Tax = t.RequestSeller.RequestPayment.Tax,
                          AmountSum = t.RequestSeller.RequestPayment.AmountSum,
                          WorkFlow = DB.GetEnumDescriptionByValue(typeof(DB.ADSLChangeServiceActionType), t.RequestSeller.Request.ADSLChangeService.ChangeServiceActionType),
                          ADSLSaleType = "سرویس",
                          EndDate = Date.GetPersianDate(t.RequestSeller.Request.EndDate, Date.DateStringType.Short),
                          PaymentDate = Date.GetPersianDate(t.RequestSeller.RequestPayment.PaymentDate, Date.DateStringType.Short),
                          FicheNumber = t.RequestSeller.RequestPayment.FicheNunmber.ToString(),
                          PaymentType = DB.GetEnumDescriptionByValue(typeof(DB.PaymentType), t.RequestSeller.RequestPayment.PaymentType),
                          CenterCodeCost = t.RequestSeller.Request.Center.BillingCode.ToString()

                      }).OrderBy(t => t.ADSLSellerAgentUSerName).ToList();

            }

        }

        public static List<ADSLSellerAgentSaleDetailsInfo> GetADSLSellerAgnetsaleDetailsADSLRequestTrafficInfo(List<int> CityIDs,
                                                                                                              List<int> CenterIDs,
                                                                                                               List<int> ADSLSellerAgentIDs,
                                                                                                               List<int> ADSLSellerAgentUserIDs,
                                                                                                               List<int> SaleWaysIDs,
                                                                                                               List<int> PaymentTypeIDs,
                                                                                                               List<int> ServiceGroupIDs,
                                                                                                               List<int> CustomerGroupIDs,
                                                                                                               List<int> BandWidthIDs,
                                                                                                               List<int> DurationIDs,
                                                                                                               List<int> TrafficIDs,
                                                                                                               List<int> ServiceIDs,
                                                                                                               DateTime? fromDate,
                                                                                                               DateTime? toDate,
                                                                                                               bool? ISAccepted,
                                                                                                                List<int> ServiceTypeIDs,
                                                                                                                long? TelNo,
                                                                                                                DateTime? FromPaymentDate,
                                                                                                                DateTime? ToPaymentDate,
                                                                                                                DateTime? FromInsertDate,
                                                                                                                DateTime? ToInsertDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { Request = a, RequestPayment = p })
                    .Join(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, u => u.ID, (a, u) => new { RequestSeller = a, ADSLSellerAgnetUser = u })
                    .Join(context.ADSLServices, a => a.RequestSeller.Request.ADSLRequest.AdditionalServiceID, s => s.ID, (a, s) => new { ALL = a, ADSLService = s })
                    .Where(t =>
                    (CityIDs.Count == 0 || CityIDs.Contains(t.ALL.RequestSeller.Request.Center.Region.CityID))
                      && (CenterIDs.Count == 0 || CenterIDs.Contains(t.ALL.RequestSeller.Request.CenterID))
                      && (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ALL.ADSLSellerAgnetUser.SellerAgentID))
                      && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ALL.ADSLSellerAgnetUser.ID))
                      && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.ALL.RequestSeller.RequestPayment.PaymentType))
                      && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLService.GroupID))
                      && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLService.ADSLServiceGroup.CustomerGroupID))
                      && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.ADSLService.BandWidthID))
                      && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLService.DurationID))
                      && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLService.TrafficID))
                      && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ALL.RequestSeller.Request.ADSLRequest.AdditionalServiceID))
                      && (!fromDate.HasValue || fromDate <= t.ALL.RequestSeller.Request.EndDate)
                      && (!toDate.HasValue || toDate >= t.ALL.RequestSeller.Request.EndDate)
                       && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.ALL.RequestSeller.RequestPayment.UserID))
                      && (t.ALL.RequestSeller.Request.RequestTypeID == (byte)DB.RequestType.ADSL)
                      && (ServiceTypeIDs.Count == 0 || ServiceTypeIDs.Contains((int)t.ADSLService.PaymentTypeID))
                        //&& (t.ALL.RequestSeller.Request.ADSLRequest.AdditionalServiceID != null)
                      && (t.ALL.RequestSeller.RequestPayment.BaseCostID == 46)
                      && (TelNo == -1 || TelNo == t.ALL.RequestSeller.Request.TelephoneNo)
                        //&& (t.RequestSeller.Request.ADSLRequest.ADSLService.TypeID==(byte)DB.ADSLServiceType.Traffic)
                      && (!ISAccepted.HasValue || ISAccepted == t.ALL.RequestSeller.RequestPayment.IsAccepted)
                      && (!FromPaymentDate.HasValue || FromPaymentDate <= t.ALL.RequestSeller.RequestPayment.PaymentDate)
                      && (!ToPaymentDate.HasValue || ToPaymentDate >= t.ALL.RequestSeller.RequestPayment.PaymentDate)
                      && (!FromInsertDate.HasValue || FromInsertDate <= t.ALL.RequestSeller.Request.InsertDate)
                      && (!ToInsertDate.HasValue || ToInsertDate >= t.ALL.RequestSeller.Request.InsertDate)
                       && (t.ALL.RequestSeller.RequestPayment.PaymentDate != null || t.ALL.RequestSeller.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Distinct()
                      .Select(t => new ADSLSellerAgentSaleDetailsInfo
                      {
                          ADSLSellerAgentUSerName = t.ALL.ADSLSellerAgnetUser.User.FirstName + " " + t.ALL.ADSLSellerAgnetUser.User.LastName,
                          ADSLSellerAgnetName = t.ALL.ADSLSellerAgnetUser.ADSLSellerAgent.Title,
                          Customername = t.ALL.RequestSeller.Request.Customer.FirstNameOrTitle + " " + t.ALL.RequestSeller.Request.Customer.LastName,
                          TelephoneNo = t.ALL.RequestSeller.Request.TelephoneNo.ToString(),
                          Title = t.ADSLService.Title,
                          Cost = t.ALL.RequestSeller.RequestPayment.Cost,
                          Tax = t.ALL.RequestSeller.RequestPayment.Tax,
                          AmountSum = t.ALL.RequestSeller.RequestPayment.AmountSum,
                          WorkFlow = "ADSL ثبت نام",
                          ADSLSaleType = "ترافیک",
                          EndDate = Date.GetPersianDate(t.ALL.RequestSeller.Request.EndDate, Date.DateStringType.Short),
                          PaymentDate = Date.GetPersianDate(t.ALL.RequestSeller.RequestPayment.PaymentDate, Date.DateStringType.Short),
                          FicheNumber = t.ALL.RequestSeller.RequestPayment.FicheNunmber.ToString(),
                          PaymentType = DB.GetEnumDescriptionByValue(typeof(DB.PaymentType), t.ALL.RequestSeller.RequestPayment.PaymentType),
                          CenterCodeCost = t.ALL.RequestSeller.Request.Center.BillingCode.ToString()

                      }).OrderBy(t => t.ADSLSellerAgentUSerName).ToList();

            }

        }

        public static List<ADSLSellerAgentSaleDetailsInfo> GetADSLSellerAgnetsaleDetailsADSLSellTrafficInfo(List<int> CityIDs,
                                                                                                             List<int> CenterIDs,
                                                                                                              List<int> ADSLSellerAgentIDs,
                                                                                                              List<int> ADSLSellerAgentUserIDs,
                                                                                                              List<int> SaleWaysIDs,
                                                                                                              List<int> PaymentTypeIDs,
                                                                                                              List<int> ServiceGroupIDs,
                                                                                                              List<int> CustomerGroupIDs,
                                                                                                              List<int> BandWidthIDs,
                                                                                                              List<int> DurationIDs,
                                                                                                              List<int> TrafficIDs,
                                                                                                              List<int> ServiceIDs,
                                                                                                              DateTime? fromDate,
                                                                                                              DateTime? toDate,
                                                                                                              bool? ISAccepted,
                                                                                                              List<int> ServiceTypeID,
                                                                                                               long? TelNo,
                                                                                                              DateTime? FromPaymentDate,
                                                                                                              DateTime? ToPaymentDate,
                                                                                                              DateTime? FromInsertDate,
                                                                                                              DateTime? ToInsertDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.Requests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { Request = a, RequestPayment = p })
                    .Join(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, u => u.ID, (a, u) => new { RequestSeller = a, ADSLSellerAgnetUser = u })
                    .Where(t =>
                      (CityIDs.Count == 0 || CityIDs.Contains(t.RequestSeller.Request.Center.Region.CityID))
                      && (CenterIDs.Count == 0 || CenterIDs.Contains(t.RequestSeller.Request.CenterID))
                      && (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ADSLSellerAgnetUser.SellerAgentID))
                      && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ADSLSellerAgnetUser.ID))
                      && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestSeller.RequestPayment.PaymentType))
                      && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.RequestSeller.Request.ADSLSellTraffic.ADSLService.GroupID))
                      && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.RequestSeller.Request.ADSLSellTraffic.ADSLService.ADSLServiceGroup.CustomerGroupID))
                      && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.RequestSeller.Request.ADSLSellTraffic.ADSLService.BandWidthID))
                      && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.RequestSeller.Request.ADSLSellTraffic.ADSLService.DurationID))
                      && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.RequestSeller.Request.ADSLSellTraffic.ADSLService.TrafficID))
                      && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.RequestSeller.Request.ADSLSellTraffic.AdditionalServiceID))
                      && (!fromDate.HasValue || fromDate <= t.RequestSeller.Request.EndDate)
                      && (!toDate.HasValue || toDate >= t.RequestSeller.Request.EndDate)
                      && (t.RequestSeller.Request.RequestTypeID == (byte)DB.RequestType.ADSLSellTraffic)
                      && (ServiceTypeID.Count == 0 || ServiceTypeID.Contains((int)t.RequestSeller.Request.ADSLSellTraffic.ADSLService.PaymentTypeID))
                      && (t.RequestSeller.RequestPayment.BaseCostID == 105)
                      && (TelNo == -1 || TelNo == t.RequestSeller.Request.TelephoneNo)
                       && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.RequestSeller.RequestPayment.UserID))
                          //&& (t.RequestSeller.Request.ADSLRequest.ADSLService.TypeID == (byte)DB.ADSLServiceType.Traffic)
                      && (!ISAccepted.HasValue || ISAccepted == t.RequestSeller.RequestPayment.IsAccepted)
                      && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestSeller.RequestPayment.PaymentDate)
                      && (!ToPaymentDate.HasValue || ToPaymentDate >= t.RequestSeller.RequestPayment.PaymentDate)
                      && (SaleWaysIDs.Count == 0 || SaleWaysIDs.Contains((int)t.RequestSeller.Request.ADSLSellTraffic.ChangeServiceType))
                      && (!FromInsertDate.HasValue || FromInsertDate <= t.RequestSeller.Request.InsertDate)
                      && (!ToInsertDate.HasValue || ToInsertDate >= t.RequestSeller.Request.InsertDate)
                       && (t.RequestSeller.RequestPayment.PaymentDate != null || t.RequestSeller.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Distinct()
                      .Select(t => new ADSLSellerAgentSaleDetailsInfo
                      {
                          ADSLSellerAgentUSerName = t.ADSLSellerAgnetUser.User.FirstName + " " + t.ADSLSellerAgnetUser.User.LastName,
                          ADSLSellerAgnetName = t.ADSLSellerAgnetUser.ADSLSellerAgent.Title,
                          Customername = t.RequestSeller.Request.Customer.FirstNameOrTitle + " " + t.RequestSeller.Request.Customer.LastName,
                          TelephoneNo = t.RequestSeller.Request.TelephoneNo.ToString(),
                          Title = t.RequestSeller.Request.ADSLSellTraffic.ADSLService.Title,
                          Cost = t.RequestSeller.RequestPayment.Cost,
                          Tax = t.RequestSeller.RequestPayment.Tax,
                          AmountSum = t.RequestSeller.RequestPayment.AmountSum,
                          WorkFlow = "خرید ترافیک",
                          ADSLSaleType = "ترافیک",
                          EndDate = Date.GetPersianDate(t.RequestSeller.Request.EndDate, Date.DateStringType.Short),
                          PaymentDate = Date.GetPersianDate(t.RequestSeller.RequestPayment.PaymentDate, Date.DateStringType.Short),
                          FicheNumber = t.RequestSeller.RequestPayment.FicheNunmber.ToString(),
                          PaymentType = DB.GetEnumDescriptionByValue(typeof(DB.PaymentType), t.RequestSeller.RequestPayment.PaymentType),
                          CenterCodeCost = t.RequestSeller.Request.Center.BillingCode.ToString()

                      }).OrderBy(t => t.ADSLSellerAgentUSerName).ToList();

            }

        }

        public static List<ADSLSellerAgentSaleDetailsInfo> GetADSLSellerAgnetsaleDetailsADSLRequestStaticIPInfo(List<int> CityIDs,
                                                                                                          List<int> CenterIDs,
                                                                                                          List<int> ADSLSellerAgentIDs,
                                                                                                          List<int> ADSLSellerAgentUserIDs,
                                                                                                          List<int> PaymentTypeIDs,
                                                                                                          List<int> ServiceGroupIDs,
                                                                                                          List<int> CustomerGroupIDs,
                                                                                                          DateTime? fromDate,
                                                                                                          DateTime? toDate,
                                                                                                          bool? ISAccepted,
                                                                                                            List<int> ServiceTypeIDs,
                                                                                                            long? TelNo,
                                                                                                          DateTime? FromPaymentDate,
                                                                                                        DateTime? ToPaymentDate,
                                                                                                            DateTime? FromInsertDate,
                                                                                                            DateTime? ToInsertDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.Requests
                    .Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { Request = a, RequestPayment = p })
                    .Join(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, u => u.ID, (a, u) => new { RequestSeller = a, ADSLSellerAgnetUser = u })
                    .Where(t =>
                    (CityIDs.Count == 0 || CityIDs.Contains(t.RequestSeller.Request.Center.Region.CityID))
                      && (CenterIDs.Count == 0 || CenterIDs.Contains(t.RequestSeller.Request.CenterID))
                      && (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ADSLSellerAgnetUser.SellerAgentID))
                      && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ADSLSellerAgnetUser.ID))
                      && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestSeller.RequestPayment.PaymentType))
                      && (!fromDate.HasValue || fromDate <= t.RequestSeller.Request.EndDate)
                      && (!toDate.HasValue || toDate >= t.RequestSeller.Request.EndDate)
                      && (t.RequestSeller.Request.RequestTypeID == (byte)DB.RequestType.ADSL)
                      && (ServiceTypeIDs.Count == 0 || ServiceTypeIDs.Contains((int)t.RequestSeller.Request.ADSLRequest.ADSLService.PaymentTypeID))
                      && (t.RequestSeller.Request.ADSLRequest.IPStaticID != null)
                      && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.RequestSeller.Request.ADSLRequest.ADSLService.GroupID)
                      && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.RequestSeller.Request.ADSLRequest.ADSLService.ADSLServiceGroup.ADSLCustomerGroup.ID)))
                      && (t.RequestSeller.RequestPayment.BaseCostID == 48)
                      && (TelNo == -1 || TelNo == t.RequestSeller.Request.TelephoneNo)
                      && (t.RequestSeller.Request.ADSLRequest.IPStaticID != null)
                      && (!ISAccepted.HasValue || ISAccepted == t.RequestSeller.RequestPayment.IsAccepted)
                      && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestSeller.RequestPayment.PaymentDate)
                       && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.RequestSeller.RequestPayment.UserID))
                      && (!ToPaymentDate.HasValue || ToPaymentDate >= t.RequestSeller.RequestPayment.PaymentDate)
                      && (!FromInsertDate.HasValue || FromInsertDate <= t.RequestSeller.Request.InsertDate)
                      && (!ToInsertDate.HasValue || ToInsertDate >= t.RequestSeller.Request.InsertDate)
                       && (t.RequestSeller.RequestPayment.PaymentDate != null || t.RequestSeller.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Distinct()
                      .Select(t => new ADSLSellerAgentSaleDetailsInfo
                      {
                          ADSLSellerAgentUSerName = t.ADSLSellerAgnetUser.User.FirstName + " " + t.ADSLSellerAgnetUser.User.LastName,
                          ADSLSellerAgnetName = t.ADSLSellerAgnetUser.ADSLSellerAgent.Title,
                          Customername = t.RequestSeller.Request.Customer.FirstNameOrTitle + " " + t.RequestSeller.Request.Customer.LastName,
                          TelephoneNo = t.RequestSeller.Request.TelephoneNo.ToString(),
                          Title = t.RequestSeller.Request.ADSLRequest.ADSLIP.IP,
                          Cost = t.RequestSeller.RequestPayment.Cost,
                          Tax = t.RequestSeller.RequestPayment.Tax,
                          AmountSum = t.RequestSeller.RequestPayment.AmountSum,
                          WorkFlow = "ADSLثبت نام",
                          ADSLSaleType = "IP",
                          EndDate = Date.GetPersianDate(t.RequestSeller.Request.EndDate, Date.DateStringType.Short),
                          PaymentDate = Date.GetPersianDate(t.RequestSeller.RequestPayment.PaymentDate, Date.DateStringType.Short),
                          FicheNumber = t.RequestSeller.RequestPayment.FicheNunmber.ToString(),
                          PaymentType = DB.GetEnumDescriptionByValue(typeof(DB.PaymentType), t.RequestSeller.RequestPayment.PaymentType),
                          CenterCodeCost = t.RequestSeller.Request.Center.BillingCode.ToString()

                      }).Distinct().OrderBy(t => t.ADSLSellerAgentUSerName).ToList();

            }
        }

        public static List<ADSLSellerAgentSaleDetailsInfo> GetADSLSellerAgnetsaleDetailsADSLRequestGroupIPInfo(List<int> CityIDs,
                                                                                                         List<int> CenterIDs,
                                                                                                         List<int> ADSLSellerAgentIDs,
                                                                                                         List<int> ADSLSellerAgentUserIDs,
                                                                                                         List<int> PaymentTypeIDs,
                                                                                                         List<int> ServiceGroupIDs,
                                                                                                         List<int> CustomerGroupIDs,
                                                                                                         DateTime? fromDate,
                                                                                                         DateTime? toDate,
                                                                                                         bool? ISAccepted,
                                                                                                         List<int> ServiceTypeIDs,
                                                                                                         long? TelNo,
                                                                                                        DateTime? FromPaymentDate,
                                                                                                        DateTime? ToPaymentDate,
                                                                                                        DateTime? FromInsertDate,
                                                                                                        DateTime? ToInsertDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.Requests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { Request = a, RequestPayment = p })
                    .Join(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, u => u.ID, (a, u) => new { RequestSeller = a, ADSLSellerAgnetUser = u })
                    .Where(t =>
                    (CityIDs.Count == 0 || CityIDs.Contains(t.RequestSeller.Request.Center.Region.CityID))
                      && (CenterIDs.Count == 0 || CenterIDs.Contains(t.RequestSeller.Request.CenterID))
                      && (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ADSLSellerAgnetUser.SellerAgentID))
                      && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ADSLSellerAgnetUser.ID))
                      && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestSeller.RequestPayment.PaymentType))
                      && (!fromDate.HasValue || fromDate <= t.RequestSeller.Request.EndDate)
                      && (!toDate.HasValue || toDate >= t.RequestSeller.Request.EndDate)
                      && (t.RequestSeller.RequestPayment.PaymentDate != null)
                      && (t.RequestSeller.Request.RequestTypeID == (byte)DB.RequestType.ADSL)
                      && (ServiceTypeIDs.Count == 0 || ServiceTypeIDs.Contains((int)t.RequestSeller.Request.ADSLRequest.ADSLService.PaymentTypeID))
                      && (t.RequestSeller.Request.ADSLRequest.GroupIPStaticID != null)
                      && (t.RequestSeller.Request.ADSLChangeIPRequest.ChangeIPType != (byte)DB.ADSLChangeIPType.DischargeIP)
                      && (t.RequestSeller.RequestPayment.BaseCostID == 48)
                      && (TelNo == -1 || TelNo == t.RequestSeller.Request.TelephoneNo)
                      && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.RequestSeller.Request.ADSLRequest.ADSLService.GroupID)
                      && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.RequestSeller.Request.ADSLRequest.ADSLService.ADSLServiceGroup.ADSLCustomerGroup.ID)))
                      && (!ISAccepted.HasValue || ISAccepted == t.RequestSeller.RequestPayment.IsAccepted)
                      && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestSeller.RequestPayment.PaymentDate)
                       && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.RequestSeller.RequestPayment.UserID))
                       && (!FromInsertDate.HasValue || FromInsertDate <= t.RequestSeller.Request.InsertDate)
                       && (!ToInsertDate.HasValue || ToInsertDate >= t.RequestSeller.Request.InsertDate)
                      && (!ToPaymentDate.HasValue || ToPaymentDate >= t.RequestSeller.RequestPayment.PaymentDate)).Distinct()

                      .Select(t => new ADSLSellerAgentSaleDetailsInfo
                      {
                          ADSLSellerAgentUSerName = t.ADSLSellerAgnetUser.User.FirstName + " " + t.ADSLSellerAgnetUser.User.LastName,
                          ADSLSellerAgnetName = t.ADSLSellerAgnetUser.ADSLSellerAgent.Title,
                          Customername = t.RequestSeller.Request.Customer.FirstNameOrTitle + " " + t.RequestSeller.Request.Customer.LastName,
                          TelephoneNo = t.RequestSeller.Request.TelephoneNo.ToString(),
                          Title = t.RequestSeller.Request.ADSLRequest.ADSLGroupIP.StartRange,
                          Cost = t.RequestSeller.RequestPayment.Cost,
                          Tax = t.RequestSeller.RequestPayment.Tax,
                          AmountSum = t.RequestSeller.RequestPayment.AmountSum,
                          WorkFlow = "ADSL ثبت نام",
                          ADSLSaleType = "IP",
                          EndDate = Date.GetPersianDate(t.RequestSeller.Request.EndDate, Date.DateStringType.Short),
                          PaymentDate = Date.GetPersianDate(t.RequestSeller.RequestPayment.PaymentDate, Date.DateStringType.Short),
                          FicheNumber = t.RequestSeller.RequestPayment.FicheNunmber.ToString(),
                          PaymentType = DB.GetEnumDescriptionByValue(typeof(DB.PaymentType), t.RequestSeller.RequestPayment.PaymentType),
                          CenterCodeCost = t.RequestSeller.Request.Center.BillingCode.ToString()

                      }).Distinct().OrderBy(t => t.ADSLSellerAgentUSerName).ToList();

            }
        }

        public static List<ADSLSellerAgentSaleDetailsInfo> GetADSLSellerAgnetsaleDetailsADSLChangeGroupIPInfo(List<int> CityIDs,
                                                                                                        List<int> CenterIDs,
                                                                                                        List<int> ADSLSellerAgentIDs,
                                                                                                        List<int> ADSLSellerAgentUserIDs,
                                                                                                        List<int> PaymentTypeIDs,
                                                                                                        List<int> ServiceGroupIDs,
                                                                                                        List<int> CustomerGroupIDs,
                                                                                                        DateTime? fromDate,
                                                                                                        DateTime? toDate,
                                                                                                        bool? ISAccepted,
                                                                                                        long? TelNo,
                                                                                                        DateTime? FromPaymentDate,
                                                                                                        DateTime? ToPaymentDate,
                                                                                                        DateTime? FromInsertDate,
                                                                                                        DateTime? ToInsertDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.Requests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { Request = a, RequestPayment = p })
                    .Join(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, u => u.ID, (a, u) => new { RequestSeller = a, ADSLSellerAgnetUser = u })
                    .Join(context.ADSLGroupIPs, w => w.RequestSeller.Request.ADSLChangeIPRequest.NewGroupIPStaticID, i => i.ID, (w, i) => new { ALL = w, ADSLGroupIPs = i })
                    .Join(context.ADSLServiceGroups, r => r.ADSLGroupIPs.CustometGroupID, s => s.CustomerGroupID, (r, s) => new { ALLM = r, ADSLServiceGroup = s })
                    .Where(t =>
                    (CityIDs.Count == 0 || CityIDs.Contains(t.ALLM.ALL.RequestSeller.Request.Center.Region.CityID))
                      && (CenterIDs.Count == 0 || CenterIDs.Contains(t.ALLM.ALL.RequestSeller.Request.CenterID))
                      && (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ALLM.ALL.ADSLSellerAgnetUser.SellerAgentID))
                      && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ALLM.ALL.ADSLSellerAgnetUser.ID))
                      && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.ALLM.ALL.RequestSeller.RequestPayment.PaymentType))
                      && (!fromDate.HasValue || fromDate <= t.ALLM.ALL.RequestSeller.Request.EndDate)
                      && (!toDate.HasValue || toDate >= t.ALLM.ALL.RequestSeller.Request.EndDate)
                      && (t.ALLM.ALL.RequestSeller.Request.RequestTypeID == (byte)DB.RequestType.ADSLChangeIP)
                      && (t.ALLM.ALL.RequestSeller.Request.ADSLChangeIPRequest.ChangeIPType != (byte)DB.ADSLChangeIPType.DischargeIP)
                      && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLServiceGroup.ID))
                      && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ALLM.ADSLGroupIPs.CustometGroupID))
                      && (TelNo == -1 || TelNo == t.ALLM.ALL.RequestSeller.Request.TelephoneNo)
                      && (!ISAccepted.HasValue || ISAccepted == t.ALLM.ALL.RequestSeller.RequestPayment.IsAccepted)
                      && (!FromPaymentDate.HasValue || FromPaymentDate <= t.ALLM.ALL.RequestSeller.RequestPayment.PaymentDate)
                       && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.ALLM.ALL.RequestSeller.RequestPayment.UserID))
                      && (!ToPaymentDate.HasValue || ToPaymentDate >= t.ALLM.ALL.RequestSeller.RequestPayment.PaymentDate)
                      && (!FromInsertDate.HasValue || FromInsertDate <= t.ALLM.ALL.RequestSeller.Request.InsertDate)
                      && (!ToInsertDate.HasValue || ToInsertDate >= t.ALLM.ALL.RequestSeller.Request.InsertDate)
                       && (t.ALLM.ALL.RequestSeller.RequestPayment.PaymentDate != null || t.ALLM.ALL.RequestSeller.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Distinct()
                      .Select(t => new ADSLSellerAgentSaleDetailsInfo
                      {
                          ADSLSellerAgentUSerName = t.ALLM.ALL.ADSLSellerAgnetUser.User.FirstName + " " + t.ALLM.ALL.ADSLSellerAgnetUser.User.LastName,
                          ADSLSellerAgnetName = t.ALLM.ALL.ADSLSellerAgnetUser.ADSLSellerAgent.Title,
                          Customername = t.ALLM.ALL.RequestSeller.Request.Customer.FirstNameOrTitle + " " + t.ALLM.ALL.RequestSeller.Request.Customer.LastName,
                          TelephoneNo = t.ALLM.ALL.RequestSeller.Request.TelephoneNo.ToString(),
                          Title = t.ALLM.ADSLGroupIPs.StartRange,
                          Cost = t.ALLM.ALL.RequestSeller.RequestPayment.Cost,
                          Tax = t.ALLM.ALL.RequestSeller.RequestPayment.Tax,
                          AmountSum = t.ALLM.ALL.RequestSeller.RequestPayment.AmountSum,
                          WorkFlow = "IP خرید",
                          ADSLSaleType = "IP",
                          EndDate = Date.GetPersianDate(t.ALLM.ALL.RequestSeller.Request.EndDate, Date.DateStringType.Short),
                          PaymentDate = Date.GetPersianDate(t.ALLM.ALL.RequestSeller.RequestPayment.PaymentDate, Date.DateStringType.Short),
                          FicheNumber = t.ALLM.ALL.RequestSeller.RequestPayment.FicheNunmber.ToString(),
                          PaymentType = DB.GetEnumDescriptionByValue(typeof(DB.PaymentType), t.ALLM.ALL.RequestSeller.RequestPayment.PaymentType),
                          CenterCodeCost = t.ALLM.ALL.RequestSeller.Request.Center.BillingCode.ToString()

                      }).Distinct().OrderBy(t => t.ADSLSellerAgentUSerName).ToList();

            }
        }

        public static List<ADSLSellerAgentSaleDetailsInfo> GetADSLSellerAgnetsaleDetailsADSLChangeStaticIPInfo(List<int> CityIDs,
                                                                                                        List<int> CenterIDs,
                                                                                                        List<int> ADSLSellerAgentIDs,
                                                                                                        List<int> ADSLSellerAgentUserIDs,
                                                                                                        List<int> PaymentTypeIDs,
                                                                                                        List<int> ServiceGroupIDs,
                                                                                                        List<int> CustomerGroupIDs,
                                                                                                        DateTime? fromDate,
                                                                                                        DateTime? toDate,
                                                                                                        bool? ISAccepted,
                                                                                                        long? TelNo,
                                                                                                        DateTime? FromPaymentDate,
                                                                                                        DateTime? ToPaymentDate,
                                                                                                        DateTime? FromInsertDate,
                                                                                                        DateTime? ToInsertDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.Requests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { Request = a, RequestPayment = p })
                    .Join(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, u => u.ID, (a, u) => new { RequestSeller = a, ADSLSellerAgnetUser = u })
                    .Join(context.ADSLIPs, w => w.RequestSeller.Request.ADSLChangeIPRequest.NewIPStaticID, i => i.ID, (w, i) => new { ALL = w, ADSLIPs = i })
                    .Join(context.ADSLServiceGroups, r => r.ADSLIPs.CustometGroupID, s => s.CustomerGroupID, (r, s) => new { ALLM = r, ADSLServiceGroup = s })
                    .Where(t =>
                    (CityIDs.Count == 0 || CityIDs.Contains(t.ALLM.ALL.RequestSeller.Request.Center.Region.CityID))
                      && (CenterIDs.Count == 0 || CenterIDs.Contains(t.ALLM.ALL.RequestSeller.Request.CenterID))
                      && (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ALLM.ALL.ADSLSellerAgnetUser.SellerAgentID))
                      && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ALLM.ALL.ADSLSellerAgnetUser.ID))
                      && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.ALLM.ALL.RequestSeller.RequestPayment.PaymentType))
                      && (!fromDate.HasValue || fromDate <= t.ALLM.ALL.RequestSeller.Request.EndDate)
                      && (!toDate.HasValue || toDate >= t.ALLM.ALL.RequestSeller.Request.EndDate)
                      && (t.ALLM.ALL.RequestSeller.Request.RequestTypeID == (byte)DB.RequestType.ADSLChangeIP)
                      && (t.ALLM.ALL.RequestSeller.Request.ADSLChangeIPRequest.ChangeIPType != (byte)DB.ADSLChangeIPType.DischargeIP)
                      && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLServiceGroup.ID))
                      && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ALLM.ADSLIPs.CustometGroupID))
                      && (TelNo == -1 || TelNo == t.ALLM.ALL.RequestSeller.Request.TelephoneNo)
                      && (!ISAccepted.HasValue || ISAccepted == t.ALLM.ALL.RequestSeller.RequestPayment.IsAccepted)
                      && (!FromPaymentDate.HasValue || FromPaymentDate <= t.ALLM.ALL.RequestSeller.RequestPayment.PaymentDate)
                       && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.ALLM.ALL.RequestSeller.RequestPayment.UserID))
                      && (!ToPaymentDate.HasValue || ToPaymentDate >= t.ALLM.ALL.RequestSeller.RequestPayment.PaymentDate)
                      && (!FromInsertDate.HasValue || FromInsertDate <= t.ALLM.ALL.RequestSeller.Request.InsertDate)
                      && (!ToInsertDate.HasValue || ToInsertDate >= t.ALLM.ALL.RequestSeller.Request.InsertDate)
                       && (t.ALLM.ALL.RequestSeller.RequestPayment.PaymentDate != null || t.ALLM.ALL.RequestSeller.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment))
                      .Select(t => new ADSLSellerAgentSaleDetailsInfo
                      {
                          ADSLSellerAgentUSerName = t.ALLM.ALL.ADSLSellerAgnetUser.User.FirstName + " " + t.ALLM.ALL.ADSLSellerAgnetUser.User.LastName,
                          ADSLSellerAgnetName = t.ALLM.ALL.ADSLSellerAgnetUser.ADSLSellerAgent.Title,
                          Customername = t.ALLM.ALL.RequestSeller.Request.Customer.FirstNameOrTitle + " " + t.ALLM.ALL.RequestSeller.Request.Customer.LastName,
                          TelephoneNo = t.ALLM.ALL.RequestSeller.Request.TelephoneNo.ToString(),
                          Title = t.ALLM.ADSLIPs.IP,
                          Cost = t.ALLM.ALL.RequestSeller.RequestPayment.Cost,
                          Tax = t.ALLM.ALL.RequestSeller.RequestPayment.Tax,
                          AmountSum = t.ALLM.ALL.RequestSeller.RequestPayment.AmountSum,
                          WorkFlow = "IP خرید",
                          ADSLSaleType = "IP",
                          EndDate = Date.GetPersianDate(t.ALLM.ALL.RequestSeller.Request.EndDate, Date.DateStringType.Short),
                          PaymentDate = Date.GetPersianDate(t.ALLM.ALL.RequestSeller.RequestPayment.PaymentDate, Date.DateStringType.Short),
                          FicheNumber = t.ALLM.ALL.RequestSeller.RequestPayment.FicheNunmber.ToString(),
                          PaymentType = DB.GetEnumDescriptionByValue(typeof(DB.PaymentType), t.ALLM.ALL.RequestSeller.RequestPayment.PaymentType),
                          CenterCodeCost = t.ALLM.ALL.RequestSeller.Request.Center.BillingCode.ToString()

                      }).Distinct().OrderBy(t => t.ADSLSellerAgentUSerName).ToList();

            }
        }

        public static List<ADSLSellerAgentSaleDetailsInfo> GetADSLSellerAgnetsaleDetailsADSLRequestModemInfo(List<int> CityIDs,
                                                                                                        List<int> CenterIDs,
                                                                                                        List<int> ADSLSellerAgentIDs,
                                                                                                        List<int> ADSLSellerAgentUserIDs,
                                                                                                        List<int> PaymentTypeIDs,
                                                                                                        List<int> ServiceGroupIDs,
                                                                                                        List<int> CustomerGroupIDs,
                                                                                                        DateTime? fromDate,
                                                                                                        DateTime? toDate,
                                                                                                        bool? ISAccepted,
                                                                                                        List<int> ServiceTypeIds,
                                                                                                        List<int> ServiceIDs,
                                                                                                        long? TelNo,
                                                                                                        DateTime? FromPaymentDate,
                                                                                                        DateTime? ToPaymentDate,
                                                                                                        DateTime? FromInsertDate,
                                                                                                        DateTime? ToInsertDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.Requests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { Request = a, RequestPayment = p })
                    .Join(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, u => u.ID, (a, u) => new { RequestSeller = a, ADSLSellerAgnetUser = u })
                    .Join(context.ADSLModemProperties, a => a.RequestSeller.Request.TelephoneNo, m => m.TelephoneNo, (a, m) => new { ALL = a, ADSLModemProperty = m })
                    .Where(t =>
                    (CityIDs.Count == 0 || CityIDs.Contains(t.ALL.RequestSeller.Request.Center.Region.CityID))
                      && (CenterIDs.Count == 0 || CenterIDs.Contains(t.ALL.RequestSeller.Request.CenterID))
                      && (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ALL.ADSLSellerAgnetUser.SellerAgentID))
                      && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ALL.ADSLSellerAgnetUser.ID))
                      && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.ALL.RequestSeller.RequestPayment.PaymentType))
                      && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ALL.RequestSeller.Request.ADSLRequest.ADSLService.GroupID))
                      && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ALL.RequestSeller.Request.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                      && (!fromDate.HasValue || fromDate <= t.ALL.RequestSeller.Request.EndDate)
                      && (!toDate.HasValue || toDate >= t.ALL.RequestSeller.Request.EndDate)
                      && (t.ALL.RequestSeller.Request.RequestTypeID == (byte)DB.RequestType.ADSL)
                      && (ServiceTypeIds.Count == 0 || ServiceTypeIds.Contains((int)t.ALL.RequestSeller.Request.ADSLRequest.ADSLService.PaymentTypeID))
                      && (t.ALL.RequestSeller.RequestPayment.BaseCostID == 40)
                      && (TelNo == -1 || TelNo == t.ALL.RequestSeller.Request.TelephoneNo)
                      && (t.ALL.RequestSeller.Request.ADSLRequest.NeedModem == true)
                      && (t.ADSLModemProperty.Status == 1)
                      && (!ISAccepted.HasValue || ISAccepted == t.ALL.RequestSeller.RequestPayment.IsAccepted)
                      && (!FromPaymentDate.HasValue || FromPaymentDate <= t.ALL.RequestSeller.RequestPayment.PaymentDate)
                       && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.ALL.RequestSeller.RequestPayment.UserID))
                      && (!ToPaymentDate.HasValue || ToPaymentDate >= t.ALL.RequestSeller.RequestPayment.PaymentDate)
                      && (!FromInsertDate.HasValue || FromInsertDate <= t.ALL.RequestSeller.Request.InsertDate)
                      && (!ToInsertDate.HasValue || ToInsertDate >= t.ALL.RequestSeller.Request.InsertDate)
                      && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ALL.RequestSeller.Request.ADSLRequest.ServiceID))
                       && (t.ALL.RequestSeller.RequestPayment.PaymentDate != null || t.ALL.RequestSeller.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Distinct()
                      .Select(t => new ADSLSellerAgentSaleDetailsInfo
                      {
                          ADSLSellerAgentUSerName = t.ALL.ADSLSellerAgnetUser.User.FirstName + " " + t.ALL.ADSLSellerAgnetUser.User.LastName,
                          ADSLSellerAgnetName = t.ALL.ADSLSellerAgnetUser.ADSLSellerAgent.Title,
                          Customername = t.ALL.RequestSeller.Request.Customer.FirstNameOrTitle + " " + t.ALL.RequestSeller.Request.Customer.LastName,
                          TelephoneNo = t.ALL.RequestSeller.Request.TelephoneNo.ToString(),
                          Title = t.ADSLModemProperty.ADSLModem.Model + "_" + t.ADSLModemProperty.SerialNo,
                          Cost = t.ALL.RequestSeller.RequestPayment.Cost,
                          Tax = t.ALL.RequestSeller.RequestPayment.Tax,
                          AmountSum = t.ALL.RequestSeller.RequestPayment.AmountSum,
                          ADSLSaleType = " مودم",
                          WorkFlow = "ADSL ثبت نام",
                          EndDate = Date.GetPersianDate(t.ALL.RequestSeller.Request.EndDate, Date.DateStringType.Short),
                          PaymentDate = Date.GetPersianDate(t.ALL.RequestSeller.RequestPayment.PaymentDate, Date.DateStringType.Short),
                          FicheNumber = t.ALL.RequestSeller.RequestPayment.FicheNunmber.ToString(),
                          PaymentType = DB.GetEnumDescriptionByValue(typeof(DB.PaymentType), t.ALL.RequestSeller.RequestPayment.PaymentType),
                          CenterCodeCost = t.ALL.RequestSeller.Request.Center.BillingCode.ToString()

                      }).OrderBy(t => t.ADSLSellerAgentUSerName).ToList();

            }
        }

        public static List<ADSLSellerAgentSaleDetailsInfo> GetADSLSellerAgnetsaleDetailsADSLChangeServiceModemInfo(List<int> CityIDs,
                                                                                                        List<int> CenterIDs,
                                                                                                        List<int> ADSLSellerAgentIDs,
                                                                                                        List<int> ADSLSellerAgentUserIDs,
                                                                                                        List<int> PaymentTypeIDs,
                                                                                                        List<int> ServiceGroupIDs,
                                                                                                        List<int> CustomerGroupIDs,
                                                                                                        DateTime? fromDate,
                                                                                                        DateTime? toDate,
                                                                                                        bool? ISAccepted,
                                                                                                        List<int> ServiceTypeIds,
                                                                                                        List<int> ServiceIDs,
                                                                                                        long? TelNo,
                                                                                                        DateTime? FromPaymentDate,
                                                                                                        DateTime? ToPaymentDate,
                                                                                                        DateTime? FromInsertdate,
                                                                                                        DateTime? ToInsertDate)
        {
            //برای changeservice برای خرید مودم BASECOstID نداریم و چک نشده فعلا
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.Requests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { Request = a, RequestPayment = p })
                    .Join(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, u => u.ID, (a, u) => new { RequestSeller = a, ADSLSellerAgnetUser = u })
                    .Join(context.ADSLModemProperties, a => a.RequestSeller.Request.TelephoneNo, m => m.TelephoneNo, (a, m) => new { ALL = a, ADSLModemProperty = m })
                    .Where(t =>
                    (CityIDs.Count == 0 || CityIDs.Contains(t.ALL.RequestSeller.Request.Center.Region.CityID))
                      && (CenterIDs.Count == 0 || CenterIDs.Contains(t.ALL.RequestSeller.Request.CenterID))
                      && (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ALL.ADSLSellerAgnetUser.SellerAgentID))
                      && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ALL.ADSLSellerAgnetUser.ID))
                      && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.ALL.RequestSeller.RequestPayment.PaymentType))
                       && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ALL.RequestSeller.Request.ADSLChangeService.ADSLService.GroupID))
                      && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ALL.RequestSeller.Request.ADSLChangeService.ADSLService.ADSLServiceGroup.CustomerGroupID))
                      && (!fromDate.HasValue || fromDate <= t.ALL.RequestSeller.Request.EndDate)
                      && (!toDate.HasValue || toDate >= t.ALL.RequestSeller.Request.EndDate)
                      && (t.ALL.RequestSeller.Request.RequestTypeID == (byte)DB.RequestType.ADSLChangeService)
                      && (ServiceTypeIds.Count == 0 || ServiceTypeIds.Contains((int)t.ALL.RequestSeller.Request.ADSLChangeService.ADSLService.PaymentTypeID))
                      && (t.ALL.RequestSeller.Request.ADSLChangeService.NeedModem == true)
                      && (t.ALL.RequestSeller.RequestPayment.BaseCostID == 40)
                      && (t.ADSLModemProperty.Status == 1)
                      && (TelNo == -1 || TelNo == t.ALL.RequestSeller.Request.TelephoneNo)
                      && (!ISAccepted.HasValue || ISAccepted == t.ALL.RequestSeller.RequestPayment.IsAccepted)
                      && (!FromPaymentDate.HasValue || FromPaymentDate <= t.ALL.RequestSeller.RequestPayment.PaymentDate)
                       && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.ALL.RequestSeller.RequestPayment.UserID))
                      && (!ToPaymentDate.HasValue || ToPaymentDate >= t.ALL.RequestSeller.RequestPayment.PaymentDate)
                      && (!FromInsertdate.HasValue || FromInsertdate <= t.ALL.RequestSeller.Request.InsertDate)
                      && (!ToPaymentDate.HasValue || ToPaymentDate >= t.ALL.RequestSeller.Request.InsertDate)
                      && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ALL.RequestSeller.Request.ADSLChangeService.NewServiceID))
                       && (t.ALL.RequestSeller.RequestPayment.PaymentDate != null || t.ALL.RequestSeller.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Distinct()
                      .Select(t => new ADSLSellerAgentSaleDetailsInfo
                      {
                          ADSLSellerAgentUSerName = t.ALL.ADSLSellerAgnetUser.User.FirstName + " " + t.ALL.ADSLSellerAgnetUser.User.LastName,
                          ADSLSellerAgnetName = t.ALL.ADSLSellerAgnetUser.ADSLSellerAgent.Title,
                          Customername = t.ALL.RequestSeller.Request.Customer.FirstNameOrTitle + " " + t.ALL.RequestSeller.Request.Customer.LastName,
                          TelephoneNo = t.ALL.RequestSeller.Request.TelephoneNo.ToString(),
                          Title = t.ADSLModemProperty.ADSLModem.Model + "_" + t.ADSLModemProperty.SerialNo,
                          Cost = t.ALL.RequestSeller.RequestPayment.Cost,
                          Tax = t.ALL.RequestSeller.RequestPayment.Tax,
                          AmountSum = t.ALL.RequestSeller.RequestPayment.AmountSum,
                          ADSLSaleType = " مودم",
                          WorkFlow = "خرید شارژ مجدد",
                          EndDate = Date.GetPersianDate(t.ALL.RequestSeller.Request.EndDate, Date.DateStringType.Short),
                          PaymentDate = Date.GetPersianDate(t.ALL.RequestSeller.RequestPayment.PaymentDate, Date.DateStringType.Short),
                          FicheNumber = t.ALL.RequestSeller.RequestPayment.FicheNunmber.ToString(),
                          PaymentType = DB.GetEnumDescriptionByValue(typeof(DB.PaymentType), t.ALL.RequestSeller.RequestPayment.PaymentType),
                          CenterCodeCost = t.ALL.RequestSeller.Request.Center.BillingCode.ToString()

                      }).OrderBy(t => t.ADSLSellerAgentUSerName).ToList();

            }
        }


        public static List<ADSLSellerAgentSaleDetailsInfo> GetADSLSellerAgnetsaleDetailsADSLRequestRanjeInfo(List<int> CityIDs,
                                                                                                             List<int> CenterIDs,
                                                                                                              List<int> ADSLSellerAgentIDs,
                                                                                                              List<int> ADSLSellerAgentUserIDs,
                                                                                                              List<int> SaleWaysIDs,
                                                                                                              List<int> PaymentTypeIDs,
                                                                                                              List<int> ServiceGroupIDs,
                                                                                                              List<int> CustomerGroupIDs,
                                                                                                              DateTime? fromDate,
                                                                                                              DateTime? toDate,
                                                                                                              bool? ISAccepted,
                                                                                                              List<int> SErviceTypeIds,
                                                                                                              long? TelNo,
                                                                                                              DateTime? FromPaymentDate,
                                                                                                              DateTime? ToPaymentDate,
                                                                                                              DateTime? FromInsertDate,
                                                                                                              DateTime? ToInsertDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.Requests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { Request = a, RequestPayment = p })
                    .Join(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, u => u.ID, (a, u) => new { RequestSeller = a, ADSLSellerAgnetUser = u })
                    .Where(t =>
                    (CityIDs.Count == 0 || CityIDs.Contains(t.RequestSeller.Request.Center.Region.CityID))
                      && (CenterIDs.Count == 0 || CenterIDs.Contains(t.RequestSeller.Request.CenterID))
                      && (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ADSLSellerAgnetUser.SellerAgentID))
                      && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ADSLSellerAgnetUser.ID))
                      && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestSeller.RequestPayment.PaymentType))
                      && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.RequestSeller.Request.ADSLSellTraffic.ADSLService.GroupID))
                      && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.RequestSeller.Request.ADSLSellTraffic.ADSLService.ADSLServiceGroup.CustomerGroupID))
                        //&& (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.RequestSeller.Request.ADSLSellTraffic.ADSLService.BandWidthID))
                        //&& (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.RequestSeller.Request.ADSLSellTraffic.ADSLService.DurationID))
                        //&& (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.RequestSeller.Request.ADSLSellTraffic.ADSLService.TrafficID))
                        //&& (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.RequestSeller.Request.ADSLSellTraffic.AdditionalServiceID))
                      && (!fromDate.HasValue || fromDate <= t.RequestSeller.Request.EndDate)
                      && (!toDate.HasValue || toDate >= t.RequestSeller.Request.EndDate)
                      && (t.RequestSeller.Request.RequestTypeID == (byte)DB.RequestType.ADSL)
                      && (SErviceTypeIds.Count == 0 || SErviceTypeIds.Contains((int)t.RequestSeller.Request.ADSLRequest.ADSLService.PaymentTypeID))
                      && (t.RequestSeller.RequestPayment.BaseCostID == 107)
                      && (TelNo == -1 || TelNo == t.RequestSeller.Request.TelephoneNo)
                      && (!ISAccepted.HasValue || ISAccepted == t.RequestSeller.RequestPayment.IsAccepted)
                      && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestSeller.RequestPayment.PaymentDate)
                       && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.RequestSeller.RequestPayment.UserID))
                      && (!ToPaymentDate.HasValue || ToPaymentDate >= t.RequestSeller.RequestPayment.PaymentDate)
                      && (!FromInsertDate.HasValue || FromInsertDate <= t.RequestSeller.Request.InsertDate)
                      && (!ToInsertDate.HasValue || ToInsertDate >= t.RequestSeller.Request.InsertDate)
                       && (t.RequestSeller.RequestPayment.PaymentDate != null || t.RequestSeller.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Distinct()
                      .Select(t => new ADSLSellerAgentSaleDetailsInfo
                      {
                          ADSLSellerAgentUSerName = t.ADSLSellerAgnetUser.User.FirstName + " " + t.ADSLSellerAgnetUser.User.LastName,
                          ADSLSellerAgnetName = t.ADSLSellerAgnetUser.ADSLSellerAgent.Title,
                          Customername = t.RequestSeller.Request.Customer.FirstNameOrTitle + " " + t.RequestSeller.Request.Customer.LastName,
                          TelephoneNo = t.RequestSeller.Request.TelephoneNo.ToString(),
                          Cost = t.RequestSeller.RequestPayment.Cost,
                          Tax = t.RequestSeller.RequestPayment.Tax,
                          AmountSum = t.RequestSeller.RequestPayment.AmountSum,
                          WorkFlow = "ADSL ثبت نام",
                          ADSLSaleType = "هزینه رانژه",
                          EndDate = Date.GetPersianDate(t.RequestSeller.Request.EndDate, Date.DateStringType.Short),
                          PaymentDate = Date.GetPersianDate(t.RequestSeller.RequestPayment.PaymentDate, Date.DateStringType.Short),
                          FicheNumber = t.RequestSeller.RequestPayment.FicheNunmber.ToString(),
                          PaymentType = DB.GetEnumDescriptionByValue(typeof(DB.PaymentType), t.RequestSeller.RequestPayment.PaymentType),
                          CenterCodeCost = t.RequestSeller.Request.Center.BillingCode.ToString()

                      }).OrderBy(t => t.ADSLSellerAgentUSerName).ToList();

            }

        }

        public static List<ADSLSellerAgentSaleDetailsInfo> GetADSLSellerAgnetsaleDetailsADSLRequestInstallmentInfo(List<int> CityIDs,
                                                                                                             List<int> CenterIDs,
                                                                                                              List<int> ADSLSellerAgentIDs,
                                                                                                              List<int> ADSLSellerAgentUserIDs,
                                                                                                              List<int> SaleWaysIDs,
                                                                                                              List<int> PaymentTypeIDs,
                                                                                                              List<int> ServiceGroupIDs,
                                                                                                              List<int> CustomerGroupIDs,
            //List<int> BandWidthIDs,
            //List<int> DurationIDs,
            //List<int> TrafficIDs,
            //List<int> ServiceIDs,
                                                                                                              DateTime? fromDate,
                                                                                                              DateTime? toDate,
                                                                                                              bool? ISAccepted,
                                                                                                                List<int> ServiceTypeIds,
                                                                                                              long? TelNo,
                                                                                                               DateTime? FromPaymentDate,
                                                                                                              DateTime? ToPaymentDate,
                                                                                                              DateTime? FromInsertDate,
                                                                                                              DateTime? ToInsertDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.Requests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { Request = a, RequestPayment = p })
                    .Join(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, u => u.ID, (a, u) => new { RequestSeller = a, ADSLSellerAgnetUser = u })
                    .Where(t =>
                    (CityIDs.Count == 0 || CityIDs.Contains(t.RequestSeller.Request.Center.Region.CityID))
                      && (CenterIDs.Count == 0 || CenterIDs.Contains(t.RequestSeller.Request.CenterID))
                      && (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ADSLSellerAgnetUser.SellerAgentID))
                      && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ADSLSellerAgnetUser.ID))
                      && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestSeller.RequestPayment.PaymentType))
                      && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.RequestSeller.Request.ADSLSellTraffic.ADSLService.GroupID))
                      && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.RequestSeller.Request.ADSLSellTraffic.ADSLService.ADSLServiceGroup.CustomerGroupID))
                        //&& (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.RequestSeller.Request.ADSLSellTraffic.ADSLService.BandWidthID))
                        //&& (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.RequestSeller.Request.ADSLSellTraffic.ADSLService.DurationID))
                        //&& (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.RequestSeller.Request.ADSLSellTraffic.ADSLService.TrafficID))
                        //&& (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.RequestSeller.Request.ADSLSellTraffic.AdditionalServiceID))
                      && (!fromDate.HasValue || fromDate <= t.RequestSeller.Request.EndDate)
                      && (!toDate.HasValue || toDate >= t.RequestSeller.Request.EndDate)
                      && (t.RequestSeller.Request.RequestTypeID == (byte)DB.RequestType.ADSL)
                      && (ServiceTypeIds.Count == 0 || ServiceTypeIds.Contains((int)t.RequestSeller.Request.ADSLRequest.ADSLService.PaymentTypeID))
                      && (t.RequestSeller.RequestPayment.BaseCostID == 37)
                      && (TelNo == -1 || TelNo == t.RequestSeller.Request.TelephoneNo)
                      && (!ISAccepted.HasValue || ISAccepted == t.RequestSeller.RequestPayment.IsAccepted)
                      && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestSeller.RequestPayment.PaymentDate)
                       && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.RequestSeller.RequestPayment.UserID))
                      && (!ToPaymentDate.HasValue || ToPaymentDate >= t.RequestSeller.RequestPayment.PaymentDate)
                      && (!FromInsertDate.HasValue || FromInsertDate <= t.RequestSeller.Request.InsertDate)
                      && (!ToInsertDate.HasValue || ToInsertDate >= t.RequestSeller.Request.InsertDate)
                       && (t.RequestSeller.RequestPayment.PaymentDate != null || t.RequestSeller.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Distinct()
                      .Select(t => new ADSLSellerAgentSaleDetailsInfo
                      {
                          ADSLSellerAgentUSerName = t.ADSLSellerAgnetUser.User.FirstName + " " + t.ADSLSellerAgnetUser.User.LastName,
                          ADSLSellerAgnetName = t.ADSLSellerAgnetUser.ADSLSellerAgent.Title,
                          Customername = t.RequestSeller.Request.Customer.FirstNameOrTitle + " " + t.RequestSeller.Request.Customer.LastName,
                          TelephoneNo = t.RequestSeller.Request.TelephoneNo.ToString(),
                          Cost = t.RequestSeller.RequestPayment.Cost,
                          Tax = t.RequestSeller.RequestPayment.Tax,
                          AmountSum = t.RequestSeller.RequestPayment.AmountSum,
                          WorkFlow = "ADSL ثبت نام",
                          ADSLSaleType = "هزینه نصب و راه اندازی",
                          EndDate = Date.GetPersianDate(t.RequestSeller.Request.EndDate, Date.DateStringType.Short),
                          PaymentDate = Date.GetPersianDate(t.RequestSeller.RequestPayment.PaymentDate, Date.DateStringType.Short),
                          FicheNumber = t.RequestSeller.RequestPayment.FicheNunmber.ToString(),
                          PaymentType = DB.GetEnumDescriptionByValue(typeof(DB.PaymentType), t.RequestSeller.RequestPayment.PaymentType),
                          CenterCodeCost = t.RequestSeller.Request.Center.BillingCode.ToString()

                      }).OrderBy(t => t.ADSLSellerAgentUSerName).ToList();

            }

        }

        public static List<ADSLSellerAgentSaleDetailsInfo> GetADSLSellerAgnetsaleDetailsADSLChangeNOInfo(List<int> CityIDs,
                                                                                                        List<int> CenterIDs,
                                                                                                        List<int> ADSLSellerAgentIDs,
                                                                                                        List<int> ADSLSellerAgentUserIDs,
                                                                                                        List<int> PaymentTypeIDs,
                                                                                                        List<int> ServiceGroupIDs,
                                                                                                        List<int> CustomerGroupIDs,
                                                                                                        DateTime? fromDate,
                                                                                                        DateTime? toDate,
                                                                                                        bool? ISAccepted,
                                                                                                        List<int> ServiceTypeIds,
                                                                                                        long? TelNo,
                                                                                                        DateTime? FromPaymentDate,
                                                                                                        DateTime? ToPaymentDate,
                                                                                                        DateTime? FromInsertDate,
                                                                                                        DateTime? ToInsertDate)
        {
            //برای changeservice برای خرید مودم BASECOstID نداریم و چک نشده فعلا
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.Requests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { Request = a, RequestPayment = p })
                    .Join(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, u => u.ID, (a, u) => new { RequestSeller = a, ADSLSellerAgnetUser = u })

                    .Where(t =>
                    (CityIDs.Count == 0 || CityIDs.Contains(t.RequestSeller.Request.Center.Region.CityID))
                      && (CenterIDs.Count == 0 || CenterIDs.Contains(t.RequestSeller.Request.CenterID))
                      && (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ADSLSellerAgnetUser.SellerAgentID))
                      && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ADSLSellerAgnetUser.ID))
                      && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestSeller.RequestPayment.PaymentType))
                      && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.RequestSeller.Request.ADSLChangeService.ADSLService.GroupID))
                      && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.RequestSeller.Request.ADSLChangeService.ADSLService.ADSLServiceGroup.CustomerGroupID))
                      && (!fromDate.HasValue || fromDate <= t.RequestSeller.Request.EndDate)
                      && (!toDate.HasValue || toDate >= t.RequestSeller.Request.EndDate)
                      && (t.RequestSeller.Request.RequestTypeID == (byte)DB.RequestType.ADSLChangePlace)
                      && (ServiceTypeIds.Count == 0 || ServiceTypeIds.Contains((int)t.RequestSeller.Request.ADSLChangeService.ADSLService.PaymentTypeID))
                      && (t.RequestSeller.RequestPayment.BaseCostID == 112)
                      && (TelNo == -1 || TelNo == t.RequestSeller.Request.TelephoneNo)
                      && (!ISAccepted.HasValue || ISAccepted == t.RequestSeller.RequestPayment.IsAccepted)
                      && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestSeller.RequestPayment.PaymentDate)
                       && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.RequestSeller.RequestPayment.UserID))
                      && (!ToPaymentDate.HasValue || ToPaymentDate >= t.RequestSeller.RequestPayment.PaymentDate)
                      && (!FromInsertDate.HasValue || FromInsertDate <= t.RequestSeller.Request.InsertDate)
                      && (!ToInsertDate.HasValue || ToInsertDate >= t.RequestSeller.Request.InsertDate)
                       && (t.RequestSeller.RequestPayment.PaymentDate != null || t.RequestSeller.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Distinct()
                      .Select(t => new ADSLSellerAgentSaleDetailsInfo
                      {
                          ADSLSellerAgentUSerName = t.ADSLSellerAgnetUser.User.FirstName + " " + t.ADSLSellerAgnetUser.User.LastName,
                          ADSLSellerAgnetName = t.ADSLSellerAgnetUser.ADSLSellerAgent.Title,
                          Customername = t.RequestSeller.Request.Customer.FirstNameOrTitle + " " + t.RequestSeller.Request.Customer.LastName,
                          TelephoneNo = t.RequestSeller.Request.TelephoneNo.ToString(),
                          Cost = t.RequestSeller.RequestPayment.Cost,
                          Tax = t.RequestSeller.RequestPayment.Tax,
                          AmountSum = t.RequestSeller.RequestPayment.AmountSum,
                          ADSLSaleType = "",
                          WorkFlow = "تعویض شماره",
                          EndDate = Date.GetPersianDate(t.RequestSeller.Request.EndDate, Date.DateStringType.Short),
                          PaymentDate = Date.GetPersianDate(t.RequestSeller.RequestPayment.PaymentDate, Date.DateStringType.Short),
                          FicheNumber = t.RequestSeller.RequestPayment.FicheNunmber.ToString(),
                          PaymentType = DB.GetEnumDescriptionByValue(typeof(DB.PaymentType), t.RequestSeller.RequestPayment.PaymentType),
                          CenterCodeCost = t.RequestSeller.Request.Center.BillingCode.ToString()

                      }).OrderBy(t => t.ADSLSellerAgentUSerName).ToList();

            }
        }

        public static List<ADSLServiceSaleBandWidthSeperation> GetADSLServiceSaleBandwidthSeperation(DateTime? fromDate,
                                                                                                   DateTime? toDate,
                                                                                                   List<int> CityIDs,
                                                                                                   List<int> CenterIDs,
                                                                                                   List<int> ServiceIDs,
                                                                                                   List<int> ServiceGroupIDs,
            //List<int> SaleTypeIDs,
                                                                                                   List<int> BandWidthIDs,
                                                                                                   List<int> TrafficIDs,
                                                                                                   List<int> DurationIDs,
                                                                                                   List<int> SaleWaysIDs,
                                                                                                   List<int> PaymentTypeIDs,
                                                                                                   List<int> CustomerGroupIDs,
                                                                                                    long? fromCost,
                                                                                                    long? toCost,
                                                                                                    bool? HasModem,
                                                                                                    List<int> ServicePaymentTypeIDs,
                                                                                                    DateTime? FromPaymentDate, DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLRequests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLRequest = a, RequestPayment = p }).Where(t =>
                    (!fromDate.HasValue || fromDate <= t.ADSLRequest.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ADSLRequest.Request.EndDate)
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLRequest.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ADSLRequest.Request.CenterID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ADSLRequest.ServiceID))
                    && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLRequest.ADSLService.GroupID))
                    && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.ADSLRequest.ADSLService.BandWidthID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLRequest.ADSLService.TrafficID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLRequest.ADSLService.DurationID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestPayment.PaymentType))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (!HasModem.HasValue || HasModem == t.ADSLRequest.NeedModem)
                    && (t.ADSLRequest.ADSLService.TypeID == (byte)DB.ADSLServiceType.Service)
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestPayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.RequestPayment.PaymentDate)
                    && (t.RequestPayment.PaymentDate != null || t.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)
                    && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ADSLRequest.ADSLService.PaymentTypeID)))
                    .GroupBy(t => new
                    {
                        CenterCostCode = t.ADSLRequest.Request.Center.BillingCode

                    }).Select(t => new ADSLServiceSaleBandWidthSeperation
                    {
                        CenterCostCode = t.Key.CenterCostCode.ToString(),

                        Cost_Unlimited = GetADSLServiceSaleBandwidthSeperationByBandWidthID(fromDate,
                                                                                          toDate,
                                                                                           CityIDs,
                                                                                           CenterIDs,
                                                                                          ServiceIDs,
                                                                                          ServiceGroupIDs,

                                                                                           BandWidthIDs,
                                                                                           TrafficIDs,
                                                                                           DurationIDs,
                                                                                           SaleWaysIDs,
                                                                                           PaymentTypeIDs,
                                                                                           CustomerGroupIDs,
                                                                                           0,
                                                                                           HasModem,
                                                                                          t.Key.CenterCostCode,
                                                                                          ServicePaymentTypeIDs,
                                                                                          FromPaymentDate,
                                                                                          ToPaymentDate),

                        Cost_64 = GetADSLServiceSaleBandwidthSeperationByBandWidthID(fromDate,
                                                                                              toDate,
                                                                                               CityIDs,
                                                                                               CenterIDs,
                                                                                              ServiceIDs,
                                                                                              ServiceGroupIDs,
                                                                                               BandWidthIDs,
                                                                                               TrafficIDs,
                                                                                               DurationIDs,
                                                                                               SaleWaysIDs,
                                                                                               PaymentTypeIDs,
                                                                                               CustomerGroupIDs,
                                                                                               1,
                                                                                               HasModem,
                                                                                               t.Key.CenterCostCode,
                                                                                          ServicePaymentTypeIDs,
                                                                                          FromPaymentDate,
                                                                                          ToPaymentDate),
                        Cost_128 = GetADSLServiceSaleBandwidthSeperationByBandWidthID(fromDate,
                                                                                             toDate,
                                                                                              CityIDs,
                                                                                              CenterIDs,
                                                                                             ServiceIDs,
                                                                                             ServiceGroupIDs,
                                                                                              BandWidthIDs,
                                                                                              TrafficIDs,
                                                                                              DurationIDs,
                                                                                              SaleWaysIDs,
                                                                                              PaymentTypeIDs,
                                                                                              CustomerGroupIDs,
                                                                                              2,
                                                                                              HasModem,
                                                                                              t.Key.CenterCostCode,
                                                                                          ServicePaymentTypeIDs,
                                                                                          FromPaymentDate,
                                                                                          ToPaymentDate),
                        Cost_256 = GetADSLServiceSaleBandwidthSeperationByBandWidthID(fromDate,
                                                                                          toDate,
                                                                                           CityIDs,
                                                                                           CenterIDs,
                                                                                          ServiceIDs,
                                                                                          ServiceGroupIDs,
                                                                                           BandWidthIDs,
                                                                                           TrafficIDs,
                                                                                           DurationIDs,
                                                                                           SaleWaysIDs,
                                                                                           PaymentTypeIDs,
                                                                                           CustomerGroupIDs,
                                                                                           3,
                                                                                           HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                          ServicePaymentTypeIDs,
                                                                                          FromPaymentDate,
                                                                                          ToPaymentDate),

                        Cost_512 = GetADSLServiceSaleBandwidthSeperationByBandWidthID(fromDate,
                                                                                             toDate,
                                                                                              CityIDs,
                                                                                              CenterIDs,
                                                                                             ServiceIDs,
                                                                                             ServiceGroupIDs,
                                                                                              BandWidthIDs,
                                                                                              TrafficIDs,
                                                                                              DurationIDs,
                                                                                              SaleWaysIDs,
                                                                                              PaymentTypeIDs,
                                                                                              CustomerGroupIDs,
                                                                                              4, HasModem,
                                                                                              t.Key.CenterCostCode,
                                                                                          ServicePaymentTypeIDs,
                                                                                          FromPaymentDate,
                                                                                          ToPaymentDate),

                        Cost_1024 = GetADSLServiceSaleBandwidthSeperationByBandWidthID(fromDate,
                                                                                            toDate,
                                                                                             CityIDs,
                                                                                             CenterIDs,
                                                                                            ServiceIDs,
                                                                                            ServiceGroupIDs,
                                                                                             BandWidthIDs,
                                                                                             TrafficIDs,
                                                                                             DurationIDs,
                                                                                             SaleWaysIDs,
                                                                                             PaymentTypeIDs,
                                                                                             CustomerGroupIDs,
                                                                                             5, HasModem,
                                                                                             t.Key.CenterCostCode,
                                                                                          ServicePaymentTypeIDs,
                                                                                          FromPaymentDate,
                                                                                          ToPaymentDate),
                        Cost_2048 = GetADSLServiceSaleBandwidthSeperationByBandWidthID(fromDate,
                                                                                              toDate,
                                                                                               CityIDs,
                                                                                               CenterIDs,
                                                                                              ServiceIDs,
                                                                                              ServiceGroupIDs,
                                                                                               BandWidthIDs,
                                                                                               TrafficIDs,
                                                                                               DurationIDs,
                                                                                               SaleWaysIDs,
                                                                                               PaymentTypeIDs,
                                                                                               CustomerGroupIDs,
                                                                                               6
                                                                                               , HasModem,
                                                                                               t.Key.CenterCostCode,
                                                                                          ServicePaymentTypeIDs,
                                                                                          FromPaymentDate,
                                                                                          ToPaymentDate),

                        Cost_5120 = GetADSLServiceSaleBandwidthSeperationByBandWidthID(fromDate,
                                                                                       toDate,
                                                                                        CityIDs,
                                                                                        CenterIDs,
                                                                                       ServiceIDs,
                                                                                       ServiceGroupIDs,
                                                                                        BandWidthIDs,
                                                                                        TrafficIDs,
                                                                                        DurationIDs,
                                                                                        SaleWaysIDs,
                                                                                        PaymentTypeIDs,
                                                                                        CustomerGroupIDs,
                                                                                        7
                                                                                        , HasModem,
                                                                                        t.Key.CenterCostCode,
                                                                                        ServicePaymentTypeIDs,
                                                                                        FromPaymentDate,
                                                                                        ToPaymentDate),

                        Cost_10240 = GetADSLServiceSaleBandwidthSeperationByBandWidthID(fromDate,
                                                                                         toDate,
                                                                                          CityIDs,
                                                                                          CenterIDs,
                                                                                         ServiceIDs,
                                                                                         ServiceGroupIDs,
                                                                                          BandWidthIDs,
                                                                                          TrafficIDs,
                                                                                          DurationIDs,
                                                                                          SaleWaysIDs,
                                                                                          PaymentTypeIDs,
                                                                                          CustomerGroupIDs,
                                                                                          8
                                                                                          , HasModem,
                                                                                          t.Key.CenterCostCode,
                                                                                          ServicePaymentTypeIDs,
                                                                                          FromPaymentDate,
                                                                                          ToPaymentDate),

                        RanjeCost = GetADSLServiceSaleBandwidthADSLRequestRanjeCost(fromDate,
                                                                        toDate,
                                                                         CityIDs,
                                                                         CenterIDs,
                                                                        ServiceIDs,
                                                                        ServiceGroupIDs,
                                                                         BandWidthIDs,
                                                                         TrafficIDs,
                                                                         DurationIDs,
                                                                         SaleWaysIDs,
                                                                         PaymentTypeIDs,
                                                                         CustomerGroupIDs
                                                                         , HasModem,
                                                                         t.Key.CenterCostCode,
                                                                          ServicePaymentTypeIDs,
                                                                                          FromPaymentDate,
                                                                                          ToPaymentDate),

                        InstallmentCost = GetADSLServiceSaleBandwidthADSLRequestInstallmetCost(fromDate,
                                                                                toDate,
                                                                                 CityIDs,
                                                                                 CenterIDs,
                                                                                ServiceIDs,
                                                                                ServiceGroupIDs,
                                                                                 BandWidthIDs,
                                                                                 TrafficIDs,
                                                                                 DurationIDs,
                                                                                 SaleWaysIDs,
                                                                                 PaymentTypeIDs,
                                                                                 CustomerGroupIDs
                                                                                 , HasModem,
                                                                                 t.Key.CenterCostCode,
                                                                                 ServicePaymentTypeIDs,
                                                                                 FromPaymentDate,
                                                                                 ToPaymentDate),

                        AmountSum = GetADSLServiceSaleBandwidthADSLRequestAmountSum(fromDate,
                                                                                    toDate,
                                                                                     CityIDs,
                                                                                     CenterIDs,
                                                                                    ServiceIDs,
                                                                                    ServiceGroupIDs,
                                                                                     BandWidthIDs,
                                                                                     TrafficIDs,
                                                                                     DurationIDs,
                                                                                     PaymentTypeIDs,
                                                                                     CustomerGroupIDs
                                                                                     , HasModem,
                                                                                     t.Key.CenterCostCode,
                                                                                     ServicePaymentTypeIDs,
                                                                                     FromPaymentDate,
                                                                                     ToPaymentDate),

                        Tax = GetADSLServiceSaleBandwidthADSLRequestTax(fromDate,
                                                                       toDate,
                                                                        CityIDs,
                                                                        CenterIDs,
                                                                       ServiceIDs,
                                                                       ServiceGroupIDs,
                                                                        BandWidthIDs,
                                                                        TrafficIDs,
                                                                        DurationIDs,
                                                                        PaymentTypeIDs,
                                                                        CustomerGroupIDs
                                                                        , HasModem,
                                                                        t.Key.CenterCostCode,
                                                                        ServicePaymentTypeIDs,
                                                                        FromPaymentDate,
                                                                        ToPaymentDate)


                    }).Where(t =>
                        (fromCost == -1 || t.Cost_Unlimited >= fromCost)
                        && (fromCost == -1 || t.Cost_64 >= fromCost)
                        && (fromCost == -1 || t.Cost_128 >= fromCost)
                        && (fromCost == -1 || t.Cost_256 >= fromCost)
                        && (fromCost == -1 || t.Cost_512 >= fromCost)
                        && (fromCost == -1 || t.Cost_1024 >= fromCost)
                        && (fromCost == -1 || t.Cost_2048 >= fromCost)
                        && (fromCost == -1 || t.RanjeCost >= fromCost)
                        && (fromCost == -1 || t.InstallmentCost >= fromCost)
                        && (toCost == -1 || t.Cost_Unlimited <= toCost)
                        && (toCost == -1 || t.Cost_64 <= toCost)
                        && (toCost == -1 || t.Cost_128 <= toCost)
                        && (toCost == -1 || t.Cost_256 <= toCost)
                        & (toCost == -1 || t.Cost_512 <= toCost)
                        && (toCost == -1 || t.Cost_1024 <= toCost)
                        && (toCost == -1 || t.Cost_2048 <= toCost)
                        && (toCost == -1 || t.Cost_5120 <= toCost)
                        && (toCost == -1 || t.Cost_10240 <= toCost)
                        && (toCost == -1 || t.RanjeCost <= toCost)
                        & (toCost == -1 || t.InstallmentCost <= toCost))
                        .Select(t => new ADSLServiceSaleBandWidthSeperation
                        {
                            Cost_Unlimited = t.Cost_Unlimited,
                            Cost_64 = t.Cost_64,
                            Cost_128 = t.Cost_128,
                            Cost_256 = t.Cost_256,
                            Cost_512 = t.Cost_512,
                            Cost_1024 = t.Cost_1024,
                            Cost_2048 = t.Cost_2048,
                            Cost_5120 = t.Cost_5120,
                            Cost_10240 = t.Cost_10240,
                            InstallmentCost = t.InstallmentCost,
                            RanjeCost = t.RanjeCost,
                            CenterCostCode = t.CenterCostCode,
                            AmountSum = t.AmountSum,
                            Tax = t.Tax

                        }).ToList();


            }
        }


        public static long? GetADSLServiceSaleBandwidthADSLRequestAmountSum(DateTime? fromDate,
                                                                            DateTime? toDate,
                                                                            List<int> CityIDs,
                                                                            List<int> CenterIDs,
                                                                            List<int> ServiceIDs,
                                                                            List<int> ServiceGroupIDs,
                                                                            List<int> BandWidthIDs,
                                                                            List<int> TrafficIDs,
                                                                            List<int> DurationIDs,
                                                                            List<int> PaymentTypeIDs,
                                                                            List<int> CustomerGroupIDs,
                                                                            bool? HasModem,
                                                                            int? CenterCostCode,
                                                                            List<int> ServicePaymentTypeIDs,
                                                                            DateTime? FromPaymentDate,
                                                                            DateTime? ToPaymentdate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLRequests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLRequest = a, RequestPayment = p })
                    .Where(t =>
                    (!fromDate.HasValue || fromDate <= t.ADSLRequest.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ADSLRequest.Request.EndDate)
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLRequest.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ADSLRequest.Request.CenterID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ADSLRequest.ServiceID))
                    && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLRequest.ADSLService.ADSLServiceGroup.ID))
                    && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.ADSLRequest.ADSLService.BandWidthID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLRequest.ADSLService.TrafficID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLRequest.ADSLService.DurationID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestPayment.PaymentType))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (!HasModem.HasValue || HasModem == t.ADSLRequest.NeedModem)
                    && (t.ADSLRequest.Request.Center.BillingCode == CenterCostCode)
                    && (t.RequestPayment.BaseCostID == 44 || t.RequestPayment.BaseCostID == 107 || t.RequestPayment.BaseCostID == 37)
                    && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ADSLRequest.ADSLService.PaymentTypeID))
                    && (t.ADSLRequest.ADSLService.TypeID == (byte)DB.ADSLServiceType.Service)
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestPayment.PaymentDate)
                    && (!ToPaymentdate.HasValue || ToPaymentdate >= t.RequestPayment.PaymentDate)
                    && (t.RequestPayment.PaymentDate != null || t.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Sum(x => x.RequestPayment.AmountSum);

            }
        }

        public static long? GetADSLServiceSaleBandwidthADSLRequestTax(DateTime? fromDate,
                                                                            DateTime? toDate,
                                                                            List<int> CityIDs,
                                                                            List<int> CenterIDs,
                                                                            List<int> ServiceIDs,
                                                                            List<int> ServiceGroupIDs,
                                                                            List<int> BandWidthIDs,
                                                                            List<int> TrafficIDs,
                                                                            List<int> DurationIDs,
                                                                            List<int> PaymentTypeIDs,
                                                                            List<int> CustomerGroupIDs,
                                                                            bool? HasModem,
                                                                            int? CenterCostCode,
                                                                            List<int> ServicePaymentTypeIDs,
                                                                            DateTime? FromPaymentDate,
                                                                            DateTime? ToPaymentdate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLRequests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLRequest = a, RequestPayment = p })
                    .Where(t =>
                    (!fromDate.HasValue || fromDate <= t.ADSLRequest.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ADSLRequest.Request.EndDate)
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLRequest.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ADSLRequest.Request.CenterID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ADSLRequest.ServiceID))
                    && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLRequest.ADSLService.ADSLServiceGroup.ID))
                    && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.ADSLRequest.ADSLService.BandWidthID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLRequest.ADSLService.TrafficID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLRequest.ADSLService.DurationID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestPayment.PaymentType))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (!HasModem.HasValue || HasModem == t.ADSLRequest.NeedModem)
                    && (t.ADSLRequest.Request.Center.BillingCode == CenterCostCode)
                    && (t.RequestPayment.BaseCostID == 44)
                    && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ADSLRequest.ADSLService.PaymentTypeID))
                    && (t.ADSLRequest.ADSLService.TypeID == (byte)DB.ADSLServiceType.Service)
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestPayment.PaymentDate)
                    && (!ToPaymentdate.HasValue || ToPaymentdate >= t.RequestPayment.PaymentDate)).Sum(x => x.RequestPayment.Tax);

            }
        }

        public static long? GetADSLServiceSaleBandwidthSeperationByBandWidthID(DateTime? fromDate,
                                                                                                    DateTime? toDate,
                                                                                                    List<int> CityIDs,
                                                                                                    List<int> CenterIDs,
                                                                                                    List<int> ServiceIDs,
                                                                                                    List<int> ServiceGroupIDs,
                                                                                                    List<int> BandWidthIDs,
                                                                                                    List<int> TrafficIDs,
                                                                                                    List<int> DurationIDs,
                                                                                                    List<int> SaleWaysIDs,
                                                                                                    List<int> PaymentTypeIDs,
                                                                                                    List<int> CustomerGroupIDs,
                                                                                                    int BandWidthID,
                                                                                                    bool? HasModem,
                                                                                                    int? CenterCostCode,
                                                                                                    List<int> ServicePaymentTypeIDs,
                                                                                                    DateTime? FromPaymentDate,
                                                                                                    DateTime? ToPaymentdate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLRequests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLRequest = a, RequestPayment = p }).Where(t =>
                    (!fromDate.HasValue || fromDate <= t.ADSLRequest.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ADSLRequest.Request.EndDate)
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLRequest.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ADSLRequest.Request.CenterID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ADSLRequest.ServiceID))
                    && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLRequest.ADSLService.GroupID))
                    && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.ADSLRequest.ADSLService.BandWidthID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLRequest.ADSLService.TrafficID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLRequest.ADSLService.DurationID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestPayment.PaymentType))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                     && (t.ADSLRequest.ADSLService.BandWidthID == BandWidthID)
                    && (!HasModem.HasValue || HasModem == t.ADSLRequest.NeedModem)
                    && (t.ADSLRequest.Request.Center.BillingCode == CenterCostCode)
                    && (t.RequestPayment.BaseCostID == 44 || t.RequestPayment.BaseCostID == 45)
                    && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ADSLRequest.ADSLService.PaymentTypeID))
                    && (t.ADSLRequest.ADSLService.TypeID == (byte)DB.ADSLServiceType.Service)
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestPayment.PaymentDate)
                    && (!ToPaymentdate.HasValue || ToPaymentdate >= t.RequestPayment.PaymentDate)
                    && (t.RequestPayment.PaymentDate != null || t.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Sum(x => x.RequestPayment.Cost);

            }
        }

        public static long? GetADSLServiceSaleBandwidthADSLRequestRanjeCost(DateTime? fromDate,
                                                                   DateTime? toDate,
                                                                   List<int> CityIDs,
                                                                   List<int> CenterIDs,
                                                                   List<int> ServiceIDs,
                                                                   List<int> ServiceGroupIDs,
                                                                   List<int> BandWidthIDs,
                                                                   List<int> TrafficIDs,
                                                                   List<int> DurationIDs,
                                                                   List<int> SaleWaysIDs,
                                                                   List<int> PaymentTypeIDs,
                                                                   List<int> CustomerGroupIDs,
                                                                   bool? HasModem,
                                                                    int? CenterCodeCost,
                                                                    List<int> ServicePaymentTypeIDs,
                                                                    DateTime? FromPaymentDate,
                                                                    DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLRequests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLRequest = a, RequestPayment = p })
                    .Where(t =>
                    (!fromDate.HasValue || fromDate <= t.ADSLRequest.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ADSLRequest.Request.EndDate)
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLRequest.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ADSLRequest.Request.CenterID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ADSLRequest.ServiceID))
                    && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLRequest.ADSLService.ADSLServiceGroup.ID))
                    && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.ADSLRequest.ADSLService.BandWidthID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLRequest.ADSLService.TrafficID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLRequest.ADSLService.DurationID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestPayment.PaymentType))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (t.ADSLRequest.ADSLService.TypeID == (byte)DB.ADSLServiceType.Service)
                    && (t.ADSLRequest.Request.Center.BillingCode == CenterCodeCost)
                    && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ADSLRequest.ADSLService.PaymentTypeID))
                    && (t.RequestPayment.BaseCostID == 107)
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestPayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.RequestPayment.PaymentDate)
                    && (t.RequestPayment.PaymentDate != null || t.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Sum(t => t.RequestPayment.Cost);


            }
        }

        public static long? GetADSLServiceSaleBandwidthADSLChangeServiceRanjeCost(DateTime? fromDate,
                                                                  DateTime? toDate,
                                                                  List<int> CityIDs,
                                                                  List<int> CenterIDs,
                                                                  List<int> ServiceIDs,
                                                                  List<int> ServiceGroupIDs,
                                                                  List<int> BandWidthIDs,
                                                                  List<int> TrafficIDs,
                                                                  List<int> DurationIDs,
                                                                  List<int> SaleWaysIDs,
                                                                  List<int> PaymentTypeIDs,
                                                                  List<int> CustomerGroupIDs,
                                                                  bool? HasModem,
                                                                   int? CenterCodeCost,
                                                                  List<int> ServicePaymentTypeIDs,
                                                                   DateTime? FromPaymentDate,
                                                                   DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLChangeServices.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLChangeService = a, RequestPayment = p })
                    .Where(t =>
                    (!fromDate.HasValue || fromDate <= t.ADSLChangeService.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ADSLChangeService.Request.EndDate)
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLChangeService.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ADSLChangeService.Request.CenterID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ADSLChangeService.NewServiceID))
                    && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLChangeService.ADSLService.ADSLServiceGroup.ID))
                    && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.ADSLChangeService.ADSLService.BandWidthID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLChangeService.AdditionalTrafficeID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLChangeService.ADSLService.DurationID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestPayment.PaymentType))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLChangeService.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (t.ADSLChangeService.ADSLService.TypeID == (byte)DB.ADSLServiceType.Service)
                    && (t.ADSLChangeService.Request.Center.BillingCode == CenterCodeCost)
                    && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ADSLChangeService.ADSLService.PaymentTypeID))
                    && (t.RequestPayment.BaseCostID == 107)
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestPayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.RequestPayment.PaymentDate)
                    && (t.RequestPayment.PaymentDate != null || t.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Sum(t => t.RequestPayment.Cost);


            }
        }


        public static long? GetADSLServiceSaleBandwidthADSLRequestInstallmetCost(DateTime? fromDate,
                                                                  DateTime? toDate,
                                                                  List<int> CityIDs,
                                                                  List<int> CenterIDs,
                                                                  List<int> ServiceIDs,
                                                                  List<int> ServiceGroupIDs,
                                                                  List<int> BandWidthIDs,
                                                                  List<int> TrafficIDs,
                                                                  List<int> DurationIDs,
                                                                  List<int> SaleWaysIDs,
                                                                  List<int> PaymentTypeIDs,
                                                                  List<int> CustomerGroupIDs,
                                                                  bool? HasModem,
                                                                    int? CenterCodeCost,
                                                                  List<int> ServicePaymentTypeIDs,
                                                                 DateTime? FromPaymentDate,
                                                                 DateTime? ToPaymentdate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLRequests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLRequest = a, RequestPayment = p })
                    .Where(t =>
                    (!fromDate.HasValue || fromDate <= t.ADSLRequest.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ADSLRequest.Request.EndDate)
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLRequest.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ADSLRequest.Request.CenterID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ADSLRequest.ServiceID))
                    && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLRequest.ADSLService.ADSLServiceGroup.ID))
                    && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.ADSLRequest.ADSLService.BandWidthID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLRequest.ADSLService.TrafficID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLRequest.ADSLService.DurationID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestPayment.PaymentType))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (t.ADSLRequest.ADSLService.TypeID == (byte)DB.ADSLServiceType.Service)
                    && (t.ADSLRequest.Request.Center.BillingCode == CenterCodeCost)
                    && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ADSLRequest.ADSLService.PaymentTypeID))
                    && (t.RequestPayment.BaseCostID == 37)
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestPayment.PaymentDate)
                    && (!ToPaymentdate.HasValue || ToPaymentdate >= t.RequestPayment.PaymentDate)
                    && (t.RequestPayment.PaymentDate != null || t.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Sum(t => t.RequestPayment.Cost);


            }
        }

        public static long? GetADSLServiceSaleBandwidthADSLChangeServiceInstallmetCost(DateTime? fromDate,
                                                                 DateTime? toDate,
                                                                 List<int> CityIDs,
                                                                 List<int> CenterIDs,
                                                                 List<int> ServiceIDs,
                                                                 List<int> ServiceGroupIDs,
                                                                 List<int> BandWidthIDs,
                                                                 List<int> TrafficIDs,
                                                                 List<int> DurationIDs,
                                                                 List<int> SaleWaysIDs,
                                                                 List<int> PaymentTypeIDs,
                                                                 List<int> CustomerGroupIDs,
                                                                 bool? HasModem,
                                                                   int? CenterCodeCost,
                                                                List<int> ServicePaymentTypeIDs,
                                                                 DateTime? FromPaymentDate,
                                                                 DateTime? ToPaymentdate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLChangeServices.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLChangeService = a, RequestPayment = p })
                    .Where(t =>
                    (!fromDate.HasValue || fromDate <= t.ADSLChangeService.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ADSLChangeService.Request.EndDate)
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLChangeService.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ADSLChangeService.Request.CenterID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ADSLChangeService.NewServiceID))
                    && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLChangeService.ADSLService.ADSLServiceGroup.ID))
                    && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.ADSLChangeService.ADSLService.BandWidthID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLChangeService.AdditionalTrafficeID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLChangeService.ADSLService.DurationID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestPayment.PaymentType))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLChangeService.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (t.ADSLChangeService.ADSLService.TypeID == (byte)DB.ADSLServiceType.Service)
                    && (t.ADSLChangeService.Request.Center.BillingCode == CenterCodeCost)
                    && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ADSLChangeService.ADSLService.PaymentTypeID))
                    && (t.RequestPayment.BaseCostID == 37)
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestPayment.PaymentDate)
                    && (!ToPaymentdate.HasValue || ToPaymentdate >= t.RequestPayment.PaymentDate)).Sum(t => t.RequestPayment.Cost);


            }
        }
        public static List<ADSLServiceSaleBandWidthSeperation> GetADSLChangeServiCeServiceSaleBandwidthSeperation(DateTime? fromDate,
                                                                                                   DateTime? toDate,
                                                                                                   List<int> CityIDs,
                                                                                                   List<int> CenterIDs,
                                                                                                   List<int> ServiceIDs,
                                                                                                   List<int> ServiceGroupIDs,
            //List<int> SaleTypeIDs,
                                                                                                   List<int> BandWidthIDs,
                                                                                                   List<int> TrafficIDs,
                                                                                                   List<int> DurationIDs,
                                                                                                   List<int> SaleWaysIDs,
                                                                                                   List<int> PaymentTypeIDs,
                                                                                                   List<int> CustomerGroupIDs,
                                                                                                    long? fromCost,
                                                                                                    long? toCost,
                                                                                                    bool? HasModem,
                                                                                                    List<int> ServicePaymentTypeIDs,
                                                                                                     DateTime? FromPaymentDate,
                                                                                                     DateTime? ToPaymentdate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLChangeServices.Join(context.RequestPayments, c => c.ID, p => p.RequestID, (c, p) => new { ADSLChangeService = c, RequestPayment = p }).Where(t =>
                    (!fromDate.HasValue || fromDate <= t.ADSLChangeService.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ADSLChangeService.Request.EndDate)
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLChangeService.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ADSLChangeService.Request.CenterID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ADSLChangeService.NewServiceID))
                    && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLChangeService.ADSLService.ADSLServiceGroup.ID))
                    && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.ADSLChangeService.ADSLService.BandWidthID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLChangeService.ADSLService.TrafficID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLChangeService.ADSLService.DurationID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestPayment.PaymentType))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLChangeService.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ADSLChangeService.ADSLService.PaymentTypeID))
                    && (!HasModem.HasValue || HasModem == t.ADSLChangeService.NeedModem)
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestPayment.PaymentDate)
                    && (!ToPaymentdate.HasValue || ToPaymentdate >= t.RequestPayment.PaymentDate)
                    && (t.RequestPayment.PaymentDate != null || t.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)
                    && (SaleWaysIDs.Count == 0 || SaleWaysIDs.Contains((int)t.ADSLChangeService.ChangeServiceType)))
                    .GroupBy(t => new
                    {
                        CenterCostCode = t.ADSLChangeService.Request.Center.BillingCode

                    }).Select(t => new ADSLServiceSaleBandWidthSeperation
                    {
                        CenterCostCode = t.Key.CenterCostCode.ToString(),

                        Cost_Unlimited = GetADSLServiceSaleChangeServiceBandwidthSeperationByBandWidthID(fromDate,
                                                                                          toDate,
                                                                                           CityIDs,
                                                                                           CenterIDs,
                                                                                          ServiceIDs,
                                                                                          ServiceGroupIDs,
                            //SaleTypeIDs,
                                                                                           BandWidthIDs,
                                                                                           TrafficIDs,
                                                                                           DurationIDs,
                                                                                           SaleWaysIDs,
                                                                                           PaymentTypeIDs,
                                                                                           CustomerGroupIDs,
                                                                                           0,
                                                                                           HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicePaymentTypeIDs,
                                                                                           FromPaymentDate,
                                                                                           ToPaymentdate),
                        Cost_64 = GetADSLServiceSaleChangeServiceBandwidthSeperationByBandWidthID(fromDate,
                                                                                              toDate,
                                                                                               CityIDs,
                                                                                               CenterIDs,
                                                                                              ServiceIDs,
                                                                                              ServiceGroupIDs,
                                                                                               BandWidthIDs,
                                                                                               TrafficIDs,
                                                                                               DurationIDs,
                                                                                               SaleWaysIDs,
                                                                                               PaymentTypeIDs,
                                                                                               CustomerGroupIDs,
                                                                                               1,
                                                                                               HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicePaymentTypeIDs,
                                                                                           FromPaymentDate,
                                                                                           ToPaymentdate),
                        Cost_128 = GetADSLServiceSaleChangeServiceBandwidthSeperationByBandWidthID(fromDate,
                                                                                             toDate,
                                                                                              CityIDs,
                                                                                              CenterIDs,
                                                                                             ServiceIDs,
                                                                                             ServiceGroupIDs,
                                                                                              BandWidthIDs,
                                                                                              TrafficIDs,
                                                                                              DurationIDs,
                                                                                              SaleWaysIDs,
                                                                                              PaymentTypeIDs,
                                                                                              CustomerGroupIDs,
                                                                                              2,
                                                                                              HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicePaymentTypeIDs,
                                                                                           FromPaymentDate,
                                                                                           ToPaymentdate),
                        Cost_256 = GetADSLServiceSaleChangeServiceBandwidthSeperationByBandWidthID(fromDate,
                                                                                          toDate,
                                                                                           CityIDs,
                                                                                           CenterIDs,
                                                                                          ServiceIDs,
                                                                                          ServiceGroupIDs,
                                                                                           BandWidthIDs,
                                                                                           TrafficIDs,
                                                                                           DurationIDs,
                                                                                           SaleWaysIDs,
                                                                                           PaymentTypeIDs,
                                                                                           CustomerGroupIDs,
                                                                                           3,
                                                                                           HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicePaymentTypeIDs,
                                                                                           FromPaymentDate,
                                                                                           ToPaymentdate),

                        Cost_512 = GetADSLServiceSaleChangeServiceBandwidthSeperationByBandWidthID(fromDate,
                                                                                             toDate,
                                                                                              CityIDs,
                                                                                              CenterIDs,
                                                                                             ServiceIDs,
                                                                                             ServiceGroupIDs,
                                                                                              BandWidthIDs,
                                                                                              TrafficIDs,
                                                                                              DurationIDs,
                                                                                              SaleWaysIDs,
                                                                                              PaymentTypeIDs,
                                                                                              CustomerGroupIDs,
                                                                                              4,
                                                                                              HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicePaymentTypeIDs,
                                                                                           FromPaymentDate,
                                                                                           ToPaymentdate),

                        Cost_1024 = GetADSLServiceSaleChangeServiceBandwidthSeperationByBandWidthID(fromDate,
                                                                                            toDate,
                                                                                             CityIDs,
                                                                                             CenterIDs,
                                                                                            ServiceIDs,
                                                                                            ServiceGroupIDs,
                                                                                             BandWidthIDs,
                                                                                             TrafficIDs,
                                                                                             DurationIDs,
                                                                                             SaleWaysIDs,
                                                                                             PaymentTypeIDs,
                                                                                             CustomerGroupIDs,
                                                                                             5,
                                                                                             HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicePaymentTypeIDs,
                                                                                           FromPaymentDate,
                                                                                           ToPaymentdate),
                        Cost_2048 = GetADSLServiceSaleChangeServiceBandwidthSeperationByBandWidthID(fromDate,
                                                                                              toDate,
                                                                                               CityIDs,
                                                                                               CenterIDs,
                                                                                              ServiceIDs,
                                                                                              ServiceGroupIDs,
                                                                                               BandWidthIDs,
                                                                                               TrafficIDs,
                                                                                               DurationIDs,
                                                                                               SaleWaysIDs,
                                                                                               PaymentTypeIDs,
                                                                                               CustomerGroupIDs,
                                                                                               6,
                                                                                               HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicePaymentTypeIDs,
                                                                                           FromPaymentDate,
                                                                                           ToPaymentdate),

                        Cost_5120 = GetADSLServiceSaleChangeServiceBandwidthSeperationByBandWidthID(fromDate,
                                                                                                    toDate,
                                                                                                     CityIDs,
                                                                                                     CenterIDs,
                                                                                                    ServiceIDs,
                                                                                                    ServiceGroupIDs,
                                                                                                     BandWidthIDs,
                                                                                                     TrafficIDs,
                                                                                                     DurationIDs,
                                                                                                     SaleWaysIDs,
                                                                                                     PaymentTypeIDs,
                                                                                                     CustomerGroupIDs,
                                                                                                     7,
                                                                                                     HasModem,
                                                                                                 t.Key.CenterCostCode,
                                                                                                 ServicePaymentTypeIDs,
                                                                                                 FromPaymentDate,
                                                                                                 ToPaymentdate),

                        Cost_10240 = GetADSLServiceSaleChangeServiceBandwidthSeperationByBandWidthID(fromDate,
                                                                                                     toDate,
                                                                                                      CityIDs,
                                                                                                      CenterIDs,
                                                                                                     ServiceIDs,
                                                                                                     ServiceGroupIDs,
                                                                                                      BandWidthIDs,
                                                                                                      TrafficIDs,
                                                                                                      DurationIDs,
                                                                                                      SaleWaysIDs,
                                                                                                      PaymentTypeIDs,
                                                                                                      CustomerGroupIDs,
                                                                                                      8,
                                                                                                      HasModem,
                                                                                                  t.Key.CenterCostCode,
                                                                                                  ServicePaymentTypeIDs,
                                                                                                  FromPaymentDate,
                                                                                                  ToPaymentdate),

                        RanjeCost = GetADSLServiceSaleBandwidthADSLChangeServiceRanjeCost(fromDate,
                                                                                    toDate,
                                                                                    CityIDs,
                                                                                    CenterIDs,
                                                                                     ServiceIDs,
                                                                                    ServiceGroupIDs,
                                                                                    BandWidthIDs,
                                                                                    TrafficIDs,
                                                                                    DurationIDs,
                                                                                    SaleWaysIDs,
                                                                                    PaymentTypeIDs,
                                                                                    CustomerGroupIDs
                                                                                    , HasModem,
                                                                                    t.Key.CenterCostCode,
                                                                                           ServicePaymentTypeIDs,
                                                                                           FromPaymentDate,
                                                                                           ToPaymentdate),

                        InstallmentCost = GetADSLServiceSaleBandwidthADSLChangeServiceInstallmetCost(fromDate,
                                                                                toDate,
                                                                                 CityIDs,
                                                                                 CenterIDs,
                                                                                ServiceIDs,
                                                                                ServiceGroupIDs,
                                                                                 BandWidthIDs,
                                                                                 TrafficIDs,
                                                                                 DurationIDs,
                                                                                 SaleWaysIDs,
                                                                                 PaymentTypeIDs,
                                                                                 CustomerGroupIDs
                                                                                 , HasModem,
                                                                                 t.Key.CenterCostCode,
                                                                                ServicePaymentTypeIDs,
                                                                                FromPaymentDate,
                                                                                ToPaymentdate),




                        AmountSum = GetADSLServiceSaleBandWidthADSLChangeServiceAmountSum(fromDate,
                                                                                  toDate,
                                                                                   CityIDs,
                                                                                   CenterIDs,
                                                                                  ServiceIDs,
                                                                                  ServiceGroupIDs,
                                                                                   BandWidthIDs,
                                                                                   TrafficIDs,
                                                                                   DurationIDs,
                                                                                   PaymentTypeIDs,
                                                                                   CustomerGroupIDs
                                                                                   , HasModem,
                                                                                   t.Key.CenterCostCode,
                                                                                  ServicePaymentTypeIDs,
                                                                                  FromPaymentDate,
                                                                                  ToPaymentdate,
                                                                                  SaleWaysIDs),

                        Tax = GetADSLServiceSaleBandWidthADSLChangeServiceTax(fromDate,
                                                                                        toDate,
                                                                                         CityIDs,
                                                                                         CenterIDs,
                                                                                        ServiceIDs,
                                                                                        ServiceGroupIDs,
                                                                                         BandWidthIDs,
                                                                                         TrafficIDs,
                                                                                         DurationIDs,
                                                                                         PaymentTypeIDs,
                                                                                         CustomerGroupIDs
                                                                                         , HasModem,
                                                                                         t.Key.CenterCostCode,
                                                                                        ServicePaymentTypeIDs,
                                                                                        FromPaymentDate,
                                                                                        ToPaymentdate,
                                                                                        SaleWaysIDs),

                    }).Where(t =>
                        (fromCost == -1 || t.Cost_Unlimited >= fromCost)
                        && (fromCost == -1 || t.Cost_64 >= fromCost)
                        && (fromCost == -1 || t.Cost_128 >= fromCost)
                        && (fromCost == -1 || t.Cost_256 >= fromCost)
                        && (fromCost == -1 || t.Cost_512 >= fromCost)
                        && (fromCost == -1 || t.Cost_1024 >= fromCost)
                        && (fromCost == -1 || t.Cost_2048 >= fromCost)
                        && (fromCost == -1 || t.RanjeCost >= fromCost)
                        && (fromCost == -1 || t.InstallmentCost >= fromCost)
                        && (toCost == -1 || t.Cost_Unlimited <= toCost)
                        && (toCost == -1 || t.Cost_64 <= toCost)
                        && (toCost == -1 || t.Cost_128 <= toCost)
                        && (toCost == -1 || t.Cost_256 <= toCost)
                        & (toCost == -1 || t.Cost_512 <= toCost)
                        && (toCost == -1 || t.Cost_1024 <= toCost)
                        && (toCost == -1 || t.Cost_2048 <= toCost)
                        && (toCost == -1 || t.Cost_5120 <= toCost)
                        && (toCost == -1 || t.Cost_10240 <= toCost)
                        && (toCost == -1 || t.RanjeCost <= toCost)
                        & (toCost == -1 || t.InstallmentCost <= toCost))
                        .Select(t => new ADSLServiceSaleBandWidthSeperation
                        {
                            Cost_Unlimited = t.Cost_Unlimited,
                            Cost_64 = t.Cost_64,
                            Cost_128 = t.Cost_128,
                            Cost_256 = t.Cost_256,
                            Cost_512 = t.Cost_512,
                            Cost_1024 = t.Cost_1024,
                            Cost_2048 = t.Cost_2048,
                            Cost_5120 = t.Cost_5120,
                            Cost_10240 = t.Cost_10240,
                            InstallmentCost = t.InstallmentCost,
                            RanjeCost = t.RanjeCost,
                            CenterCostCode = t.CenterCostCode,
                            AmountSum = t.AmountSum,
                            Tax = t.Tax

                        }).ToList();


            }
        }

        public static long? GetADSLServiceSaleBandWidthADSLChangeServiceAmountSum(DateTime? fromDate,
                                                                                  DateTime? toDate,
                                                                                  List<int> CityIDs,
                                                                                  List<int> CenterIDs,
                                                                                  List<int> ServiceIDs,
                                                                                  List<int> ServiceGroupIDs,
                                                                                  List<int> BandWidthIDs,
                                                                                  List<int> TrafficIDs,
                                                                                  List<int> DurationIDs,
                                                                                  List<int> PaymentTypeIDs,
                                                                                  List<int> CustomerGroupIDs,
                                                                                  bool? HasModem,
                                                                                  int? CenterCodeCost,
                                                                                  List<int> ServicePaymentTypeIDs,
                                                                                  DateTime? FromPaymentDate,
                                                                                  DateTime? ToPaymentDate,
                                                                                  List<int> SaleWayIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLChangeServices.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLChangeService = a, RequestPayment = p }).Where(t =>
                    (!fromDate.HasValue || fromDate <= t.ADSLChangeService.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ADSLChangeService.Request.EndDate)
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLChangeService.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ADSLChangeService.Request.CenterID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ADSLChangeService.NewServiceID))
                    && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLChangeService.ADSLService.ADSLServiceGroup.ID))
                    && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.ADSLChangeService.ADSLService.BandWidthID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLChangeService.ADSLService.TrafficID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLChangeService.ADSLService.DurationID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestPayment.PaymentType))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLChangeService.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (t.ADSLChangeService.Request.Center.BillingCode == CenterCodeCost)
                    && (t.RequestPayment.BaseCostID == 44 || t.RequestPayment.BaseCostID == 45 || t.RequestPayment.BaseCostID == 107 || t.RequestPayment.BaseCostID == 37)
                    && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ADSLChangeService.ADSLService.PaymentTypeID))
                    && (!HasModem.HasValue || HasModem == t.ADSLChangeService.NeedModem)
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestPayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.RequestPayment.PaymentDate)
                    && (SaleWayIDs.Count == 0 || SaleWayIDs.Contains((int)t.ADSLChangeService.ChangeServiceType))
                    && (t.RequestPayment.PaymentDate != null || t.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Sum(t => t.RequestPayment.AmountSum);
            }
        }

        public static long? GetADSLServiceSaleBandWidthADSLChangeServiceTax(DateTime? fromDate,
                                                                            DateTime? toDate,
                                                                            List<int> CityIDs,
                                                                            List<int> CenterIDs,
                                                                            List<int> ServiceIDs,
                                                                            List<int> ServiceGroupIDs,
                                                                            List<int> BandWidthIDs,
                                                                            List<int> TrafficIDs,
                                                                            List<int> DurationIDs,
                                                                            List<int> PaymentTypeIDs,
                                                                            List<int> CustomerGroupIDs,
                                                                            bool? HasModem,
                                                                            int? CenterCodeCost,
                                                                            List<int> ServicePaymentTypeIDs,
                                                                            DateTime? FromPaymentDate,
                                                                            DateTime? ToPaymentDate,
                                                                            List<int> SaleWayIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLChangeServices.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLChangeService = a, RequestPayment = p }).Where(t =>
                    (!fromDate.HasValue || fromDate <= t.ADSLChangeService.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ADSLChangeService.Request.EndDate)
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLChangeService.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ADSLChangeService.Request.CenterID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ADSLChangeService.NewServiceID))
                    && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLChangeService.ADSLService.ADSLServiceGroup.ID))
                    && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.ADSLChangeService.ADSLService.BandWidthID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLChangeService.ADSLService.TrafficID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLChangeService.ADSLService.DurationID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestPayment.PaymentType))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLChangeService.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (t.ADSLChangeService.Request.Center.BillingCode == CenterCodeCost)
                    && (t.RequestPayment.BaseCostID == 44 || t.RequestPayment.BaseCostID == 45)
                    && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ADSLChangeService.ADSLService.PaymentTypeID))
                    && (!HasModem.HasValue || HasModem == t.ADSLChangeService.NeedModem)
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestPayment.PaymentDate)
                    && (SaleWayIDs.Count == 0 || SaleWayIDs.Contains((int)t.ADSLChangeService.ChangeServiceType))
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.RequestPayment.PaymentDate)).Sum(t => t.RequestPayment.Tax);
            }
        }

        public static long? GetADSLServiceSaleChangeServiceBandwidthSeperationByBandWidthID(DateTime? fromDate,
                                                                                               DateTime? toDate,
                                                                                               List<int> CityIDs,
                                                                                               List<int> CenterIDs,
                                                                                               List<int> ServiceIDs,
                                                                                               List<int> ServiceGroupIDs,
            //List<int> SaleTypeIDs,
                                                                                               List<int> BandWidthIDs,
                                                                                               List<int> TrafficIDs,
                                                                                               List<int> DurationIDs,
                                                                                               List<int> SaleWaysIDs,
                                                                                               List<int> PaymentTypeIDs,
                                                                                               List<int> CustomerGroupIDs,
                                                                                               int BandWidthID,
                                                                                               bool? HasModem,
                                                                                               int? CenterCodeCost,
                                                                                               List<int> ServicePaymentTypeIDs,
                                                                                               DateTime? FromPaymentDate,
                                                                                               DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLChangeServices.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLChangeService = a, RequestPayment = p }).Where(t =>
                    (!fromDate.HasValue || fromDate <= t.ADSLChangeService.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ADSLChangeService.Request.EndDate)
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLChangeService.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ADSLChangeService.Request.CenterID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ADSLChangeService.NewServiceID))
                    && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLChangeService.ADSLService.ADSLServiceGroup.ID))
                    && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.ADSLChangeService.ADSLService.BandWidthID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLChangeService.ADSLService.TrafficID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLChangeService.ADSLService.DurationID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestPayment.PaymentType))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLChangeService.ADSLService.ADSLServiceGroup.CustomerGroupID))
                     && (t.ADSLChangeService.ADSLService.BandWidthID == BandWidthID)
                    && (t.ADSLChangeService.Request.Center.BillingCode == CenterCodeCost)
                    && (t.RequestPayment.BaseCostID == 44 || t.RequestPayment.BaseCostID == 45)
                    && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ADSLChangeService.ADSLService.PaymentTypeID))
                    && (!HasModem.HasValue || HasModem == t.ADSLChangeService.NeedModem)
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestPayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.RequestPayment.PaymentDate)
                    && (SaleWaysIDs.Count == 0 || SaleWaysIDs.Contains((int)t.ADSLChangeService.ChangeServiceType))
                    && (t.RequestPayment.PaymentDate != null || t.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)
                    ).Sum(t => t.RequestPayment.Cost);
            }



        }

        public static List<ADSLTrafficSaleTrafficSeperation> GetADSLRequestTrafficSaleTrafficSeperation(DateTime? fromDate,
                                                                                                   DateTime? toDate,
                                                                                                   List<int> CityIDs,
                                                                                                   List<int> CenterIDs,
                                                                                                   List<int> ServiceIDs,
                                                                                                   List<int> ServiceGroupIDs,
                                                                                                   List<int> BandWidthIDs,
                                                                                                   List<int> TrafficIDs,
                                                                                                   List<int> DurationIDs,
                                                                                                   List<int> SaleWaysIDs,
                                                                                                   List<int> PaymentTypeIDs,
                                                                                                   List<int> CustomerGroupIDs,
                                                                                                    long? fromCost,
                                                                                                    long? toCost,
                                                                                                    bool? HasModem,
                                                                                                    List<int> ServicepaymentTypeIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLRequests.Join(context.ADSLServices, a => a.AdditionalServiceID, s => s.ID, (a, s) => new { ADSLRequest = a, ADSLService = s })
                    .Join(context.RequestPayments, a => a.ADSLRequest.ID, p => p.RequestID, (a, p) => new { ALL = a, RequestPayment = p }).Where(t =>
                    (!fromDate.HasValue || fromDate <= t.ALL.ADSLRequest.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ALL.ADSLRequest.Request.EndDate)
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ALL.ADSLRequest.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ALL.ADSLRequest.Request.CenterID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ALL.ADSLRequest.AdditionalServiceID))
                    && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ALL.ADSLService.ADSLServiceGroup.ID))
                    && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.ALL.ADSLService.BandWidthID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ALL.ADSLService.TrafficID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ALL.ADSLService.DurationID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestPayment.PaymentType))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ALL.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (!HasModem.HasValue || HasModem == t.ALL.ADSLRequest.NeedModem)
                    && (t.ALL.ADSLRequest.AdditionalServiceID != null)
                    && (ServicepaymentTypeIDs.Count == 0 || ServicepaymentTypeIDs.Contains((int)t.ALL.ADSLService.PaymentTypeID))
                    && (t.ALL.ADSLService.TypeID == (byte)DB.ADSLServiceType.Traffic)
                    && (t.RequestPayment.PaymentDate != null || t.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment))
                    .GroupBy(t => new
                    {
                        CenterCostCode = t.ALL.ADSLRequest.Request.Center.BillingCode

                    }).Select(t => new ADSLTrafficSaleTrafficSeperation
                    {
                        CenterCostCode = t.Key.CenterCostCode.ToString(),
                        //RanjeCost = t.Count() * 53000,
                        //InstallmentCost = t.Count() * 53000,
                        Cost_Unlimited = GetADSLTrafficSaleADSLRequestTrafficSeperationByTrafficID(fromDate,
                                                                                          toDate,
                                                                                           CityIDs,
                                                                                           CenterIDs,
                                                                                          ServiceIDs,
                                                                                          ServiceGroupIDs,
                                                                                           BandWidthIDs,
                                                                                           TrafficIDs,
                                                                                           DurationIDs,
                                                                                           SaleWaysIDs,
                                                                                           PaymentTypeIDs,
                                                                                           CustomerGroupIDs,
                                                                                           0,
                                                                                           HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicepaymentTypeIDs),
                        Cost_0 = GetADSLTrafficSaleADSLRequestTrafficSeperationByTrafficID(fromDate,
                                                                                              toDate,
                                                                                               CityIDs,
                                                                                               CenterIDs,
                                                                                              ServiceIDs,
                                                                                              ServiceGroupIDs,
                                                                                               BandWidthIDs,
                                                                                               TrafficIDs,
                                                                                               DurationIDs,
                                                                                               SaleWaysIDs,
                                                                                               PaymentTypeIDs,
                                                                                               CustomerGroupIDs,
                                                                                               1,
                                                                                               HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicepaymentTypeIDs),
                        Cost_0_5 = GetADSLTrafficSaleADSLRequestTrafficSeperationByTrafficID(fromDate,
                                                                                             toDate,
                                                                                              CityIDs,
                                                                                              CenterIDs,
                                                                                             ServiceIDs,
                                                                                             ServiceGroupIDs,
                                                                                              BandWidthIDs,
                                                                                              TrafficIDs,
                                                                                              DurationIDs,
                                                                                              SaleWaysIDs,
                                                                                              PaymentTypeIDs,
                                                                                              CustomerGroupIDs,
                                                                                              2,
                                                                                              HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicepaymentTypeIDs),
                        Cost_1 = GetADSLTrafficSaleADSLRequestTrafficSeperationByTrafficID(fromDate,
                                                                                          toDate,
                                                                                           CityIDs,
                                                                                           CenterIDs,
                                                                                          ServiceIDs,
                                                                                          ServiceGroupIDs,
                                                                                           BandWidthIDs,
                                                                                           TrafficIDs,
                                                                                           DurationIDs,
                                                                                           SaleWaysIDs,
                                                                                           PaymentTypeIDs,
                                                                                           CustomerGroupIDs,
                                                                                           3,
                                                                                           HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicepaymentTypeIDs),

                        Cost_2 = GetADSLTrafficSaleADSLRequestTrafficSeperationByTrafficID(fromDate,
                                                                                             toDate,
                                                                                              CityIDs,
                                                                                              CenterIDs,
                                                                                             ServiceIDs,
                                                                                             ServiceGroupIDs,
                                                                                              BandWidthIDs,
                                                                                              TrafficIDs,
                                                                                              DurationIDs,
                                                                                              SaleWaysIDs,
                                                                                              PaymentTypeIDs,
                                                                                              CustomerGroupIDs,
                                                                                              4,
                                                                                              HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicepaymentTypeIDs),

                        Cost_3 = GetADSLTrafficSaleADSLRequestTrafficSeperationByTrafficID(fromDate,
                                                                                            toDate,
                                                                                             CityIDs,
                                                                                             CenterIDs,
                                                                                            ServiceIDs,
                                                                                            ServiceGroupIDs,
                                                                                             BandWidthIDs,
                                                                                             TrafficIDs,
                                                                                             DurationIDs,
                                                                                             SaleWaysIDs,
                                                                                             PaymentTypeIDs,
                                                                                             CustomerGroupIDs,
                                                                                             5,
                                                                                             HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicepaymentTypeIDs),
                        Cost_4 = GetADSLTrafficSaleADSLRequestTrafficSeperationByTrafficID(fromDate,
                                                                                              toDate,
                                                                                               CityIDs,
                                                                                               CenterIDs,
                                                                                              ServiceIDs,
                                                                                              ServiceGroupIDs,
                                                                                               BandWidthIDs,
                                                                                               TrafficIDs,
                                                                                               DurationIDs,
                                                                                               SaleWaysIDs,
                                                                                               PaymentTypeIDs,
                                                                                               CustomerGroupIDs,
                                                                                               6,
                                                                                               HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicepaymentTypeIDs),
                        Cost_5 = GetADSLTrafficSaleADSLRequestTrafficSeperationByTrafficID(fromDate,
                                                                                                  toDate,
                                                                                                   CityIDs,
                                                                                                   CenterIDs,
                                                                                                  ServiceIDs,
                                                                                                  ServiceGroupIDs,
                                                                                                   BandWidthIDs,
                                                                                                   TrafficIDs,
                                                                                                   DurationIDs,
                                                                                                   SaleWaysIDs,
                                                                                                   PaymentTypeIDs,
                                                                                                   CustomerGroupIDs,
                                                                                                  7,
                                                                                                   HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicepaymentTypeIDs),
                        Cost_6 = GetADSLTrafficSaleADSLRequestTrafficSeperationByTrafficID(fromDate,
                                                                                                     toDate,
                                                                                                      CityIDs,
                                                                                                      CenterIDs,
                                                                                                     ServiceIDs,
                                                                                                     ServiceGroupIDs,
                                                                                                      BandWidthIDs,
                                                                                                      TrafficIDs,
                                                                                                      DurationIDs,
                                                                                                      SaleWaysIDs,
                                                                                                      PaymentTypeIDs,
                                                                                                      CustomerGroupIDs,
                                                                                                      8,
                                                                                                      HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicepaymentTypeIDs),

                        Cost_7 = GetADSLTrafficSaleADSLRequestTrafficSeperationByTrafficID(fromDate,
                                                                                                  toDate,
                                                                                                   CityIDs,
                                                                                                   CenterIDs,
                                                                                                  ServiceIDs,
                                                                                                  ServiceGroupIDs,
                                                                                                   BandWidthIDs,
                                                                                                   TrafficIDs,
                                                                                                   DurationIDs,
                                                                                                   SaleWaysIDs,
                                                                                                   PaymentTypeIDs,
                                                                                                   CustomerGroupIDs,
                                                                                                   9,
                                                                                                   HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicepaymentTypeIDs),
                        Cost_8 = GetADSLTrafficSaleADSLRequestTrafficSeperationByTrafficID(fromDate,
                                                                                                  toDate,
                                                                                                   CityIDs,
                                                                                                   CenterIDs,
                                                                                                  ServiceIDs,
                                                                                                  ServiceGroupIDs,
                                                                                                   BandWidthIDs,
                                                                                                   TrafficIDs,
                                                                                                   DurationIDs,
                                                                                                   SaleWaysIDs,
                                                                                                   PaymentTypeIDs,
                                                                                                   CustomerGroupIDs,
                                                                                                   10,
                                                                                                   HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicepaymentTypeIDs),
                        Cost_9 = GetADSLTrafficSaleADSLRequestTrafficSeperationByTrafficID(fromDate,
                                                                                                  toDate,
                                                                                                   CityIDs,
                                                                                                   CenterIDs,
                                                                                                  ServiceIDs,
                                                                                                  ServiceGroupIDs,
                                                                                                   BandWidthIDs,
                                                                                                   TrafficIDs,
                                                                                                   DurationIDs,
                                                                                                   SaleWaysIDs,
                                                                                                   PaymentTypeIDs,
                                                                                                   CustomerGroupIDs,
                                                                                                   11,
                                                                                                   HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicepaymentTypeIDs),

                        Cost_10 = GetADSLTrafficSaleADSLRequestTrafficSeperationByTrafficID(fromDate,
                                                                                              toDate,
                                                                                               CityIDs,
                                                                                               CenterIDs,
                                                                                              ServiceIDs,
                                                                                              ServiceGroupIDs,
                                                                                               BandWidthIDs,
                                                                                               TrafficIDs,
                                                                                               DurationIDs,
                                                                                               SaleWaysIDs,
                                                                                               PaymentTypeIDs,
                                                                                               CustomerGroupIDs,
                                                                                               12,
                                                                                               HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicepaymentTypeIDs),

                        Cost_11 = GetADSLTrafficSaleADSLRequestTrafficSeperationByTrafficID(fromDate,
                                                                                                  toDate,
                                                                                                   CityIDs,
                                                                                                   CenterIDs,
                                                                                                  ServiceIDs,
                                                                                                  ServiceGroupIDs,
                                                                                                   BandWidthIDs,
                                                                                                   TrafficIDs,
                                                                                                   DurationIDs,
                                                                                                   SaleWaysIDs,
                                                                                                   PaymentTypeIDs,
                                                                                                   CustomerGroupIDs,
                                                                                                   13,
                                                                                                   HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicepaymentTypeIDs),

                        Cost_12 = GetADSLTrafficSaleADSLRequestTrafficSeperationByTrafficID(fromDate,
                                                                                                  toDate,
                                                                                                   CityIDs,
                                                                                                   CenterIDs,
                                                                                                  ServiceIDs,
                                                                                                  ServiceGroupIDs,
                                                                                                   BandWidthIDs,
                                                                                                   TrafficIDs,
                                                                                                   DurationIDs,
                                                                                                   SaleWaysIDs,
                                                                                                   PaymentTypeIDs,
                                                                                                   CustomerGroupIDs,
                                                                                                   14,
                                                                                                   HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicepaymentTypeIDs),

                        Cost_13 = GetADSLTrafficSaleADSLRequestTrafficSeperationByTrafficID(fromDate,
                                                                                              toDate,
                                                                                               CityIDs,
                                                                                               CenterIDs,
                                                                                              ServiceIDs,
                                                                                              ServiceGroupIDs,
                                                                                               BandWidthIDs,
                                                                                               TrafficIDs,
                                                                                               DurationIDs,
                                                                                               SaleWaysIDs,
                                                                                               PaymentTypeIDs,
                                                                                               CustomerGroupIDs,
                                                                                               15,
                                                                                               HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicepaymentTypeIDs),

                        Cost_14 = GetADSLTrafficSaleADSLRequestTrafficSeperationByTrafficID(fromDate,
                                                                                                  toDate,
                                                                                                   CityIDs,
                                                                                                   CenterIDs,
                                                                                                  ServiceIDs,
                                                                                                  ServiceGroupIDs,
                                                                                                   BandWidthIDs,
                                                                                                   TrafficIDs,
                                                                                                   DurationIDs,
                                                                                                   SaleWaysIDs,
                                                                                                   PaymentTypeIDs,
                                                                                                   CustomerGroupIDs,
                                                                                                   16,
                                                                                                   HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicepaymentTypeIDs),

                        Cost_15 = GetADSLTrafficSaleADSLRequestTrafficSeperationByTrafficID(fromDate,
                                                                                                  toDate,
                                                                                                   CityIDs,
                                                                                                   CenterIDs,
                                                                                                  ServiceIDs,
                                                                                                  ServiceGroupIDs,
                                                                                                   BandWidthIDs,
                                                                                                   TrafficIDs,
                                                                                                   DurationIDs,
                                                                                                   SaleWaysIDs,
                                                                                                   PaymentTypeIDs,
                                                                                                   CustomerGroupIDs,
                                                                                                   17,
                                                                                                   HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicepaymentTypeIDs),

                        Cost_16 = GetADSLTrafficSaleADSLRequestTrafficSeperationByTrafficID(fromDate,
                                                                                                 toDate,
                                                                                                  CityIDs,
                                                                                                  CenterIDs,
                                                                                                 ServiceIDs,
                                                                                                 ServiceGroupIDs,
                                                                                                  BandWidthIDs,
                                                                                                  TrafficIDs,
                                                                                                  DurationIDs,
                                                                                                  SaleWaysIDs,
                                                                                                  PaymentTypeIDs,
                                                                                                  CustomerGroupIDs,
                                                                                                  18,
                                                                                                  HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicepaymentTypeIDs),

                        Cost_17 = GetADSLTrafficSaleADSLRequestTrafficSeperationByTrafficID(fromDate,
                                                                                                    toDate,
                                                                                                     CityIDs,
                                                                                                     CenterIDs,
                                                                                                    ServiceIDs,
                                                                                                    ServiceGroupIDs,
                                                                                                     BandWidthIDs,
                                                                                                     TrafficIDs,
                                                                                                     DurationIDs,
                                                                                                     SaleWaysIDs,
                                                                                                     PaymentTypeIDs,
                                                                                                     CustomerGroupIDs,
                                                                                                     19,
                                                                                                     HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicepaymentTypeIDs),

                        Cost_18 = GetADSLTrafficSaleADSLRequestTrafficSeperationByTrafficID(fromDate,
                                                                                                     toDate,
                                                                                                      CityIDs,
                                                                                                      CenterIDs,
                                                                                                     ServiceIDs,
                                                                                                     ServiceGroupIDs,
                                                                                                      BandWidthIDs,
                                                                                                      TrafficIDs,
                                                                                                      DurationIDs,
                                                                                                      SaleWaysIDs,
                                                                                                      PaymentTypeIDs,
                                                                                                      CustomerGroupIDs,
                                                                                                      20,
                                                                                                      HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicepaymentTypeIDs),

                        Cost_19 = GetADSLTrafficSaleADSLRequestTrafficSeperationByTrafficID(fromDate,
                                                                                                    toDate,
                                                                                                     CityIDs,
                                                                                                     CenterIDs,
                                                                                                    ServiceIDs,
                                                                                                    ServiceGroupIDs,
                                                                                                     BandWidthIDs,
                                                                                                     TrafficIDs,
                                                                                                     DurationIDs,
                                                                                                     SaleWaysIDs,
                                                                                                     PaymentTypeIDs,
                                                                                                     CustomerGroupIDs,
                                                                                                     21,
                                                                                                     HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicepaymentTypeIDs),


                        Cost_20 = GetADSLTrafficSaleADSLRequestTrafficSeperationByTrafficID(fromDate,
                                                                                                     toDate,
                                                                                                      CityIDs,
                                                                                                      CenterIDs,
                                                                                                     ServiceIDs,
                                                                                                     ServiceGroupIDs,
                                                                                                      BandWidthIDs,
                                                                                                      TrafficIDs,
                                                                                                      DurationIDs,
                                                                                                      SaleWaysIDs,
                                                                                                      PaymentTypeIDs,
                                                                                                      CustomerGroupIDs,
                                                                                                      22,
                                                                                                      HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicepaymentTypeIDs),

                        Cost_24 = GetADSLTrafficSaleADSLRequestTrafficSeperationByTrafficID(fromDate,
                                                                                                     toDate,
                                                                                                      CityIDs,
                                                                                                      CenterIDs,
                                                                                                     ServiceIDs,
                                                                                                     ServiceGroupIDs,
                                                                                                      BandWidthIDs,
                                                                                                      TrafficIDs,
                                                                                                      DurationIDs,
                                                                                                      SaleWaysIDs,
                                                                                                      PaymentTypeIDs,
                                                                                                      CustomerGroupIDs,
                                                                                                      23,
                                                                                                      HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicepaymentTypeIDs),
                        Cost_30 = GetADSLTrafficSaleADSLRequestTrafficSeperationByTrafficID(fromDate,
                                                                                                     toDate,
                                                                                                      CityIDs,
                                                                                                      CenterIDs,
                                                                                                     ServiceIDs,
                                                                                                     ServiceGroupIDs,
                                                                                                      BandWidthIDs,
                                                                                                      TrafficIDs,
                                                                                                      DurationIDs,
                                                                                                      SaleWaysIDs,
                                                                                                      PaymentTypeIDs,
                                                                                                      CustomerGroupIDs,
                                                                                                      24,
                                                                                                      HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicepaymentTypeIDs),

                        Cost_40 = GetADSLTrafficSaleADSLRequestTrafficSeperationByTrafficID(fromDate,
                                                                                                   toDate,
                                                                                                    CityIDs,
                                                                                                    CenterIDs,
                                                                                                   ServiceIDs,
                                                                                                   ServiceGroupIDs,
                                                                                                    BandWidthIDs,
                                                                                                    TrafficIDs,
                                                                                                    DurationIDs,
                                                                                                    SaleWaysIDs,
                                                                                                    PaymentTypeIDs,
                                                                                                    CustomerGroupIDs,
                                                                                                    25,
                                                                                                    HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicepaymentTypeIDs),

                        Cost_46 = GetADSLTrafficSaleADSLRequestTrafficSeperationByTrafficID(fromDate,
                                                                                                     toDate,
                                                                                                      CityIDs,
                                                                                                      CenterIDs,
                                                                                                     ServiceIDs,
                                                                                                     ServiceGroupIDs,
                                                                                                      BandWidthIDs,
                                                                                                      TrafficIDs,
                                                                                                      DurationIDs,
                                                                                                      SaleWaysIDs,
                                                                                                      PaymentTypeIDs,
                                                                                                      CustomerGroupIDs,
                                                                                                      26,
                                                                                                      HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicepaymentTypeIDs),

                        Cost_48 = GetADSLTrafficSaleADSLRequestTrafficSeperationByTrafficID(fromDate,
                                                                                                     toDate,
                                                                                                      CityIDs,
                                                                                                      CenterIDs,
                                                                                                     ServiceIDs,
                                                                                                     ServiceGroupIDs,
                                                                                                      BandWidthIDs,
                                                                                                      TrafficIDs,
                                                                                                      DurationIDs,
                                                                                                      SaleWaysIDs,
                                                                                                      PaymentTypeIDs,
                                                                                                      CustomerGroupIDs,
                                                                                                      27,
                                                                                                      HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicepaymentTypeIDs),

                        Cost_50 = GetADSLTrafficSaleADSLRequestTrafficSeperationByTrafficID(fromDate,
                                                                                                 toDate,
                                                                                                  CityIDs,
                                                                                                  CenterIDs,
                                                                                                 ServiceIDs,
                                                                                                 ServiceGroupIDs,
                                                                                                  BandWidthIDs,
                                                                                                  TrafficIDs,
                                                                                                  DurationIDs,
                                                                                                  SaleWaysIDs,
                                                                                                  PaymentTypeIDs,
                                                                                                  CustomerGroupIDs,
                                                                                                  28,
                                                                                                  HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicepaymentTypeIDs),

                        Cost_100 = GetADSLTrafficSaleADSLRequestTrafficSeperationByTrafficID(fromDate,
                                                                                                     toDate,
                                                                                                      CityIDs,
                                                                                                      CenterIDs,
                                                                                                     ServiceIDs,
                                                                                                     ServiceGroupIDs,
                                                                                                      BandWidthIDs,
                                                                                                      TrafficIDs,
                                                                                                      DurationIDs,
                                                                                                      SaleWaysIDs,
                                                                                                      PaymentTypeIDs,
                                                                                                      CustomerGroupIDs,
                                                                                                      29,
                                                                                                      HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicepaymentTypeIDs),

                        Cost_200 = GetADSLTrafficSaleADSLRequestTrafficSeperationByTrafficID(fromDate,
                                                                                                     toDate,
                                                                                                      CityIDs,
                                                                                                      CenterIDs,
                                                                                                     ServiceIDs,
                                                                                                     ServiceGroupIDs,
                                                                                                      BandWidthIDs,
                                                                                                      TrafficIDs,
                                                                                                      DurationIDs,
                                                                                                      SaleWaysIDs,
                                                                                                      PaymentTypeIDs,
                                                                                                      CustomerGroupIDs,
                                                                                                      30,
                                                                                                      HasModem,
                                                                                           t.Key.CenterCostCode,
                                                                                           ServicepaymentTypeIDs),

                        ModemCost = GetADSLTrafficSaleADSLRequestALLModemCost(fromDate,
                                                                             toDate,
                                                                              CityIDs,
                                                                              CenterIDs,
                                                                             ServiceIDs,
                                                                             ServiceGroupIDs,
                                                                              BandWidthIDs,
                                                                              TrafficIDs,
                                                                              DurationIDs,
                                                                              SaleWaysIDs,
                                                                              PaymentTypeIDs,
                                                                              CustomerGroupIDs,
                                                                              t.Key.CenterCostCode,
                                                                              ServicepaymentTypeIDs),

                        IPCost = GetADSLTrafficSaleADSLRequestALLIPCost(fromDate,
                                                                     toDate,
                                                                     CityIDs,
                                                                     CenterIDs,
                                                                     ServiceIDs,
                                                                     ServiceGroupIDs,
                                                                     BandWidthIDs,
                                                                     TrafficIDs,
                                                                     DurationIDs,
                                                                     SaleWaysIDs,
                                                                     PaymentTypeIDs,
                                                                     CustomerGroupIDs,
                                                                     t.Key.CenterCostCode,
                                                                     ServicepaymentTypeIDs),

                        //RanjeCost = GetADSLTrafficSaleADSLRequestRanjeCost(fromDate,
                        //                                                toDate,
                        //                                                CityIDs,
                        //                                                CenterIDs,
                        //                                                ServiceIDs,
                        //                                                ServiceGroupIDs,
                        //                                                BandWidthIDs,
                        //                                                TrafficIDs,
                        //                                                DurationIDs,
                        //                                                SaleWaysIDs,
                        //                                                PaymentTypeIDs,
                        //                                                CustomerGroupIDs,
                        //                                                t.Key.CenterCostCode,
                        //                                             ServicepaymentTypeIDs,
                        //                                                                   FromPaymentDate,
                        //                                                                   ToPaymentDate),

                        //InstallmentCost = GetADSLTrafficSaleADSLRequestInstallmentCost(fromDate,
                        //                                                toDate,
                        //                                                CityIDs,
                        //                                                CenterIDs,
                        //                                                ServiceIDs,
                        //                                                ServiceGroupIDs,
                        //                                                BandWidthIDs,
                        //                                                TrafficIDs,
                        //                                                DurationIDs,
                        //                                                SaleWaysIDs,
                        //                                                PaymentTypeIDs,
                        //                                                CustomerGroupIDs,
                        //                                                t.Key.CenterCostCode,
                        //                                             ServicepaymentTypeIDs,
                        //                                                                   FromPaymentDate,
                        //                                                                   ToPaymentDate),

                        AmountSum = GetADSLTrafficSaleADSLRequestAmountSum(fromDate,
                                                                            toDate,
                                                                            CityIDs,
                                                                            CenterIDs,
                                                                            ServiceIDs,
                                                                            ServiceGroupIDs,
                                                                            BandWidthIDs,
                                                                            TrafficIDs,
                                                                            DurationIDs,
                                                                            SaleWaysIDs,
                                                                            PaymentTypeIDs,
                                                                            CustomerGroupIDs,
                                                                            t.Key.CenterCostCode,
                                                                         ServicepaymentTypeIDs),


                    }).Where(t =>
                        (fromCost == -1 || t.Cost_Unlimited >= fromCost)
                        && (fromCost == -1 || t.Cost_Unlimited >= fromCost)
                        && (fromCost == -1 || t.Cost_0 >= fromCost)
                        && (fromCost == -1 || t.Cost_0_5 >= fromCost)
                        && (fromCost == -1 || t.Cost_1 >= fromCost)
                        && (fromCost == -1 || t.Cost_2 >= fromCost)
                        && (fromCost == -1 || t.Cost_3 >= fromCost)
                        && (fromCost == -1 || t.Cost_4 >= fromCost)
                        && (fromCost == -1 || t.Cost_5 >= fromCost)
                        && (fromCost == -1 || t.Cost_6 >= fromCost)
                        && (fromCost == -1 || t.Cost_7 >= fromCost)
                        && (fromCost == -1 || t.Cost_8 >= fromCost)
                        && (fromCost == -1 || t.Cost_9 >= fromCost)
                        && (fromCost == -1 || t.Cost_10 >= fromCost)
                        && (fromCost == -1 || t.Cost_11 >= fromCost)
                        && (fromCost == -1 || t.Cost_12 >= fromCost)
                        && (fromCost == -1 || t.Cost_13 >= fromCost)
                        && (fromCost == -1 || t.Cost_14 >= fromCost)
                        && (fromCost == -1 || t.Cost_15 >= fromCost)
                        && (fromCost == -1 || t.Cost_16 >= fromCost)
                        && (fromCost == -1 || t.Cost_17 >= fromCost)
                        && (fromCost == -1 || t.Cost_18 >= fromCost)
                        && (fromCost == -1 || t.Cost_19 >= fromCost)
                        && (fromCost == -1 || t.Cost_20 >= fromCost)
                        && (fromCost == -1 || t.Cost_24 >= fromCost)
                        && (fromCost == -1 || t.Cost_30 >= fromCost)
                        && (fromCost == -1 || t.Cost_40 >= fromCost)
                        && (fromCost == -1 || t.Cost_46 >= fromCost)
                        && (fromCost == -1 || t.Cost_48 >= fromCost)
                        && (fromCost == -1 || t.Cost_50 >= fromCost)
                        && (fromCost == -1 || t.Cost_100 >= fromCost)
                        && (fromCost == -1 || t.Cost_200 >= fromCost)
                        && (fromCost == -1 || t.InstallmentCost >= fromCost)
                        && (fromCost == -1 || t.RanjeCost >= fromCost)
                        && (fromCost == -1 || t.ModemCost >= fromCost)
                        && (fromCost == -1 || t.IPCost >= fromCost)
                        && (toCost == -1 || t.Cost_Unlimited <= toCost)
                        && (toCost == -1 || t.Cost_Unlimited <= toCost)
                        && (toCost == -1 || t.Cost_0 <= toCost)
                        && (toCost == -1 || t.Cost_0_5 <= toCost)
                        && (toCost == -1 || t.Cost_1 <= toCost)
                        && (toCost == -1 || t.Cost_2 <= toCost)
                        && (toCost == -1 || t.Cost_3 <= toCost)
                        && (toCost == -1 || t.Cost_4 <= toCost)
                        && (toCost == -1 || t.Cost_5 <= toCost)
                        && (toCost == -1 || t.Cost_6 <= toCost)
                        && (toCost == -1 || t.Cost_7 <= toCost)
                        && (toCost == -1 || t.Cost_8 <= toCost)
                        && (toCost == -1 || t.Cost_9 <= toCost)
                        && (toCost == -1 || t.Cost_10 <= toCost)
                        && (toCost == -1 || t.Cost_11 <= toCost)
                        && (toCost == -1 || t.Cost_12 <= toCost)
                        && (toCost == -1 || t.Cost_13 <= toCost)
                        && (toCost == -1 || t.Cost_14 <= toCost)
                        && (toCost == -1 || t.Cost_15 <= toCost)
                        && (toCost == -1 || t.Cost_16 <= toCost)
                        && (toCost == -1 || t.Cost_17 <= toCost)
                        && (toCost == -1 || t.Cost_18 <= toCost)
                        && (toCost == -1 || t.Cost_19 <= toCost)
                        && (toCost == -1 || t.Cost_20 <= toCost)
                        && (toCost == -1 || t.Cost_24 <= toCost)
                        && (toCost == -1 || t.Cost_30 <= toCost)
                        && (toCost == -1 || t.Cost_40 <= toCost)
                        && (toCost == -1 || t.Cost_46 <= toCost)
                        && (toCost == -1 || t.Cost_48 <= toCost)
                        && (toCost == -1 || t.Cost_50 <= toCost)
                        && (toCost == -1 || t.Cost_100 <= toCost)
                        && (toCost == -1 || t.Cost_200 <= toCost)
                        && (toCost == -1 || t.InstallmentCost <= toCost)
                        && (toCost == -1 || t.RanjeCost <= toCost)
                        && (toCost == -1 || t.ModemCost <= toCost)
                        && (toCost == -1 || t.IPCost <= toCost))
                        .Select(t => new ADSLTrafficSaleTrafficSeperation
                        {
                            Cost_0 = t.Cost_0,
                            Cost_Unlimited = t.Cost_Unlimited,
                            Cost_0_5 = t.Cost_0_5,
                            Cost_1 = t.Cost_1,
                            Cost_2 = t.Cost_2,
                            Cost_3 = t.Cost_3,
                            Cost_4 = t.Cost_4,
                            Cost_5 = t.Cost_5,
                            Cost_6 = t.Cost_6,
                            Cost_7 = t.Cost_7,
                            Cost_8 = t.Cost_8,
                            Cost_9 = t.Cost_9,
                            Cost_10 = t.Cost_10,
                            Cost_11 = t.Cost_11,
                            Cost_12 = t.Cost_12,
                            Cost_13 = t.Cost_13,
                            Cost_14 = t.Cost_14,
                            Cost_15 = t.Cost_15,
                            Cost_16 = t.Cost_16,
                            Cost_17 = t.Cost_17,
                            Cost_18 = t.Cost_18,
                            Cost_19 = t.Cost_19,
                            Cost_20 = t.Cost_20,
                            Cost_24 = t.Cost_24,
                            Cost_30 = t.Cost_30,
                            Cost_40 = t.Cost_40,
                            Cost_46 = t.Cost_46,
                            Cost_48 = t.Cost_48,
                            Cost_50 = t.Cost_50,
                            Cost_100 = t.Cost_100,
                            Cost_200 = t.Cost_200,
                            IPCost = t.IPCost,
                            ModemCost = t.ModemCost,
                            InstallmentCost = t.InstallmentCost,
                            RanjeCost = t.RanjeCost,
                            CenterCostCode = t.CenterCostCode,
                            AmountSum = t.AmountSum,


                        }).ToList();


            }
        }

        public static long? GetADSLTrafficSaleADSLRequestTrafficSeperationByTrafficID(DateTime? fromDate,
                                                                                                DateTime? toDate,
                                                                                                List<int> CityIDs,
                                                                                                List<int> CenterIDs,
                                                                                                List<int> ServiceIDs,
                                                                                                List<int> ServiceGroupIDs,
                                                                                                List<int> BandWidthIDs,
                                                                                                List<int> TrafficIDs,
                                                                                                List<int> DurationIDs,
                                                                                                List<int> SaleWaysIDs,
                                                                                                List<int> PaymentTypeIDs,
                                                                                                List<int> CustomerGroupIDs,
                                                                                                int TrafficID,
                                                                                                bool? HasModem,
                                                                                                int? CenterCostCode,
                                                                                                List<int> ServicePaymentTypeIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLRequests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLRequest = a, RequestPayment = p })
                    .Join(context.ADSLServices, a => a.ADSLRequest.AdditionalServiceID, s => s.ID, (a, s) => new { ALL = a, ADSLService = s }).Where(t =>
                    (!fromDate.HasValue || fromDate <= t.ALL.ADSLRequest.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ALL.ADSLRequest.Request.EndDate)
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ALL.ADSLRequest.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ALL.ADSLRequest.Request.CenterID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ALL.ADSLRequest.AdditionalServiceID))
                    && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLService.ADSLServiceGroup.ID))
                    && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.ADSLService.BandWidthID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLService.ADSLServiceTraffic.ID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLService.ADSLServiceDuration.ID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.ALL.RequestPayment.PaymentType))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (t.ADSLService.TrafficID == TrafficID)
                    && (!HasModem.HasValue || HasModem == t.ALL.ADSLRequest.NeedModem)
                    && (t.ALL.ADSLRequest.AdditionalServiceID != null)
                    && (t.ALL.ADSLRequest.Request.Center.BillingCode == CenterCostCode)
                    && (t.ALL.RequestPayment.BaseCostID == 46)
                    && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ADSLService.PaymentTypeID)
                    && (t.ALL.RequestPayment.PaymentDate != null || t.ALL.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment))).Sum(t => t.ALL.RequestPayment.Cost);
            }
        }

        public static long? GetADSLTrafficSaleADSLRequestModemCost(DateTime? fromDate,
                                                                DateTime? toDate,
                                                                List<int> CityIDs,
                                                                List<int> CenterIDs,
                                                                List<int> ServiceIDs,
                                                                List<int> ServiceGroupIDs,
                                                                List<int> BandWidthIDs,
                                                                List<int> TrafficIDs,
                                                                List<int> DurationIDs,
                                                                List<int> SaleWaysIDs,
                                                                List<int> PaymentTypeIDs,
                                                                List<int> CustomerGroupIDs,
                                                                int? CenterCostCode,
                                                                List<int> ServicePaymentTypeIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLRequests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLRequest = a, RequestPayment = p })
                    .Join(context.ADSLServices, a => a.ADSLRequest.AdditionalServiceID, s => s.ID, (a, s) => new { ALL = a, ADSLService = s }).Where(t =>
                    (!fromDate.HasValue || fromDate <= t.ALL.ADSLRequest.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ALL.ADSLRequest.Request.EndDate)
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ALL.ADSLRequest.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ALL.ADSLRequest.Request.CenterID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ALL.ADSLRequest.AdditionalServiceID))
                    && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLService.ADSLServiceGroup.ID))
                    && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.ADSLService.BandWidthID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLService.TrafficID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLService.DurationID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.ALL.RequestPayment.PaymentType))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ADSLService.PaymentTypeID))
                    && (t.ALL.ADSLRequest.NeedModem == true)
                    && (t.ALL.ADSLRequest.Request.Center.BillingCode == CenterCostCode)
                    && (t.ALL.RequestPayment.BaseCostID == 40)
                    && (t.ALL.RequestPayment.PaymentDate != null || t.ALL.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Sum(t => t.ALL.RequestPayment.Cost);

            }
        }

        public static long? GetADSLTrafficSaleADSLRequestADSLChangeServiceModemCost(DateTime? fromDate,
                                                                DateTime? toDate,
                                                                List<int> CityIDs,
                                                                List<int> CenterIDs,
                                                                List<int> ServiceIDs,
                                                                List<int> ServiceGroupIDs,
                                                                List<int> BandWidthIDs,
                                                                List<int> TrafficIDs,
                                                                List<int> DurationIDs,
                                                                List<int> SaleWaysIDs,
                                                                List<int> PaymentTypeIDs,
                                                                List<int> CustomerGroupIDs,
                                                                int? CenterCostCode,
                                                                List<int> ServicePaymentTypeIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLChangeServices.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLChangeService = a, RequestPayment = p }).Where(t =>
                    (!fromDate.HasValue || fromDate <= t.ADSLChangeService.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ADSLChangeService.Request.EndDate)
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLChangeService.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ADSLChangeService.Request.CenterID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ADSLChangeService.NewServiceID))
                    && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLChangeService.ADSLService.ADSLServiceGroup.ID))
                    && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.ADSLChangeService.ADSLService.BandWidthID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLChangeService.ADSLService.TrafficID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLChangeService.ADSLService.DurationID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestPayment.PaymentType))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLChangeService.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (t.ADSLChangeService.NeedModem == true)
                    && (t.ADSLChangeService.Request.Center.BillingCode == CenterCostCode)
                    && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ADSLChangeService.ADSLService.PaymentTypeID))
                    && (t.RequestPayment.BaseCostID == 40)
                    && (t.RequestPayment.PaymentDate != null || t.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Sum(t => t.RequestPayment.Cost);

            }
        }

        public static long? GetADSLTrafficSaleADSLRequestALLModemCost(DateTime? fromDate,
                                                               DateTime? toDate,
                                                               List<int> CityIDs,
                                                               List<int> CenterIDs,
                                                               List<int> ServiceIDs,
                                                               List<int> ServiceGroupIDs,
                                                               List<int> BandWidthIDs,
                                                               List<int> TrafficIDs,
                                                               List<int> DurationIDs,
                                                               List<int> SaleWaysIDs,
                                                               List<int> PaymentTypeIDs,
                                                               List<int> CustomerGroupIDs,
                                                               int? CenterCostCode,
                                                                List<int> ServicePaymentTypIDs)
        {
            long? ModemCost = 0;

            ModemCost = GetADSLTrafficSaleADSLRequestADSLChangeServiceModemCost(fromDate, toDate, CityIDs, CenterIDs, ServiceIDs, ServiceGroupIDs, BandWidthIDs, TrafficIDs, DurationIDs, SaleWaysIDs, PaymentTypeIDs, CustomerGroupIDs, CenterCostCode, ServicePaymentTypIDs)
              + GetADSLTrafficSaleADSLRequestModemCost(fromDate, toDate, CityIDs, CenterIDs, ServiceIDs, ServiceGroupIDs, BandWidthIDs, TrafficIDs, DurationIDs, SaleWaysIDs, PaymentTypeIDs, CustomerGroupIDs, CenterCostCode, ServicePaymentTypIDs);

            return ModemCost;
        }

        public static long? GetADSLTrafficSaleADSLRequestIPCost(DateTime? fromDate,
                                                             DateTime? toDate,
                                                             List<int> CityIDs,
                                                             List<int> CenterIDs,
                                                             List<int> ServiceIDs,
                                                             List<int> ServiceGroupIDs,
                                                             List<int> BandWidthIDs,
                                                             List<int> TrafficIDs,
                                                             List<int> DurationIDs,
                                                             List<int> SaleWaysIDs,
                                                             List<int> PaymentTypeIDs,
                                                             List<int> CustomerGroupIDs,
                                                             int? CenterCostCode,
                                                             List<int> ServicePaymentTypeIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLRequests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLRequest = a, RequestPayment = p })
                    .Join(context.ADSLServices, a => a.ADSLRequest.AdditionalServiceID, s => s.ID, (a, s) => new { ALL = a, ADSLService = s })
                    .Where(t =>
                    (!fromDate.HasValue || fromDate <= t.ALL.ADSLRequest.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ALL.ADSLRequest.Request.EndDate)
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ALL.ADSLRequest.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ALL.ADSLRequest.Request.CenterID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ALL.ADSLRequest.AdditionalServiceID))
                    && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLService.ADSLServiceGroup.ID))
                    && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.ADSLService.BandWidthID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLService.TrafficID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLService.DurationID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.ALL.RequestPayment.PaymentType))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ADSLService.PaymentTypeID))
                    && (t.ALL.ADSLRequest.HasIP != null)
                    && (t.ALL.ADSLRequest.Request.Center.BillingCode == CenterCostCode)
                    && (t.ALL.RequestPayment.BaseCostID == 48)
                    && (t.ALL.RequestPayment.PaymentDate != null || t.ALL.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Sum(t => t.ALL.RequestPayment.Cost);
            }
        }

        public static long? GetADSLTrafficSaleADSLRequestADSLChangeIPCost(DateTime? fromDate,
                                                            DateTime? toDate,
                                                            List<int> CityIDs,
                                                            List<int> CenterIDs,
                                                            List<int> ServiceIDs,
                                                            List<int> ServiceGroupIDs,
                                                            List<int> BandWidthIDs,
                                                            List<int> TrafficIDs,
                                                            List<int> DurationIDs,
                                                            List<int> SaleWaysIDs,
                                                            List<int> PaymentTypeIDs,
                                                            List<int> CustomerGroupIDs,
                                                               int? CenterCostCode)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.Requests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { Request = a, RequestPayment = p })
                    .Join(context.ADSLIPs, w => w.Request.ADSLChangeIPRequest.NewIPStaticID, i => i.ID, (w, i) => new { ALL = w, ADSLIPs = i })
                    .Join(context.ADSLServiceGroups, r => r.ADSLIPs.CustometGroupID, s => s.CustomerGroupID, (r, s) => new { ALLM = r, ADSLServiceGroup = s })
                    .Where(t =>
                    (CityIDs.Count == 0 || CityIDs.Contains(t.ALLM.ALL.Request.Center.Region.CityID))
                      && (CenterIDs.Count == 0 || CenterIDs.Contains(t.ALLM.ALL.Request.CenterID))
                      && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.ALLM.ALL.RequestPayment.PaymentType))
                      && (!fromDate.HasValue || fromDate <= t.ALLM.ALL.Request.EndDate)
                      && (!toDate.HasValue || toDate >= t.ALLM.ALL.Request.EndDate)
                      && (t.ALLM.ALL.Request.EndDate != null)
                      && (t.ALLM.ALL.Request.RequestTypeID == (byte)DB.RequestType.ADSLChangeIP)
                      && (t.ALLM.ALL.Request.ADSLChangeIPRequest.ChangeIPType != (byte)DB.ADSLChangeIPType.DischargeIP)
                      && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLServiceGroup.ID))
                      && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ALLM.ADSLIPs.CustometGroupID))
                      && (t.ALLM.ALL.Request.Center.BillingCode == CenterCostCode)
                      && (t.ALLM.ALL.RequestPayment.PaymentDate != null || t.ALLM.ALL.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Sum(t => t.ALLM.ALL.RequestPayment.Cost);

            }
        }

        public static long? GetADSLTrafficSaleADSLRequestALLIPCost(DateTime? fromDate,
                                                            DateTime? toDate,
                                                            List<int> CityIDs,
                                                            List<int> CenterIDs,
                                                            List<int> ServiceIDs,
                                                            List<int> ServiceGroupIDs,
                                                            List<int> BandWidthIDs,
                                                            List<int> TrafficIDs,
                                                            List<int> DurationIDs,
                                                            List<int> SaleWaysIDs,
                                                            List<int> PaymentTypeIDs,
                                                            List<int> CustomerGroupIDs,
                                                               int? CenterCostCode,
                                                            List<int> ServicePaymenTypeIDs)
        {
            long? IPCost = 0;

            IPCost = GetADSLTrafficSaleADSLRequestIPCost(fromDate, toDate, CityIDs, CenterIDs, ServiceIDs, ServiceGroupIDs, BandWidthIDs, TrafficIDs, DurationIDs, SaleWaysIDs, PaymentTypeIDs, CustomerGroupIDs, CenterCostCode, ServicePaymenTypeIDs)
              + GetADSLTrafficSaleADSLRequestADSLChangeIPCost(fromDate, toDate, CityIDs, CenterIDs, ServiceIDs, ServiceGroupIDs, BandWidthIDs, TrafficIDs, DurationIDs, SaleWaysIDs, PaymentTypeIDs, CustomerGroupIDs, CenterCostCode);

            return IPCost;
        }

        public static long? GetADSLTrafficSaleADSLRequestRanjeCost(DateTime? fromDate,
                                                             DateTime? toDate,
                                                             List<int> CityIDs,
                                                             List<int> CenterIDs,
                                                             List<int> ServiceIDs,
                                                             List<int> ServiceGroupIDs,
                                                             List<int> BandWidthIDs,
                                                             List<int> TrafficIDs,
                                                             List<int> DurationIDs,
                                                             List<int> SaleWaysIDs,
                                                             List<int> PaymentTypeIDs,
                                                             List<int> CustomerGroupIDs,
                                                             int? CenterCostCode,
                                                                List<int> ServicePaymentTypeIDs,
                                                            DateTime? FromPaymentDate,
                                                            DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLRequests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLRequest = a, RequestPayment = p })
                    .Join(context.ADSLServices, a => a.ADSLRequest.AdditionalServiceID, s => s.ID, (a, s) => new { ALL = a, ADSLService = s })
                    .Where(t =>
                    (!fromDate.HasValue || fromDate <= t.ALL.ADSLRequest.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ALL.ADSLRequest.Request.EndDate)
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ALL.ADSLRequest.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ALL.ADSLRequest.Request.CenterID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ALL.ADSLRequest.AdditionalServiceID))
                    && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLService.ADSLServiceGroup.ID))
                    && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.ADSLService.BandWidthID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLService.TrafficID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLService.DurationID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.ALL.RequestPayment.PaymentType))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ADSLService.PaymentTypeID))
                    && (t.ALL.ADSLRequest.Request.Center.BillingCode == CenterCostCode)
                    && (t.ALL.RequestPayment.BaseCostID == 107)
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.ALL.RequestPayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.ALL.RequestPayment.PaymentDate)
                    && (t.ALL.RequestPayment.PaymentDate != null || t.ALL.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Sum(t => t.ALL.RequestPayment.Cost);


            }
        }

        public static long? GetADSLTrafficSaleADSLRequestInstallmentCost(DateTime? fromDate,
                                                             DateTime? toDate,
                                                             List<int> CityIDs,
                                                             List<int> CenterIDs,
                                                             List<int> ServiceIDs,
                                                             List<int> ServiceGroupIDs,
                                                             List<int> BandWidthIDs,
                                                             List<int> TrafficIDs,
                                                             List<int> DurationIDs,
                                                             List<int> SaleWaysIDs,
                                                             List<int> PaymentTypeIDs,
                                                             List<int> CustomerGroupIDs,
                                                             int? CenterCostCode,
                                                             List<int> ServicePaymentTypeIDs,
                                                             DateTime? FromPaymentDate,
                                                             DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLRequests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLRequest = a, RequestPayment = p })
                    .Join(context.ADSLServices, a => a.ADSLRequest.AdditionalServiceID, s => s.ID, (a, s) => new { ALL = a, ADSLService = s })
                    .Where(t =>
                    (!fromDate.HasValue || fromDate <= t.ALL.ADSLRequest.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ALL.ADSLRequest.Request.EndDate)
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ALL.ADSLRequest.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ALL.ADSLRequest.Request.CenterID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ALL.ADSLRequest.AdditionalServiceID))
                    && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLService.ADSLServiceGroup.ID))
                    && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.ADSLService.BandWidthID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLService.TrafficID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLService.DurationID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.ALL.RequestPayment.PaymentType))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ADSLService.PaymentTypeID))
                    && (t.ALL.ADSLRequest.Request.Center.BillingCode == CenterCostCode)
                    && (t.ALL.RequestPayment.BaseCostID == 37)
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.ALL.RequestPayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.ALL.RequestPayment.PaymentDate)
                    && (t.ALL.RequestPayment.PaymentDate != null || t.ALL.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Sum(t => t.ALL.RequestPayment.Cost);


            }
        }

        public static long? GetADSLTrafficSaleADSLRequestAmountSum(DateTime? fromDate,
                                                             DateTime? toDate,
                                                             List<int> CityIDs,
                                                             List<int> CenterIDs,
                                                             List<int> ServiceIDs,
                                                             List<int> ServiceGroupIDs,
                                                             List<int> BandWidthIDs,
                                                             List<int> TrafficIDs,
                                                             List<int> DurationIDs,
                                                             List<int> SaleWaysIDs,
                                                             List<int> PaymentTypeIDs,
                                                             List<int> CustomerGroupIDs,
                                                             int? CenterCostCode,
                                                                List<int> ServicePaymentTypeIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLRequests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLRequest = a, RequestPayment = p })
                    .Join(context.ADSLServices, a => a.ADSLRequest.AdditionalServiceID, s => s.ID, (a, s) => new { ALL = a, ADSLService = s })
                    .Where(t =>
                    (!fromDate.HasValue || fromDate <= t.ALL.ADSLRequest.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ALL.ADSLRequest.Request.EndDate)
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ALL.ADSLRequest.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ALL.ADSLRequest.Request.CenterID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ALL.ADSLRequest.AdditionalServiceID))
                    && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLService.ADSLServiceGroup.ID))
                    && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.ADSLService.BandWidthID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLService.TrafficID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLService.DurationID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.ALL.RequestPayment.PaymentType))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ADSLService.PaymentTypeID))
                    && (t.ALL.ADSLRequest.Request.Center.BillingCode == CenterCostCode)
                    && (t.ALL.RequestPayment.BaseCostID == 46)
                    && (t.ALL.ADSLRequest.AdditionalServiceID != null)
                    && (t.ALL.RequestPayment.PaymentDate != null || t.ALL.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Sum(t => t.ALL.RequestPayment.AmountSum);


            }
        }

        public static long? GetADSLTrafficSaleADSLRequestTax(DateTime? fromDate,
                                                            DateTime? toDate,
                                                            List<int> CityIDs,
                                                            List<int> CenterIDs,
                                                            List<int> ServiceIDs,
                                                            List<int> ServiceGroupIDs,
                                                            List<int> BandWidthIDs,
                                                            List<int> TrafficIDs,
                                                            List<int> DurationIDs,
                                                            List<int> SaleWaysIDs,
                                                            List<int> PaymentTypeIDs,
                                                            List<int> CustomerGroupIDs,
                                                            int? CenterCostCode,
                                                               List<int> ServicePaymentTypeIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLRequests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLRequest = a, RequestPayment = p })
                    .Join(context.ADSLServices, a => a.ADSLRequest.AdditionalServiceID, s => s.ID, (a, s) => new { ALL = a, ADSLService = s })
                    .Where(t =>
                    (!fromDate.HasValue || fromDate <= t.ALL.ADSLRequest.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ALL.ADSLRequest.Request.EndDate)
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ALL.ADSLRequest.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ALL.ADSLRequest.Request.CenterID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ALL.ADSLRequest.AdditionalServiceID))
                    && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLService.ADSLServiceGroup.ID))
                    && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.ADSLService.BandWidthID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLService.TrafficID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLService.DurationID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.ALL.RequestPayment.PaymentType))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ADSLService.PaymentTypeID))
                    && (t.ALL.ADSLRequest.Request.Center.BillingCode == CenterCostCode)
                    && (t.ALL.RequestPayment.BaseCostID == 46)).Sum(t => t.ALL.RequestPayment.Tax);


            }
        }

        public static List<ADSLTrafficSaleTrafficSeperation> GetADSLSellTrafficTrafficSaleTrafficSeperation(DateTime? fromDate,
                                                                                                   DateTime? toDate,
                                                                                                   List<int> CityIDs,
                                                                                                   List<int> CenterIDs,
                                                                                                   List<int> ServiceIDs,
                                                                                                   List<int> ServiceGroupIDs,
                                                                                                   List<int> BandWidthIDs,
                                                                                                   List<int> TrafficIDs,
                                                                                                   List<int> DurationIDs,
                                                                                                   List<int> SaleWaysIDs,
                                                                                                   List<int> PaymentTypeIDs,
                                                                                                   List<int> CustomerGroupIDs,
                                                                                                    long? fromCost,
                                                                                                    long? toCost,
                                                                                                    List<int> ServicePaymentTypeIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLSellTraffics.Join(context.RequestPayments, a => a.ID, r => r.RequestID, (a, r) => new { ADSLSellTraffic = a, RequestPayment = r }).Where(t =>
                    (!fromDate.HasValue || fromDate <= t.ADSLSellTraffic.Request.EndDate)
                    && (!toDate.HasValue || toDate > t.ADSLSellTraffic.Request.EndDate)
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLSellTraffic.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ADSLSellTraffic.Request.CenterID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ADSLSellTraffic.AdditionalServiceID))
                    && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLSellTraffic.ADSLService.ADSLServiceGroup.ID))
                    && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.ADSLSellTraffic.ADSLService.BandWidthID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLSellTraffic.ADSLService.TrafficID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLSellTraffic.ADSLService.DurationID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestPayment.PaymentType))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLSellTraffic.ADSLService.ADSLServiceGroup.CustomerGroupID))
                        //&& (t.ADSLSellTraffic.AdditionalServiceID != null)
                    && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ADSLSellTraffic.ADSLService.PaymentTypeID))
                        //&& (t.ADSLSellTraffic.ADSLService.TypeID == (byte)DB.ADSLServiceType.Traffic)
                    && (SaleWaysIDs.Count == 0 || SaleWaysIDs.Contains((int)t.ADSLSellTraffic.ChangeServiceType))
                    && (t.RequestPayment.PaymentDate != null || t.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment))
                    .GroupBy(t => new
                    {
                        CenterCostCode = t.ADSLSellTraffic.Request.Center.BillingCode

                    }).Select(t => new ADSLTrafficSaleTrafficSeperation
                    {
                        CenterCostCode = t.Key.CenterCostCode.ToString(),

                        Cost_Unlimited = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                       toDate,
                                                                                                       CityIDs,
                                                                                                       CenterIDs,
                                                                                                       ServiceIDs,
                                                                                                       ServiceGroupIDs,
                                                                                                       BandWidthIDs,
                                                                                                       TrafficIDs,
                                                                                                       DurationIDs,
                                                                                                       SaleWaysIDs,
                                                                                                       PaymentTypeIDs,
                                                                                                       CustomerGroupIDs,
                                                                                                       0,
                                                                                                       t.Key.CenterCostCode,
                                                                                                       ServicePaymentTypeIDs),

                        Cost_0 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                               toDate,
                                                                                               CityIDs,
                                                                                               CenterIDs,
                                                                                               ServiceIDs,
                                                                                               ServiceGroupIDs,
                                                                                               BandWidthIDs,
                                                                                               TrafficIDs,
                                                                                               DurationIDs,
                                                                                               SaleWaysIDs,
                                                                                               PaymentTypeIDs,
                                                                                               CustomerGroupIDs,
                                                                                               1,
                                                                                               t.Key.CenterCostCode,
                                                                                               ServicePaymentTypeIDs),

                        Cost_0_5 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                 toDate,
                                                                                                 CityIDs,
                                                                                                 CenterIDs,
                                                                                                 ServiceIDs,
                                                                                                 ServiceGroupIDs,
                                                                                                 BandWidthIDs,
                                                                                                 TrafficIDs,
                                                                                                 DurationIDs,
                                                                                                 SaleWaysIDs,
                                                                                                 PaymentTypeIDs,
                                                                                                 CustomerGroupIDs,
                                                                                                 2,
                                                                                                 t.Key.CenterCostCode,
                                                                                                 ServicePaymentTypeIDs),

                        Cost_1 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                               toDate,
                                                                                               CityIDs,
                                                                                               CenterIDs,
                                                                                               ServiceIDs,
                                                                                               ServiceGroupIDs,
                                                                                               BandWidthIDs,
                                                                                               TrafficIDs,
                                                                                               DurationIDs,
                                                                                               SaleWaysIDs,
                                                                                               PaymentTypeIDs,
                                                                                               CustomerGroupIDs,
                                                                                               3,
                                                                                               t.Key.CenterCostCode,
                                                                                               ServicePaymentTypeIDs),

                        Cost_2 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                               toDate,
                                                                                               CityIDs,
                                                                                               CenterIDs,
                                                                                               ServiceIDs,
                                                                                               ServiceGroupIDs,
                                                                                               BandWidthIDs,
                                                                                               TrafficIDs,
                                                                                               DurationIDs,
                                                                                               SaleWaysIDs,
                                                                                               PaymentTypeIDs,
                                                                                               CustomerGroupIDs,
                                                                                               4,
                                                                                               t.Key.CenterCostCode,
                                                                                               ServicePaymentTypeIDs),

                        Cost_3 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                               toDate,
                                                                                               CityIDs,
                                                                                               CenterIDs,
                                                                                               ServiceIDs,
                                                                                               ServiceGroupIDs,
                                                                                               BandWidthIDs,
                                                                                               TrafficIDs,
                                                                                               DurationIDs,
                                                                                               SaleWaysIDs,
                                                                                               PaymentTypeIDs,
                                                                                               CustomerGroupIDs,
                                                                                               5,
                                                                                               t.Key.CenterCostCode,
                                                                                               ServicePaymentTypeIDs),

                        Cost_4 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                               toDate,
                                                                                               CityIDs,
                                                                                               CenterIDs,
                                                                                               ServiceIDs,
                                                                                               ServiceGroupIDs,
                                                                                               BandWidthIDs,
                                                                                               TrafficIDs,
                                                                                               DurationIDs,
                                                                                               SaleWaysIDs,
                                                                                               PaymentTypeIDs,
                                                                                               CustomerGroupIDs,
                                                                                               6,
                                                                                               t.Key.CenterCostCode,
                                                                                               ServicePaymentTypeIDs),

                        Cost_5 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                               toDate,
                                                                                               CityIDs,
                                                                                               CenterIDs,
                                                                                               ServiceIDs,
                                                                                               ServiceGroupIDs,
                                                                                               BandWidthIDs,
                                                                                               TrafficIDs,
                                                                                               DurationIDs,
                                                                                               SaleWaysIDs,
                                                                                               PaymentTypeIDs,
                                                                                               CustomerGroupIDs,
                                                                                               7,
                                                                                               t.Key.CenterCostCode,
                                                                                               ServicePaymentTypeIDs),

                        Cost_6 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                               toDate,
                                                                                               CityIDs,
                                                                                               CenterIDs,
                                                                                               ServiceIDs,
                                                                                               ServiceGroupIDs,
                                                                                               BandWidthIDs,
                                                                                               TrafficIDs,
                                                                                               DurationIDs,
                                                                                               SaleWaysIDs,
                                                                                               PaymentTypeIDs,
                                                                                               CustomerGroupIDs,
                                                                                               8,
                                                                                               t.Key.CenterCostCode,
                                                                                               ServicePaymentTypeIDs),

                        Cost_7 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                               toDate,
                                                                                               CityIDs,
                                                                                               CenterIDs,
                                                                                               ServiceIDs,
                                                                                               ServiceGroupIDs,
                                                                                               BandWidthIDs,
                                                                                               TrafficIDs,
                                                                                               DurationIDs,
                                                                                               SaleWaysIDs,
                                                                                               PaymentTypeIDs,
                                                                                               CustomerGroupIDs,
                                                                                               9,
                                                                                               t.Key.CenterCostCode,
                                                                                               ServicePaymentTypeIDs),

                        Cost_8 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                               toDate,
                                                                                               CityIDs,
                                                                                               CenterIDs,
                                                                                               ServiceIDs,
                                                                                               ServiceGroupIDs,
                                                                                               BandWidthIDs,
                                                                                               TrafficIDs,
                                                                                               DurationIDs,
                                                                                               SaleWaysIDs,
                                                                                               PaymentTypeIDs,
                                                                                               CustomerGroupIDs,
                                                                                               10,
                                                                                               t.Key.CenterCostCode,
                                                                                               ServicePaymentTypeIDs),

                        Cost_9 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                               toDate,
                                                                                               CityIDs,
                                                                                               CenterIDs,
                                                                                               ServiceIDs,
                                                                                               ServiceGroupIDs,
                                                                                               BandWidthIDs,
                                                                                               TrafficIDs,
                                                                                               DurationIDs,
                                                                                               SaleWaysIDs,
                                                                                               PaymentTypeIDs,
                                                                                               CustomerGroupIDs,
                                                                                               11,
                                                                                               t.Key.CenterCostCode,
                                                                                               ServicePaymentTypeIDs),

                        Cost_10 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                toDate,
                                                                                                CityIDs,
                                                                                                CenterIDs,
                                                                                                ServiceIDs,
                                                                                                ServiceGroupIDs,
                                                                                                BandWidthIDs,
                                                                                                TrafficIDs,
                                                                                                DurationIDs,
                                                                                                SaleWaysIDs,
                                                                                                PaymentTypeIDs,
                                                                                                CustomerGroupIDs,
                                                                                                12,
                                                                                                t.Key.CenterCostCode,
                                                                                                ServicePaymentTypeIDs),

                        Cost_11 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                toDate,
                                                                                                CityIDs,
                                                                                                CenterIDs,
                                                                                                ServiceIDs,
                                                                                                ServiceGroupIDs,
                                                                                                BandWidthIDs,
                                                                                                TrafficIDs,
                                                                                                DurationIDs,
                                                                                                SaleWaysIDs,
                                                                                                PaymentTypeIDs,
                                                                                                CustomerGroupIDs,
                                                                                                13,
                                                                                                t.Key.CenterCostCode,
                                                                                                ServicePaymentTypeIDs),

                        Cost_12 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                toDate,
                                                                                                CityIDs,
                                                                                                CenterIDs,
                                                                                                ServiceIDs,
                                                                                                ServiceGroupIDs,
                                                                                                BandWidthIDs,
                                                                                                TrafficIDs,
                                                                                                DurationIDs,
                                                                                                SaleWaysIDs,
                                                                                                PaymentTypeIDs,
                                                                                                CustomerGroupIDs,
                                                                                                14,
                                                                                                t.Key.CenterCostCode,
                                                                                                ServicePaymentTypeIDs),

                        Cost_13 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                toDate,
                                                                                                CityIDs,
                                                                                                CenterIDs,
                                                                                                ServiceIDs,
                                                                                                ServiceGroupIDs,
                                                                                                BandWidthIDs,
                                                                                                TrafficIDs,
                                                                                                DurationIDs,
                                                                                                SaleWaysIDs,
                                                                                                PaymentTypeIDs,
                                                                                                CustomerGroupIDs,
                                                                                                15,
                                                                                                t.Key.CenterCostCode,
                                                                                                ServicePaymentTypeIDs),

                        Cost_14 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                toDate,
                                                                                                CityIDs,
                                                                                                CenterIDs,
                                                                                                ServiceIDs,
                                                                                                ServiceGroupIDs,
                                                                                                BandWidthIDs,
                                                                                                TrafficIDs,
                                                                                                DurationIDs,
                                                                                                SaleWaysIDs,
                                                                                                PaymentTypeIDs,
                                                                                                CustomerGroupIDs,
                                                                                                16,
                                                                                                t.Key.CenterCostCode,
                                                                                                ServicePaymentTypeIDs),

                        Cost_15 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                toDate,
                                                                                                CityIDs,
                                                                                                CenterIDs,
                                                                                                ServiceIDs,
                                                                                                ServiceGroupIDs,
                                                                                                BandWidthIDs,
                                                                                                TrafficIDs,
                                                                                                DurationIDs,
                                                                                                SaleWaysIDs,
                                                                                                PaymentTypeIDs,
                                                                                                CustomerGroupIDs,
                                                                                                17,
                                                                                                t.Key.CenterCostCode,
                                                                                                ServicePaymentTypeIDs),

                        Cost_16 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                toDate,
                                                                                                CityIDs,
                                                                                                CenterIDs,
                                                                                                ServiceIDs,
                                                                                                ServiceGroupIDs,
                                                                                                BandWidthIDs,
                                                                                                TrafficIDs,
                                                                                                DurationIDs,
                                                                                                SaleWaysIDs,
                                                                                                PaymentTypeIDs,
                                                                                                CustomerGroupIDs,
                                                                                                18,
                                                                                                t.Key.CenterCostCode,
                                                                                                ServicePaymentTypeIDs),

                        Cost_17 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                toDate,
                                                                                                CityIDs,
                                                                                                CenterIDs,
                                                                                                ServiceIDs,
                                                                                                ServiceGroupIDs,
                                                                                                BandWidthIDs,
                                                                                                TrafficIDs,
                                                                                                DurationIDs,
                                                                                                SaleWaysIDs,
                                                                                                PaymentTypeIDs,
                                                                                                CustomerGroupIDs,
                                                                                                19,
                                                                                                t.Key.CenterCostCode,
                                                                                                ServicePaymentTypeIDs),

                        Cost_18 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                toDate,
                                                                                                CityIDs,
                                                                                                CenterIDs,
                                                                                                ServiceIDs,
                                                                                                ServiceGroupIDs,
                                                                                                BandWidthIDs,
                                                                                                TrafficIDs,
                                                                                                DurationIDs,
                                                                                                SaleWaysIDs,
                                                                                                PaymentTypeIDs,
                                                                                                CustomerGroupIDs,
                                                                                                20,
                                                                                                t.Key.CenterCostCode,
                                                                                                ServicePaymentTypeIDs),

                        Cost_19 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                toDate,
                                                                                                CityIDs,
                                                                                                CenterIDs,
                                                                                                ServiceIDs,
                                                                                                ServiceGroupIDs,
                                                                                                BandWidthIDs,
                                                                                                TrafficIDs,
                                                                                                DurationIDs,
                                                                                                SaleWaysIDs,
                                                                                                PaymentTypeIDs,
                                                                                                CustomerGroupIDs,
                                                                                                21,
                                                                                                t.Key.CenterCostCode,
                                                                                                ServicePaymentTypeIDs),

                        Cost_20 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                toDate,
                                                                                                CityIDs,
                                                                                                CenterIDs,
                                                                                                ServiceIDs,
                                                                                                ServiceGroupIDs,
                                                                                                BandWidthIDs,
                                                                                                TrafficIDs,
                                                                                                DurationIDs,
                                                                                                SaleWaysIDs,
                                                                                                PaymentTypeIDs,
                                                                                                CustomerGroupIDs,
                                                                                                22,
                                                                                                t.Key.CenterCostCode,
                                                                                                ServicePaymentTypeIDs),

                        Cost_24 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                toDate,
                                                                                                CityIDs,
                                                                                                CenterIDs,
                                                                                                ServiceIDs,
                                                                                                ServiceGroupIDs,
                                                                                                BandWidthIDs,
                                                                                                TrafficIDs,
                                                                                                DurationIDs,
                                                                                                SaleWaysIDs,
                                                                                                PaymentTypeIDs,
                                                                                                CustomerGroupIDs,
                                                                                                23,
                                                                                                t.Key.CenterCostCode,
                                                                                                ServicePaymentTypeIDs),
                        Cost_30 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                toDate,
                                                                                                CityIDs,
                                                                                                CenterIDs,
                                                                                                ServiceIDs,
                                                                                                ServiceGroupIDs,
                                                                                                BandWidthIDs,
                                                                                                TrafficIDs,
                                                                                                DurationIDs,
                                                                                                SaleWaysIDs,
                                                                                                PaymentTypeIDs,
                                                                                                CustomerGroupIDs,
                                                                                                24,
                                                                                                t.Key.CenterCostCode,
                                                                                                ServicePaymentTypeIDs),

                        Cost_40 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                toDate,
                                                                                                CityIDs,
                                                                                                CenterIDs,
                                                                                                ServiceIDs,
                                                                                                ServiceGroupIDs,
                                                                                                BandWidthIDs,
                                                                                                TrafficIDs,
                                                                                                DurationIDs,
                                                                                                SaleWaysIDs,
                                                                                                PaymentTypeIDs,
                                                                                                CustomerGroupIDs,
                                                                                                25,
                                                                                                t.Key.CenterCostCode,
                                                                                                ServicePaymentTypeIDs),

                        Cost_46 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                toDate,
                                                                                                CityIDs,
                                                                                                CenterIDs,
                                                                                                ServiceIDs,
                                                                                                ServiceGroupIDs,
                                                                                                BandWidthIDs,
                                                                                                TrafficIDs,
                                                                                                DurationIDs,
                                                                                                SaleWaysIDs,
                                                                                                PaymentTypeIDs,
                                                                                                CustomerGroupIDs,
                                                                                                26,
                                                                                                t.Key.CenterCostCode,
                                                                                                ServicePaymentTypeIDs),

                        Cost_48 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                toDate,
                                                                                                CityIDs,
                                                                                                CenterIDs,
                                                                                                ServiceIDs,
                                                                                                ServiceGroupIDs,
                                                                                                BandWidthIDs,
                                                                                                TrafficIDs,
                                                                                                DurationIDs,
                                                                                                SaleWaysIDs,
                                                                                                PaymentTypeIDs,
                                                                                                CustomerGroupIDs,
                                                                                                27,
                                                                                                t.Key.CenterCostCode,
                                                                                                ServicePaymentTypeIDs),

                        Cost_50 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                 toDate,
                                                                                                 CityIDs,
                                                                                                 CenterIDs,
                                                                                                 ServiceIDs,
                                                                                                 ServiceGroupIDs,
                                                                                                 BandWidthIDs,
                                                                                                 TrafficIDs,
                                                                                                 DurationIDs,
                                                                                                 SaleWaysIDs,
                                                                                                 PaymentTypeIDs,
                                                                                                 CustomerGroupIDs,
                                                                                                 28,
                                                                                                 t.Key.CenterCostCode,
                                                                                                 ServicePaymentTypeIDs),

                        Cost_100 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                 toDate,
                                                                                                 CityIDs,
                                                                                                 CenterIDs,
                                                                                                 ServiceIDs,
                                                                                                 ServiceGroupIDs,
                                                                                                 BandWidthIDs,
                                                                                                 TrafficIDs,
                                                                                                 DurationIDs,
                                                                                                 SaleWaysIDs,
                                                                                                 PaymentTypeIDs,
                                                                                                 CustomerGroupIDs,
                                                                                                 29,
                                                                                                 t.Key.CenterCostCode,
                                                                                                 ServicePaymentTypeIDs),

                        Cost_200 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                 toDate,
                                                                                                 CityIDs,
                                                                                                 CenterIDs,
                                                                                                 ServiceIDs,
                                                                                                 ServiceGroupIDs,
                                                                                                 BandWidthIDs,
                                                                                                 TrafficIDs,
                                                                                                 DurationIDs,
                                                                                                 SaleWaysIDs,
                                                                                                 PaymentTypeIDs,
                                                                                                 CustomerGroupIDs,
                                                                                                 30,
                                                                                                 t.Key.CenterCostCode,
                                                                                                 ServicePaymentTypeIDs),

                        Cost_125 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                 toDate,
                                                                                                 CityIDs,
                                                                                                 CenterIDs,
                                                                                                 ServiceIDs,
                                                                                                 ServiceGroupIDs,
                                                                                                 BandWidthIDs,
                                                                                                 TrafficIDs,
                                                                                                 DurationIDs,
                                                                                                 SaleWaysIDs,
                                                                                                 PaymentTypeIDs,
                                                                                                 CustomerGroupIDs,
                                                                                                 31,
                                                                                                 t.Key.CenterCostCode,
                                                                                                 ServicePaymentTypeIDs),

                        Cost_250 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                 toDate,
                                                                                                 CityIDs,
                                                                                                 CenterIDs,
                                                                                                 ServiceIDs,
                                                                                                 ServiceGroupIDs,
                                                                                                 BandWidthIDs,
                                                                                                 TrafficIDs,
                                                                                                 DurationIDs,
                                                                                                 SaleWaysIDs,
                                                                                                 PaymentTypeIDs,
                                                                                                 CustomerGroupIDs,
                                                                                                 32,
                                                                                                 t.Key.CenterCostCode,
                                                                                                 ServicePaymentTypeIDs),

                        Cost_25 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                toDate,
                                                                                                CityIDs,
                                                                                                CenterIDs,
                                                                                                ServiceIDs,
                                                                                                ServiceGroupIDs,
                                                                                                BandWidthIDs,
                                                                                                TrafficIDs,
                                                                                                DurationIDs,
                                                                                                SaleWaysIDs,
                                                                                                PaymentTypeIDs,
                                                                                                CustomerGroupIDs,
                                                                                                33,
                                                                                                t.Key.CenterCostCode,
                                                                                                ServicePaymentTypeIDs),

                        Cost_36 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                toDate,
                                                                                                CityIDs,
                                                                                                CenterIDs,
                                                                                                ServiceIDs,
                                                                                                ServiceGroupIDs,
                                                                                                BandWidthIDs,
                                                                                                TrafficIDs,
                                                                                                DurationIDs,
                                                                                                SaleWaysIDs,
                                                                                                PaymentTypeIDs,
                                                                                                CustomerGroupIDs,
                                                                                                35,
                                                                                                t.Key.CenterCostCode,
                                                                                                ServicePaymentTypeIDs),

                        Cost_60 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                toDate,
                                                                                                CityIDs,
                                                                                                CenterIDs,
                                                                                                ServiceIDs,
                                                                                                ServiceGroupIDs,
                                                                                                BandWidthIDs,
                                                                                                TrafficIDs,
                                                                                                DurationIDs,
                                                                                                SaleWaysIDs,
                                                                                                PaymentTypeIDs,
                                                                                                CustomerGroupIDs,
                                                                                                36,
                                                                                                t.Key.CenterCostCode,
                                                                                                ServicePaymentTypeIDs),

                        Cost_84 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                toDate,
                                                                                                CityIDs,
                                                                                                CenterIDs,
                                                                                                ServiceIDs,
                                                                                                ServiceGroupIDs,
                                                                                                BandWidthIDs,
                                                                                                TrafficIDs,
                                                                                                DurationIDs,
                                                                                                SaleWaysIDs,
                                                                                                PaymentTypeIDs,
                                                                                                CustomerGroupIDs,
                                                                                                37,
                                                                                                t.Key.CenterCostCode,
                                                                                                ServicePaymentTypeIDs),

                        Cost_120 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                toDate,
                                                                                                CityIDs,
                                                                                                CenterIDs,
                                                                                                ServiceIDs,
                                                                                                ServiceGroupIDs,
                                                                                                BandWidthIDs,
                                                                                                TrafficIDs,
                                                                                                DurationIDs,
                                                                                                SaleWaysIDs,
                                                                                                PaymentTypeIDs,
                                                                                                CustomerGroupIDs,
                                                                                                38,
                                                                                                t.Key.CenterCostCode,
                                                                                                ServicePaymentTypeIDs),

                        Cost_96 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                toDate,
                                                                                                CityIDs,
                                                                                                CenterIDs,
                                                                                                ServiceIDs,
                                                                                                ServiceGroupIDs,
                                                                                                BandWidthIDs,
                                                                                                TrafficIDs,
                                                                                                DurationIDs,
                                                                                                SaleWaysIDs,
                                                                                                PaymentTypeIDs,
                                                                                                CustomerGroupIDs,
                                                                                                39,
                                                                                                t.Key.CenterCostCode,
                                                                                                ServicePaymentTypeIDs),


                        Cost_80 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                toDate,
                                                                                                CityIDs,
                                                                                                CenterIDs,
                                                                                                ServiceIDs,
                                                                                                ServiceGroupIDs,
                                                                                                BandWidthIDs,
                                                                                                TrafficIDs,
                                                                                                DurationIDs,
                                                                                                SaleWaysIDs,
                                                                                                PaymentTypeIDs,
                                                                                                CustomerGroupIDs,
                                                                                                40,
                                                                                                t.Key.CenterCostCode,
                                                                                                ServicePaymentTypeIDs),

                        Cost_750 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                toDate,
                                                                                                CityIDs,
                                                                                                CenterIDs,
                                                                                                ServiceIDs,
                                                                                                ServiceGroupIDs,
                                                                                                BandWidthIDs,
                                                                                                TrafficIDs,
                                                                                                DurationIDs,
                                                                                                SaleWaysIDs,
                                                                                                PaymentTypeIDs,
                                                                                                CustomerGroupIDs,
                                                                                                41,
                                                                                                t.Key.CenterCostCode,
                                                                                                ServicePaymentTypeIDs),

                        Cost_63 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                toDate,
                                                                                                CityIDs,
                                                                                                CenterIDs,
                                                                                                ServiceIDs,
                                                                                                ServiceGroupIDs,
                                                                                                BandWidthIDs,
                                                                                                TrafficIDs,
                                                                                                DurationIDs,
                                                                                                SaleWaysIDs,
                                                                                                PaymentTypeIDs,
                                                                                                CustomerGroupIDs,
                                                                                                42,
                                                                                                t.Key.CenterCostCode,
                                                                                                ServicePaymentTypeIDs),

                        Cost_35 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                toDate,
                                                                                                CityIDs,
                                                                                                CenterIDs,
                                                                                                ServiceIDs,
                                                                                                ServiceGroupIDs,
                                                                                                BandWidthIDs,
                                                                                                TrafficIDs,
                                                                                                DurationIDs,
                                                                                                SaleWaysIDs,
                                                                                                PaymentTypeIDs,
                                                                                                CustomerGroupIDs,
                                                                                                44,
                                                                                                t.Key.CenterCostCode,
                                                                                                ServicePaymentTypeIDs),

                        Cost_45 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                toDate,
                                                                                                CityIDs,
                                                                                                CenterIDs,
                                                                                                ServiceIDs,
                                                                                                ServiceGroupIDs,
                                                                                                BandWidthIDs,
                                                                                                TrafficIDs,
                                                                                                DurationIDs,
                                                                                                SaleWaysIDs,
                                                                                                PaymentTypeIDs,
                                                                                                CustomerGroupIDs,
                                                                                                45,
                                                                                                t.Key.CenterCostCode,
                                                                                                ServicePaymentTypeIDs),

                        Cost_70 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                toDate,
                                                                                                CityIDs,
                                                                                                CenterIDs,
                                                                                                ServiceIDs,
                                                                                                ServiceGroupIDs,
                                                                                                BandWidthIDs,
                                                                                                TrafficIDs,
                                                                                                DurationIDs,
                                                                                                SaleWaysIDs,
                                                                                                PaymentTypeIDs,
                                                                                                CustomerGroupIDs,
                                                                                                46,
                                                                                                t.Key.CenterCostCode,
                                                                                                ServicePaymentTypeIDs),

                        Cost_90 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                toDate,
                                                                                                CityIDs,
                                                                                                CenterIDs,
                                                                                                ServiceIDs,
                                                                                                ServiceGroupIDs,
                                                                                                BandWidthIDs,
                                                                                                TrafficIDs,
                                                                                                DurationIDs,
                                                                                                SaleWaysIDs,
                                                                                                PaymentTypeIDs,
                                                                                                CustomerGroupIDs,
                                                                                                47,
                                                                                                t.Key.CenterCostCode,
                                                                                                ServicePaymentTypeIDs),

                        Cost_150 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                 toDate,
                                                                                                 CityIDs,
                                                                                                 CenterIDs,
                                                                                                 ServiceIDs,
                                                                                                 ServiceGroupIDs,
                                                                                                 BandWidthIDs,
                                                                                                 TrafficIDs,
                                                                                                 DurationIDs,
                                                                                                 SaleWaysIDs,
                                                                                                 PaymentTypeIDs,
                                                                                                 CustomerGroupIDs,
                                                                                                 48,
                                                                                                 t.Key.CenterCostCode,
                                                                                                 ServicePaymentTypeIDs),

                        Cost_300 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                toDate,
                                                                                                CityIDs,
                                                                                                CenterIDs,
                                                                                                ServiceIDs,
                                                                                                ServiceGroupIDs,
                                                                                                BandWidthIDs,
                                                                                                TrafficIDs,
                                                                                                DurationIDs,
                                                                                                SaleWaysIDs,
                                                                                                PaymentTypeIDs,
                                                                                                CustomerGroupIDs,
                                                                                                49,
                                                                                                t.Key.CenterCostCode,
                                                                                                ServicePaymentTypeIDs),

                        Cost_400 = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(fromDate,
                                                                                                 toDate,
                                                                                                 CityIDs,
                                                                                                 CenterIDs,
                                                                                                 ServiceIDs,
                                                                                                 ServiceGroupIDs,
                                                                                                 BandWidthIDs,
                                                                                                 TrafficIDs,
                                                                                                 DurationIDs,
                                                                                                 SaleWaysIDs,
                                                                                                 PaymentTypeIDs,
                                                                                                 CustomerGroupIDs,
                                                                                                 50,
                                                                                                 t.Key.CenterCostCode,
                                                                                                 ServicePaymentTypeIDs),

                        AmountSum = GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficIDAmountSum(fromDate,
                                                                                                           toDate,
                                                                                                           CityIDs,
                                                                                                           CenterIDs,
                                                                                                           ServiceIDs,
                                                                                                           ServiceGroupIDs,
                                                                                                           BandWidthIDs,
                                                                                                           TrafficIDs,
                                                                                                           DurationIDs,
                                                                                                           SaleWaysIDs,
                                                                                                           PaymentTypeIDs,
                                                                                                           CustomerGroupIDs,
                                                                                                           t.Key.CenterCostCode,
                                                                                                           ServicePaymentTypeIDs),


                        ModemCost = 0,
                        IPCost = 0
                    }).Where(t =>
                        (fromCost == -1 || t.Cost_Unlimited >= fromCost)
                        && (fromCost == -1 || t.Cost_Unlimited >= fromCost)
                        && (fromCost == -1 || t.Cost_0 >= fromCost)
                        && (fromCost == -1 || t.Cost_0_5 >= fromCost)
                        && (fromCost == -1 || t.Cost_1 >= fromCost)
                        && (fromCost == -1 || t.Cost_2 >= fromCost)
                        && (fromCost == -1 || t.Cost_3 >= fromCost)
                        && (fromCost == -1 || t.Cost_4 >= fromCost)
                        && (fromCost == -1 || t.Cost_5 >= fromCost)
                        && (fromCost == -1 || t.Cost_6 >= fromCost)
                        && (fromCost == -1 || t.Cost_7 >= fromCost)
                        && (fromCost == -1 || t.Cost_8 >= fromCost)
                        && (fromCost == -1 || t.Cost_9 >= fromCost)
                        && (fromCost == -1 || t.Cost_10 >= fromCost)
                        && (fromCost == -1 || t.Cost_11 >= fromCost)
                        && (fromCost == -1 || t.Cost_12 >= fromCost)
                        && (fromCost == -1 || t.Cost_13 >= fromCost)
                        && (fromCost == -1 || t.Cost_14 >= fromCost)
                        && (fromCost == -1 || t.Cost_15 >= fromCost)
                        && (fromCost == -1 || t.Cost_16 >= fromCost)
                        && (fromCost == -1 || t.Cost_17 >= fromCost)
                        && (fromCost == -1 || t.Cost_18 >= fromCost)
                        && (fromCost == -1 || t.Cost_19 >= fromCost)
                        && (fromCost == -1 || t.Cost_20 >= fromCost)
                        && (fromCost == -1 || t.Cost_24 >= fromCost)
                        && (fromCost == -1 || t.Cost_30 >= fromCost)
                        && (fromCost == -1 || t.Cost_40 >= fromCost)
                        && (fromCost == -1 || t.Cost_46 >= fromCost)
                        && (fromCost == -1 || t.Cost_48 >= fromCost)
                        && (fromCost == -1 || t.Cost_50 >= fromCost)
                        && (fromCost == -1 || t.Cost_100 >= fromCost)
                        && (fromCost == -1 || t.Cost_200 >= fromCost)
                        && (fromCost == -1 || t.InstallmentCost >= fromCost)
                        && (fromCost == -1 || t.RanjeCost >= fromCost)
                        && (toCost == -1 || t.Cost_Unlimited <= toCost)
                        && (toCost == -1 || t.Cost_Unlimited <= toCost)
                        && (toCost == -1 || t.Cost_0 <= toCost)
                        && (toCost == -1 || t.Cost_0_5 <= toCost)
                        && (toCost == -1 || t.Cost_1 <= toCost)
                        && (toCost == -1 || t.Cost_2 <= toCost)
                        && (toCost == -1 || t.Cost_3 <= toCost)
                        && (toCost == -1 || t.Cost_4 <= toCost)
                        && (toCost == -1 || t.Cost_5 <= toCost)
                        && (toCost == -1 || t.Cost_6 <= toCost)
                        && (toCost == -1 || t.Cost_7 <= toCost)
                        && (toCost == -1 || t.Cost_8 <= toCost)
                        && (toCost == -1 || t.Cost_9 <= toCost)
                        && (toCost == -1 || t.Cost_10 <= toCost)
                        && (toCost == -1 || t.Cost_11 <= toCost)
                        && (toCost == -1 || t.Cost_12 <= toCost)
                        && (toCost == -1 || t.Cost_13 <= toCost)
                        && (toCost == -1 || t.Cost_14 <= toCost)
                        && (toCost == -1 || t.Cost_15 <= toCost)
                        && (toCost == -1 || t.Cost_16 <= toCost)
                        && (toCost == -1 || t.Cost_17 <= toCost)
                        && (toCost == -1 || t.Cost_18 <= toCost)
                        && (toCost == -1 || t.Cost_19 <= toCost)
                        && (toCost == -1 || t.Cost_20 <= toCost)
                        && (toCost == -1 || t.Cost_24 <= toCost)
                        && (toCost == -1 || t.Cost_30 <= toCost)
                        && (toCost == -1 || t.Cost_40 <= toCost)
                        && (toCost == -1 || t.Cost_46 <= toCost)
                        && (toCost == -1 || t.Cost_48 <= toCost)
                        && (toCost == -1 || t.Cost_50 <= toCost)
                        && (toCost == -1 || t.Cost_100 <= toCost)
                        && (toCost == -1 || t.Cost_200 <= toCost)
                        && (toCost == -1 || t.InstallmentCost <= toCost)
                        && (toCost == -1 || t.RanjeCost <= toCost))
                        .Select(t => new ADSLTrafficSaleTrafficSeperation
                        {
                            Cost_0 = t.Cost_0,
                            Cost_Unlimited = t.Cost_Unlimited,
                            Cost_0_5 = t.Cost_0_5,
                            Cost_1 = t.Cost_1,
                            Cost_2 = t.Cost_2,
                            Cost_3 = t.Cost_3,
                            Cost_4 = t.Cost_4,
                            Cost_5 = t.Cost_5,
                            Cost_6 = t.Cost_6,
                            Cost_7 = t.Cost_7,
                            Cost_8 = t.Cost_8,
                            Cost_9 = t.Cost_9,
                            Cost_10 = t.Cost_10,
                            Cost_11 = t.Cost_11,
                            Cost_12 = t.Cost_12,
                            Cost_13 = t.Cost_13,
                            Cost_14 = t.Cost_14,
                            Cost_15 = t.Cost_15,
                            Cost_16 = t.Cost_16,
                            Cost_17 = t.Cost_17,
                            Cost_18 = t.Cost_18,
                            Cost_19 = t.Cost_19,
                            Cost_20 = t.Cost_20,
                            Cost_24 = t.Cost_24,
                            Cost_30 = t.Cost_30,
                            Cost_40 = t.Cost_40,
                            Cost_46 = t.Cost_46,
                            Cost_48 = t.Cost_48,
                            Cost_50 = t.Cost_50,
                            Cost_100 = t.Cost_100,
                            Cost_200 = t.Cost_200,
                            Cost_125 = t.Cost_125,
                            Cost_250 = t.Cost_250,
                            Cost_25 = t.Cost_25,
                            Cost_36 = t.Cost_36,
                            Cost_60 = t.Cost_60,
                            Cost_84 = t.Cost_84,
                            Cost_120 = t.Cost_120,
                            Cost_96 = t.Cost_96,
                            Cost_80 = t.Cost_80,
                            Cost_750 = t.Cost_750,
                            Cost_63 = t.Cost_63,
                            Cost_35 = t.Cost_35,
                            Cost_45 = t.Cost_45,
                            Cost_70 = t.Cost_70,
                            Cost_90 = t.Cost_90,
                            Cost_150 = t.Cost_150,
                            Cost_300 = t.Cost_300,
                            Cost_400 = t.Cost_400,
                            IPCost = t.IPCost,
                            ModemCost = t.ModemCost,
                            InstallmentCost = t.InstallmentCost,
                            RanjeCost = t.RanjeCost,
                            CenterCostCode = t.CenterCostCode,
                            AmountSum = t.AmountSum,
                            Tax = t.Tax

                        }).ToList();


            }
        }

        public static long? GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficID(DateTime? fromDate,
                                                                                                DateTime? toDate,
                                                                                                List<int> CityIDs,
                                                                                                List<int> CenterIDs,
                                                                                                List<int> ServiceIDs,
                                                                                                List<int> ServiceGroupIDs,
                                                                                                List<int> BandWidthIDs,
                                                                                                List<int> TrafficIDs,
                                                                                                List<int> DurationIDs,
                                                                                                List<int> SaleWaysIDs,
                                                                                                List<int> PaymentTypeIDs,
                                                                                                List<int> CustomerGroupIDs,
                                                                                                int TrafficID,
                                                                                                int? CenterCostCode,
                                                                                                List<int> ServicePaymentTypeIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLSellTraffics.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLSellTraffic = a, RequestPayment = p }).Where(t =>
                    (!fromDate.HasValue || fromDate <= t.ADSLSellTraffic.Request.EndDate)
                    && (!toDate.HasValue || toDate > t.ADSLSellTraffic.Request.EndDate)
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLSellTraffic.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ADSLSellTraffic.Request.CenterID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ADSLSellTraffic.AdditionalServiceID))
                    && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLSellTraffic.ADSLService.ADSLServiceGroup.ID))
                    && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.ADSLSellTraffic.ADSLService.BandWidthID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLSellTraffic.ADSLService.TrafficID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLSellTraffic.ADSLService.DurationID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestPayment.PaymentType))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLSellTraffic.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (t.ADSLSellTraffic.ADSLService.TrafficID == TrafficID)
                        //&& (t.ADSLSellTraffic.AdditionalServiceID != null)
                    && (t.RequestPayment.BaseCostID == 105)
                    && (t.ADSLSellTraffic.Request.Center.BillingCode == CenterCostCode)
                    && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ADSLSellTraffic.ADSLService.PaymentTypeID))
                    && (SaleWaysIDs.Count == 0 || SaleWaysIDs.Contains((int)t.ADSLSellTraffic.ChangeServiceType))
                    && (t.RequestPayment.PaymentDate != null || t.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Sum(t => t.RequestPayment.Cost);
            }
        }

        public static long? GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficIDAmountSum(DateTime? fromDate,
                                                                                                DateTime? toDate,
                                                                                                List<int> CityIDs,
                                                                                                List<int> CenterIDs,
                                                                                                List<int> ServiceIDs,
                                                                                                List<int> ServiceGroupIDs,
                                                                                                List<int> BandWidthIDs,
                                                                                                List<int> TrafficIDs,
                                                                                                List<int> DurationIDs,
                                                                                                List<int> SaleWaysIDs,
                                                                                                List<int> PaymentTypeIDs,
                                                                                                List<int> CustomerGroupIDs,
                                                                                                int? CenterCostCode,
                                                                                                List<int> ServicePaymentTypeIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLSellTraffics.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLSellTraffic = a, RequestPayment = p }).Where(t =>
                    (!fromDate.HasValue || fromDate <= t.ADSLSellTraffic.Request.EndDate)
                    && (!toDate.HasValue || toDate > t.ADSLSellTraffic.Request.EndDate)
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLSellTraffic.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ADSLSellTraffic.Request.CenterID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ADSLSellTraffic.AdditionalServiceID))
                    && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLSellTraffic.ADSLService.ADSLServiceGroup.ID))
                    && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.ADSLSellTraffic.ADSLService.BandWidthID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLSellTraffic.ADSLService.TrafficID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLSellTraffic.ADSLService.DurationID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestPayment.PaymentType))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLSellTraffic.ADSLService.ADSLServiceGroup.CustomerGroupID))
                        //&& (t.ADSLSellTraffic.AdditionalServiceID != null)
                    && (t.RequestPayment.BaseCostID == 105)
                    && (t.ADSLSellTraffic.Request.Center.BillingCode == CenterCostCode)
                    && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ADSLSellTraffic.ADSLService.PaymentTypeID))
                        //&& (t.ADSLSellTraffic.ADSLService.TypeID == (byte)DB.ADSLServiceType.Traffic)
                    && (SaleWaysIDs.Count == 0 || SaleWaysIDs.Contains((int)t.ADSLSellTraffic.ChangeServiceType))
                    && (t.RequestPayment.PaymentDate != null || t.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Sum(t => t.RequestPayment.AmountSum);
            }
        }

        public static long? GetADSLTrafficSaleADSLSellTrafficTrafficSeperationByTrafficIDTax(DateTime? fromDate,
                                                                                                DateTime? toDate,
                                                                                                List<int> CityIDs,
                                                                                                List<int> CenterIDs,
                                                                                                List<int> ServiceIDs,
                                                                                                List<int> ServiceGroupIDs,
                                                                                                List<int> BandWidthIDs,
                                                                                                List<int> TrafficIDs,
                                                                                                List<int> DurationIDs,
                                                                                                List<int> SaleWaysIDs,
                                                                                                List<int> PaymentTypeIDs,
                                                                                                List<int> CustomerGroupIDs,
                                                                                                int? CenterCostCode,
                                                                                                List<int> ServicePaymentTypeIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLSellTraffics.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLSellTraffic = a, RequestPayment = p }).Where(t =>
                    (!fromDate.HasValue || fromDate <= t.ADSLSellTraffic.Request.EndDate)
                    && (!toDate.HasValue || toDate > t.ADSLSellTraffic.Request.EndDate)
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLSellTraffic.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ADSLSellTraffic.Request.CenterID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ADSLSellTraffic.AdditionalServiceID))
                    && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLSellTraffic.ADSLService.ADSLServiceGroup.ID))
                    && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.ADSLSellTraffic.ADSLService.BandWidthID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLSellTraffic.ADSLService.TrafficID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLSellTraffic.ADSLService.DurationID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestPayment.PaymentType))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLSellTraffic.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (t.ADSLSellTraffic.AdditionalServiceID != null)
                    && (t.RequestPayment.BaseCostID == 105)
                    && (t.ADSLSellTraffic.Request.Center.BillingCode == CenterCostCode)
                    && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ADSLSellTraffic.ADSLService.PaymentTypeID))
                    && (t.ADSLSellTraffic.ADSLService.TypeID == (byte)DB.ADSLServiceType.Traffic)).Sum(t => t.RequestPayment.Tax);
            }
        }

        public static List<ADSLTrafficSaleTrafficSeperation> GetADSLRequestSQLTrafficSaleTrafficSeperation(DateTime? fromDate,
                                                                                                   DateTime? toDate,
                                                                                                   List<int> CityIDs,
                                                                                                   List<int> CenterIDs,
                                                                                                   List<int> ServiceIDs,
                                                                                                   List<int> ServiceGroupIDs,
                                                                                                   List<int> SaleTypeIDs,
                                                                                                   List<int> BandWidthIDs,
                                                                                                   List<int> TrafficIDs,
                                                                                                   List<int> DurationIDs,
                                                                                                   List<int> SaleWaysIDs,
                                                                                                   List<int> PaymentTypeIDs,
                                                                                                   List<int> CustomerGroupIDs,
                                                                                                    long? fromCost,
                                                                                                    long? toCost,
                                                                                                    bool? HasModem)
        {
            using (MainDataContext context = new MainDataContext())
            {
                string query = "execute [dbo].[Report.ADSLSellTrafficSaleTrafficSeperationReport] "
                                                                                    + ((CityIDs.Count == 0) ? "null" : ("'" + string.Join(",", CityIDs) + "'")) + ","
                                                                                    + ((CenterIDs.Count == 0) ? "null" : ("'" + string.Join(",", CenterIDs) + "'")) + ","
                                                                                    + "'" + fromDate + "'" + "," + "'" + toDate + "'" + ","
                                                                                     + ((ServiceIDs.Count == 0) ? "null" : ("'" + string.Join(",", ServiceIDs) + "'")) + ","
                                                                                     + ((ServiceGroupIDs.Count == 0) ? "null" : ("'" + string.Join(",", ServiceGroupIDs) + "'")) + ","
                                                                                     + ((BandWidthIDs.Count == 0) ? "null" : ("'" + string.Join(",", BandWidthIDs) + "'")) + ","
                                                                                     + ((TrafficIDs.Count == 0) ? "null" : ("'" + string.Join(",", TrafficIDs) + "'")) + ","
                                                                                     + ((DurationIDs.Count == 0) ? "null" : ("'" + string.Join(",", DurationIDs) + "'")) + ","
                                                                                     + ((PaymentTypeIDs.Count == 0) ? "null" : ("'" + string.Join(",", PaymentTypeIDs) + "'")) + ","
                                                                                     + ((CustomerGroupIDs.Count == 0) ? "null" : ("'" + string.Join(",", CustomerGroupIDs) + "'")) + ","
                                                                                     + ("null");

                return context.ExecuteQuery<ADSLTrafficSaleTrafficSeperation>(query).ToList();
            }
        }

        public static List<ADSLTrafficSaleTrafficSeperation> GetADSLSellSQLTrafficTrafficSaleTrafficSeperation(DateTime? fromDate,
                                                                                                   DateTime? toDate,
                                                                                                   List<int> CityIDs,
                                                                                                   List<int> CenterIDs,
                                                                                                   List<int> ServiceIDs,
                                                                                                   List<int> ServiceGroupIDs,
                                                                                                   List<int> SaleTypeIDs,
                                                                                                   List<int> BandWidthIDs,
                                                                                                   List<int> TrafficIDs,
                                                                                                   List<int> DurationIDs,
                                                                                                   List<int> SaleWaysIDs,
                                                                                                   List<int> PaymentTypeIDs,
                                                                                                   List<int> CustomerGroupIDs,
                                                                                                    long? fromCost,
                                                                                                    long? toCost)
        {
            using (MainDataContext context = new MainDataContext())
            {
                string query = "execute [dbo].[Report.ADSLSellTrafficSaleTrafficSeperationReport] "
                                                                                    + ((CityIDs.Count == 0) ? "null" : ("'" + string.Join(",", CityIDs) + "'")) + ","
                                                                                    + ((CenterIDs.Count == 0) ? "null" : ("'" + string.Join(",", CenterIDs) + "'")) + ","

                                                                                     + "'" + fromDate + "'" + "," + "'" + toDate + "'" + ","
                                                                                     + ((ServiceIDs.Count == 0) ? "null" : ("'" + string.Join(",", ServiceIDs) + "'")) + ","
                                                                                     + ((ServiceGroupIDs.Count == 0) ? "null" : ("'" + string.Join(",", ServiceGroupIDs) + "'")) + ","
                                                                                     + ((BandWidthIDs.Count == 0) ? "null" : ("'" + string.Join(",", BandWidthIDs) + "'")) + ","
                                                                                     + ((TrafficIDs.Count == 0) ? "null" : ("'" + string.Join(",", TrafficIDs) + "'")) + ","
                                                                                     + ((DurationIDs.Count == 0) ? "null" : ("'" + string.Join(",", DurationIDs) + "'")) + ","
                                                                                     + ((PaymentTypeIDs.Count == 0) ? "null" : ("'" + string.Join(",", PaymentTypeIDs) + "'")) + ","
                                                                                     + ((CustomerGroupIDs.Count == 0) ? "null" : ("'" + string.Join(",", CustomerGroupIDs) + "'"));

                return context.ExecuteQuery<ADSLTrafficSaleTrafficSeperation>(query).ToList();
            }
        }

        public static List<ADSLTrafficSaleTrafficSeperation> GetADSLSQLTrafficSaleADSLRequestModemCost(DateTime? fromDate,
                                                                DateTime? toDate,
                                                                List<int> CityIDs,
                                                                List<int> CenterIDs,
                                                                List<int> ServiceIDs,
                                                                List<int> ServiceGroupIDs,
                                                                List<int> SaleTypeIDs,
                                                                List<int> BandWidthIDs,
                                                                List<int> TrafficIDs,
                                                                List<int> DurationIDs,
                                                                List<int> SaleWaysIDs,
                                                                List<int> PaymentTypeIDs,
                                                                List<int> CustomerGroupIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLRequests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLRequest = a, RequestPayment = p }).Where(t =>
                    (!fromDate.HasValue || fromDate <= t.ADSLRequest.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ADSLRequest.Request.EndDate)
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLRequest.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ADSLRequest.Request.CenterID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ADSLRequest.AdditionalServiceID))
                    && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLRequest.ADSLService.ADSLServiceGroup.ID))
                    && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.ADSLRequest.ADSLService.BandWidthID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLRequest.ADSLService.TrafficID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLRequest.ADSLService.DurationID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestPayment.PaymentType))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (t.ADSLRequest.NeedModem == true)
                    && (t.ADSLRequest.AdditionalServiceID != null)
                    && (t.ADSLRequest.ADSLService.TypeID == (byte)DB.ADSLServiceType.Traffic)
                    && (t.RequestPayment.BaseCostID == 40)).GroupBy(t => new
                    {
                        CenterCostCode = t.ADSLRequest.Request.Center.BillingCode,
                        pricesum = t.RequestPayment.AmountSum

                    }).Select(t => new ADSLTrafficSaleTrafficSeperation
                    {
                        ModemCost = t.Key.pricesum,
                        CenterCostCode = t.Key.CenterCostCode.ToString()
                    }).ToList();


            }
        }

        public static List<ADSLTrafficSaleTrafficSeperation> GetADSLSQLTrafficSaleADSLRequestIPCost(DateTime? fromDate,
                                                             DateTime? toDate,
                                                             List<int> CityIDs,
                                                             List<int> CenterIDs,
                                                             List<int> ServiceIDs,
                                                             List<int> ServiceGroupIDs,
                                                             List<int> SaleTypeIDs,
                                                             List<int> BandWidthIDs,
                                                             List<int> TrafficIDs,
                                                             List<int> DurationIDs,
                                                             List<int> SaleWaysIDs,
                                                             List<int> PaymentTypeIDs,
                                                             List<int> CustomerGroupIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLRequests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLRequest = a, RequestPayment = p })
                    .Where(t =>
                    (!fromDate.HasValue || fromDate <= t.ADSLRequest.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ADSLRequest.Request.EndDate)
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLRequest.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ADSLRequest.Request.CenterID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ADSLRequest.AdditionalServiceID))
                    && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLRequest.ADSLService.ADSLServiceGroup.ID))
                    && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.ADSLRequest.ADSLService.BandWidthID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLRequest.ADSLService.TrafficID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLRequest.ADSLService.DurationID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestPayment.PaymentType))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (t.ADSLRequest.HasIP != null)
                    && (t.ADSLRequest.AdditionalServiceID != null)
                    && (t.ADSLRequest.ADSLService.TypeID == (byte)DB.ADSLServiceType.Traffic)
                    && (t.RequestPayment.BaseCostID == 48)).GroupBy(t => new
                    {
                        CenterCostCode = t.ADSLRequest.Request.Center.BillingCode,
                        pricesum = t.RequestPayment.AmountSum

                    }).Select(t => new ADSLTrafficSaleTrafficSeperation
                    {
                        IPCost = t.Key.pricesum,
                        CenterCostCode = t.Key.CenterCostCode.ToString()
                    }).ToList();


            }
        }


        public static List<ADSLTrafficSaleTrafficSeperation> GetADSLSQLTrafficSaleADSLRequestRanjeCost(DateTime? fromDate,
                                                             DateTime? toDate,
                                                             List<int> CityIDs,
                                                             List<int> CenterIDs,
                                                             List<int> ServiceIDs,
                                                             List<int> ServiceGroupIDs,
                                                             List<int> SaleTypeIDs,
                                                             List<int> BandWidthIDs,
                                                             List<int> TrafficIDs,
                                                             List<int> DurationIDs,
                                                             List<int> SaleWaysIDs,
                                                             List<int> PaymentTypeIDs,
                                                             List<int> CustomerGroupIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLRequests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLRequest = a, RequestPayment = p })
                    .Where(t =>
                    (!fromDate.HasValue || fromDate <= t.ADSLRequest.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ADSLRequest.Request.EndDate)
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLRequest.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ADSLRequest.Request.CenterID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ADSLRequest.AdditionalServiceID))
                    && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLRequest.ADSLService.ADSLServiceGroup.ID))
                    && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.ADSLRequest.ADSLService.BandWidthID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLRequest.ADSLService.TrafficID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLRequest.ADSLService.DurationID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestPayment.PaymentType))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (t.ADSLRequest.AdditionalServiceID != null)
                    && (t.ADSLRequest.ADSLService.TypeID == (byte)DB.ADSLServiceType.Traffic)
                    && (t.RequestPayment.BaseCostID == 107)).GroupBy(t => new
                    {
                        CenterCostCode = t.ADSLRequest.Request.Center.BillingCode,
                        pricesum = t.RequestPayment.AmountSum

                    }).Select(t => new ADSLTrafficSaleTrafficSeperation
                    {
                        RanjeCost = t.Key.pricesum,
                        CenterCostCode = t.Key.ToString()
                    }).ToList();


            }
        }

        public static List<ADSLTrafficSaleTrafficSeperation> GetADSLSQLTrafficSaleADSLRequestInstallmentCost(DateTime? fromDate,
                                                             DateTime? toDate,
                                                             List<int> CityIDs,
                                                             List<int> CenterIDs,
                                                             List<int> ServiceIDs,
                                                             List<int> ServiceGroupIDs,
                                                             List<int> SaleTypeIDs,
                                                             List<int> BandWidthIDs,
                                                             List<int> TrafficIDs,
                                                             List<int> DurationIDs,
                                                             List<int> SaleWaysIDs,
                                                             List<int> PaymentTypeIDs,
                                                             List<int> CustomerGroupIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLRequests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLRequest = a, RequestPayment = p })
                    .Where(t =>
                    (!fromDate.HasValue || fromDate <= t.ADSLRequest.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ADSLRequest.Request.EndDate)
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLRequest.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ADSLRequest.Request.CenterID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ADSLRequest.AdditionalServiceID))
                    && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLRequest.ADSLService.ADSLServiceGroup.ID))
                    && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.ADSLRequest.ADSLService.BandWidthID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLRequest.ADSLService.TrafficID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLRequest.ADSLService.DurationID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestPayment.PaymentType))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (t.ADSLRequest.AdditionalServiceID != null)
                    && (t.ADSLRequest.ADSLService.TypeID == (byte)DB.ADSLServiceType.Traffic)
                    && (t.RequestPayment.BaseCostID == 37)).GroupBy(t => new
                    {
                        CenterCostCode = t.ADSLRequest.Request.Center.BillingCode,
                        pricesum = t.RequestPayment.AmountSum

                    }).Select(t => new ADSLTrafficSaleTrafficSeperation
                    {
                        InstallmentCost = t.Key.pricesum,
                        CenterCostCode = t.Key.CenterCostCode.ToString()

                    }).ToList();


            }
        }

        public static List<ADSlServiceSaleCustomerAndServiceSeperationInfo> GetADSLRequestServiceSaleCustomerAndServiceSeperation(List<int> CityIDs,
                                                                                                                                    List<int> CenterIDs,
                                                                                                                                    List<int> PaymentTypeIDs,
                                                                                                                                    List<int> ServiceGroupIDs,
                                                                                                                                    List<int> CustomerGroupIDs,
                                                                                                                                    List<int> BandwidthIDs,
                                                                                                                                    List<int> DurationIDs,
                                                                                                                                    List<int> TrafficIDs,
                                                                                                                                    List<int> ServiceIDs,
                                                                                                                                    DateTime? fromDate,
                                                                                                                                    DateTime? toDate,
                                                                                                                                    long? FromCost,
                                                                                                                                    long? ToCost,
                                                                                                                                    bool? HasModem,
                                                                                                                                    List<int> ServicePaymentTypeIds,
                                                                                                                                    DateTime? FromPaymentDate,
                                                                                                                                    DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLRequest = a, RequestPayment = p })
                    .GroupJoin(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, s => s.ID, (a, s) => new { ALL = a, ADSLSellerAGentUser = s })
                    .SelectMany(t2 => t2.ADSLSellerAGentUser.DefaultIfEmpty(), (t1, t2) => new { ALL = t1.ALL, ADSLSellerAGentUser = t2 })
                    .Where(t =>
                    (CityIDs.Count == 0 || CityIDs.Contains((int)t.ALL.ADSLRequest.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ALL.ADSLRequest.Request.CenterID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.ALL.RequestPayment.PaymentType))
                    && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.ADSLServiceGroup.ID))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (BandwidthIDs.Count == 0 || BandwidthIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.BandWidthID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.DurationID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.TrafficID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ALL.ADSLRequest.ServiceID))
                    && (!fromDate.HasValue || fromDate <= t.ALL.ADSLRequest.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ALL.ADSLRequest.Request.EndDate)
                    && (FromCost == -1 || FromCost <= t.ALL.RequestPayment.AmountSum)
                    && (ToCost == -1 || ToCost >= t.ALL.RequestPayment.AmountSum)
                    && (ServicePaymentTypeIds.Count == 0 || PaymentTypeIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.PaymentTypeID))
                    && (!HasModem.HasValue || HasModem == t.ALL.ADSLRequest.NeedModem)
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.ALL.RequestPayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.ALL.RequestPayment.PaymentDate)
                    && (t.ALL.RequestPayment.PaymentDate != null || t.ALL.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)
                    && (t.ALL.RequestPayment.BaseCostID == 44)).Select(t => new ADSlServiceSaleCustomerAndServiceSeperationInfo
                    {
                        CenterCodeCost = t.ALL.ADSLRequest.Request.Center.BillingCode.ToString(),
                        City = t.ALL.ADSLRequest.Request.Center.Region.City.Name,
                        Center = t.ALL.ADSLRequest.Request.Center.CenterName,
                        TelephoneNo = t.ALL.ADSLRequest.Request.TelephoneNo.ToString(),
                        Date = Date.GetPersianDate(t.ALL.ADSLRequest.Request.EndDate, Date.DateStringType.Short).Replace("/", ""),
                        CustomerName = t.ALL.ADSLRequest.Request.Customer.FirstNameOrTitle + " " + t.ALL.ADSLRequest.Request.Customer.LastName,
                        PaymentType = DB.GetEnumDescriptionByValue(typeof(DB.PaymentType), t.ALL.RequestPayment.PaymentType),
                        Duration = t.ALL.ADSLRequest.ADSLService.ADSLServiceDuration.Title,
                        BandWidth = t.ALL.ADSLRequest.ADSLService.ADSLServiceBandWidth.Title,
                        Traffic = t.ALL.ADSLRequest.ADSLService.ADSLServiceTraffic.Title,
                        Cost = t.ALL.RequestPayment.AmountSum,
                        PaymentDate = Date.GetPersianDate(t.ALL.RequestPayment.PaymentDate, Date.DateStringType.Short).Replace("/", ""),
                        FichNo = t.ALL.RequestPayment.FicheNunmber.ToString(),
                        FicheDate = Date.GetPersianDate(t.ALL.RequestPayment.FicheDate, Date.DateStringType.Short).Replace("/", ""),
                        SellerAgentUser = t.ADSLSellerAGentUser.User.FirstName + " " + t.ADSLSellerAGentUser.User.LastName,

                    }).ToList();
            }
        }

        public static List<ADSlServiceSaleCustomerAndServiceSeperationInfo> GetADSLChangeServiceSaleCustomerAndServiceSeperation(List<int> CityIDs,
                                                                                                                                   List<int> CenterIDs,
                                                                                                                                   List<int> PaymentTypeIDs,
                                                                                                                                   List<int> ServiceGroupIDs,
                                                                                                                                   List<int> CustomerGroupIDs,
                                                                                                                                   List<int> BandwidthIDs,
                                                                                                                                   List<int> DurationIDs,
                                                                                                                                   List<int> TrafficIDs,
                                                                                                                                   List<int> ServiceIDs,
                                                                                                                                   DateTime? fromDate,
                                                                                                                                   DateTime? toDate,
                                                                                                                                    long? FromCost,
                                                                                                                                    long? ToCost,
                                                                                                                                    bool? HasModem,
                                                                                                                                    List<int> ServicePaymentTypeIDs,
                                                                                                                                    DateTime? FromPaymentDate,
                                                                                                                                    DateTime? ToPaymentDate,
                                                                                                                                    List<int> SaleWayIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {

                return context.ADSLChangeServices.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLChangeService = a, RequestPayment = p })
                     .GroupJoin(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, s => s.ID, (a, s) => new { ALL = a, ADSLSellerAGentUser = s })
                    .SelectMany(t2 => t2.ADSLSellerAGentUser.DefaultIfEmpty(), (t1, t2) => new { ALL = t1.ALL, ADSLSellerAGentUser = t2 })
                    .Where(t =>
                    (CityIDs.Count == 0 || CityIDs.Contains((int)t.ALL.ADSLChangeService.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ALL.ADSLChangeService.Request.CenterID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.ALL.RequestPayment.PaymentType))
                    && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ALL.ADSLChangeService.ADSLService.ADSLServiceGroup.ID))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ALL.ADSLChangeService.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (BandwidthIDs.Count == 0 || BandwidthIDs.Contains((int)t.ALL.ADSLChangeService.ADSLService.BandWidthID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ALL.ADSLChangeService.ADSLService.DurationID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ALL.ADSLChangeService.ADSLService.TrafficID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ALL.ADSLChangeService.ADSLService.ID))
                    && (!fromDate.HasValue || fromDate <= t.ALL.ADSLChangeService.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ALL.ADSLChangeService.Request.EndDate)
                    && (FromCost == -1 || FromCost <= t.ALL.RequestPayment.AmountSum)
                    && (ToCost == -1 || ToCost >= t.ALL.RequestPayment.AmountSum)
                    && (t.ALL.RequestPayment.BaseCostID == 44 || t.ALL.RequestPayment.BaseCostID == 45)
                    && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ALL.ADSLChangeService.ADSLService.PaymentTypeID))
                    && (!HasModem.HasValue || HasModem == t.ALL.ADSLChangeService.NeedModem)
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.ALL.RequestPayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.ALL.RequestPayment.PaymentDate)
                    && (SaleWayIDs.Count == 0 || SaleWayIDs.Contains((int)t.ALL.ADSLChangeService.ChangeServiceType))
                    && (t.ALL.RequestPayment.PaymentDate != null || t.ALL.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Select(t => new ADSlServiceSaleCustomerAndServiceSeperationInfo
                    {
                        CenterCodeCost = t.ALL.ADSLChangeService.Request.Center.BillingCode.ToString(),
                        City = t.ALL.ADSLChangeService.Request.Center.Region.City.Name,
                        Center = t.ALL.ADSLChangeService.Request.Center.CenterName,
                        TelephoneNo = t.ALL.ADSLChangeService.Request.TelephoneNo.ToString(),
                        Date = Date.GetPersianDate(t.ALL.ADSLChangeService.Request.EndDate, Date.DateStringType.Short),
                        CustomerName = t.ALL.ADSLChangeService.Request.Customer.FirstNameOrTitle + " " + t.ALL.ADSLChangeService.Request.Customer.LastName,
                        PaymentType = DB.GetEnumDescriptionByValue(typeof(DB.PaymentType), t.ALL.RequestPayment.PaymentType),
                        Duration = t.ALL.ADSLChangeService.ADSLService.ADSLServiceDuration.Title,
                        BandWidth = t.ALL.ADSLChangeService.ADSLService.ADSLServiceBandWidth.Title,
                        Traffic = t.ALL.ADSLChangeService.ADSLService.ADSLServiceTraffic.Title,
                        Cost = t.ALL.RequestPayment.AmountSum,
                        PaymentDate = Date.GetPersianDate(t.ALL.RequestPayment.PaymentDate, Date.DateStringType.Short),
                        FichNo = t.ALL.RequestPayment.FicheNunmber.ToString(),
                        FicheDate = Date.GetPersianDate(t.ALL.RequestPayment.FicheDate, Date.DateStringType.Short),
                        SellerAgentUser = t.ADSLSellerAGentUser.User.FirstName + " " + t.ADSLSellerAGentUser.User.LastName
                    }).ToList();
            }
        }

        public static List<ADSLServiceAggragationSaleCenterSeperation> GetADSLRequestServiceAggregateSaleCenterSeperationInfo(List<int> CityIDs,
                                                                                                                                   List<int> CenterIDs,
                                                                                                                                   List<int> PaymentTypeIDs,
                                                                                                                                   List<int> ServiceGroupIDs,
                                                                                                                                   List<int> CustomerGroupIDs,
                                                                                                                                   List<int> BandwidthIDs,
                                                                                                                                   List<int> DurationIDs,
                                                                                                                                   List<int> TrafficIDs,
                                                                                                                                   List<int> ServiceIDs,
                                                                                                                                   DateTime? fromDate,
                                                                                                                                   DateTime? toDate,
            //long? FromCost,
            //long? ToCost,
                                                                                                                                    bool? HasModem,
                                                                                                                                   List<int> ServicePaymentTypeIDs,
                                                                                                                                  DateTime? FromPaymentDate,
                                                                                                                                  DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLRequests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLRequest = a, RequestPayment = p })
                       .Where(t =>
                       (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLRequest.Request.Center.Region.CityID))
                       && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ADSLRequest.Request.CenterID))
                       && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestPayment.PaymentType))
                       && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLRequest.ADSLService.GroupID))
                       && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                       && (BandwidthIDs.Count == 0 || BandwidthIDs.Contains((int)t.ADSLRequest.ADSLService.BandWidthID))
                       && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLRequest.ADSLService.DurationID))
                       && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLRequest.ADSLService.TrafficID))
                       && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ADSLRequest.ServiceID))
                       && (!fromDate.HasValue || fromDate <= t.ADSLRequest.Request.EndDate)
                       && (!toDate.HasValue || toDate >= t.ADSLRequest.Request.EndDate)
                           //&& (FromCost == -1 || FromCost <= t.RequestPayment.AmountSum)
                           //&& (ToCost == -1 || ToCost >= t.RequestPayment.AmountSum)
                       && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestPayment.PaymentDate)
                       && (!ToPaymentDate.HasValue || ToPaymentDate >= t.RequestPayment.PaymentDate)
                       && (t.RequestPayment.PaymentDate != null || t.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)
                       && (!HasModem.HasValue || HasModem == t.ADSLRequest.NeedModem)
                       && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ADSLRequest.ADSLService.PaymentTypeID))).GroupBy(t => new
                       {
                           Center = t.ADSLRequest.Request.Center.CenterName,
                           CenterCostCode = t.ADSLRequest.Request.Center.BillingCode.ToString(),
                           BandWidth = t.ADSLRequest.ADSLService.ADSLServiceBandWidth.Title,
                           Duration = t.ADSLRequest.ADSLService.ADSLServiceDuration.Title,
                           PaymentType = t.RequestPayment.PaymentType,
                           Traffic = t.ADSLRequest.ADSLService.ADSLServiceTraffic.Title,
                           City = t.ADSLRequest.Request.Center.Region.City.Name,

                       }).Select(t => new

                       {
                           First = t.OrderBy(x => x.ADSLRequest.Request.Center.BillingCode).First(),
                           Cost = t.Sum(x => x.RequestPayment.AmountSum),
                           NumberOfSold = t.Count()
                       }).Select(t => new ADSLServiceAggragationSaleCenterSeperation
                       {
                           Center = t.First.ADSLRequest.Request.Center.CenterName,
                           CenterCostCode = t.First.ADSLRequest.Request.Center.BillingCode.ToString(),
                           BandWidth = t.First.ADSLRequest.ADSLService.ADSLServiceBandWidth.Title,
                           Duration = t.First.ADSLRequest.ADSLService.ADSLServiceDuration.Title,
                           PaymentType = DB.GetEnumDescriptionByValue(typeof(DB.PaymentType), t.First.RequestPayment.PaymentType),
                           Traffic = t.First.ADSLRequest.ADSLService.ADSLServiceTraffic.Title,
                           City = t.First.ADSLRequest.Request.Center.Region.City.Name,
                           Cost = t.Cost,
                           NumberOfSold = t.NumberOfSold

                       }).ToList();
            }

        }

        public static List<ADSLServiceAggragationSaleCenterSeperation> GetADSLChangeServiceAggregateSaleCenterSeperationInfo(List<int> CityIDs,
                                                                                                                                  List<int> CenterIDs,
                                                                                                                                  List<int> PaymentTypeIDs,
                                                                                                                                  List<int> ServiceGroupIDs,
                                                                                                                                  List<int> CustomerGroupIDs,
                                                                                                                                  List<int> BandwidthIDs,
                                                                                                                                  List<int> DurationIDs,
                                                                                                                                  List<int> TrafficIDs,
                                                                                                                                  List<int> ServiceIDs,
                                                                                                                                  DateTime? fromDate,
                                                                                                                                  DateTime? toDate,
                                                                                                                                  List<int> SaleWayIDs,
                                                                                                                                   bool? HasModem,
                                                                                                                                  List<int> ServicePaymentTypeIds,
                                                                                                                                    DateTime? FromPaymentDate,
                                                                                                                                  DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLChangeServices.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLChangeService = a, RequestPayment = p })
                       .Where(t =>
                       (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLChangeService.Request.Center.Region.CityID))
                       && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ADSLChangeService.Request.CenterID))
                       && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestPayment.PaymentType))
                       && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLChangeService.ADSLService.ADSLServiceGroup.ID))
                       && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLChangeService.ADSLService.ADSLServiceGroup.CustomerGroupID))
                       && (BandwidthIDs.Count == 0 || BandwidthIDs.Contains((int)t.ADSLChangeService.ADSLService.BandWidthID))
                       && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLChangeService.ADSLService.DurationID))
                       && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLChangeService.ADSLService.TrafficID))
                       && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ADSLChangeService.AdditionalTrafficeID))
                       && (!fromDate.HasValue || fromDate <= t.ADSLChangeService.Request.EndDate)
                       && (!toDate.HasValue || toDate >= t.ADSLChangeService.Request.EndDate)
                       && (SaleWayIDs.Count == 0 || SaleWayIDs.Contains((int)t.ADSLChangeService.ChangeServiceType))
                           //&& (FromCost == -1 || FromCost <= t.RequestPayment.AmountSum)
                           //&& (ToCost == -1 || ToCost >= t.RequestPayment.AmountSum)

                       && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestPayment.PaymentDate)
                       && (!ToPaymentDate.HasValue || ToPaymentDate >= t.RequestPayment.PaymentDate)
                       && (!HasModem.HasValue || HasModem == t.ADSLChangeService.NeedModem)
                       && (t.RequestPayment.PaymentDate != null || t.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)
                       && (ServicePaymentTypeIds.Count == 0 || ServicePaymentTypeIds.Contains((int)t.ADSLChangeService.ADSLService.PaymentTypeID))).GroupBy(t => new
                       {
                           Center = t.ADSLChangeService.Request.Center.CenterName,
                           CenterCostCode = t.ADSLChangeService.Request.Center.BillingCode.ToString(),
                           BandWidth = t.ADSLChangeService.ADSLService.ADSLServiceBandWidth.Title,
                           Duration = t.ADSLChangeService.ADSLService.ADSLServiceDuration.Title,
                           PaymentType = t.RequestPayment.PaymentType,
                           Traffic = t.ADSLChangeService.ADSLService.ADSLServiceTraffic.Title,
                           City = t.ADSLChangeService.Request.Center.Region.City.Name,

                       }).Select(t => new

                       {
                           First = t.OrderBy(x => x.ADSLChangeService.Request.Center.BillingCode).First(),
                           Cost = t.Sum(x => x.RequestPayment.AmountSum),
                           NumberOfSold = t.Count()
                       }).Select(t => new ADSLServiceAggragationSaleCenterSeperation
                       {
                           Center = t.First.ADSLChangeService.Request.Center.CenterName,
                           CenterCostCode = t.First.ADSLChangeService.Request.Center.BillingCode.ToString(),
                           BandWidth = t.First.ADSLChangeService.ADSLService.ADSLServiceBandWidth.Title,
                           Duration = t.First.ADSLChangeService.ADSLService.ADSLServiceDuration.Title,
                           PaymentType = DB.GetEnumDescriptionByValue(typeof(DB.PaymentType), t.First.RequestPayment.PaymentType),
                           Traffic = t.First.ADSLChangeService.ADSLService.ADSLServiceTraffic.Title,
                           City = t.First.ADSLChangeService.Request.Center.Region.City.Name,
                           Cost = t.Cost,
                           NumberOfSold = t.NumberOfSold

                       }).ToList();

            }

        }


        public static List<ADSLTrafficSaleCustomerSeperationInfo> GetADSLRequestSaleTrafficCustomerSeperation(List<int> CityIDs,
                                                                                                              List<int> CenterIDs,
                                                                                                              List<int> PaymentTypeIDs,
                                                                                                              List<int> ServiceGroupIDs,
                                                                                                              List<int> CustomerGroupIDs,
                                                                                                              List<int> TrafficIDs,
                                                                                                              DateTime? fromDate,
                                                                                                              DateTime? toDate,
                                                                                                              List<int> ServicePaymentTypeIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLRequest = a, RequestPayment = p })
                    .Join(context.ADSLServices, a => a.ADSLRequest.AdditionalServiceID, s => s.ID, (a, s) => new { ADSLRequestPayment = a, ADSLSErvice = s })
                    .GroupJoin(context.ADSLSellerAgentUsers, a => a.ADSLRequestPayment.RequestPayment.UserID, s => s.ID, (a, s) => new { ALL = a, ADSLSellerAGentUser = s })
                    .SelectMany(t2 => t2.ADSLSellerAGentUser.DefaultIfEmpty(), (t1, t2) => new { ALL = t1.ALL, ADSLSellerAGentUser = t2 })
                    .Where(t =>
                       (CityIDs.Count == 0 || CityIDs.Contains((int)t.ALL.ADSLRequestPayment.ADSLRequest.Request.Center.Region.CityID))
                       && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ALL.ADSLRequestPayment.ADSLRequest.Request.CenterID))
                       && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.ALL.ADSLRequestPayment.RequestPayment.PaymentType))
                       && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ALL.ADSLRequestPayment.ADSLRequest.ADSLService.ADSLServiceGroup.ID))
                       && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ALL.ADSLRequestPayment.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                       && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ALL.ADSLRequestPayment.ADSLRequest.ADSLService.TrafficID))
                       && (!fromDate.HasValue || fromDate <= t.ALL.ADSLRequestPayment.ADSLRequest.Request.EndDate)
                       && (!toDate.HasValue || toDate > t.ALL.ADSLRequestPayment.ADSLRequest.Request.EndDate)
                           //&& (t.ALL.ADSLRequestPayment.ADSLRequest.Request.EndDate != null)
                       && (t.ALL.ADSLRequestPayment.ADSLRequest.AdditionalServiceID != null)
                       && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ALL.ADSLSErvice.PaymentTypeID))
                       && (t.ALL.ADSLRequestPayment.RequestPayment.BaseCostID == 46)
                      && (t.ALL.ADSLRequestPayment.RequestPayment.PaymentDate != null || t.ALL.ADSLRequestPayment.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)
                       )
                       .Select(t => new ADSLTrafficSaleCustomerSeperationInfo
                       {
                           CustomerName = t.ALL.ADSLRequestPayment.ADSLRequest.Request.Customer.FirstNameOrTitle + " " + t.ALL.ADSLRequestPayment.ADSLRequest.Request.Customer.LastName,
                           Center = t.ALL.ADSLRequestPayment.ADSLRequest.Request.Center.CenterName,
                           CenterCostCode = t.ALL.ADSLRequestPayment.ADSLRequest.Request.Center.BillingCode.ToString(),
                           City = t.ALL.ADSLRequestPayment.ADSLRequest.Request.Center.Region.City.Name,
                           TelephoneNo = t.ALL.ADSLRequestPayment.ADSLRequest.Request.TelephoneNo.ToString(),
                           Date = Date.GetPersianDate(t.ALL.ADSLRequestPayment.ADSLRequest.Request.EndDate, Date.DateStringType.Short).Replace("/", ""),
                           Traffic = t.ALL.ADSLSErvice.ADSLServiceTraffic.Title,
                           TrafficCost = t.ALL.ADSLRequestPayment.RequestPayment.AmountSum,
                           FicheNo = t.ALL.ADSLRequestPayment.RequestPayment.FicheNunmber.ToString(),
                           PaymentDate = Date.GetPersianDate(t.ALL.ADSLRequestPayment.RequestPayment.PaymentDate, Date.DateStringType.Short).Replace("/", ""),
                           FicheDate = Date.GetPersianDate(t.ALL.ADSLRequestPayment.RequestPayment.FicheDate, Date.DateStringType.Short).Replace("/", ""),
                           SellerAgentUser = t.ADSLSellerAGentUser.User.FirstName + " " + t.ADSLSellerAGentUser.User.LastName
                       }).ToList();

            }
        }

        public static List<ADSLTrafficSaleCustomerSeperationInfo> GetADSLSellTrafficCustomerSeperation(List<int> CityIDs,
                                                                                                              List<int> CenterIDs,
                                                                                                              List<int> PaymentTypeIDs,
                                                                                                              List<int> ServiceGroupIDs,
                                                                                                              List<int> CustomerGroupIDs,
                                                                                                              List<int> TrafficIDs,
                                                                                                              DateTime? fromDate,
                                                                                                              DateTime? toDate,
                                                                                                              List<int> ServicePaymentTypeIDs,
                                                                                                              List<int> SaleWayIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLSellTraffics.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLSellTraffic = a, RequestPayment = p })
                    .GroupJoin(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, s => s.ID, (a, s) => new { ALL = a, ADSLSellerAGentUser = s })
                    .SelectMany(t2 => t2.ADSLSellerAGentUser.DefaultIfEmpty(), (t1, t2) => new { ALL = t1.ALL, ADSLSellerAGentUser = t2 })
                    .Where(t =>
                       (CityIDs.Count == 0 || CityIDs.Contains((int)t.ALL.ADSLSellTraffic.Request.Center.Region.CityID))
                       && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ALL.ADSLSellTraffic.Request.CenterID))
                       && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.ALL.RequestPayment.PaymentType))
                       && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ALL.ADSLSellTraffic.ADSLService.ADSLServiceGroup.ID))
                       && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ALL.ADSLSellTraffic.ADSLService.ADSLServiceGroup.CustomerGroupID))
                       && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ALL.ADSLSellTraffic.ADSLService.TrafficID))
                       && (!fromDate.HasValue || fromDate <= t.ALL.ADSLSellTraffic.Request.EndDate)
                       && (!toDate.HasValue || toDate > t.ALL.ADSLSellTraffic.Request.EndDate)
                           //&& (t.ALL.ADSLSellTraffic.Request.EndDate != null)
                       && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ALL.ADSLSellTraffic.ADSLService.PaymentTypeID))
                       && (t.ALL.RequestPayment.BaseCostID == 105)
                        && (t.ALL.RequestPayment.PaymentDate != null || t.ALL.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)
                        && (SaleWayIDs.Count == 0 || SaleWayIDs.Contains((int)t.ALL.ADSLSellTraffic.ChangeServiceType))
                       )
                       .Select(t => new ADSLTrafficSaleCustomerSeperationInfo
                       {
                           CustomerName = t.ALL.ADSLSellTraffic.Request.Customer.FirstNameOrTitle + " " + t.ALL.ADSLSellTraffic.Request.Customer.LastName,
                           Center = t.ALL.ADSLSellTraffic.Request.Center.CenterName,
                           CenterCostCode = t.ALL.ADSLSellTraffic.Request.Center.BillingCode.ToString(),
                           City = t.ALL.ADSLSellTraffic.Request.Center.Region.City.Name,
                           TelephoneNo = t.ALL.ADSLSellTraffic.Request.TelephoneNo.ToString(),
                           Date = Date.GetPersianDate(t.ALL.ADSLSellTraffic.Request.EndDate, Date.DateStringType.Short).Replace("/", ""),
                           Traffic = t.ALL.ADSLSellTraffic.ADSLService.ADSLServiceTraffic.Title,
                           TrafficCost = t.ALL.RequestPayment.AmountSum,
                           FicheNo = t.ALL.RequestPayment.FicheNunmber.ToString(),
                           PaymentDate = Date.GetPersianDate(t.ALL.RequestPayment.PaymentDate, Date.DateStringType.Short).Replace("/", ""),
                           FicheDate = Date.GetPersianDate(t.ALL.RequestPayment.FicheDate, Date.DateStringType.Short).Replace("/", ""),
                           SellerAgentUser = t.ADSLSellerAGentUser.User.FirstName + " " + t.ADSLSellerAGentUser.User.LastName
                       }).ToList();
            }
        }

        public static List<ADSLTrafficSaleCustomerSeperationInfo> GetADSLRequestIPCustomerSeperation(List<int> CityIDs,
                                                                                                       List<int> CenterIDs,
                                                                                                       List<int> PaymentTypeIDs,
                                                                                                       List<int> ServiceGroupIDs,
                                                                                                       List<int> CustomerGroupIDs,
                                                                                                       DateTime? fromDate,
                                                                                                       DateTime? toDate,
                                                                                                        List<int> ServicePaymentTypeIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLRequest = a, RequestPayment = p })
                    .GroupJoin(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, s => s.ID, (a, s) => new { ALL = a, ADSLSellerAGentUser = s })
                    .SelectMany(t2 => t2.ADSLSellerAGentUser.DefaultIfEmpty(), (t1, t2) => new { ALL = t1.ALL, ADSLSellerAGentUser = t2 })
                    .Where(t =>
                         (CityIDs.Count == 0 || CityIDs.Contains((int)t.ALL.ADSLRequest.Request.Center.Region.CityID))
                       && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ALL.ADSLRequest.Request.CenterID))
                       && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.ALL.RequestPayment.PaymentType))
                       && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.ADSLServiceGroup.ID))
                       && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                       && (!fromDate.HasValue || fromDate <= t.ALL.ADSLRequest.Request.EndDate)
                       && (!toDate.HasValue || toDate >= t.ALL.ADSLRequest.Request.EndDate)
                             ////&& (t.ALL.ADSLRequest.Request.EndDate != null)
                       && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.PaymentTypeID))
                       && (t.ALL.RequestPayment.BaseCostID == 48)
                        && (t.ALL.RequestPayment.PaymentDate != null || t.ALL.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Select(t => new ADSLTrafficSaleCustomerSeperationInfo

                       {
                           CustomerName = t.ALL.ADSLRequest.Request.Customer.FirstNameOrTitle + " " + t.ALL.ADSLRequest.Request.Customer.LastName,
                           CenterCostCode = t.ALL.ADSLRequest.Request.Center.BillingCode.ToString(),
                           Center = t.ALL.ADSLRequest.Request.Center.CenterName,
                           City = t.ALL.ADSLRequest.Request.Center.Region.City.Name,
                           TelephoneNo = t.ALL.ADSLRequest.Request.TelephoneNo.ToString(),
                           Date = Date.GetPersianDate(t.ALL.ADSLRequest.Request.EndDate, Date.DateStringType.Short).Replace("/", ""),
                           IPCost = t.ALL.RequestPayment.AmountSum,
                           FicheNo = t.ALL.RequestPayment.FicheNunmber.ToString(),
                           PaymentDate = Date.GetPersianDate(t.ALL.RequestPayment.PaymentDate, Date.DateStringType.Short).Replace("/", ""),
                           FicheDate = Date.GetPersianDate(t.ALL.RequestPayment.FicheDate, Date.DateStringType.Short).Replace("/", ""),
                           SellerAgentUser = t.ADSLSellerAGentUser.User.FirstName + " " + t.ADSLSellerAGentUser.User.LastName
                       }).ToList();
            }
        }

        public static List<ADSLTrafficSaleCustomerSeperationInfo> GetADSLRequestModemCustomerSeperation(List<int> CityIDs,
                                                                                                       List<int> CenterIDs,
                                                                                                       List<int> PaymentTypeIDs,
                                                                                                       List<int> ServiceGroupIDs,
                                                                                                       List<int> CustomerGroupIDs,
                                                                                                       DateTime? fromDate,
                                                                                                       DateTime? toDate,
                                                                                                       List<int> ServicePaymentTypeIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLRequest = a, RequestPayment = p })
                    .GroupJoin(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, s => s.ID, (a, s) => new { ALL = a, ADSLSellerAGentUser = s })
                    .SelectMany(t2 => t2.ADSLSellerAGentUser.DefaultIfEmpty(), (t1, t2) => new { ALL = t1.ALL, ADSLSellerAGentUser = t2 })
                    .Where(t =>
                         (CityIDs.Count == 0 || CityIDs.Contains((int)t.ALL.ADSLRequest.Request.Center.Region.CityID))
                       && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ALL.ADSLRequest.Request.CenterID))
                       && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.ALL.RequestPayment.PaymentType))
                       && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.ADSLServiceGroup.ID))
                       && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                       && (!fromDate.HasValue || fromDate <= t.ALL.ADSLRequest.Request.EndDate)
                       && (!toDate.HasValue || toDate >= t.ALL.ADSLRequest.Request.EndDate)
                             //&& (t.ALL.ADSLRequest.Request.EndDate != null)
                       && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.PaymentTypeID))
                       && (t.ALL.RequestPayment.BaseCostID == 40)
                       && (t.ALL.RequestPayment.AmountSum != 0)
                       && (t.ALL.RequestPayment.PaymentDate != null || t.ALL.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Select(t => new ADSLTrafficSaleCustomerSeperationInfo

                       {
                           CustomerName = t.ALL.ADSLRequest.Request.Customer.FirstNameOrTitle + " " + t.ALL.ADSLRequest.Request.Customer.LastName,
                           CenterCostCode = t.ALL.ADSLRequest.Request.Center.BillingCode.ToString(),
                           Center = t.ALL.ADSLRequest.Request.Center.CenterName,
                           City = t.ALL.ADSLRequest.Request.Center.Region.City.Name,
                           TelephoneNo = t.ALL.ADSLRequest.Request.TelephoneNo.ToString(),
                           Date = Date.GetPersianDate(t.ALL.ADSLRequest.Request.EndDate, Date.DateStringType.Short).Replace("/", ""),
                           ModemCost = t.ALL.RequestPayment.AmountSum,
                           FicheNo = t.ALL.RequestPayment.FicheNunmber.ToString(),
                           PaymentDate = Date.GetPersianDate(t.ALL.RequestPayment.PaymentDate, Date.DateStringType.Short).Replace("/", ""),
                           FicheDate = Date.GetPersianDate(t.ALL.RequestPayment.FicheDate, Date.DateStringType.Short).Replace("/", ""),
                           SellerAgentUser = t.ADSLSellerAGentUser.User.FirstName + " " + t.ADSLSellerAGentUser.User.LastName
                       }).ToList();
            }
        }

        public static List<ADSlServiceSaleCustomerAndServiceSeperationInfo> GetADSLRequestInstallmentCustomerSeperation(List<int> CityIDs,
                                                                                                       List<int> CenterIDs,
                                                                                                       List<int> PaymentTypeIDs,
                                                                                                       List<int> ServiceGroupIDs,
                                                                                                       List<int> CustomerGroupIDs,
                                                                                                       DateTime? fromDate,
                                                                                                       DateTime? toDate,
                                                                                                       List<int> ServicePaymentTypeIDs,
                                                                                                       DateTime? FromPaymentDate,
                                                                                                       DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLRequest = a, RequestPayment = p })
                    .GroupJoin(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, s => s.ID, (a, s) => new { ALL = a, ADSLSellerAGentUser = s })
                    .SelectMany(t2 => t2.ADSLSellerAGentUser.DefaultIfEmpty(), (t1, t2) => new { ALL = t1.ALL, ADSLSellerAGentUser = t2 })
                    .Where(t =>
                         (CityIDs.Count == 0 || CityIDs.Contains((int)t.ALL.ADSLRequest.Request.Center.Region.CityID))
                       && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ALL.ADSLRequest.Request.CenterID))
                       && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.ALL.RequestPayment.PaymentType))
                       && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.ADSLServiceGroup.ID))
                       && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                       && (!fromDate.HasValue || fromDate <= t.ALL.ADSLRequest.Request.EndDate)
                       && (!toDate.HasValue || toDate >= t.ALL.ADSLRequest.Request.EndDate)
                       && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.PaymentTypeID))
                             //&& (t.ALL.ADSLRequest.Request.EndDate != null)
                       && (!FromPaymentDate.HasValue || FromPaymentDate <= t.ALL.RequestPayment.PaymentDate)
                       && (!ToPaymentDate.HasValue || ToPaymentDate >= t.ALL.RequestPayment.PaymentDate)
                       && (t.ALL.RequestPayment.BaseCostID == 37)
                        && (t.ALL.RequestPayment.PaymentDate != null || t.ALL.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Select(t => new ADSlServiceSaleCustomerAndServiceSeperationInfo

                       {
                           CustomerName = t.ALL.ADSLRequest.Request.Customer.FirstNameOrTitle + " " + t.ALL.ADSLRequest.Request.Customer.LastName,
                           CenterCodeCost = t.ALL.ADSLRequest.Request.Center.BillingCode.ToString(),
                           Center = t.ALL.ADSLRequest.Request.Center.CenterName,
                           City = t.ALL.ADSLRequest.Request.Center.Region.City.Name,
                           TelephoneNo = t.ALL.ADSLRequest.Request.TelephoneNo.ToString(),
                           Date = Date.GetPersianDate(t.ALL.ADSLRequest.Request.EndDate, Date.DateStringType.Short).Replace("/", ""),
                           InstallmentCost = t.ALL.RequestPayment.AmountSum,
                           FichNo = t.ALL.RequestPayment.FicheNunmber.ToString(),
                           PaymentDate = Date.GetPersianDate(t.ALL.RequestPayment.PaymentDate, Date.DateStringType.Short).Replace("/", ""),
                           FicheDate = Date.GetPersianDate(t.ALL.RequestPayment.FicheDate, Date.DateStringType.Short).Replace("/", ""),
                           SellerAgentUser = t.ADSLSellerAGentUser.User.FirstName + " " + t.ADSLSellerAGentUser.User.LastName
                       }).ToList();
            }
        }

        public static List<ADSlServiceSaleCustomerAndServiceSeperationInfo> GetADSLRequestRanjeCustomerSeperation(List<int> CityIDs,
                                                                                                     List<int> CenterIDs,
                                                                                                     List<int> PaymentTypeIDs,
                                                                                                     List<int> ServiceGroupIDs,
                                                                                                     List<int> CustomerGroupIDs,
                                                                                                     DateTime? fromDate,
                                                                                                     DateTime? toDate,
                                                                                                    List<int> ServicePaymentTypeIds,
                                                                                                    DateTime? FromPaymentDate,
                                                                                                    DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLRequest = a, RequestPayment = p })
                    .GroupJoin(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, s => s.ID, (a, s) => new { ALL = a, ADSLSellerAGentUser = s })
                    .SelectMany(t2 => t2.ADSLSellerAGentUser.DefaultIfEmpty(), (t1, t2) => new { ALL = t1.ALL, ADSLSellerAGentUser = t2 })
                    .Where(t =>
                         (CityIDs.Count == 0 || CityIDs.Contains((int)t.ALL.ADSLRequest.Request.Center.Region.CityID))
                       && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ALL.ADSLRequest.Request.CenterID))
                       && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.ALL.RequestPayment.PaymentType))
                       && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.ADSLServiceGroup.ID))
                       && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ALL.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                       && (!fromDate.HasValue || fromDate <= t.ALL.ADSLRequest.Request.EndDate)
                       && (!toDate.HasValue || toDate >= t.ALL.ADSLRequest.Request.EndDate)
                             //&& (t.ALL.ADSLRequest.Request.EndDate != null)
                       && (ServicePaymentTypeIds.Count == 0 || ServicePaymentTypeIds.Contains((int)t.ALL.ADSLRequest.ADSLService.PaymentTypeID))
                       && (!FromPaymentDate.HasValue || FromPaymentDate <= t.ALL.RequestPayment.PaymentDate)
                       && (!ToPaymentDate.HasValue || ToPaymentDate >= t.ALL.RequestPayment.PaymentDate)
                       && (t.ALL.RequestPayment.BaseCostID == 107)
                       && (t.ALL.RequestPayment.PaymentDate != null || t.ALL.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Select(t => new ADSlServiceSaleCustomerAndServiceSeperationInfo

                       {
                           CustomerName = t.ALL.ADSLRequest.Request.Customer.FirstNameOrTitle + " " + t.ALL.ADSLRequest.Request.Customer.LastName,
                           CenterCodeCost = t.ALL.ADSLRequest.Request.Center.BillingCode.ToString(),
                           Center = t.ALL.ADSLRequest.Request.Center.CenterName,
                           City = t.ALL.ADSLRequest.Request.Center.Region.City.Name,
                           TelephoneNo = t.ALL.ADSLRequest.Request.TelephoneNo.ToString(),
                           Date = Date.GetPersianDate(t.ALL.ADSLRequest.Request.EndDate, Date.DateStringType.Short).Replace("/", ""),
                           RanjeCost = t.ALL.RequestPayment.AmountSum,
                           FichNo = t.ALL.RequestPayment.FicheNunmber.ToString(),
                           PaymentDate = Date.GetPersianDate(t.ALL.RequestPayment.PaymentDate, Date.DateStringType.Short).Replace("/", ""),
                           FicheDate = Date.GetPersianDate(t.ALL.RequestPayment.FicheDate, Date.DateStringType.Short).Replace("/", ""),
                           SellerAgentUser = t.ADSLSellerAGentUser.User.FirstName + " " + t.ADSLSellerAGentUser.User.LastName
                       }).ToList();
            }
        }

        public static List<ADSLTrafficSaleCustomerSeperationInfo> GetADSLChangeGroupIPCustomerSeperation(List<int> CityIDs,
                                                                                                     List<int> CenterIDs,
                                                                                                     List<int> PaymentTypeIDs,
                                                                                                     List<int> ServiceGroupIDs,
                                                                                                     List<int> CustomerGroupIDs,
                                                                                                     DateTime? fromDate,
                                                                                                     DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLChangeIPRequests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLChangeIPRequest = a, RequestPayment = p })
                    .Join(context.ADSLGroupIPs, w => w.ADSLChangeIPRequest.NewGroupIPStaticID, i => i.ID, (w, i) => new { ALL = w, ADSLGroupIPs = i })
                    .Join(context.ADSLServiceGroups, r => r.ADSLGroupIPs.CustometGroupID, s => s.CustomerGroupID, (r, s) => new { ALLM = r, ADSLServiceGroup = s })
                    .GroupJoin(context.ADSLSellerAgentUsers, a => a.ALLM.ALL.RequestPayment.UserID, s => s.ID, (a, s) => new { ALLJoin = a, ADSLSellerAGentUser = s })
                    .SelectMany(t2 => t2.ADSLSellerAGentUser.DefaultIfEmpty(), (t1, t2) => new { ALLJoin = t1.ALLJoin, ADSLSellerAGentUser = t2 })
                    .Where(t =>
                         (CityIDs.Count == 0 || CityIDs.Contains((int)t.ALLJoin.ALLM.ALL.ADSLChangeIPRequest.Request.Center.Region.CityID))
                       && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ALLJoin.ALLM.ALL.ADSLChangeIPRequest.Request.CenterID))
                       && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.ALLJoin.ALLM.ALL.RequestPayment.PaymentType))
                       && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ALLJoin.ADSLServiceGroup.ID))
                       && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ALLJoin.ALLM.ADSLGroupIPs.CustometGroupID))
                       && (!fromDate.HasValue || fromDate <= t.ALLJoin.ALLM.ALL.ADSLChangeIPRequest.Request.EndDate)
                       && (!toDate.HasValue || toDate >= t.ALLJoin.ALLM.ALL.ADSLChangeIPRequest.Request.EndDate)
                             //&& (t.ALLJoin.ALLM.ALL.ADSLChangeIPRequest.Request.EndDate != null)
                       && (t.ALLJoin.ALLM.ALL.ADSLChangeIPRequest.ChangeIPType != (byte)DB.ADSLChangeIPType.DischargeIP)
                       && (t.ALLJoin.ALLM.ALL.RequestPayment.PaymentDate != null || t.ALLJoin.ALLM.ALL.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)
                       ).Select(t => new ADSLTrafficSaleCustomerSeperationInfo

                       {
                           CustomerName = t.ALLJoin.ALLM.ALL.ADSLChangeIPRequest.Request.Customer.FirstNameOrTitle + " " + t.ALLJoin.ALLM.ALL.ADSLChangeIPRequest.Request.Customer.LastName,
                           CenterCostCode = t.ALLJoin.ALLM.ALL.ADSLChangeIPRequest.Request.Center.BillingCode.ToString(),
                           Center = t.ALLJoin.ALLM.ALL.ADSLChangeIPRequest.Request.Center.CenterName,
                           City = t.ALLJoin.ALLM.ALL.ADSLChangeIPRequest.Request.Center.Region.City.Name,
                           TelephoneNo = t.ALLJoin.ALLM.ALL.ADSLChangeIPRequest.Request.TelephoneNo.ToString(),
                           Date = Date.GetPersianDate(t.ALLJoin.ALLM.ALL.ADSLChangeIPRequest.Request.EndDate, Date.DateStringType.Short).Replace("/", ""),
                           IPCost = t.ALLJoin.ALLM.ALL.RequestPayment.AmountSum,
                           FicheNo = t.ALLJoin.ALLM.ALL.RequestPayment.FicheNunmber.ToString(),
                           PaymentDate = Date.GetPersianDate(t.ALLJoin.ALLM.ALL.RequestPayment.PaymentDate, Date.DateStringType.Short).Replace("/", ""),
                           FicheDate = Date.GetPersianDate(t.ALLJoin.ALLM.ALL.RequestPayment.FicheDate, Date.DateStringType.Short).Replace("/", ""),
                           SellerAgentUser = t.ADSLSellerAGentUser.User.FirstName + " " + t.ADSLSellerAGentUser.User.LastName
                       }).ToList();
            }
        }

        public static List<ADSLTrafficSaleCustomerSeperationInfo> GetADSLChangeStaticIPCustomerSeperation(List<int> CityIDs,
                                                                                                     List<int> CenterIDs,
                                                                                                     List<int> PaymentTypeIDs,
                                                                                                     List<int> ServiceGroupIDs,
                                                                                                     List<int> CustomerGroupIDs,
                                                                                                     DateTime? fromDate,
                                                                                                     DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLChangeIPRequests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLChangeIPRequest = a, RequestPayment = p })
                    .Join(context.ADSLGroupIPs, w => w.ADSLChangeIPRequest.NewIPStaticID, i => i.ID, (w, i) => new { ALL = w, ADSLGroupIPs = i })
                    .Join(context.ADSLServiceGroups, r => r.ADSLGroupIPs.CustometGroupID, s => s.CustomerGroupID, (r, s) => new { ALLM = r, ADSLServiceGroup = s })
                    .GroupJoin(context.ADSLSellerAgentUsers, a => a.ALLM.ALL.RequestPayment.UserID, s => s.ID, (a, s) => new { ALLJoin = a, ADSLSellerAGentUser = s })
                    .SelectMany(t2 => t2.ADSLSellerAGentUser.DefaultIfEmpty(), (t1, t2) => new { ALLJoin = t1.ALLJoin, ADSLSellerAGentUser = t2 })
                    .Where(t =>
                         (CityIDs.Count == 0 || CityIDs.Contains((int)t.ALLJoin.ALLM.ALL.ADSLChangeIPRequest.Request.Center.Region.CityID))
                       && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ALLJoin.ALLM.ALL.ADSLChangeIPRequest.Request.CenterID))
                       && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.ALLJoin.ALLM.ALL.RequestPayment.PaymentType))
                       && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ALLJoin.ADSLServiceGroup.ID))
                       && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ALLJoin.ALLM.ADSLGroupIPs.CustometGroupID))
                       && (!fromDate.HasValue || fromDate <= t.ALLJoin.ALLM.ALL.ADSLChangeIPRequest.Request.EndDate)
                       && (!toDate.HasValue || toDate >= t.ALLJoin.ALLM.ALL.ADSLChangeIPRequest.Request.EndDate)
                             //&& (t.ALLJoin.ALLM.ALL.ADSLChangeIPRequest.Request.EndDate != null)
                       && (t.ALLJoin.ALLM.ALL.ADSLChangeIPRequest.ChangeIPType != (byte)DB.ADSLChangeIPType.DischargeIP)
                       && (t.ALLJoin.ALLM.ALL.RequestPayment.PaymentDate != null || t.ALLJoin.ALLM.ALL.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)
                       ).Select(t => new ADSLTrafficSaleCustomerSeperationInfo

                       {
                           CustomerName = t.ALLJoin.ALLM.ALL.ADSLChangeIPRequest.Request.Customer.FirstNameOrTitle + " " + t.ALLJoin.ALLM.ALL.ADSLChangeIPRequest.Request.Customer.LastName,
                           CenterCostCode = t.ALLJoin.ALLM.ALL.ADSLChangeIPRequest.Request.Center.BillingCode.ToString(),
                           Center = t.ALLJoin.ALLM.ALL.ADSLChangeIPRequest.Request.Center.CenterName,
                           City = t.ALLJoin.ALLM.ALL.ADSLChangeIPRequest.Request.Center.Region.City.Name,
                           TelephoneNo = t.ALLJoin.ALLM.ALL.ADSLChangeIPRequest.Request.TelephoneNo.ToString(),
                           Date = Date.GetPersianDate(t.ALLJoin.ALLM.ALL.ADSLChangeIPRequest.Request.EndDate, Date.DateStringType.Short).Replace("/", ""),
                           IPCost = t.ALLJoin.ALLM.ALL.RequestPayment.AmountSum,
                           FicheNo = t.ALLJoin.ALLM.ALL.RequestPayment.FicheNunmber.ToString(),
                           PaymentDate = Date.GetPersianDate(t.ALLJoin.ALLM.ALL.RequestPayment.PaymentDate, Date.DateStringType.Short).Replace("/", ""),
                           FicheDate = Date.GetPersianDate(t.ALLJoin.ALLM.ALL.RequestPayment.FicheDate, Date.DateStringType.Short).Replace("/", ""),
                           SellerAgentUser = t.ADSLSellerAGentUser.User.FirstName + " " + t.ADSLSellerAGentUser.User.LastName
                       }).ToList();
            }
        }

        public static List<ADSLTrafficSaleCustomerSeperationInfo> GetADSLChangeServiceModemCustomerSeperation(List<int> CityIDs,
                                                                                                     List<int> CenterIDs,
                                                                                                     List<int> PaymentTypeIDs,
                                                                                                     List<int> ServiceGroupIDs,
                                                                                                     List<int> CustomerGroupIDs,
                                                                                                     DateTime? fromDate,
                                                                                                     DateTime? toDate,
                                                                                                     List<int> ServicePaymentTypeIds)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLChangeServices.Join(context.RequestPayments, a => a.Request.ID, p => p.RequestID, (a, p) => new { ADSLChangeService = a, RequestPayment = p })
                   .GroupJoin(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, s => s.ID, (a, s) => new { ALL = a, ADSLSellerAGentUser = s })
                   .SelectMany(t2 => t2.ADSLSellerAGentUser.DefaultIfEmpty(), (t1, t2) => new { ALL = t1.ALL, ADSLSellerAGentUser = t2 })
                    .Where(t =>
                   (CityIDs.Count == 0 || CityIDs.Contains((int)t.ALL.ADSLChangeService.Request.Center.Region.CityID))
                   && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ALL.ADSLChangeService.Request.CenterID))
                   && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.ALL.RequestPayment.PaymentType))
                   && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ALL.ADSLChangeService.ADSLService.ADSLServiceGroup.ID))
                   && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ALL.ADSLChangeService.ADSLService.ADSLServiceGroup.CustomerGroupID))
                   && (!fromDate.HasValue || fromDate <= t.ALL.ADSLChangeService.Request.EndDate)
                   && (!toDate.HasValue || toDate >= t.ALL.ADSLChangeService.Request.EndDate)
                       //&& (t.ALL.ADSLChangeService.Request.EndDate!=null)
                   && (t.ALL.RequestPayment.BaseCostID == 40)
                   && (t.ALL.ADSLChangeService.NeedModem == true)
                   && (ServicePaymentTypeIds.Count == 0 || ServicePaymentTypeIds.Contains((int)t.ALL.ADSLChangeService.ADSLService.PaymentTypeID))
                   && (t.ALL.RequestPayment.PaymentDate != null || t.ALL.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)
                   && (t.ALL.RequestPayment.AmountSum != 0)).Select(t => new ADSLTrafficSaleCustomerSeperationInfo
                   {
                       Center = t.ALL.ADSLChangeService.Request.Center.CenterName,
                       City = t.ALL.ADSLChangeService.Request.Center.Region.City.Name,
                       CenterCostCode = t.ALL.ADSLChangeService.Request.Center.BillingCode.ToString(),
                       CustomerName = t.ALL.ADSLChangeService.Request.Customer.FirstNameOrTitle + " " + t.ALL.ADSLChangeService.Request.Customer.LastName,
                       ModemCost = t.ALL.RequestPayment.AmountSum,
                       Date = Date.GetPersianDate(t.ALL.ADSLChangeService.Request.EndDate, Date.DateStringType.Short).Replace("/", ""),
                       TelephoneNo = t.ALL.ADSLChangeService.Request.TelephoneNo.ToString(),
                       FicheNo = t.ALL.RequestPayment.FicheNunmber.ToString(),
                       PaymentDate = Date.GetPersianDate(t.ALL.RequestPayment.PaymentDate, Date.DateStringType.Short).Replace("/", ""),
                       FicheDate = Date.GetPersianDate(t.ALL.RequestPayment.FicheDate, Date.DateStringType.Short).Replace("/", ""),
                       SellerAgentUser = t.ADSLSellerAGentUser.User.FirstName + " " + t.ADSLSellerAGentUser.User.LastName

                   }).ToList();
            }
        }

        public static List<ADSLServiceAggragationSaleCenterSeperation> GetADSLRequestTrafficAggregateSaleCenterSeperationInfo(List<int> CityIDs,
                                                                                                                                 List<int> CenterIDs,
                                                                                                                                 List<int> PaymentTypeIDs,
                                                                                                                                 List<int> ServiceGroupIDs,
                                                                                                                                 List<int> CustomerGroupIDs,
            //List<int> BandwidthIDs,
            //List<int> DurationIDs,
                                                                                                                                 List<int> TrafficIDs,
            //List<int> ServiceIDs,
                                                                                                                                 DateTime? fromDate,
                                                                                                                                 DateTime? toDate,
                                                                                                                                 List<int> ServicePaymentTypeIds)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLRequests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLRequest = a, RequestPayment = p })
                    .Join(context.ADSLServices, a => a.ADSLRequest.AdditionalServiceID, s => s.ID, (a, s) => new { ALL = a, ADSLService = s })
                       .Where(t =>
                       (CityIDs.Count == 0 || CityIDs.Contains((int)t.ALL.ADSLRequest.Request.Center.Region.CityID))
                       && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ALL.ADSLRequest.Request.CenterID))
                       && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.ALL.RequestPayment.PaymentType))
                       && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLService.ADSLServiceGroup.ID))
                       && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLService.ADSLServiceGroup.CustomerGroupID))
                       && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLService.TrafficID))
                       && (!fromDate.HasValue || fromDate <= t.ALL.ADSLRequest.Request.EndDate)
                       && (ServicePaymentTypeIds.Count == 0 || ServicePaymentTypeIds.Contains((int)t.ADSLService.PaymentTypeID))
                       && (!toDate.HasValue || toDate >= t.ALL.ADSLRequest.Request.EndDate)
                       && (t.ALL.ADSLRequest.Request.EndDate != null)).GroupBy(t => new
                       {
                           Center = t.ALL.ADSLRequest.Request.Center.CenterName,
                           CenterCostCode = t.ALL.ADSLRequest.Request.Center.BillingCode.ToString(),
                           PaymentType = t.ALL.RequestPayment.PaymentType,
                           Traffic = t.ADSLService.ADSLServiceTraffic.Title,
                           City = t.ALL.ADSLRequest.Request.Center.Region.City.Name,

                       }).Select(t => new

                       {
                           First = t.OrderBy(x => x.ALL.ADSLRequest.Request.Center.BillingCode).First(),
                           Cost = t.Sum(x => x.ALL.RequestPayment.AmountSum),
                           NumberOfSold = t.Count()
                       }).Select(t => new ADSLServiceAggragationSaleCenterSeperation
                       {
                           Center = t.First.ALL.ADSLRequest.Request.Center.CenterName,
                           CenterCostCode = t.First.ALL.ADSLRequest.Request.Center.BillingCode.ToString(),
                           Traffic = t.First.ADSLService.ADSLServiceTraffic.Title,
                           City = t.First.ALL.ADSLRequest.Request.Center.Region.City.Name,
                           Cost = t.Cost,
                           NumberOfSold = t.NumberOfSold

                       }).ToList();
            }

        }

        public static List<ADSLServiceAggragationSaleCenterSeperation> GetADSLSellTrafficAggregateSaleCenterSeperationInfo(List<int> CityIDs,
                                                                                                                                List<int> CenterIDs,
                                                                                                                                List<int> PaymentTypeIDs,
                                                                                                                                List<int> ServiceGroupIDs,
                                                                                                                                List<int> CustomerGroupIDs,
                                                                                                                                List<int> TrafficIDs,
                                                                                                                                DateTime? fromDate,
                                                                                                                                DateTime? toDate,
                                                                                                                                List<int> ServicePaymentTypeIDs,
                                                                                                                                List<int> SaleWayIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLSellTraffics.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLSellTraffic = a, RequestPayment = p })
                       .Where(t =>
                       (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLSellTraffic.Request.Center.Region.CityID))
                       && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ADSLSellTraffic.Request.CenterID))
                       && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestPayment.PaymentType))
                       && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLSellTraffic.ADSLService.ADSLServiceGroup.ID))
                       && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLSellTraffic.ADSLService.ADSLServiceGroup.CustomerGroupID))
                       && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLSellTraffic.ADSLService.TrafficID))
                       && (!fromDate.HasValue || fromDate <= t.ADSLSellTraffic.Request.EndDate)
                       && (!toDate.HasValue || toDate >= t.ADSLSellTraffic.Request.EndDate)
                       && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ADSLSellTraffic.ADSLService.PaymentTypeID))
                       && (t.ADSLSellTraffic.Request.EndDate != null)
                       && (SaleWayIDs.Count == 0 || SaleWayIDs.Contains((int)t.ADSLSellTraffic.ChangeServiceType))).GroupBy(t => new
                       {
                           Center = t.ADSLSellTraffic.Request.Center.CenterName,
                           CenterCostCode = t.ADSLSellTraffic.Request.Center.BillingCode.ToString(),
                           PaymentType = t.RequestPayment.PaymentType,
                           Traffic = t.ADSLSellTraffic.ADSLService.ADSLServiceTraffic.Title,
                           City = t.ADSLSellTraffic.Request.Center.Region.City.Name,

                       }).Select(t => new

                       {
                           First = t.OrderBy(x => x.ADSLSellTraffic.Request.Center.BillingCode).First(),
                           Cost = t.Sum(x => x.RequestPayment.AmountSum),
                           NumberOfSold = t.Count()
                       }).Select(t => new ADSLServiceAggragationSaleCenterSeperation
                       {
                           Center = t.First.ADSLSellTraffic.Request.Center.CenterName,
                           CenterCostCode = t.First.ADSLSellTraffic.Request.Center.BillingCode.ToString(),
                           Traffic = t.First.ADSLSellTraffic.ADSLService.ADSLServiceTraffic.Title,
                           City = t.First.ADSLSellTraffic.Request.Center.Region.City.Name,
                           Cost = t.Cost,
                           NumberOfSold = t.NumberOfSold

                       }).ToList();
            }

        }

        public static List<ADSLServiceAggragationSaleCenterSeperation> GetADSLRequestModemSaleAggregateSaleCenterSeperationInfo(List<int> CityIDs,
                                                                                                                                 List<int> CenterIDs,
                                                                                                                                 List<int> PaymentTypeIDs,
                                                                                                                                 List<int> ServiceGroupIDs,
                                                                                                                                 List<int> CustomerGroupIDs,
                                                                                                                                 DateTime? fromDate,
                                                                                                                                 DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLRequests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLRequest = a, RequestPayment = p })
                       .Where(t =>
                       (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLRequest.Request.Center.Region.CityID))
                       && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ADSLRequest.Request.CenterID))
                       && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestPayment.PaymentType))
                       && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLRequest.ADSLService.ADSLServiceGroup.ID))
                       && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                       && (!fromDate.HasValue || fromDate <= t.ADSLRequest.Request.EndDate)
                       && (!toDate.HasValue || toDate >= t.ADSLRequest.Request.EndDate)
                       && (t.ADSLRequest.Request.EndDate != null)
                       && (t.ADSLRequest.NeedModem == true)
                       && (t.RequestPayment.BaseCostID == 40)).GroupBy(t => new
                       {
                           Center = t.ADSLRequest.Request.Center.CenterName,
                           CenterCostCode = t.ADSLRequest.Request.Center.BillingCode.ToString(),
                           PaymentType = t.RequestPayment.PaymentType,
                           City = t.ADSLRequest.Request.Center.Region.City.Name,

                       }).Select(t => new

                       {
                           First = t.OrderBy(x => x.ADSLRequest.Request.Center.BillingCode).First(),
                           Cost = t.Sum(x => x.RequestPayment.AmountSum),
                           NumberOfSold = t.Count()

                       }).Select(t => new ADSLServiceAggragationSaleCenterSeperation
                       {
                           Center = t.First.ADSLRequest.Request.Center.CenterName,
                           CenterCostCode = t.First.ADSLRequest.Request.Center.BillingCode.ToString(),
                           City = t.First.ADSLRequest.Request.Center.Region.City.Name,
                           Cost = t.Cost,
                           NumberOfSold = t.NumberOfSold

                       }).ToList();
            }

        }

        public static List<ADSLServiceAggragationSaleCenterSeperation> GetADSLChangeModemSaleAggregateSaleCenterSeperationInfo(List<int> CityIDs,
                                                                                                                                 List<int> CenterIDs,
                                                                                                                                 List<int> PaymentTypeIDs,
                                                                                                                                 List<int> ServiceGroupIDs,
                                                                                                                                 List<int> CustomerGroupIDs,
                                                                                                                                 DateTime? fromDate,
                                                                                                                                 DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLChangeServices.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLChangeService = a, RequestPayment = p })
                       .Where(t =>
                       (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLChangeService.Request.Center.Region.CityID))
                       && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ADSLChangeService.Request.CenterID))
                       && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestPayment.PaymentType))
                       && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLChangeService.ADSLService.ADSLServiceGroup.ID))
                       && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLChangeService.ADSLService.ADSLServiceGroup.CustomerGroupID))
                       && (!fromDate.HasValue || fromDate <= t.ADSLChangeService.Request.EndDate)
                       && (!toDate.HasValue || toDate >= t.ADSLChangeService.Request.EndDate)
                       && (t.ADSLChangeService.Request.EndDate != null)
                       && (t.ADSLChangeService.NeedModem == true)
                       && (t.RequestPayment.BaseCostID == 40)
                    //&& (SaleWayIDs.Count==0 || SaleWayIDs.Contains((int)t.ADSLChangeService.ChangeServiceType))
                       ).GroupBy(t => new
                       {
                           Center = t.ADSLChangeService.Request.Center.CenterName,
                           CenterCostCode = t.ADSLChangeService.Request.Center.BillingCode.ToString(),
                           PaymentType = t.RequestPayment.PaymentType,
                           City = t.ADSLChangeService.Request.Center.Region.City.Name,

                       }).Select(t => new

                       {
                           First = t.OrderBy(x => x.ADSLChangeService.Request.Center.BillingCode).First(),
                           Cost = t.Sum(x => x.RequestPayment.AmountSum),
                           NumberOfSold = t.Count()

                       }).Select(t => new ADSLServiceAggragationSaleCenterSeperation
                       {
                           Center = t.First.ADSLChangeService.Request.Center.CenterName,
                           CenterCostCode = t.First.ADSLChangeService.Request.Center.BillingCode.ToString(),
                           City = t.First.ADSLChangeService.Request.Center.Region.City.Name,
                           Cost = t.Cost,
                           NumberOfSold = t.NumberOfSold

                       }).ToList();
            }

        }

        public static List<ADSLInfo> GetADSLInformationExpiredReportInfo(DateTime? fromDate, DateTime? ToDate, DateTime? fromEXPDate,
                                                              List<int> CityIDs, List<int> CenterIDs,
                                                              List<int> ServiceIds,
                                                              List<int> GroupIDs,
                                                              List<int> BandwidthIDs, List<int> TrafficIds,
                                                              List<int> DurationIDs,
            //List<int> SaleWayIDs,
                                                              List<int> CustomerGroupIDs,
                                                              List<int> ServicePaymentTypeIDs,
                                                              List<int> customerTypeIDs,
                                                              List<int> personTypeIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLs
                    //.Join(context.RequestPayments, a => a.TelephoneNo, p => p.Request.TelephoneNo, (a, p) => new {ADSL=a,RequestPayment=p })
                    .Where(t =>
                    (!fromDate.HasValue || fromDate <= t.InstallDate)
                    && (!ToDate.HasValue || ToDate >= t.InstallDate)
                    && (!fromEXPDate.HasValue || fromEXPDate <= t.ExpDate)
                    && (DB.CurrentUser.CenterIDs.Contains(t.Telephone.CenterID))
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.Telephone.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.Telephone.CenterID))
                    && (GroupIDs.Count == 0 || GroupIDs.Contains((int)t.ADSLService.ADSLServiceGroup.ID))
                    && (BandwidthIDs.Count == 0 || BandwidthIDs.Contains((int)t.ADSLService.BandWidthID))
                    && (TrafficIds.Count == 0 || TrafficIds.Contains((int)t.ADSLService.TrafficID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLService.DurationID))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (ServiceIds.Count == 0 || ServiceIds.Contains((int)t.ADSLService.ID))
                    && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ADSLService.PaymentTypeID))
                    && (t.ExpDate <= DB.GetServerDate())
                    && (customerTypeIDs.Count == 0 || customerTypeIDs.Contains((int)t.CustomerTypeID))
                    && (personTypeIDs.Count == 0 || personTypeIDs.Contains((int)t.Customer.PersonType)))
                    .Select(t => new ADSLInfo
                    {
                        TelephoneNo = t.TelephoneNo.ToString(),
                        CustomerOwnerName = t.Customer.FirstNameOrTitle + " " + t.Customer.LastName,
                        MobileNo = t.Customer.MobileNo,
                        CityName = t.Telephone.Center.Region.City.Name,
                        Center = t.Telephone.Center.CenterName,
                        BandWidth = t.ADSLService.ADSLServiceBandWidth.Title,
                        Duration = t.ADSLService.ADSLServiceDuration.Title,
                        Traffic = t.ADSLService.ADSLServiceTraffic.Title,
                        Cost = t.ADSLService.PriceSum.ToString(),
                        Tax = t.ADSLService.Tax.ToString(),
                        CustomerType = t.ADSLCustomerType.Title,
                        PersonType = DB.GetEnumDescriptionByValue(typeof(DB.PersonType), t.Customer.PersonType),
                        //  AmountSum=t.RequestPayment.AmountSum.ToString(),
                        EXPDate = Date.GetPersianDate(t.ExpDate, Date.DateStringType.Short),
                        ADSLPortNo = t.ADSLPort.Bucht.BuchtNo.ToString()
                    }).Distinct().ToList();
            }
        }

        public static List<ADSLInfo> GetADSLInformationNONExpiredReportInfo(DateTime? fromDate, DateTime? ToDate,
                                                              List<int> CityIDs, List<int> CenterIDs,
                                                              List<int> ServiceIds,
                                                              List<int> GroupIDs,
                                                              List<int> BandwidthIDs, List<int> TrafficIds,
                                                              List<int> DurationIDs,
                                                              List<int> CustomerGroupIDs,
                                                              List<int> ServicePaymentTypeIDs,
                                                              List<int> customerTypeIDs,
                                                              List<int> personTypeIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLs
                    //.Join(context.RequestPayments, a => a.TelephoneNo, p => p.Request.TelephoneNo, (a, p) => new {ADSL=a,RequestPayment=p })
                    .Where(t =>
                    (!fromDate.HasValue || fromDate <= t.InstallDate)
                    && (!ToDate.HasValue || ToDate >= t.InstallDate)
                    && (DB.CurrentUser.CenterIDs.Contains(t.Telephone.CenterID))
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.Telephone.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.Telephone.CenterID))
                    && (GroupIDs.Count == 0 || GroupIDs.Contains((int)t.ADSLService.ADSLServiceGroup.ID))
                    && (BandwidthIDs.Count == 0 || BandwidthIDs.Contains((int)t.ADSLService.BandWidthID))
                    && (TrafficIds.Count == 0 || TrafficIds.Contains((int)t.ADSLService.TrafficID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLService.DurationID))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (ServiceIds.Count == 0 || ServiceIds.Contains((int)t.ADSLService.ID))
                    && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ADSLService.PaymentTypeID))
                    && (t.ExpDate > DB.GetServerDate()) && t.Status == (byte)DB.ADSLStatus.Connect
                    && (customerTypeIDs.Count == 0 || customerTypeIDs.Contains((int)t.CustomerTypeID))
                    && (personTypeIDs.Count == 0 || personTypeIDs.Contains((int)t.Customer.PersonType)))
                    .Select(t => new ADSLInfo
                    {
                        TelephoneNo = t.TelephoneNo.ToString(),
                        CustomerOwnerName = t.Customer.FirstNameOrTitle + " " + t.Customer.LastName,
                        MobileNo = t.Customer.MobileNo,
                        CityName = t.Telephone.Center.Region.City.Name,
                        Center = t.Telephone.Center.CenterName,
                        BandWidth = t.ADSLService.ADSLServiceBandWidth.Title,
                        Duration = t.ADSLService.ADSLServiceDuration.Title,
                        Traffic = t.ADSLService.ADSLServiceTraffic.Title,
                        Cost = t.ADSLService.PriceSum.ToString(),
                        Tax = t.ADSLService.Tax.ToString(),
                        CustomerType = t.ADSLCustomerType.Title,
                        PersonType = DB.GetEnumDescriptionByValue(typeof(DB.PersonType), t.Customer.PersonType),
                        // AmountSum = t.RequestPayment.AmountSum.ToString(),
                        EXPDate = Date.GetPersianDate(t.ExpDate, Date.DateStringType.Short),
                        ADSLPortNo = t.ADSLPort.Bucht.BuchtNo.ToString()

                    }).Distinct().ToList();
            }
        }

        public static List<ADSLInfo> GetADSLInformationALLReportInfo(DateTime? fromDate, DateTime? ToDate,
                                                              List<int> CityIDs, List<int> CenterIDs,
                                                              List<int> ServiceIds,
                                                              List<int> GroupIDs,
                                                              List<int> BandwidthIDs, List<int> TrafficIds,
                                                              List<int> DurationIDs,
            //List<int> SaleWayIDs,
                                                              List<int> CustomerGroupIDs,
                                                              List<int> ServicePaymentTypeIDs,
                                                              List<int> customerTypeIDs,
                                                              List<int> personTypeIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLs
                    // .Join(context.RequestPayments, a => a.TelephoneNo, p => p.Request.TelephoneNo, (a, p) => new { ADSL = a, RequestPayment = p })
                     .Where(t =>
                     (!fromDate.HasValue || fromDate <= t.InstallDate)
                     && (DB.CurrentUser.CenterIDs.Contains(t.Telephone.CenterID))
                     && (!ToDate.HasValue || ToDate >= t.InstallDate)
                     && (CityIDs.Count == 0 || CityIDs.Contains((int)t.Telephone.Center.Region.CityID))
                     && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.Telephone.CenterID))
                     && (GroupIDs.Count == 0 || GroupIDs.Contains((int)t.ADSLService.ADSLServiceGroup.ID))
                     && (BandwidthIDs.Count == 0 || BandwidthIDs.Contains((int)t.ADSLService.BandWidthID))
                     && (TrafficIds.Count == 0 || TrafficIds.Contains((int)t.ADSLService.TrafficID))
                     && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLService.DurationID))
                     && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLService.ADSLServiceGroup.CustomerGroupID))
                     && (ServiceIds.Count == 0 || ServiceIds.Contains((int)t.ADSLService.ID))
                     && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ADSLService.PaymentTypeID))
                     && (customerTypeIDs.Count == 0 || customerTypeIDs.Contains((int)t.CustomerTypeID))
                     && (personTypeIDs.Count == 0 || personTypeIDs.Contains((int)t.Customer.PersonType))
                    ).Select(t => new ADSLInfo
                    {
                        TelephoneNo = t.TelephoneNo.ToString(),
                        CustomerOwnerName = t.Customer.FirstNameOrTitle + " " + ((t.Customer.LastName != null) ? t.Customer.LastName : ""),
                        MobileNo = t.Customer.MobileNo,
                        CityName = t.Telephone.Center.Region.City.Name,
                        Center = t.Telephone.Center.CenterName,
                        BandWidth = t.ADSLService.ADSLServiceBandWidth.Title,
                        Duration = t.ADSLService.ADSLServiceDuration.Title,
                        Traffic = t.ADSLService.ADSLServiceTraffic.Title,
                        Cost = t.ADSLService.PriceSum.ToString(),
                        Tax = t.ADSLService.Tax.ToString(),
                        CustomerType = t.ADSLCustomerType.Title,
                        PersonType = DB.GetEnumDescriptionByValue(typeof(DB.PersonType), t.Customer.PersonType),
                        //AmountSum = t.RequestPayment.AmountSum.ToString(),
                        EXPDate = Date.GetPersianDate(t.ExpDate, Date.DateStringType.Short),
                        ADSLPortNo = "ردیف:" + t.ADSLPort.Bucht.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString() +
                                                                              "طبقه:" + t.ADSLPort.Bucht.VerticalMDFRow.VerticalRowNo.ToString() +
                                                                              "اتصالی:" + t.ADSLPort.Bucht.BuchtNo.ToString()
                    }).Distinct().ToList();
            }
        }

        public static List<ADSLInstalmentInfo> GetInstallmentRequestPaymentByTelephoneNo(long telephoneNo)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.InstallmentRequestPayments.Where(t => t.TelephoneNo == telephoneNo && t.IsDeleted == false)
                    .Select(t => new ADSLInstalmentInfo
                    {
                        Amount = t.Cost.ToString(),
                        StartDate = Date.GetPersianDate(t.StartDate, Date.DateStringType.Short),
                        EndDate = Date.GetPersianDate(t.EndDate, Date.DateStringType.Short),
                        IsPaidBool = t.IsPaid
                    }).ToList();
            }
        }

        public static List<RefundDepositInfo> GetReportDepositInfo(long? FromTel, long? ToTel, DateTime? fromDate, DateTime? toDate, List<int> CityIDs, List<int> CenterIDs)
        {
            if (toDate.HasValue)
                toDate = toDate.Value.AddDays(1);
            using (MainDataContext context = new MainDataContext())
            {
                return context.RefundDeposits.Where(t =>
                     (fromDate.HasValue || fromDate <= t.Request.EndDate)
                    && (toDate.HasValue || toDate >= t.Request.EndDate)
                    && (FromTel == -1 || FromTel <= t.TelephoneNo)
                    && (ToTel == -1 || ToTel >= t.TelephoneNo)
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.Request.CenterID))).Select(t => new RefundDepositInfo
                    {
                        RequestID = t.ID.ToString(),
                        TelNo = t.TelephoneNo.ToString(),
                        CustomerName = t.Request.Customer.FirstNameOrTitle + " " + t.Request.Customer.LastName,
                        CauseOfRefundDeposit = t.CauseOfRefundDeposit.Name,
                        RefundDepositDate = Date.GetPersianDate(t.RefundDate, Date.DateStringType.Short),
                        AccountingdocumentNumber = t.AccountingDocumentNumber,
                        City = t.Request.Center.Region.City.Name,
                        Center = t.Request.Center.CenterName
                    }).ToList();
            }
        }

        public static List<PersonTypeInfo> GetPersonTypeInfo(DateTime? FromDate, DateTime? ToDate, long? FromTel, long? ToTel, List<int> PersonType, List<int> CityIDs, List<int> CenterIDs, string name, string family, string nationalCode)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.InstallRequests.Where
                    (t =>
                       (CityIDs.Count == 0 || CityIDs.Contains((int)t.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.Request.CenterID))
                    && (!FromDate.HasValue || FromDate <= t.InstallationDate)
                    && (!ToDate.HasValue || ToDate >= t.InstallationDate)
                    && (FromTel == -1 || FromTel <= t.Request.TelephoneNo)
                    && (ToTel == -1 || ToTel >= t.Request.TelephoneNo)
                    && (PersonType.Count == 0 || PersonType.Contains((int)t.Request.Customer.PersonType))
                    && (string.IsNullOrEmpty(name) || t.Request.Customer.FirstNameOrTitle.Contains(name))
                    && (string.IsNullOrEmpty(family) || t.Request.Customer.LastName.Contains(family))
                    && (string.IsNullOrEmpty(nationalCode) || t.Request.Customer.NationalCodeOrRecordNo == nationalCode)
                    && (t.InstallationDate != null)
                    )
                    .Select(t => new PersonTypeInfo
                    {
                        RequestID = t.ID.ToString(),
                        CustomerName = (t.Request.Customer.FirstNameOrTitle ?? "") + "" + (t.Request.Customer.LastName ?? ""),
                        TelephoneNo = t.Request.TelephoneNo.ToString(),
                        NationalCodeOrRecordNo = t.Request.Customer.NationalCodeOrRecordNo,
                        PersonType = t.Request.Customer.PersonType.ToString(),
                        ChargingType = DB.GetEnumDescriptionByValue(typeof(DB.ChargingGroup), t.ChargingType),
                        CustomerType = t.CustomerType.Title,
                        CustomerGroup = t.CustomerGroup.Title,
                        PosessionType = t.PosessionType.ToString(),
                        OrderType = DB.GetEnumDescriptionByValue(typeof(DB.OrderType), t.OrderType),
                        EndDate = t.InstallationDate.ToPersian(Date.DateStringType.Short),
                        City = t.Request.Center.Region.City.Name,
                        Center = t.Request.Center.CenterName

                    }).ToList();
            }
        }

        public static List<ADSLRequestInfo> GetALLADSLRequestCityCenterSaleStatistics(DateTime? fromDate,
                                                                               DateTime? toDate, List<int> cityIDs, List<int> centerIDs,
                                                                               List<int> serviceIDs, List<int> groupIDs,
                                                                               List<int> bandWidthIDs, List<int> trafficIDs, List<int> durationIDs,
                                                                               List<int> ADSLCustomerGroupIDs,
                                                                               DateTime? FromPaymentDate, DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Join(context.RequestPayments, t => t.ID, p => p.RequestID, (t, p) => new { Request = t, Requestpayment = p })
                    //.Join(context.ADSLCustomerGroups, m => m.Request.ADSLRequest.ADSLService.GroupID, g => g.ID, (m, g) => new { ALLM = m, ADSLCustomerGroup = g })
                    .Where(t =>
                     (t.Request.RequestTypeID == (byte)DB.RequestType.ADSL)
                    && (cityIDs.Count == 0 || cityIDs.Contains((int)t.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains((int)t.Request.CenterID))
                    && (!fromDate.HasValue || fromDate <= t.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.Request.EndDate)
                    && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.Request.ADSLRequest.ADSLService.ID))
                    && (groupIDs.Count == 0 || groupIDs.Contains((int)t.Request.ADSLRequest.ADSLService.ADSLServiceGroup.ID))
                    && (bandWidthIDs.Count == 0 || bandWidthIDs.Contains((int)t.Request.ADSLRequest.ADSLService.ADSLServiceBandWidth.ID))
                    && (trafficIDs.Count == 0 || trafficIDs.Contains((int)t.Request.ADSLRequest.ADSLService.ADSLServiceTraffic.ID))
                    && (durationIDs.Count == 0 || trafficIDs.Contains((int)t.Request.ADSLRequest.ADSLService.ADSLServiceDuration.ID))
                    && (ADSLCustomerGroupIDs.Count == 0 || ADSLCustomerGroupIDs.Contains((int)t.Request.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.Requestpayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.Requestpayment.PaymentDate)
                    && (t.Requestpayment.PaymentDate != null || t.Requestpayment.PaymentType == (byte)DB.PaymentType.Instalment))

                    .GroupBy(t => new
                    {
                        city = t.Request.Center.Region.City.Name,
                        center = t.Request.Center.CenterName


                    })
                    .Select(t => new ADSLRequestInfo
                    {
                        NumberOfSaledADSLService = t.Count(),
                        ServiceSaleAmount = t.Sum(x => x.Requestpayment.AmountSum),
                        CityName = t.Key.city,
                        Center = t.Key.center

                    }).Distinct().ToList();

            }
        }

        public static List<ADSLRequestInfo> GetPrePaidADSLRequestCityCenterSaleStatistics(DateTime? fromDate,
                                                                               DateTime? toDate, List<int> cityIDs, List<int> centerIDs,
                                                                               List<int> serviceIDs, List<int> groupIDs,
                                                                               List<int> bandWidthIDs, List<int> trafficIDs, List<int> durationIDs,
                                                                               List<int> ADSLCustomerGroupIDs,
                                                                               DateTime? FromPaymentDate, DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Join(context.RequestPayments, t => t.ID, p => p.RequestID, (t, p) => new { Request = t, Requestpayment = p })
                    //.Join(context.ADSLCustomerGroups, m => m.Request.ADSLRequest.ADSLService.GroupID, g => g.ID, (m, g) => new { ALLM = m, ADSLCustomerGroup = g })
                    .Where(t =>
                     (t.Request.RequestTypeID == (byte)DB.RequestType.ADSL)
                    && (cityIDs.Count == 0 || cityIDs.Contains((int)t.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains((int)t.Request.CenterID))
                    && (!fromDate.HasValue || fromDate <= t.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.Request.EndDate)
                    && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.Request.ADSLRequest.ADSLService.ID))
                    && (groupIDs.Count == 0 || groupIDs.Contains((int)t.Request.ADSLRequest.ADSLService.ADSLServiceGroup.ID))
                    && (bandWidthIDs.Count == 0 || bandWidthIDs.Contains((int)t.Request.ADSLRequest.ADSLService.ADSLServiceBandWidth.ID))
                    && (trafficIDs.Count == 0 || trafficIDs.Contains((int)t.Request.ADSLRequest.ADSLService.ADSLServiceTraffic.ID))
                    && (durationIDs.Count == 0 || trafficIDs.Contains((int)t.Request.ADSLRequest.ADSLService.ADSLServiceDuration.ID))
                    && (ADSLCustomerGroupIDs.Count == 0 || ADSLCustomerGroupIDs.Contains((int)t.Request.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.Requestpayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.Requestpayment.PaymentDate)
                    && (t.Requestpayment.PaymentDate != null || t.Requestpayment.PaymentType == (byte)DB.PaymentType.Instalment)
                    && (t.Requestpayment.PaymentType == (byte)DB.PaymentType.Cash))

                    .GroupBy(t => new
                    {
                        city = t.Request.Center.Region.City.Name,
                        center = t.Request.Center.CenterName


                    })
                    .Select(t => new ADSLRequestInfo
                    {
                        NumberOfSoldADSLPrePaid = t.Count(),
                        PrePaidAmountSum = t.Sum(x => x.Requestpayment.AmountSum),
                        CityName = t.Key.city,
                        Center = t.Key.center

                    }).Distinct().ToList();

            }
        }

        public static List<ADSLRequestInfo> GetPostPaidADSLRequestCityCenterSaleStatistics(DateTime? fromDate,
                                                                               DateTime? toDate, List<int> cityIDs, List<int> centerIDs,
                                                                               List<int> serviceIDs, List<int> groupIDs,
                                                                               List<int> bandWidthIDs, List<int> trafficIDs, List<int> durationIDs,
                                                                               List<int> ADSLCustomerGroupIDs,
                                                                               DateTime? FromPaymentDate, DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Requests.Join(context.RequestPayments, t => t.ID, p => p.RequestID, (t, p) => new { Request = t, Requestpayment = p })
                    //.Join(context.ADSLCustomerGroups, m => m.Request.ADSLRequest.ADSLService.GroupID, g => g.ID, (m, g) => new { ALLM = m, ADSLCustomerGroup = g })
                    .Where(t =>
                     (t.Request.RequestTypeID == (byte)DB.RequestType.ADSL)
                    && (cityIDs.Count == 0 || cityIDs.Contains((int)t.Request.Center.Region.CityID))
                    && (centerIDs.Count == 0 || centerIDs.Contains((int)t.Request.CenterID))
                    && (!fromDate.HasValue || fromDate <= t.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.Request.EndDate)
                    && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.Request.ADSLRequest.ADSLService.ID))
                    && (groupIDs.Count == 0 || groupIDs.Contains((int)t.Request.ADSLRequest.ADSLService.ADSLServiceGroup.ID))
                    && (bandWidthIDs.Count == 0 || bandWidthIDs.Contains((int)t.Request.ADSLRequest.ADSLService.ADSLServiceBandWidth.ID))
                    && (trafficIDs.Count == 0 || trafficIDs.Contains((int)t.Request.ADSLRequest.ADSLService.ADSLServiceTraffic.ID))
                    && (durationIDs.Count == 0 || trafficIDs.Contains((int)t.Request.ADSLRequest.ADSLService.ADSLServiceDuration.ID))
                    && (ADSLCustomerGroupIDs.Count == 0 || ADSLCustomerGroupIDs.Contains((int)t.Request.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.Requestpayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.Requestpayment.PaymentDate)
                    && (t.Requestpayment.PaymentDate != null || t.Requestpayment.PaymentType == (byte)DB.PaymentType.Instalment)
                    && (t.Requestpayment.PaymentType == (byte)DB.PaymentType.Instalment))

                    .GroupBy(t => new
                    {
                        city = t.Request.Center.Region.City.Name,
                        center = t.Request.Center.CenterName


                    })
                    .Select(t => new ADSLRequestInfo
                    {
                        NumberOfSoldADSLPostPaid = t.Count(),
                        PostPaidAmountSum = t.Sum(x => x.Requestpayment.AmountSum),
                        CityName = t.Key.city,
                        Center = t.Key.center

                    }).Distinct().ToList();

            }
        }


        public static List<ADSLRequestInfo> GetALLADSLChangeServiceCityCenterSaleStatistics(DateTime? fromDate,
                                                                               DateTime? toDate, List<int> CityIDs, List<int> CenterIDs,
                                                                               List<int> ServiceIDs, List<int> ServiceGroupIDs,
                                                                               List<int> BandWidthIDs, List<int> TrafficIDs, List<int> DurationIDs,
                                                                               List<int> CustomerGroupIDs,
                                                                               DateTime? FromPaymentDate, DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLChangeServices.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLChangeService = a, RequestPayment = p })
                    .Where(t =>
                    (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLChangeService.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ADSLChangeService.Request.CenterID))
                    && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLChangeService.ADSLService.ADSLServiceGroup.ID))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLChangeService.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.ADSLChangeService.ADSLService.BandWidthID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLChangeService.ADSLService.DurationID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLChangeService.ADSLService.TrafficID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ADSLChangeService.ADSLService.ID))
                    && (!fromDate.HasValue || fromDate <= t.ADSLChangeService.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ADSLChangeService.Request.EndDate)
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestPayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.RequestPayment.PaymentDate)
                    && (t.RequestPayment.PaymentDate != null || t.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).GroupBy
                    (t => new
                    {
                        city = t.ADSLChangeService.Request.Center.Region.City.Name,
                        center = t.ADSLChangeService.Request.Center.CenterName
                    })

                    .Select(t => new ADSLRequestInfo
                    {
                        NumberOfSaledADSLService = t.Count(),
                        ServiceSaleAmount = t.Sum(x => x.RequestPayment.AmountSum),
                        CityName = t.Key.city,
                        Center = t.Key.center

                    }).ToList();
            }
        }

        public static List<ADSLRequestInfo> GetPrePaidADSLChangeServiceCityCenterSaleStatistics(DateTime? fromDate,
                                                                               DateTime? toDate, List<int> CityIDs, List<int> CenterIDs,
                                                                               List<int> ServiceIDs, List<int> ServiceGroupIDs,
                                                                               List<int> BandWidthIDs, List<int> TrafficIDs, List<int> DurationIDs,
                                                                               List<int> CustomerGroupIDs,
                                                                               DateTime? FromPaymentDate, DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLChangeServices.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLChangeService = a, RequestPayment = p })
                    .Where(t =>
                    (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLChangeService.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ADSLChangeService.Request.CenterID))
                    && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLChangeService.ADSLService.ADSLServiceGroup.ID))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLChangeService.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.ADSLChangeService.ADSLService.BandWidthID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLChangeService.ADSLService.DurationID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLChangeService.ADSLService.TrafficID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ADSLChangeService.ADSLService.ID))
                    && (!fromDate.HasValue || fromDate <= t.ADSLChangeService.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ADSLChangeService.Request.EndDate)
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestPayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.RequestPayment.PaymentDate)
                    && (t.RequestPayment.PaymentType == (byte)DB.PaymentType.Cash)
                    && (t.RequestPayment.PaymentDate != null)).GroupBy
                    (t => new
                    {
                        city = t.ADSLChangeService.Request.Center.Region.City.Name,
                        center = t.ADSLChangeService.Request.Center.CenterName
                    })

                    .Select(t => new ADSLRequestInfo
                    {
                        NumberOfSoldADSLPrePaid = t.Count(),
                        PrePaidAmountSum = t.Sum(x => x.RequestPayment.AmountSum),
                        CityName = t.Key.city,
                        Center = t.Key.center

                    }).ToList();
            }
        }

        public static List<ADSLRequestInfo> GetPostPaidADSLChangeServiceCityCenterSaleStatistics(DateTime? fromDate,
                                                                               DateTime? toDate, List<int> CityIDs, List<int> CenterIDs,
                                                                               List<int> ServiceIDs, List<int> ServiceGroupIDs,
                                                                               List<int> BandWidthIDs, List<int> TrafficIDs, List<int> DurationIDs,
                                                                               List<int> CustomerGroupIDs,
                                                                               DateTime? FromPaymentDate, DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLChangeServices.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLChangeService = a, RequestPayment = p })
                    .Where(t =>
                    (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLChangeService.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ADSLChangeService.Request.CenterID))
                    && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ADSLChangeService.ADSLService.ADSLServiceGroup.ID))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLChangeService.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.ADSLChangeService.ADSLService.BandWidthID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLChangeService.ADSLService.DurationID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLChangeService.ADSLService.TrafficID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ADSLChangeService.ADSLService.ID))
                    && (!fromDate.HasValue || fromDate <= t.ADSLChangeService.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.ADSLChangeService.Request.EndDate)
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.RequestPayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.RequestPayment.PaymentDate)
                    && (t.RequestPayment.PaymentDate != null || t.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)
                    && (t.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).GroupBy
                    (t => new
                    {
                        city = t.ADSLChangeService.Request.Center.Region.City.Name,
                        center = t.ADSLChangeService.Request.Center.CenterName
                    })

                    .Select(t => new ADSLRequestInfo
                    {
                        NumberOfSoldADSLPostPaid = t.Count(),
                        PostPaidAmountSum = t.Sum(x => x.RequestPayment.AmountSum),
                        CityName = t.Key.city,
                        Center = t.Key.center

                    }).ToList();
            }
        }

        public static List<EmptyTelephoneNoInfo> GetEmptyTelephoneNoInfo(long? Fromtel, long? Totel, List<int> CityIDs, List<int> CenterIDs,
                                                                        List<int> TelephoneTypeIDs, bool? RoundTel)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Telephones.Join(context.TakePossessions, t => t.TelephoneNo, d => d.Request.TelephoneNo, (t, d) => new { Telephone = t, TakePossession = d })
                    .GroupJoin(context.ChangeNos, c => c.Telephone.TelephoneNo, h => h.OldTelephoneNo, (c, h) => new { All = c, ChangeNo = h })
                    .SelectMany(t2 => t2.ChangeNo.DefaultIfEmpty(), (t1, t2) => new { All = t1.All, ChangeNo = t2 })
                    .Where(t =>
                    (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.All.TakePossession.Request.CenterID))
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.All.TakePossession.Request.Center.Region.CityID))
                    && (Fromtel == -1 || Fromtel <= t.All.Telephone.TelephoneNo)
                    && (Totel == -1 || Totel >= t.All.Telephone.TelephoneNo)
                    && (TelephoneTypeIDs.Count == 0 || TelephoneTypeIDs.Contains((int)t.All.Telephone.UsageType))
                    && (!RoundTel.HasValue || RoundTel == t.All.Telephone.IsRound)).Select(t => new EmptyTelephoneNoInfo
                    {
                        City = t.All.TakePossession.Request.Center.Region.City.Name,
                        Center = t.All.TakePossession.Request.Center.CenterName,
                        TelephoneNo = t.All.Telephone.TelephoneNo.ToString(),
                        DischargeDate = Date.GetPersianDate(t.All.TakePossession.TakePossessionDate, Date.DateStringType.Short),
                        ExchangeDate = Date.GetPersianDate(t.ChangeNo.ChangeDate, Date.DateStringType.Short),
                        DischargeReason = t.All.TakePossession.CauseOfTakePossession.Name

                    }).ToList();
            }
        }

        public static List<TakePossessionInfo> GetPrintCertificationTakePossessionInfo(
                                                                    DateTime? fromDate,
                                                                    DateTime? toDate,
                                                                    List<int> Dischargereason,
                                                                     List<long?> RequestNo)
        {
            List<InstallRequestInfo> List = new List<InstallRequestInfo>();
            List<TakePossessionInfo> Result = new List<TakePossessionInfo>();


            using (MainDataContext context = new MainDataContext())
            {
                Result = context.TakePossessions.Where(t =>
                    (!fromDate.HasValue || fromDate <= t.TakePossessionDate)
                   && (!toDate.HasValue || toDate >= t.TakePossessionDate)
                   && (Dischargereason.Count == 0 || Dischargereason.Contains((int)t.CauseOfTakePossessionID))
                   && (RequestNo.Count == 0 || RequestNo.Contains(t.ID)))
                   .Select(t => new TakePossessionInfo
                   {
                       TelNo = t.Request.TelephoneNo.ToString(),
                       DischargeReason = t.CauseOfTakePossession.Name,
                       DischargeDate = Date.GetPersianDate(t.TakePossessionDate, Date.DateStringType.Short),
                       Name = t.Customer.FirstNameOrTitle + " " + t.Customer.LastName,
                       Counter = t.CounterNoTakePossession,
                       MelliCode = t.Customer.NationalCodeOrRecordNo,
                       PostalCode = t.Telephone.Address.PostalCode,
                       Address = t.Telephone.Address.AddressContent,
                       City = t.Request.Center.Region.City.Name,
                       Center = t.Request.Center.CenterName,
                       Region = t.Request.Center.Region.Title,
                       PersonType = DB.GetEnumDescriptionByValue(typeof(DB.PersonType), (int?)t.Customer.PersonType),
                       MobileNo = t.Customer.MobileNo,
                       UrgentTelNo = t.Customer.UrgentTelNo
                   }).ToList();
            }

            foreach (TakePossessionInfo info in Result)
            {
                for (int i = 0; i < List.Count; i++)
                    if (Convert.ToInt64(List[i].TelephoneNo) == Convert.ToInt64(info.TelNo))
                    {
                        info.TelphoneType = List[i].TelephoneType;
                        info.TelephoneTypeGroup = List[i].TelephoneTypeGroup;
                        info.ChargingType = List[i].ChargingType;
                        info.Order = List[i].OrderType;
                        info.PossessionType = List[i].PosessionType;
                    }

            }
            return Result;

        }

        public static List<ChangeNoInfo> GetChangeNoInfoPrintCertification(List<long> RequestIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                //TODO:Region Edited
                List<ChangeNoInfo> result = new List<ChangeNoInfo>();
                result = context.ChangeNos.Where(t =>
                                                    (RequestIDs.Count == 0 || RequestIDs.Contains(t.ID))
                                                )
                                          .Select(t => new ChangeNoInfo
                                                        {
                                                            CustomerName = t.Customer.FirstNameOrTitle.ToString() + " " + (t.Customer.LastName ?? ""),
                                                            NewTelephoneNo = t.NewTelephoneNo.ToString(),
                                                            OldTelephoneNo = t.OldTelephoneNo.ToString(),
                                                            Address = t.Address.AddressContent,
                                                            PostalCode = t.Address.PostalCode.ToString(),
                                                            MelliCode = t.Customer.NationalCodeOrRecordNo,
                                                            Center = t.Request.Center.CenterName,
                                                            //Region = t.Request.Center.Region.Title,
                                                            CityName = t.Request.Center.Region.City.Name,
                                                            Description = t.Description,
                                                            CauseOfChangeNo = t.CauseOfChangeNo.Name,
                                                            InsertDate = t.Request.InsertDate.ToPersian(Date.DateStringType.Short),
                                                            //ChangeNoDate = t.Telephone.InstallationDate.ToPersian(Date.DateStringType.Short),
                                                            ChangeNoDate = t.ChangeDate.ToPersian(Date.DateStringType.Short),
                                                            MobileNo = t.Customer.MobileNo.ToString(),
                                                            UrgentTelNo = t.Customer.UrgentTelNo.ToString()

                                                        }
                                                  )
                                         .ToList();

                //برخی از فیلدها نباید در گزارش خالی باشند. جلوگیری از ایجاد درگیری روانی
                //در کد زیر آن فیلدها را مقداردهی پیش فرض میکنیم
                result.ForEach(cni =>
                {
                    cni.CustomerName = !string.IsNullOrEmpty(cni.CustomerName) ? cni.CustomerName : "-----";
                    cni.NewTelephoneNo = !string.IsNullOrEmpty(cni.NewTelephoneNo) ? cni.NewTelephoneNo : "-----";
                    cni.ChangeNoDate = !string.IsNullOrEmpty(cni.ChangeNoDate) ? cni.ChangeNoDate : "-----";
                    cni.UrgentTelNo = !string.IsNullOrEmpty(cni.UrgentTelNo) ? cni.UrgentTelNo : "-----";
                    cni.MobileNo = !string.IsNullOrEmpty(cni.MobileNo) ? cni.MobileNo : "-----";
                    cni.MelliCode = !string.IsNullOrEmpty(cni.MelliCode) ? cni.MelliCode : "-----";
                }
                              );
                return result;
            }
        }

        public static List<PCMInfo> GetPCMInfo(List<long> buchtIDs, byte? BuchtStatus = null)
        {
            using (MainDataContext context = new MainDataContext())
            {
                var query = context.PostContacts
                    .GroupJoin(context.Buchts, p => p.ID, b => b.ConnectionID, (b, p) => new { Bucht = b.Buchts, PostContact = p })
                    .SelectMany(t2 => t2.Bucht.DefaultIfEmpty(), (t1, t2) => new { PostContacts = t1, Buchts = t2 })
                    .GroupJoin(context.Telephones, b => b.Buchts.SwitchPortID, t => t.SwitchPortID, (b, t) => new { Buchts = b, Telephones = t, PostContacts = b.PostContacts })
                    .SelectMany(x => x.Telephones.DefaultIfEmpty(), (t1, t2) => new { Bucht = t1.Buchts, PostContact = t1.PostContacts, Telephone = t2 })
                    .Where(t => DB.CurrentUser.CenterIDs.Contains(t.Bucht.Buchts.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.CenterID))
                    .Where(t3 => buchtIDs.Contains(t3.Bucht.Buchts.ID))
                    .Where(t3 => BuchtStatus == null || t3.Bucht.Buchts.Status != BuchtStatus)
                     .Select(t => new PCMInfo
                     {
                         Rock = t.Bucht.Buchts.PCMPort.PCM.PCMShelf.PCMRock.Number.ToString(),
                         Shelf = t.Bucht.Buchts.PCMPort.PCM.PCMShelf.Number.ToString(),
                         Card = t.Bucht.Buchts.PCMPort.PCM.Card.ToString(),
                         Port = t.Bucht.Buchts.PCMPort.PortNumber.ToString(),


                     }).ToList();
                return query;

            }
        }

        public static List<ChangeLocationCenterInfo> GetChangeLocationInsideCenterInfo(List<long> requestIds)
        {
            using (MainDataContext context = new MainDataContext())
            {
                List<ChangeLocationCenterInfo> result = new List<ChangeLocationCenterInfo>();
                result = context.ChangeLocations
                              .Join(context.Buchts, c => c.OldBuchtID, b => b.ID, (c, b) => new { ChangeLocation = c, OldBucht = b })
                              .Join(context.Buchts, c => c.ChangeLocation.Request.InvestigatePossibilities.Take(1).SingleOrDefault().BuchtID, b => b.ID, (c, b) => new { all = c, NewBucht = b })
                              .Where(t =>
                                        (requestIds.Count == 0 || requestIds.Contains(t.all.ChangeLocation.ID))
                                     )
                              .Select(t => new ChangeLocationCenterInfo
                                            {
                                                CustomerName = string.Format("{0} {1}", t.all.ChangeLocation.Customer.FirstNameOrTitle, t.all.ChangeLocation.Customer.LastName),
                                                OldCustomerName = string.Format("{0} {1}", t.all.ChangeLocation.Request.Customer.FirstNameOrTitle, t.all.ChangeLocation.Request.Customer.LastName),

                                                NewInstallAddress = t.all.ChangeLocation.Address2.AddressContent,
                                                OldInstallAddress = t.all.ChangeLocation.Address1.AddressContent,

                                                NewTelephoneNo = t.all.ChangeLocation.NewTelephone.ToString(),
                                                OldTelephoneNo = t.all.ChangeLocation.OldTelephone.ToString(),

                                                MobileNo = t.all.ChangeLocation.Customer.MobileNo.ToString(),
                                                UrgentTelephoneNo = t.all.ChangeLocation.Customer.UrgentTelNo.ToString(),

                                                NewCorrespondedAddress = t.all.ChangeLocation.Address.AddressContent,
                                                OldCorrspondedAddress = t.all.ChangeLocation.Address3.AddressContent,

                                                NewBuchtEttesali = t.NewBucht.BuchtNo.ToString(),
                                                OldBuchtEttsali = t.all.OldBucht.BuchtNo.ToString(),

                                                NewBuchtRadif = t.NewBucht.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString(),
                                                OldBuchtRadif = t.all.OldBucht.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString(),

                                                NewBuchtTabaghe = t.NewBucht.VerticalMDFRow.VerticalRowNo.ToString(),
                                                OldBuchtTabaghe = t.all.OldBucht.VerticalMDFRow.VerticalRowNo.ToString(),

                                                NewPostContactPost = t.all.ChangeLocation.Request.InvestigatePossibilities.Take(1).SingleOrDefault().PostContact.Post.Number.ToString(),
                                                OldPostContactPost = t.all.ChangeLocation.PostContact.Post.Number.ToString(),

                                                NewCaffu = t.NewBucht.CabinetInput.Cabinet.CabinetNumber.ToString(),
                                                OldCaffu = t.all.OldBucht.CabinetInput.Cabinet.CabinetNumber.ToString(),

                                                NewPostContactEttesali = t.all.ChangeLocation.Request.InvestigatePossibilities.Take(1).SingleOrDefault().PostContact.ConnectionNo.ToString(),
                                                OldPostContactEttesali = t.all.ChangeLocation.PostContact.ConnectionNo.ToString(),

                                                NewPostContactmarkazi = t.NewBucht.CabinetInput.InputNumber.ToString(),
                                                OldPostContactmarkazi = t.all.OldBucht.CabinetInput.InputNumber.ToString(),

                                                RegionName = t.all.ChangeLocation.Request.Center.Region.Title,
                                                Center = t.all.ChangeLocation.Request.Center.CenterName,

                                                NewPostalCode = t.all.ChangeLocation.Address2.PostalCode.ToString(),
                                                OldPostalCode = t.all.ChangeLocation.Address1.PostalCode.ToString(),

                                                OldRack = t.all.OldBucht.PCMPort.PCM.PCMShelf.PCMRock.Number.ToString(),
                                                NewRack = t.NewBucht.PCMPort.PCM.PCMShelf.PCMRock.Number.ToString(),

                                                OldShelf = t.all.OldBucht.PCMPort.PCM.PCMShelf.Number.ToString(),
                                                NewShelf = t.NewBucht.PCMPort.PCM.PCMShelf.Number.ToString(),

                                                OldCard = t.all.OldBucht.PCMPort.PCM.Card.ToString(),
                                                NewCard = t.NewBucht.PCMPort.PCM.Card.ToString(),

                                                OldPort = t.all.OldBucht.PCMPort.PortNumber.ToString(),
                                                NewPort = t.NewBucht.PCMPort.PortNumber.ToString()
                                            }
                                      )
                             .ToList();

                //خالی بودن مقادیر مربوط به مشخصه پی سی ام باید بررسی شود
                result.ForEach((cln) =>
                                    {
                                        cln.OldRack = !string.IsNullOrEmpty(cln.OldRack) ? cln.OldRack : "ندارد";
                                        cln.OldShelf = !string.IsNullOrEmpty(cln.OldShelf) ? cln.OldShelf : "ندارد";
                                        cln.OldCard = !string.IsNullOrEmpty(cln.OldCard) ? cln.OldCard : "ندارد";
                                        cln.OldPort = !string.IsNullOrEmpty(cln.OldPort) ? cln.OldPort : "ندارد";
                                        cln.NewRack = !string.IsNullOrEmpty(cln.NewRack) ? cln.NewRack : "ندارد";
                                        cln.NewShelf = !string.IsNullOrEmpty(cln.NewShelf) ? cln.NewShelf : "ندارد";
                                        cln.NewCard = !string.IsNullOrEmpty(cln.NewCard) ? cln.NewCard : "ندارد";
                                        cln.NewPort = !string.IsNullOrEmpty(cln.NewPort) ? cln.NewPort : "ندارد";
                                    }
                              );
                return result;
            }
        }

        //TODO:rad
        public static List<ChangeLocationCenterInfo> GetChangeLocationInsideCenterMDFWiringInfo(List<long> requestIds)
        {
            using (MainDataContext context = new MainDataContext())
            {
                List<ChangeLocationCenterInfo> result = new List<ChangeLocationCenterInfo>();
                var query = context.ChangeLocations
                                   .GroupJoin(context.ADSLPAPPorts, cl => cl.Request.TelephoneNo, p => p.TelephoneNo, (cl, p) => new { ChangeLocation = cl, ADSLPAPPort = p })
                                   .SelectMany(p1 => p1.ADSLPAPPort.DefaultIfEmpty(), (cl, p) => new { ChangeLocation = cl.ChangeLocation, Adsl = p })
                                   .Where(cl =>
                                              (requestIds.Count == 0 || requestIds.Contains(cl.ChangeLocation.ID))
                                         )
                                   .AsQueryable();

                result = query.Select(cl => new ChangeLocationCenterInfo
                                                {
                                                    NewTelephoneNo = cl.ChangeLocation.NewTelephone.ToString(),
                                                    OldTelephoneNo = cl.ChangeLocation.OldTelephone.ToString(),

                                                    NewBuchtEttesali = cl.ChangeLocation.Request.InvestigatePossibilities.Take(1).SingleOrDefault().Bucht.BuchtNo.ToString(),
                                                    OldBuchtEttsali = cl.ChangeLocation.Bucht.BuchtNo.ToString(),

                                                    NewBuchtRadif = cl.ChangeLocation.Request.InvestigatePossibilities.Take(1).SingleOrDefault().Bucht.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString(),
                                                    OldBuchtRadif = cl.ChangeLocation.Bucht.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString(),

                                                    NewBuchtTabaghe = cl.ChangeLocation.Request.InvestigatePossibilities.Take(1).SingleOrDefault().Bucht.VerticalMDFRow.VerticalRowNo.ToString(),
                                                    OldBuchtTabaghe = cl.ChangeLocation.Bucht.VerticalMDFRow.VerticalRowNo.ToString(),

                                                    NewPCMCabinetInputColumnNo = cl.ChangeLocation.Request.InvestigatePossibilities.Take(1).SingleOrDefault().Bucht.BuchtTypeID == (int)DB.BuchtType.InLine ? context.Buchts.Where(t2 => t2.CabinetInputID == cl.ChangeLocation.Request.InvestigatePossibilities.Take(1).SingleOrDefault().Bucht.CabinetInputID && t2.BuchtTypeID == (int)DB.BuchtType.CustomerSide).Select(t2 => t2.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo).SingleOrDefault() : default(int?),

                                                    NewPCMCabinetInputRowNo = cl.ChangeLocation.Request.InvestigatePossibilities.Take(1).SingleOrDefault().Bucht.BuchtTypeID == (int)DB.BuchtType.InLine ? context.Buchts.Where(t2 => t2.CabinetInputID == cl.ChangeLocation.Request.InvestigatePossibilities.Take(1).SingleOrDefault().Bucht.CabinetInputID && t2.BuchtTypeID == (int)DB.BuchtType.CustomerSide).Select(t2 => t2.VerticalMDFRow.VerticalRowNo).SingleOrDefault() : default(int?),

                                                    NewPCMCabinetInputBuchtNo = cl.ChangeLocation.Request.InvestigatePossibilities.Take(1).SingleOrDefault().Bucht.BuchtTypeID == (int)DB.BuchtType.InLine ? context.Buchts.Where(t2 => t2.CabinetInputID == cl.ChangeLocation.Request.InvestigatePossibilities.Take(1).SingleOrDefault().Bucht.CabinetInputID && t2.BuchtTypeID == (int)DB.BuchtType.CustomerSide).Select(t2 => t2.BuchtNo).SingleOrDefault() : default(long?),

                                                    OldPCMCabinetInputColumnNo = cl.ChangeLocation.Bucht.BuchtTypeID == (int)DB.BuchtType.InLine ? context.Buchts.Where(t2 => t2.CabinetInputID == cl.ChangeLocation.Bucht.CabinetInputID && t2.BuchtTypeID == (int)DB.BuchtType.CustomerSide).Select(t2 => t2.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo).SingleOrDefault() : default(int?),

                                                    OldPCMCabinetInputRowNo = cl.ChangeLocation.Bucht.BuchtTypeID == (int)DB.BuchtType.InLine ? context.Buchts.Where(t2 => t2.CabinetInputID == cl.ChangeLocation.Bucht.CabinetInputID && t2.BuchtTypeID == (int)DB.BuchtType.CustomerSide).Select(t2 => t2.VerticalMDFRow.VerticalRowNo).SingleOrDefault() : default(int?),

                                                    OldPCMCabinetInputBuchtNo = cl.ChangeLocation.Bucht.BuchtTypeID == (int)DB.BuchtType.InLine ? context.Buchts.Where(t2 => t2.CabinetInputID == cl.ChangeLocation.Bucht.CabinetInputID && t2.BuchtTypeID == (int)DB.BuchtType.CustomerSide).Select(t2 => t2.BuchtNo).SingleOrDefault() : default(long?),



                                                    NewPCMHeadNoColumnNo = cl.ChangeLocation.Request.InvestigatePossibilities.Take(1).SingleOrDefault().Bucht.BuchtTypeID == (int)DB.BuchtType.InLine ? context.Buchts.Where(t2 => t2.CabinetInputID == cl.ChangeLocation.Request.InvestigatePossibilities.Take(1).SingleOrDefault().Bucht.CabinetInputID && t2.BuchtTypeID == (int)DB.BuchtType.InLine).OrderBy(t2 => t2.BuchtNo).Take(1).Select(t2 => t2.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo).SingleOrDefault() : default(int?),

                                                    NewPCMHeadNoRowNo = cl.ChangeLocation.Request.InvestigatePossibilities.Take(1).SingleOrDefault().Bucht.BuchtTypeID == (int)DB.BuchtType.InLine ? context.Buchts.Where(t2 => t2.CabinetInputID == cl.ChangeLocation.Request.InvestigatePossibilities.Take(1).SingleOrDefault().Bucht.CabinetInputID && t2.BuchtTypeID == (int)DB.BuchtType.InLine).OrderBy(t2 => t2.BuchtNo).Take(1).Select(t2 => t2.VerticalMDFRow.VerticalRowNo).SingleOrDefault() : default(int?),

                                                    NewPCMHeadNoBuchtNo = cl.ChangeLocation.Request.InvestigatePossibilities.Take(1).SingleOrDefault().Bucht.BuchtTypeID == (int)DB.BuchtType.InLine ? context.Buchts.Where(t2 => t2.CabinetInputID == cl.ChangeLocation.Request.InvestigatePossibilities.Take(1).SingleOrDefault().Bucht.CabinetInputID && t2.BuchtTypeID == (int)DB.BuchtType.InLine).OrderBy(t2 => t2.BuchtNo).Take(1).Select(t2 => t2.BuchtNo).SingleOrDefault() : default(long?),


                                                    AdslColumnNo = cl.Adsl.RowNo,

                                                    AdslRowNo = cl.Adsl.ColumnNo,

                                                    AdslBuchtNo = cl.Adsl.BuchtNo,

                                                    CityName = cl.ChangeLocation.Request.Center.Region.City.Name,

                                                    CenterName = cl.ChangeLocation.Request.Center.CenterName,

                                                    MdfDescription = string.Empty //این فیلد باید خالی باشد تا کرمانشاهی ها به صورت دستی آن را بعد از پرینت گزارش پر کنند
                                                }
                                     )
                              .ToList();

                result.ForEach((cln) =>
                                        {
                                            cln.NewTelephoneNo = !string.IsNullOrEmpty(cln.NewTelephoneNo) ? cln.NewTelephoneNo : "-----";
                                            cln.OldTelephoneNo = !string.IsNullOrEmpty(cln.OldTelephoneNo) ? cln.OldTelephoneNo : "-----";
                                        }
                              );
                return result;
            }
        }

        public static List<ADSLInfo> GetADSLRequestInformationInSystemReportInfo(DateTime? FromDate, DateTime? ToDate, List<int> CityIDs,
                                                                                 List<int> CenterIDs, List<int> ServiceIDs, List<int> GroupIDs,
                                                                                 List<int> BandwidthIDs, List<int> TrafficIDs, List<int> DurationIDs,
                                                                                 List<int> SaleWayIds, List<int> CustomerGroupIDs, List<int> ServicePaymentIDs
                                                                                 , List<int> PaymentTypeIDs, List<int> customerTypeIDs, List<int> personTypeIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLRequest = a, RequestPayment = p })
                    .Where(t =>
                    (!FromDate.HasValue || FromDate <= t.ADSLRequest.Request.EndDate)
                    && (!ToDate.HasValue || ToDate >= t.ADSLRequest.Request.EndDate)
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLRequest.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ADSLRequest.Request.CenterID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ADSLRequest.ADSLService.ID))
                    && (GroupIDs.Count == 0 || GroupIDs.Contains((int)t.ADSLRequest.ADSLService.GroupID))
                    && (BandwidthIDs.Count == 0 || BandwidthIDs.Contains((int)t.ADSLRequest.ADSLService.BandWidthID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLRequest.ADSLService.TrafficID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLRequest.ADSLService.DurationID))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (ServicePaymentIDs.Count == 0 || ServicePaymentIDs.Contains((int)t.ADSLRequest.ADSLService.PaymentTypeID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestPayment.PaymentType))
                    && (t.RequestPayment.BaseCostID == 44)
                    && (customerTypeIDs.Count == 0 || customerTypeIDs.Contains((int)t.ADSLRequest.CustomerTypeID))
                    && (personTypeIDs.Count == 0 || personTypeIDs.Contains((int)t.ADSLRequest.Customer.PersonType))
                    && (t.RequestPayment.PaymentDate != null || t.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Select(t => new ADSLInfo
                    {
                        TelephoneNo = t.ADSLRequest.Request.TelephoneNo.ToString(),
                        CustomerOwnerName = t.ADSLRequest.Customer.FirstNameOrTitle + " " + (t.ADSLRequest.Customer.LastName != null ? t.ADSLRequest.Customer.LastName : ""),
                        CityCenter = t.ADSLRequest.Request.Center.Region.City.Name + " : " + t.ADSLRequest.Request.Center.CenterName,
                        //Center = t.ADSLRequest.Request.Center.CenterName,
                        //CityName = t.ADSLRequest.Request.Center.Region.City.Name,
                        BandWidth = t.ADSLRequest.ADSLService.ADSLServiceBandWidth.Title,
                        Traffic = t.ADSLRequest.ADSLService.ADSLServiceTraffic.Title,
                        Duration = t.ADSLRequest.ADSLService.ADSLServiceDuration.Title,
                        Cost = t.RequestPayment.Cost.ToString(),
                        Tax = t.RequestPayment.Tax.ToString(),
                        RequestType = "ثبت نام ADSL",
                        ADSLPortNo = t.ADSLRequest.ADSLPort.PortNo,
                        SaleWayByte = t.ADSLRequest.SaleWay,
                        CustomerType = t.ADSLRequest.ADSLCustomerType.Title,
                        PersonType = DB.GetEnumDescriptionByValue(typeof(DB.PersonType), t.ADSLRequest.Customer.PersonType)
                    }).ToList();
            }
        }

        public static List<ADSLInfo> GetADSLRequestInformationInSystemRanjeCostReportInfo(DateTime? FromDate, DateTime? ToDate, List<int> CityIDs,
                                                                                List<int> CenterIDs, List<int> ServiceIDs, List<int> GroupIDs,
                                                                                List<int> BandwidthIDs, List<int> TrafficIDs, List<int> DurationIDs,
                                                                                List<int> SaleWayIds, List<int> CustomerGroupIDs, List<int> ServicePaymentIDs
                                                                                , List<int> PaymentTypeIDs, List<int> customerTypeIDs, List<int> personTypeIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLRequest = a, RequestPayment = p })
                    .Where(t =>
                    (!FromDate.HasValue || FromDate <= t.ADSLRequest.Request.EndDate)
                    && (!ToDate.HasValue || ToDate >= t.ADSLRequest.Request.EndDate)
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLRequest.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ADSLRequest.Request.CenterID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ADSLRequest.ADSLService.ID))
                    && (GroupIDs.Count == 0 || GroupIDs.Contains((int)t.ADSLRequest.ADSLService.GroupID))
                    && (BandwidthIDs.Count == 0 || BandwidthIDs.Contains((int)t.ADSLRequest.ADSLService.BandWidthID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLRequest.ADSLService.TrafficID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLRequest.ADSLService.DurationID))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (ServicePaymentIDs.Count == 0 || ServicePaymentIDs.Contains((int)t.ADSLRequest.ADSLService.PaymentTypeID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestPayment.PaymentType))
                    && (t.RequestPayment.BaseCostID == 107)
                    && (customerTypeIDs.Count == 0 || customerTypeIDs.Contains((int)t.ADSLRequest.CustomerTypeID))
                    && (personTypeIDs.Count == 0 || personTypeIDs.Contains((int)t.ADSLRequest.Customer.PersonType))
                    && (t.RequestPayment.PaymentDate != null || t.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Select(t => new ADSLInfo
                    {
                        TelephoneNo = t.ADSLRequest.Request.TelephoneNo.ToString(),
                        CustomerOwnerName = t.ADSLRequest.Customer.FirstNameOrTitle + " " + (t.ADSLRequest.Customer.LastName != null ? t.ADSLRequest.Customer.LastName : ""),
                        CityCenter = t.ADSLRequest.Request.Center.Region.City.Name + " : " + t.ADSLRequest.Request.Center.CenterName,
                        //Center = t.ADSLRequest.Request.Center.CenterName,
                        //CityName = t.ADSLRequest.Request.Center.Region.City.Name,
                        BandWidth = t.ADSLRequest.ADSLService.ADSLServiceBandWidth.Title,
                        Traffic = t.ADSLRequest.ADSLService.ADSLServiceTraffic.Title,
                        Duration = t.ADSLRequest.ADSLService.ADSLServiceDuration.Title,
                        RequestType = "ثبت نام ADSL",
                        SaleWayByte = t.ADSLRequest.SaleWay,
                        RanjeCost = t.RequestPayment.AmountSum.ToString(),
                        ADSLPortNo = t.ADSLRequest.ADSLPort.PortNo,
                        CustomerType = t.ADSLRequest.ADSLCustomerType.Title,
                        PersonType = DB.GetEnumDescriptionByValue(typeof(DB.PersonType), t.ADSLRequest.Customer.PersonType)
                    }).ToList();
            }
        }

        public static List<ADSLInfo> GetADSLRequestInformationInSystemInstallmentCostReportInfo(DateTime? FromDate, DateTime? ToDate, List<int> CityIDs,
                                                                             List<int> CenterIDs, List<int> ServiceIDs, List<int> GroupIDs,
                                                                             List<int> BandwidthIDs, List<int> TrafficIDs, List<int> DurationIDs,
                                                                             List<int> SaleWayIds, List<int> CustomerGroupIDs, List<int> ServicePaymentIDs
                                                                             , List<int> PaymentTypeIDs, List<int> customerTypeIDs, List<int> personTypeIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLRequests.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLRequest = a, RequestPayment = p })
                    .Where(t =>
                    (!FromDate.HasValue || FromDate <= t.ADSLRequest.Request.EndDate)
                    && (!ToDate.HasValue || ToDate >= t.ADSLRequest.Request.EndDate)
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLRequest.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ADSLRequest.Request.CenterID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ADSLRequest.ADSLService.ID))
                    && (GroupIDs.Count == 0 || GroupIDs.Contains((int)t.ADSLRequest.ADSLService.GroupID))
                    && (BandwidthIDs.Count == 0 || BandwidthIDs.Contains((int)t.ADSLRequest.ADSLService.BandWidthID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLRequest.ADSLService.TrafficID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLRequest.ADSLService.DurationID))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLRequest.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (ServicePaymentIDs.Count == 0 || ServicePaymentIDs.Contains((int)t.ADSLRequest.ADSLService.PaymentTypeID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestPayment.PaymentType))
                    && (t.RequestPayment.BaseCostID == 37)
                    && (customerTypeIDs.Count == 0 || customerTypeIDs.Contains((int)t.ADSLRequest.CustomerTypeID))
                    && (personTypeIDs.Count == 0 || personTypeIDs.Contains((int)t.ADSLRequest.Customer.PersonType))
                    && (t.RequestPayment.PaymentDate != null || t.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)).Select(t => new ADSLInfo
                    {
                        TelephoneNo = t.ADSLRequest.Request.TelephoneNo.ToString(),
                        CustomerOwnerName = t.ADSLRequest.Customer.FirstNameOrTitle + " " + (t.ADSLRequest.Customer.LastName != null ? t.ADSLRequest.Customer.LastName : ""),
                        CityCenter = t.ADSLRequest.Request.Center.Region.City.Name + " : " + t.ADSLRequest.Request.Center.CenterName,
                        //Center = t.ADSLRequest.Request.Center.CenterName,
                        //CityName = t.ADSLRequest.Request.Center.Region.City.Name,
                        BandWidth = t.ADSLRequest.ADSLService.ADSLServiceBandWidth.Title,
                        Traffic = t.ADSLRequest.ADSLService.ADSLServiceTraffic.Title,
                        Duration = t.ADSLRequest.ADSLService.ADSLServiceDuration.Title,
                        RequestType = "ثبت نام ADSL",
                        SaleWayByte = t.ADSLRequest.SaleWay,
                        InstallmentCost = t.RequestPayment.AmountSum.ToString(),
                        ADSLPortNo = t.ADSLRequest.ADSLPort.PortNo,
                        CustomerType = t.ADSLRequest.ADSLCustomerType.Title,
                        PersonType = DB.GetEnumDescriptionByValue(typeof(DB.PersonType), t.ADSLRequest.Customer.PersonType)
                    }).ToList();
            }
        }

        public static List<ADSLInfo> GetADSLChangeServiceInformationInSystemReportInfo(DateTime? FromDate, DateTime? ToDate, List<int> CityIDs,
                                                                               List<int> CenterIDs, List<int> ServiceIDs, List<int> GroupIDs,
                                                                               List<int> BandwidthIDs, List<int> TrafficIDs, List<int> DurationIDs,
                                                                               List<int> SaleWayIds, List<int> CustomerGroupIDs, List<int> ServicePaymentIDs
                                                                               , List<int> PaymentTypeIDs, List<int> customerTypeIDs, List<int> personTypeIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLChangeServices.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLChangeService = a, RequestPayment = p })
                    .Where(t =>
                    (!FromDate.HasValue || FromDate <= t.ADSLChangeService.Request.EndDate)
                    && (!ToDate.HasValue || ToDate >= t.ADSLChangeService.Request.EndDate)
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLChangeService.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ADSLChangeService.Request.CenterID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ADSLChangeService.ADSLService.ID))
                    && (GroupIDs.Count == 0 || GroupIDs.Contains((int)t.ADSLChangeService.ADSLService.GroupID))
                    && (BandwidthIDs.Count == 0 || BandwidthIDs.Contains((int)t.ADSLChangeService.ADSLService.BandWidthID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLChangeService.ADSLService.TrafficID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLChangeService.ADSLService.DurationID))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLChangeService.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (ServicePaymentIDs.Count == 0 || ServicePaymentIDs.Contains((int)t.ADSLChangeService.ADSLService.PaymentTypeID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestPayment.PaymentType))
                    && (t.RequestPayment.BaseCostID == 44 || t.RequestPayment.BaseCostID == 45)
                    && (personTypeIDs.Count == 0 || personTypeIDs.Contains((int)t.ADSLChangeService.Request.Customer.PersonType))
                    && (t.RequestPayment.PaymentDate != null || t.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)
                    && (SaleWayIds.Count == 0 || SaleWayIds.Contains((int)t.ADSLChangeService.ChangeServiceType))).Select(t => new ADSLInfo
                    {
                        TelephoneNo = t.ADSLChangeService.Request.TelephoneNo.ToString(),
                        CustomerOwnerName = t.ADSLChangeService.Request.Customer.FirstNameOrTitle + " " + (t.ADSLChangeService.Request.Customer.LastName != null ? t.ADSLChangeService.Request.Customer.LastName : ""),
                        CityCenter = t.ADSLChangeService.Request.Center.Region.City.Name + " : " + t.ADSLChangeService.Request.Center.CenterName,
                        //Center = t.ADSLRequest.Request.Center.CenterName,
                        //CityName = t.ADSLRequest.Request.Center.Region.City.Name,
                        BandWidth = t.ADSLChangeService.ADSLService.ADSLServiceBandWidth.Title,
                        Traffic = t.ADSLChangeService.ADSLService.ADSLServiceTraffic.Title,
                        Duration = t.ADSLChangeService.ADSLService.ADSLServiceDuration.Title,
                        Cost = t.RequestPayment.Cost.ToString(),
                        Tax = t.RequestPayment.Tax.ToString(),
                        RequestType = "شارژ مجدد",
                        SaleWayByte = t.ADSLChangeService.SaleWay,
                        PersonType = DB.GetEnumDescriptionByValue(typeof(DB.PersonType), t.ADSLChangeService.Request.Customer.PersonType)
                    }).ToList();
            }
        }

        public static List<ADSLInfo> GetADSLChangeServiceInformationInSystemRanjeCostReportInfo(DateTime? FromDate, DateTime? ToDate, List<int> CityIDs,
                                                                              List<int> CenterIDs, List<int> ServiceIDs, List<int> GroupIDs,
                                                                              List<int> BandwidthIDs, List<int> TrafficIDs, List<int> DurationIDs,
                                                                              List<int> SaleWayIds, List<int> CustomerGroupIDs, List<int> ServicePaymentIDs
                                                                              , List<int> PaymentTypeIDs, List<int> customerTypeIDs, List<int> personTypeIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLChangeServices.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLChangeService = a, RequestPayment = p })
                    .Where(t =>
                    (!FromDate.HasValue || FromDate <= t.ADSLChangeService.Request.EndDate)
                    && (!ToDate.HasValue || ToDate >= t.ADSLChangeService.Request.EndDate)
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLChangeService.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ADSLChangeService.Request.CenterID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ADSLChangeService.ADSLService.ID))
                    && (GroupIDs.Count == 0 || GroupIDs.Contains((int)t.ADSLChangeService.ADSLService.GroupID))
                    && (BandwidthIDs.Count == 0 || BandwidthIDs.Contains((int)t.ADSLChangeService.ADSLService.BandWidthID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLChangeService.ADSLService.TrafficID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLChangeService.ADSLService.DurationID))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLChangeService.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (ServicePaymentIDs.Count == 0 || ServicePaymentIDs.Contains((int)t.ADSLChangeService.ADSLService.PaymentTypeID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestPayment.PaymentType))
                    && (t.RequestPayment.BaseCostID == 107)
                    && (personTypeIDs.Count == 0 || personTypeIDs.Contains((int)t.ADSLChangeService.Request.Customer.PersonType))
                    && (t.RequestPayment.PaymentDate != null || t.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)
                    && (SaleWayIds.Count == 0 || SaleWayIds.Contains((int)t.ADSLChangeService.ChangeServiceType))).Select(t => new ADSLInfo
                    {
                        TelephoneNo = t.ADSLChangeService.Request.TelephoneNo.ToString(),
                        CustomerOwnerName = t.ADSLChangeService.Request.Customer.FirstNameOrTitle + " " + (t.ADSLChangeService.Request.Customer.LastName != null ? t.ADSLChangeService.Request.Customer.LastName : ""),
                        CityCenter = t.ADSLChangeService.Request.Center.Region.City.Name + " : " + t.ADSLChangeService.Request.Center.CenterName,
                        //Center = t.ADSLRequest.Request.Center.CenterName,
                        //CityName = t.ADSLRequest.Request.Center.Region.City.Name,
                        BandWidth = t.ADSLChangeService.ADSLService.ADSLServiceBandWidth.Title,
                        Traffic = t.ADSLChangeService.ADSLService.ADSLServiceTraffic.Title,
                        Duration = t.ADSLChangeService.ADSLService.ADSLServiceDuration.Title,
                        RequestType = "شارژ مجدد",
                        SaleWayByte = t.ADSLChangeService.SaleWay,
                        RanjeCost = t.RequestPayment.AmountSum.ToString(),
                        PersonType = DB.GetEnumDescriptionByValue(typeof(DB.PersonType), t.ADSLChangeService.Request.Customer.PersonType)
                    }).ToList();
            }
        }

        public static List<ADSLInfo> GetADSLChangeServiceInformationInSystemInstallmentCostReportInfo(DateTime? FromDate, DateTime? ToDate, List<int> CityIDs,
                                                                            List<int> CenterIDs, List<int> ServiceIDs, List<int> GroupIDs,
                                                                            List<int> BandwidthIDs, List<int> TrafficIDs, List<int> DurationIDs,
                                                                            List<int> SaleWayIds, List<int> CustomerGroupIDs, List<int> ServicePaymentIDs
                                                                            , List<int> PaymentTypeIDs, List<int> customerTypeIDs, List<int> personTypeIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLChangeServices.Join(context.RequestPayments, a => a.ID, p => p.RequestID, (a, p) => new { ADSLChangeService = a, RequestPayment = p })
                    .Where(t =>
                    (!FromDate.HasValue || FromDate <= t.ADSLChangeService.Request.EndDate)
                    && (!ToDate.HasValue || ToDate >= t.ADSLChangeService.Request.EndDate)
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLChangeService.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ADSLChangeService.Request.CenterID))
                    && (ServiceIDs.Count == 0 || ServiceIDs.Contains((int)t.ADSLChangeService.ADSLService.ID))
                    && (GroupIDs.Count == 0 || GroupIDs.Contains((int)t.ADSLChangeService.ADSLService.GroupID))
                    && (BandwidthIDs.Count == 0 || BandwidthIDs.Contains((int)t.ADSLChangeService.ADSLService.BandWidthID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLChangeService.ADSLService.TrafficID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLChangeService.ADSLService.DurationID))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLChangeService.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (ServicePaymentIDs.Count == 0 || ServicePaymentIDs.Contains((int)t.ADSLChangeService.ADSLService.PaymentTypeID))
                    && (PaymentTypeIDs.Count == 0 || PaymentTypeIDs.Contains((int)t.RequestPayment.PaymentType))
                    && (t.RequestPayment.BaseCostID == 37)
                    && (personTypeIDs.Count == 0 || personTypeIDs.Contains((int)t.ADSLChangeService.Request.Customer.PersonType))
                    && (t.RequestPayment.PaymentDate != null || t.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)
                    && (SaleWayIds.Count == 0 || SaleWayIds.Contains((int)t.ADSLChangeService.ChangeServiceType))).Select(t => new ADSLInfo
                    {
                        TelephoneNo = t.ADSLChangeService.Request.TelephoneNo.ToString(),
                        CustomerOwnerName = t.ADSLChangeService.Request.Customer.FirstNameOrTitle + " " + (t.ADSLChangeService.Request.Customer.LastName != null ? t.ADSLChangeService.Request.Customer.LastName : ""),
                        CityCenter = t.ADSLChangeService.Request.Center.Region.City.Name + " : " + t.ADSLChangeService.Request.Center.CenterName,
                        //Center = t.ADSLRequest.Request.Center.CenterName,
                        //CityName = t.ADSLRequest.Request.Center.Region.City.Name,
                        BandWidth = t.ADSLChangeService.ADSLService.ADSLServiceBandWidth.Title,
                        Traffic = t.ADSLChangeService.ADSLService.ADSLServiceTraffic.Title,
                        Duration = t.ADSLChangeService.ADSLService.ADSLServiceDuration.Title,
                        RequestType = "شارژ مجدد",
                        SaleWayByte = t.ADSLChangeService.SaleWay,
                        InstallmentCost = t.RequestPayment.AmountSum.ToString(),
                        PersonType = DB.GetEnumDescriptionByValue(typeof(DB.PersonType), t.ADSLChangeService.Request.Customer.PersonType)
                    }).ToList();
            }
        }

        public static List<ADSLDischargeInfo> GetADSLDischargeDetailsInfo(DateTime? fromDate, DateTime? toDate,
                                                                           List<int> CityIDs,
                                                                           List<int> CenterIDs,
                                                                           List<int> serviceIDs,
                                                                           List<int> GroupIDs,
                                                                           List<int> BandWidthIDs,
                                                                           List<int> TrafficIDs,
                                                                           List<int> DurationIDs,
                                                                           List<int> CustomerGroupIDs,
                                                                           List<int> ServicePaymentTypeIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLDischarges.Where(t =>
                    (CityIDs.Count == 0 || CityIDs.Contains((int)t.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.Request.CenterID))
                    && (!fromDate.HasValue || fromDate <= t.Request.EndDate)
                    && (!toDate.HasValue || toDate >= t.Request.EndDate)
                    && (serviceIDs.Count == 0 || serviceIDs.Contains((int)t.ADSLService.ID))
                    && (GroupIDs.Count == 0 || GroupIDs.Contains((int)t.ADSLService.GroupID))
                    && (BandWidthIDs.Count == 0 || BandWidthIDs.Contains((int)t.ADSLService.BandWidthID))
                    && (TrafficIDs.Count == 0 || TrafficIDs.Contains((int)t.ADSLService.TrafficID))
                    && (DurationIDs.Count == 0 || DurationIDs.Contains((int)t.ADSLService.DurationID))
                    && (CustomerGroupIDs.Count == 0 || CustomerGroupIDs.Contains((int)t.ADSLService.ADSLServiceGroup.CustomerGroupID))
                    && (ServicePaymentTypeIDs.Count == 0 || ServicePaymentTypeIDs.Contains((int)t.ADSLService.PaymentTypeID)))
                    .Select(t => new ADSLDischargeInfo
                    {
                        TelephoneNo = t.Request.TelephoneNo.ToString(),
                        CustomerName = t.Request.Customer.FirstNameOrTitle + " " + t.Request.Customer.LastName,
                        Reason = t.ADSLDischargeReason.Title,
                        Center = t.Request.Center.CenterName,
                        City = t.Request.Center.Region.City.Name,
                        Service = t.ADSLService.Title,

                    }).ToList();
            }
        }

        public static ConnectionInfo GetBuchtInfoByBuchtIDs(long NewbuchtID, long OldBuchtID, long BuchtID, long? requestID, long? NewTelNo, long? OldTelNo)
        {

            using (MainDataContext context = new MainDataContext())
            {
                return context.Buchts
                      .Where(t => t.ID == NewbuchtID || t.ID == OldBuchtID || t.ID == BuchtID
                      ).AsEnumerable().Select(t => new ConnectionInfo
                      {
                          MDF = t.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Number.ToString() + DB.GetDescription(t.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Description),
                          MDFID = t.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.ID,
                          VerticalColumnNo = t.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo,
                          VerticalRowID = t.VerticalMDFRow.VerticalMDFColumn.ID,
                          VerticalRowNo = t.VerticalMDFRow.VerticalRowNo,
                          VerticalColumnID = t.VerticalMDFRow.ID,
                          BuchtNo = t.BuchtNo,
                          BuchtID = t.ID,
                          RequestID = requestID,
                          NewTelephoneNo = NewTelNo,
                          OldTelephoneNo = OldTelNo,
                          Radif = t.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo,
                          Tabaghe = t.VerticalMDFRow.VerticalRowNo,
                          CabinetInputID = t.CabinetInputID,
                          NewBuchtID = NewbuchtID,
                          OldBuchtID = OldBuchtID

                      }).SingleOrDefault();
            }
        }

        public static List<InvestigatePossibility> GetInvestigatePossibilityByRequestIDs(List<long> requestID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.InvestigatePossibilities.Where(t => requestID.Contains((long)t.RequestID)).OrderBy(t => t.Request.TelephoneNo).ToList();
            }
        }

        public static TelephoneSpecialServiceTypeInfo GetSpecialServicePrintCertificationInfo(long? TelephoneNo)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.TelephoneSpecialServiceTypes.Join(context.Telephones, s => s.TelephoneNo, t => t.TelephoneNo, (s, t) => new { TelephoneSpecialServiceType = s, Telephone = t })
                    .Where(
                            t => t.TelephoneSpecialServiceType.TelephoneNo == TelephoneNo)
                    .Select(t => new TelephoneSpecialServiceTypeInfo
                    {
                        CustomerName = t.Telephone.Customer.FirstNameOrTitle + " " + t.Telephone.Customer.LastName,
                        TelephoneNo = t.TelephoneSpecialServiceType.TelephoneNo.ToString(),
                        Address = t.Telephone.Address.AddressContent,
                        PostalCode = t.Telephone.Address.PostalCode.ToString(),
                        MelliCode = t.Telephone.Customer.NationalCodeOrRecordNo,
                        PersonType = DB.GetEnumDescriptionByValue(typeof(DB.PersonType), t.Telephone.Customer.PersonType),
                        CustomerAgencyNumber = t.Telephone.Customer.AgencyNumber.ToString()
                    }
                    ).FirstOrDefault();


            }
        }

        public static List<TelephoneSpecialServiceTypeInfo> GetSpecialServiceTypeListPrintCertificationInfo(long? TelephoneNo)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.TelephoneSpecialServiceTypes.Join(context.Telephones, s => s.TelephoneNo, t => t.TelephoneNo, (s, t) => new { TelephoneSpecialServiceType = s, Telephone = t })
                    .Where(
                            t => t.TelephoneSpecialServiceType.TelephoneNo == TelephoneNo)
                    .Select(t => new TelephoneSpecialServiceTypeInfo
                    {
                        ServiceType = t.TelephoneSpecialServiceType.SpecialServiceType.Title

                    }).ToList();


            }
        }

        public static List<ZeroStatusInfo> GetZeroStatusReportPrintCertificationInfo(long? RequestID)
        {


            using (MainDataContext context = new MainDataContext())
            {
                return context.ZeroStatus
                    .Where(t => RequestID == t.ID).Select(t => new ZeroStatusInfo
                    {
                        RequestNo = t.ID.ToString(),
                        TelephoneNo = t.Request.TelephoneNo.ToString(),
                        DayeriDate = t.InstallDate,
                        ClassTelephone = t.ClassTelephone,
                        InstallDatePersian = Date.GetPersianDate(t.InstallDate, Date.DateStringType.Short),
                        Customer = t.Request.Customer.FirstNameOrTitle + " " + t.Request.Customer.LastName,
                        MelliCode = t.Request.Customer.NationalCodeOrRecordNo,
                        CenterName = t.Request.Center.CenterName,
                        Region = t.Request.Center.Region.Title


                    }).ToList();
            }
        }

        //TODO:rad
        public static List<ChangeAddressInfo> GetChangeAddressInfos(DateTime? fromDate, DateTime? toDate, List<int> cities, List<int> centers, long telephoneNo, long requestID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                //TODO:Region Edited.
                if (toDate.HasValue)
                {
                    toDate = toDate.Value.AddDays(1);
                }
                List<ChangeAddressInfo> result = new List<ChangeAddressInfo>();

                var query = context.ChangeAddresses.Where(ca =>
                                                                (requestID == -1 ? ca.Request.EndDate.HasValue : ca.Request.ID == requestID) &&
                                                                (cities.Count == 0 || cities.Contains(ca.Request.Center.Region.CityID)) &&
                                                                (centers.Count == 0 || centers.Contains(ca.Request.CenterID)) &&
                                                                (!fromDate.HasValue || ca.Request.EndDate >= fromDate) &&
                                                                (!toDate.HasValue || ca.Request.EndDate <= toDate) &&
                                                                (telephoneNo == -1 || (ca.Request.TelephoneNo.HasValue && ca.Request.TelephoneNo.Value == telephoneNo))
                                                          )
                                                   .AsQueryable();
                result = query.Select(ca => new ChangeAddressInfo
                                                {
                                                    TelephoneNo = ca.Request.TelephoneNo.ToString(),
                                                    CustomerName = string.Format("{0} {1}", ca.Request.Customer.FirstNameOrTitle, ca.Request.Customer.LastName),
                                                    NewInstallAddress = ca.Address3.AddressContent,
                                                    OldInstallAddress = ca.Address1.AddressContent,
                                                    NewCorrespondenceAddress = ca.Address2.AddressContent,
                                                    OldCorrespondenceAddress = ca.Address.AddressContent,
                                                    MelliCode = ca.Request.Customer.NationalCodeOrRecordNo,
                                                    CenterName = ca.Request.Center.CenterName,
                                                    //Region = t.Request.Center.Region.Title,
                                                    AgencyNumber = ca.Request.Customer.AgencyNumber,
                                                    CityName = ca.Request.Center.Region.City.Name,
                                                    MobileNo = ca.Request.Customer.MobileNo,
                                                    NewPostalCode = ca.Address3.PostalCode,
                                                    OldPostalCode = ca.Address1.PostalCode,
                                                    RequestDate = ca.Request.EndDate.ToPersian(Date.DateStringType.Short),
                                                    Agency = ca.Request.Customer.Agency,
                                                    UrgentTelNo = ca.Request.Customer.UrgentTelNo
                                                }
                                     )
                              .ToList();

                //برخی از فیلدها نباید در گزارش خالی باشند. جلوگیری از ایجاد درگیری روانی
                //در کد زیر آن فیلدها را مقداردهی پیش فرض میکنیم
                result.ForEach(cai =>
                                    {
                                        cai.CustomerName = !string.IsNullOrEmpty(cai.CustomerName) ? cai.CustomerName : "-----";
                                        cai.MelliCode = !string.IsNullOrEmpty(cai.MelliCode) ? cai.MelliCode : "-----";
                                        cai.Agency = !string.IsNullOrEmpty(cai.Agency) ? cai.Agency : "-----";
                                        cai.AgencyNumber = !string.IsNullOrEmpty(cai.AgencyNumber) ? cai.AgencyNumber : "-----";
                                        cai.MobileNo = !string.IsNullOrEmpty(cai.MobileNo) ? cai.MobileNo : "-----";
                                        cai.RequestDate = !string.IsNullOrEmpty(cai.RequestDate) ? cai.RequestDate : "-----";
                                        cai.UrgentTelNo = !string.IsNullOrEmpty(cai.UrgentTelNo) ? cai.UrgentTelNo : "-----";
                                        cai.NewPostalCode = !string.IsNullOrEmpty(cai.NewPostalCode) ? cai.NewPostalCode : "-----";
                                        cai.OldPostalCode = !string.IsNullOrEmpty(cai.OldPostalCode) ? cai.OldPostalCode : "-----";
                                    }
                              );
                return result;
            }

        }

        public static TelephonePBXInfo GetPBXPrintCertificationInfo(long? RequestID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.TelephonePBXes.Join(context.Requests, t => t.HeadTelephone, r => r.TelephoneNo, (t, r) => new { TelephonePBX = t, Request = r })
                    .Where(t => (RequestID == t.Request.ID)).Select(t => new TelephonePBXInfo
                    {
                        HeadTelephoneNo = t.TelephonePBX.HeadTelephone.ToString(),
                        CustomerName = t.Request.Customer.FirstNameOrTitle + " " + t.Request.Customer.LastName,
                        Address = t.TelephonePBX.Telephone.Address.AddressContent,
                        Postalcode = t.TelephonePBX.Telephone.Address.PostalCode,
                        MobileNo = t.Request.Customer.MobileNo,
                        AgencyTelephoneNo = t.Request.Customer.AgencyNumber,
                        MelliCode = t.Request.Customer.NationalCodeOrRecordNo,
                        Region = t.Request.Center.Region.Title,
                        Centername = t.Request.Center.CenterName

                    }).SingleOrDefault();


            }
        }

        public static List<TelephonePBXInfo> GetPBXOtherTelNoListPrintCertificationInfo(long? HeadTelephoneNo)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.TelephonePBXes
                    .Where(t => (t.HeadTelephone == HeadTelephoneNo)).Select(t => new TelephonePBXInfo
                    {
                        OtherTelephoenNo = t.OtherTelephone.ToString()

                    }).ToList();


            }
        }

        public static List<TelephoneRequestLog> GetTelephoneRequestLogInfo(long? TelNo, string InternationalCode, string CustomerName, List<TelephoneRequestLog> Result, string customerID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                List<TelephoneRequestLog> Temp = new List<TelephoneRequestLog>();
                List<TelephoneRequestLog> Temp2 = new List<TelephoneRequestLog>();
                List<TelephoneRequestLog> Temp3 = new List<TelephoneRequestLog>();
                Temp = context.RequestLogs.Where(t =>
                    (string.IsNullOrEmpty(CustomerName) || (t.Request.Customer.FirstNameOrTitle + " " + t.Request.Customer.LastName).Contains(CustomerName))
                    && (string.IsNullOrEmpty(InternationalCode) || t.Request.Customer.NationalCodeOrRecordNo.Contains(InternationalCode))
                    && (TelNo == -1 || TelNo == t.TelephoneNo)
                    && (t.LogType == null)
                    && (string.IsNullOrEmpty(customerID) || t.CustomerID == customerID)).Select(t => new TelephoneRequestLog
                    {
                        TelephoneNo = t.TelephoneNo.ToString(),
                        ToTelephoneNo = t.ToTelephoneNo.ToString(),
                        CustomerName = (t.Request.Customer.FirstNameOrTitle ?? "") + " " + (t.Request.Customer.LastName ?? ""),
                        RequestType = t.RequestType.Title,
                        Date = Date.GetPersianDate(t.Date, Date.DateStringType.Short)
                    }).ToList();

                Result = Result.Union(Temp).Distinct().ToList();
                bool IsTotel = false;

                Temp2 = context.RequestLogs.Where(t =>
                        (string.IsNullOrEmpty(CustomerName) || (t.Request.Customer.FirstNameOrTitle + " " + t.Request.Customer.LastName).Contains(CustomerName))
                        && (string.IsNullOrEmpty(InternationalCode) || t.Request.Customer.NationalCodeOrRecordNo.Contains(InternationalCode))
                        && (TelNo == -1 || TelNo == t.ToTelephoneNo)
                        && (t.LogType == null)).Select(t => new TelephoneRequestLog
                        {
                            TelephoneNo = t.TelephoneNo.ToString(),
                            ToTelephoneNo = t.ToTelephoneNo.ToString(),
                            CustomerName = t.Request.Customer.FirstNameOrTitle ?? "" + " " + t.Request.Customer.LastName ?? "",
                            RequestType = t.RequestType.Title,
                            Date = Date.GetPersianDate(t.Date, Date.DateStringType.Short)
                        }).ToList();

                Result = Result.Union(Temp2).Distinct().ToList();
                if (Temp2.Count > 0)
                {
                    long OldTelNo = Convert.ToInt64(Temp2[0].TelephoneNo);
                    Temp3 = context.RequestLogs.Where(t =>
                      (string.IsNullOrEmpty(CustomerName) || (t.Request.Customer.FirstNameOrTitle + " " + t.Request.Customer.LastName).Contains(CustomerName))
                      && (string.IsNullOrEmpty(InternationalCode) || t.Request.Customer.NationalCodeOrRecordNo.Contains(InternationalCode))
                      && (TelNo == -1 || OldTelNo == t.TelephoneNo)
                      && (t.LogType == null)).Select(t => new TelephoneRequestLog
                      {
                          TelephoneNo = t.TelephoneNo.ToString(),
                          ToTelephoneNo = t.ToTelephoneNo.ToString(),
                          CustomerName = t.Request.Customer.FirstNameOrTitle ?? "" + " " + t.Request.Customer.LastName ?? "",
                          RequestType = t.RequestType.Title,
                          Date = Date.GetPersianDate(t.Date, Date.DateStringType.Short)
                      }).ToList();
                    Result = Result.Union(Temp3).Distinct().ToList();
                }
                if (Temp.Count != 0)
                {
                    for (int i = 0; i < Temp.Count; i++)
                    {
                        if (Temp[i].ToTelephoneNo != null)
                        {
                            long? NewTel = Convert.ToInt64(Result[i].ToTelephoneNo);
                            Result = Result.Union(GetTelephoneRequestLogInfo(NewTel, null, null, Temp, null)).ToList();

                        }
                    }

                }
                return Result.Distinct().OrderBy(t => t.TelephoneNo).ToList();
            }
        }

        public static List<ADSLModemInformation> GetADSLRequestModemInformation(List<int> CityIDs,
                                                                         List<int> CenterIDs,
                                                                         List<int> ModemSatus,
                                                                         List<int> ModelIDs,
                                                                         List<int> ServiceGroupIDs,
                                                                         string MacAddress,
                                                                         string SerialNo,
                                                                         long TelNo,
                                                                         DateTime? FromDate,
                                                                         DateTime? ToDate,
                                                                         DateTime? FromPaymentDate,
                                                                         DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLModemProperties.Join(context.ADSLRequests, m => m.ID, a => a.ModemSerialNoID, (m, a) => new { ADSLModemProperty = m, ADSlRequest = a })
                    .Join(context.RequestPayments, s => s.ADSlRequest.ID, r => r.RequestID, (s, r) => new { ModemADSLRequest = s, RequestPayment = r })
                    .Join(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, u => u.ID, (a, u) => new { ALL = a, ADSLSellerAgentUser = u })
                    .Where(t =>
                    (CityIDs.Count == 0 || CityIDs.Contains((int)t.ALL.ModemADSLRequest.ADSLModemProperty.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ALL.ModemADSLRequest.ADSLModemProperty.CenterID))
                    && (ModemSatus.Count == 0 || ModemSatus.Contains((int)t.ALL.ModemADSLRequest.ADSLModemProperty.Status))
                    && (ModelIDs.Count == 0 || ModelIDs.Contains((int)t.ALL.ModemADSLRequest.ADSLModemProperty.ADSLModem.ID))
                    && (string.IsNullOrEmpty(MacAddress) || MacAddress.Contains(t.ALL.ModemADSLRequest.ADSLModemProperty.MACAddress))
                    && (string.IsNullOrEmpty(SerialNo) || SerialNo.Contains(t.ALL.ModemADSLRequest.ADSLModemProperty.SerialNo))
                    && (TelNo == -1 || TelNo == t.ALL.ModemADSLRequest.ADSLModemProperty.TelephoneNo)
                    && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ALL.ModemADSLRequest.ADSlRequest.ADSLService.GroupID))
                    && (!FromDate.HasValue || FromDate <= t.ALL.ModemADSLRequest.ADSlRequest.Request.EndDate)
                    && (!ToDate.HasValue || ToDate >= t.ALL.ModemADSLRequest.ADSlRequest.Request.EndDate)
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.ALL.RequestPayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.ALL.RequestPayment.PaymentDate)
                    && (t.ALL.RequestPayment.BaseCostID == 40)).Select(t => new ADSLModemInformation
                    {
                        Model = t.ALL.ModemADSLRequest.ADSLModemProperty.ADSLModem.Title + "_" + t.ALL.ModemADSLRequest.ADSLModemProperty.ADSLModem.Model,
                        TelNo = t.ALL.ModemADSLRequest.ADSlRequest.Request.TelephoneNo.ToString(),
                        CustomerName = t.ALL.ModemADSLRequest.ADSlRequest.Request.Customer.FirstNameOrTitle + " " + t.ALL.ModemADSLRequest.ADSlRequest.Request.Customer.LastName,
                        CityName = t.ALL.ModemADSLRequest.ADSLModemProperty.Center.Region.City.Name,
                        Center = t.ALL.ModemADSLRequest.ADSLModemProperty.Center.CenterName,
                        SerialNo = t.ALL.ModemADSLRequest.ADSLModemProperty.SerialNo,
                        MacAddress = t.ALL.ModemADSLRequest.ADSLModemProperty.MACAddress,
                        Satus = DB.GetEnumDescriptionByValue(typeof(DB.ADSLModemStatus), t.ALL.ModemADSLRequest.ADSLModemProperty.Status),
                        FlowControl = "ثبت نام ADSL",
                        ADSLSellerAgent = t.ADSLSellerAgentUser.ADSLSellerAgent.Title,
                        ADSLSellerAgentUser = t.ADSLSellerAgentUser.User.FirstName + " " + t.ADSLSellerAgentUser.User.LastName,
                        DayeriDate = Date.GetPersianDate(t.ALL.ModemADSLRequest.ADSlRequest.Request.EndDate, Date.DateStringType.Short),
                        PaymentDate = Date.GetPersianDate(t.ALL.RequestPayment.PaymentDate, Date.DateStringType.Short)

                    }).ToList();
            }
        }

        public static List<ADSLModemInformation> GetADSLChangeServiceModemInformation(List<int> CityIDs,
                                                            List<int> CenterIDs,
                                                            List<int> ModemSatus,
                                                            List<int> ModelIDs,
                                                            List<int> ServiceGroupIDs,
                                                            string MacAddress,
                                                            string SerialNo,
                                                            long TelNo,
                                                            DateTime? FromDate,
                                                            DateTime? ToDate,
                                                            DateTime? FromPaymentDate,
                                                            DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLModemProperties.Join(context.ADSLChangeServices, m => m.ADSLModemID, a => a.ModemID, (m, a) => new { ADSLModemProperty = m, ADSLChangeService = a })
                    .Join(context.RequestPayments, s => s.ADSLChangeService.ID, r => r.RequestID, (s, r) => new { ModemADSLRequest = s, RequestPayment = r })
                    .Join(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, u => u.ID, (a, u) => new { ALL = a, ADSLSellerAgentUser = u })
                    .Where(t =>
                    (CityIDs.Count == 0 || CityIDs.Contains((int)t.ALL.ModemADSLRequest.ADSLModemProperty.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ALL.ModemADSLRequest.ADSLModemProperty.CenterID))
                    && (ModemSatus.Count == 0 || ModemSatus.Contains((int)t.ALL.ModemADSLRequest.ADSLModemProperty.Status))
                    && (ModelIDs.Count == 0 || ModelIDs.Contains((int)t.ALL.ModemADSLRequest.ADSLModemProperty.ADSLModem.ID))
                    && (string.IsNullOrEmpty(MacAddress) || MacAddress.Contains(t.ALL.ModemADSLRequest.ADSLModemProperty.MACAddress))
                    && (string.IsNullOrEmpty(SerialNo) || SerialNo.Contains(t.ALL.ModemADSLRequest.ADSLModemProperty.SerialNo))
                    && (TelNo == -1 || TelNo == t.ALL.ModemADSLRequest.ADSLModemProperty.TelephoneNo)
                    && (ServiceGroupIDs.Count == 0 || ServiceGroupIDs.Contains((int)t.ALL.ModemADSLRequest.ADSLChangeService.ADSLService.GroupID))
                    && (!FromDate.HasValue || FromDate <= t.ALL.ModemADSLRequest.ADSLChangeService.Request.EndDate)
                    && (!ToDate.HasValue || ToDate >= t.ALL.ModemADSLRequest.ADSLChangeService.Request.EndDate)
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.ALL.RequestPayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.ALL.RequestPayment.PaymentDate)
                    && (t.ALL.RequestPayment.BaseCostID == 40)).Select(t => new ADSLModemInformation
                    {
                        Model = t.ALL.ModemADSLRequest.ADSLModemProperty.ADSLModem.Title + "_" + t.ALL.ModemADSLRequest.ADSLModemProperty.ADSLModem.Model,
                        TelNo = t.ALL.ModemADSLRequest.ADSLChangeService.Request.TelephoneNo.ToString(),
                        CustomerName = t.ALL.ModemADSLRequest.ADSLChangeService.Request.Customer.FirstNameOrTitle + " " + t.ALL.ModemADSLRequest.ADSLChangeService.Request.Customer.LastName,
                        CityName = t.ALL.ModemADSLRequest.ADSLModemProperty.Center.Region.City.Name,
                        Center = t.ALL.ModemADSLRequest.ADSLModemProperty.Center.CenterName,
                        SerialNo = t.ALL.ModemADSLRequest.ADSLModemProperty.SerialNo,
                        MacAddress = t.ALL.ModemADSLRequest.ADSLModemProperty.MACAddress,
                        Satus = DB.GetEnumDescriptionByValue(typeof(DB.ADSLModemStatus), t.ALL.ModemADSLRequest.ADSLModemProperty.Status),
                        FlowControl = "شارژ مجدد",
                        ADSLSellerAgent = t.ADSLSellerAgentUser.ADSLSellerAgent.Title,
                        ADSLSellerAgentUser = t.ADSLSellerAgentUser.User.FirstName + " " + t.ADSLSellerAgentUser.User.LastName,
                        DayeriDate = Date.GetPersianDate(t.ALL.ModemADSLRequest.ADSLChangeService.Request.EndDate, Date.DateStringType.Short),
                        PaymentDate = Date.GetPersianDate(t.ALL.RequestPayment.PaymentDate, Date.DateStringType.Short)

                    }).ToList();
            }
        }

        public static List<ADSLSellerAgentcomissionInfo> GetADSLSellerAgentComissionADSLRequestCashInfo(List<int> CityIDs, List<int> CenterIDs, List<int> ADSLSellerAgentIDs,
                                                                                            List<int> ADSLSellerAgentUserIDs, DateTime? FromPaymentDate, DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLRequests.Join(context.RequestPayments, a => a.ID, r => r.RequestID, (a, r) => new { ADSLRequest = a, RequestPayment = r })
                    .Join(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, u => u.ID, (a, u) => new { ALL = a, ADSLSellerAgentUser = u })
                    .Where(t =>
                    (CityIDs.Count == 0 || CityIDs.Contains((int)t.ALL.ADSLRequest.Request.Center.Region.CityID))
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLSellerAgentUser.ADSLSellerAgent.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ALL.ADSLRequest.Request.CenterID))
                    && (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ADSLSellerAgentUser.SellerAgentID))
                    && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ADSLSellerAgentUser.ID))
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.ALL.RequestPayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.ALL.RequestPayment.PaymentDate)
                    && (t.ALL.RequestPayment.BaseCostID == 44)
                    && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.ALL.RequestPayment.UserID))
                    && (t.ALL.RequestPayment.PaymentType == (byte)DB.PaymentType.Cash))
                    .GroupBy(t => new
                    {
                        ADSLSellerAgentName = t.ADSLSellerAgentUser.ADSLSellerAgent.Title,
                        ADSLSellerAgentUserName = t.ADSLSellerAgentUser.User.FirstName + " " + t.ADSLSellerAgentUser.User.LastName,
                        CityName = t.ALL.ADSLRequest.Request.Center.Region.City.Name,
                        //CenterName = t.ALL.ADSLRequest.Request.Center.CenterName,
                        Comission = t.ADSLSellerAgentUser.ADSLSellerAgent.Percent1Month

                    }
                    //).Select(t => new
                    //{
                    //    First = t.OrderBy(x => x.ADSLSellerAgentUser.ADSLSellerAgent.ID).First(),
                    //    CashServiceAmount = t.Sum(x => x.ALL.RequestPayment.AmountSum),

                    //}
                    ).Select(t => new ADSLSellerAgentcomissionInfo
                    {
                        ADSLSellerAgentName = t.Key.ADSLSellerAgentName,
                        ADSLSellerAgentUserName = t.Key.ADSLSellerAgentUserName,
                        CityName = t.Key.CityName,
                        //CenterName = t.Key.CenterName,
                        Comission = t.Key.Comission,
                        CashServiceAmount = t.Sum(x => x.ALL.RequestPayment.AmountSum),
                        CashServiceComission = t.Sum(x => x.ALL.RequestPayment.AmountSum) * (t.Key.Comission * 0.01)

                    }).ToList();
            }
        }

        public static List<ADSLSellerAgentcomissionInfo> GetADSLSellerAgentComissionADSLRequestTrafficCashInfo(List<int> CityIDs, List<int> CenterIDs, List<int> ADSLSellerAgentIDs,
                                                                                        List<int> ADSLSellerAgentUserIDs, DateTime? FromPaymentDate, DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLRequests.Join(context.RequestPayments, a => a.ID, r => r.RequestID, (a, r) => new { ADSLRequest = a, RequestPayment = r })
                    .Join(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, u => u.ID, (a, u) => new { ALL = a, ADSLSellerAgentUser = u })
                    .Where(t =>
                    (CityIDs.Count == 0 || CityIDs.Contains((int)t.ALL.ADSLRequest.Request.Center.Region.CityID))
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLSellerAgentUser.ADSLSellerAgent.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ALL.ADSLRequest.Request.CenterID))
                    && (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ADSLSellerAgentUser.SellerAgentID))
                    && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ADSLSellerAgentUser.ID))
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.ALL.RequestPayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.ALL.RequestPayment.PaymentDate)
                    && (t.ALL.RequestPayment.BaseCostID == 46)
                    && (t.ALL.ADSLRequest.AdditionalServiceID != null)
                    && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.ALL.RequestPayment.UserID))
                    && (t.ALL.RequestPayment.PaymentType == (byte)DB.PaymentType.Cash))
                    .GroupBy(t => new
                    {
                        ADSLSellerAgentName = t.ADSLSellerAgentUser.ADSLSellerAgent.Title,
                        ADSLSellerAgentUserName = t.ADSLSellerAgentUser.User.FirstName + " " + t.ADSLSellerAgentUser.User.LastName,
                        CityName = t.ALL.ADSLRequest.Request.Center.Region.City.Name,
                        //CenterName = t.ALL.ADSLRequest.Request.Center.CenterName,
                        Comission = t.ADSLSellerAgentUser.ADSLSellerAgent.Percent1Month

                    }
                    //).Select(t => new
                    //{
                    //    First = t.OrderBy(x => x.ADSLSellerAgentUser.ADSLSellerAgent.ID).First(),
                    //    CashServiceAmount = t.Sum(x => x.ALL.RequestPayment.AmountSum),

                    //}
                    ).Select(t => new ADSLSellerAgentcomissionInfo
                    {
                        ADSLSellerAgentName = t.Key.ADSLSellerAgentName,
                        ADSLSellerAgentUserName = t.Key.ADSLSellerAgentUserName,
                        CityName = t.Key.CityName,
                        //CenterName = t.Key.CenterName,
                        Comission = t.Key.Comission,
                        TrafficAmount = t.Sum(x => x.ALL.RequestPayment.AmountSum),
                        TrafficComissionAmount = t.Sum(x => x.ALL.RequestPayment.AmountSum) * (t.Key.Comission * 0.01)

                    }).ToList();
            }
        }

        public static List<ADSLSellerAgentcomissionInfo> GetADSLSellerAgentComissionADSLSellTrafficCashInfo(List<int> CityIDs, List<int> CenterIDs, List<int> ADSLSellerAgentIDs,
                                                                                       List<int> ADSLSellerAgentUserIDs, DateTime? FromPaymentDate, DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLSellTraffics.Join(context.RequestPayments, a => a.ID, r => r.RequestID, (a, r) => new { ADSLSellTraffic = a, RequestPayment = r })
                    .Join(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, u => u.ID, (a, u) => new { ALL = a, ADSLSellerAgentUser = u })
                    .Where(t =>
                    (CityIDs.Count == 0 || CityIDs.Contains((int)t.ALL.ADSLSellTraffic.Request.Center.Region.CityID))
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLSellerAgentUser.ADSLSellerAgent.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ALL.ADSLSellTraffic.Request.CenterID))
                    && (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ADSLSellerAgentUser.SellerAgentID))
                    && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ADSLSellerAgentUser.ID))
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.ALL.RequestPayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.ALL.RequestPayment.PaymentDate)
                    && (t.ALL.RequestPayment.BaseCostID == 105)
                    && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.ALL.RequestPayment.UserID))
                    && (t.ALL.RequestPayment.PaymentType == (byte)DB.PaymentType.Cash))
                    .GroupBy(t => new
                    {
                        ADSLSellerAgentName = t.ADSLSellerAgentUser.ADSLSellerAgent.Title,
                        ADSLSellerAgentUserName = t.ADSLSellerAgentUser.User.FirstName + " " + t.ADSLSellerAgentUser.User.LastName,
                        CityName = t.ALL.ADSLSellTraffic.Request.Center.Region.City.Name,
                        //CenterName = t.ALL.ADSLSellTraffic.Request.Center.CenterName,
                        Comission = t.ADSLSellerAgentUser.ADSLSellerAgent.Percent1Month

                    }
                    //).Select(t => new
                    //{
                    //    First = t.OrderBy(x => x.ADSLSellerAgentUser.ADSLSellerAgent.ID).First(),
                    //    CashServiceAmount = t.Sum(x => x.ALL.RequestPayment.AmountSum),

                    //}
                    ).Select(t => new ADSLSellerAgentcomissionInfo
                    {
                        ADSLSellerAgentName = t.Key.ADSLSellerAgentName,
                        ADSLSellerAgentUserName = t.Key.ADSLSellerAgentUserName,
                        CityName = t.Key.CityName,
                        //CenterName = t.Key.CenterName,
                        Comission = t.Key.Comission,
                        TrafficAmount = t.Sum(x => x.ALL.RequestPayment.AmountSum),
                        TrafficComissionAmount = t.Sum(x => x.ALL.RequestPayment.AmountSum) * (t.Key.Comission * 0.01)

                    }).ToList();
            }
        }

        public static List<ADSLSellerAgentcomissionInfo> GetADSLSellerAgentComissionADSLChangeServiceCashInfo(List<int> CityIDs, List<int> CenterIDs, List<int> ADSLSellerAgentIDs,
                                                                                            List<int> ADSLSellerAgentUserIDs, DateTime? FromPaymentDate, DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLChangeServices.Join(context.RequestPayments, a => a.ID, r => r.RequestID, (a, r) => new { ADSLChangeService = a, RequestPayment = r })
                    .Join(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, u => u.ID, (a, u) => new { ALL = a, ADSLSellerAgentUser = u })
                    .Where(t =>
                    (CityIDs.Count == 0 || CityIDs.Contains((int)t.ALL.ADSLChangeService.Request.Center.Region.CityID))
                    && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ADSLSellerAgentUser.ADSLSellerAgent.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ALL.ADSLChangeService.Request.CenterID))
                    && (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ADSLSellerAgentUser.SellerAgentID))
                    && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ADSLSellerAgentUser.ID))
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.ALL.RequestPayment.PaymentDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.ALL.RequestPayment.PaymentDate)
                    && (t.ALL.RequestPayment.BaseCostID == 44 || t.ALL.RequestPayment.BaseCostID == 45)
                    && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.ALL.RequestPayment.UserID))
                    && (t.ALL.RequestPayment.PaymentType == (byte)DB.PaymentType.Cash))
                    .GroupBy(t => new
                    {
                        ADSLSellerAgentName = t.ADSLSellerAgentUser.ADSLSellerAgent.Title,
                        ADSLSellerAgentUserName = t.ADSLSellerAgentUser.User.FirstName + " " + t.ADSLSellerAgentUser.User.LastName,
                        CityName = t.ALL.ADSLChangeService.Request.Center.Region.City.Name,
                        //CenterName = t.ALL.ADSLChangeService.Request.Center.CenterName,
                        Comission = t.ADSLSellerAgentUser.ADSLSellerAgent.Percent1Month

                    }
                    //).Select(t => new
                    //{
                    //    First = t.OrderBy(x => x.ADSLSellerAgentUser.ADSLSellerAgent.ID).First(),
                    //    CashServiceAmount = t.Sum(x => x.ALL.RequestPayment.AmountSum),

                    //}
                    ).Select(t => new ADSLSellerAgentcomissionInfo
                    {
                        ADSLSellerAgentName = t.Key.ADSLSellerAgentName,
                        ADSLSellerAgentUserName = t.Key.ADSLSellerAgentUserName,
                        CityName = t.Key.CityName,
                        //CenterName = t.Key.CenterName,
                        Comission = t.Key.Comission,
                        CashServiceAmount = t.Sum(x => x.ALL.RequestPayment.AmountSum),
                        CashServiceComission = t.Sum(x => x.ALL.RequestPayment.AmountSum) * t.Key.Comission

                    }).ToList();
            }
        }

        public static List<ADSLSellerAgentcomissionInfo> GetADSLSellerAgentComissionADSLRequestInstalmentInfo(List<int> CityIDs, List<int> CenterIDs, List<int> ADSLSellerAgentIDs,
                                                                                           List<int> ADSLSellerAgentUserIDs, DateTime? FromPaymentDate, DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLRequests.Join(context.RequestPayments, a => a.ID, r => r.RequestID, (a, r) => new { ADSLRequest = a, RequestPayment = r })
                    .Join(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, u => u.ID, (a, u) => new { ALL = a, ADSLSellerAgentUser = u })
                    .Join(context.InstallmentRequestPayments, a => a.ALL.RequestPayment.ID, p => p.RequestPaymentID, (a, p) => new { ALLJoin = a, InstallmetRequestPayment = p })
                    .Where(t =>
                    (CityIDs.Count == 0 || CityIDs.Contains((int)t.ALLJoin.ALL.ADSLRequest.Request.Center.Region.CityID))
                      && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ALLJoin.ADSLSellerAgentUser.ADSLSellerAgent.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ALLJoin.ALL.ADSLRequest.Request.CenterID))
                    && (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ALLJoin.ADSLSellerAgentUser.SellerAgentID))
                    && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ALLJoin.ADSLSellerAgentUser.ID))
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.InstallmetRequestPayment.StartDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.InstallmetRequestPayment.StartDate)
                    && (t.ALLJoin.ALL.RequestPayment.BaseCostID == 44)
                        //&& (t.InstallmetRequestPayment.IsPaid == true)
                    && (t.ALLJoin.ALL.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)
                    && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.ALLJoin.ALL.RequestPayment.UserID)))
                    .GroupBy(t => new
                    {
                        ADSLSellerAgentName = t.ALLJoin.ADSLSellerAgentUser.ADSLSellerAgent.Title,
                        ADSLSellerAgentUserName = t.ALLJoin.ADSLSellerAgentUser.User.FirstName + " " + t.ALLJoin.ADSLSellerAgentUser.User.LastName,
                        CityName = t.ALLJoin.ALL.ADSLRequest.Request.Center.Region.City.Name,
                        //CenterName = t.ALLJoin.ALL.ADSLRequest.Request.Center.CenterName,
                        Comission = t.ALLJoin.ADSLSellerAgentUser.ADSLSellerAgent.Percent1Month

                    }
                    //).Select(t => new
                    //{
                    //    First=t.OrderBy(x=>x.ADSLSellerAgentUser.ADSLSellerAgent.ID).First(),
                    //    InstalmentServiceAmount = t.Sum(x => x.ALL.RequestPayment.AmountSum),

                    //}
                    ).Select(t => new ADSLSellerAgentcomissionInfo
                    {
                        ADSLSellerAgentName = t.Key.ADSLSellerAgentName,
                        ADSLSellerAgentUserName = t.Key.ADSLSellerAgentUserName,
                        CityName = t.Key.CityName,
                        //CenterName = t.Key.CenterName,
                        Comission = t.Key.Comission,
                        InstalmentServiceAmount = t.Sum(x => x.ALLJoin.ALL.RequestPayment.AmountSum),
                        InstalmentServiceComission = t.Sum(x => x.ALLJoin.ALL.RequestPayment.AmountSum) * (t.Key.Comission * 0.01)

                    }).ToList();
            }
        }

        public static List<ADSLSellerAgentcomissionInfo> GetADSLSellerAgentComissionADSLChangeServiceInstalmentInfo(List<int> CityIDs, List<int> CenterIDs, List<int> ADSLSellerAgentIDs,
                                                                                                 List<int> ADSLSellerAgentUserIDs, DateTime? FromPaymentDate, DateTime? ToPaymentDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.ADSLChangeServices.Join(context.RequestPayments, a => a.ID, r => r.RequestID, (a, r) => new { ADSLChangeService = a, RequestPayment = r })
                    .Join(context.ADSLSellerAgentUsers, a => a.RequestPayment.UserID, u => u.ID, (a, u) => new { ALL = a, ADSLSellerAgentUser = u })
                    .Join(context.InstallmentRequestPayments, a => a.ALL.RequestPayment.ID, p => p.RequestPaymentID, (a, p) => new { ALLJoin = a, InstallmetRequestPayment = p })
                    .Where(t =>
                    (CityIDs.Count == 0 || CityIDs.Contains((int)t.ALLJoin.ALL.ADSLChangeService.Request.Center.Region.CityID))
                      && (CityIDs.Count == 0 || CityIDs.Contains((int)t.ALLJoin.ADSLSellerAgentUser.ADSLSellerAgent.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.ALLJoin.ALL.ADSLChangeService.Request.CenterID))
                    && (ADSLSellerAgentIDs.Count == 0 || ADSLSellerAgentIDs.Contains((int)t.ALLJoin.ADSLSellerAgentUser.SellerAgentID))
                    && (ADSLSellerAgentUserIDs.Count == 0 || ADSLSellerAgentUserIDs.Contains((int)t.ALLJoin.ADSLSellerAgentUser.ID))
                    && (!FromPaymentDate.HasValue || FromPaymentDate <= t.InstallmetRequestPayment.StartDate)
                    && (!ToPaymentDate.HasValue || ToPaymentDate >= t.InstallmetRequestPayment.StartDate)
                    && (t.ALLJoin.ALL.RequestPayment.BaseCostID == 44)
                        //&& (t.InstallmetRequestPayment.IsPaid == true)
                    && (t.ALLJoin.ALL.RequestPayment.PaymentType == (byte)DB.PaymentType.Instalment)
                    && (context.ADSLSellerAgentUsers.Select(x => x.ID).Contains((int)t.ALLJoin.ALL.RequestPayment.UserID)))
                    .GroupBy(t => new
                    {
                        ADSLSellerAgentName = t.ALLJoin.ADSLSellerAgentUser.ADSLSellerAgent.Title,
                        ADSLSellerAgentUserName = t.ALLJoin.ADSLSellerAgentUser.User.FirstName + " " + t.ALLJoin.ADSLSellerAgentUser.User.LastName,
                        CityName = t.ALLJoin.ALL.ADSLChangeService.Request.Center.Region.City.Name,
                        //CenterName = t.ALLJoin.ALL.ADSLChangeService.Request.Center.CenterName,
                        Comission = t.ALLJoin.ADSLSellerAgentUser.ADSLSellerAgent.Percent1Month

                    }
                    //).Select(t => new
                    //{
                    //    First = t.OrderBy(x => x.ADSLSellerAgentUser.ADSLSellerAgent.ID).First(),
                    //    InstalmentServiceAmount = t.Sum(x => x.ALL.RequestPayment.AmountSum),

                    //}
                    ).Select(t => new ADSLSellerAgentcomissionInfo
                    {
                        ADSLSellerAgentName = t.Key.ADSLSellerAgentName,
                        ADSLSellerAgentUserName = t.Key.ADSLSellerAgentUserName,
                        CityName = t.Key.CityName,
                        //CenterName = t.Key.CenterName,
                        Comission = t.Key.Comission,
                        InstalmentServiceAmount = t.Sum(x => x.ALLJoin.ALL.RequestPayment.AmountSum),
                        InstalmentServiceComission = t.Sum(x => x.ALLJoin.ALL.RequestPayment.AmountSum) * (t.Key.Comission * 0.01)

                    }).ToList();
            }
        }

        public static CustomerPersonalInfo GetCustomerPersonalLastIDInfo(long TelNo)
        {
            using (MainDataContext context = new MainDataContext())
            {
                //string query = @";with CTE as (select Request.ID,EndDate,Request.TelephoneNo as TelephoneNo, Row_Number() over(Partition By EndDate Order By EndDate DESC) as RowNo from Request inner join InstallRequest on InstallRequest.RequestId=Request.ID) select * from CTE where RowNo=1";
                //if (TelNo != -1)
                //    query += "and  TelephoneNo ='" + TelNo + "'";

                string query = @";with CTE as 
                        (select Request.ID,EndDate,Request.TelephoneNo as TelephoneNo, Row_Number() over(Partition By Request.TelephoneNo Order By EndDate DESC) as RowNo
                        from Request inner join InstallRequest on InstallRequest.RequestId=Request.ID";
                if (TelNo != -1)
                    query += @" WHERE TelephoneNo ='" + TelNo + "') select  * from CTE where RowNo = 1 ";

                CustomerPersonalInfo result = context.ExecuteQuery<CustomerPersonalInfo>(string.Format(query)).SingleOrDefault();
                return result;
            }
        }

        public static CustomerPersonalInfo GetCustomerPersonalLastStatusInfo(long id)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.CutAndEstablishes.Where(t =>
                    (t.ID == id)).Select(t => new CustomerPersonalInfo
                    {
                        Status = DB.GetEnumDescriptionByValue(typeof(DB.RequestType), t.Status)

                    }).SingleOrDefault();
            }
        }

        public static CustomerPersonalInfo GetCustomerPersonalInfo(long? TelNo)
        {
            using (MainDataContext context = new MainDataContext())
            {
                //return 
                List<CustomerPersonalInfo> rr = new List<CustomerPersonalInfo>();
                CustomerPersonalInfo g = new CustomerPersonalInfo();
                g = context.Requests
                   .Join(context.InstallRequests, r => r.ID, i => i.RequestID, (r, i) => new { Request = r, InstallRequest = i })
                   .Join(context.Telephones, r => r.Request.TelephoneNo, t => t.TelephoneNo, (r, t) => new { Request = r.Request, Telephone = t, InstallRequest = r.InstallRequest })
                   .Join(context.RequestPayments, r => r.Request.ID, t => t.RequestID, (r, t) => new { ALL = r, RequestPayment = t })
                   .Where(t =>
                          (t.ALL.Request.TelephoneNo == TelNo)
                         )
                   .Select(t => new CustomerPersonalInfo
                   {
                       StringTelephoneNo = t.ALL.Request.TelephoneNo.ToString(),
                       InstallDate = Date.GetPersianDate(t.ALL.InstallRequest.InstallationDate, Date.DateStringType.Short),
                       CustomerName = t.ALL.Request.Customer.FirstNameOrTitle,
                       CustomerLastName = t.ALL.Request.Customer.LastName,
                       CustomerFatherName = t.ALL.Request.Customer.FatherName,
                       MelliCode = t.ALL.Request.Customer.NationalCodeOrRecordNo,
                       InsertDate = Date.GetPersianDate(t.ALL.Request.InsertDate, Date.DateStringType.Short),
                       CustomerGroup = t.ALL.InstallRequest.CustomerGroup.Title,
                       CustomerType = t.ALL.InstallRequest.CustomerType.Title,

                       ChargingType = DB.GetEnumDescriptionByValue(typeof(DB.ChargingGroup), t.ALL.InstallRequest.ChargingType),
                       possessionType = DB.GetEnumDescriptionByValue(typeof(DB.PossessionType), t.ALL.InstallRequest.PosessionType),
                       OrderType = DB.GetEnumDescriptionByValue(typeof(DB.OrderType), t.ALL.InstallRequest.OrderType),
                       Address = t.ALL.Telephone.Address.AddressContent,
                       CityName = t.ALL.Request.Center.Region.City.Name,
                       Center = t.ALL.Request.Center.CenterName,
                       PostalCode = t.ALL.Telephone.Address.PostalCode,
                       EndDate = t.ALL.Request.EndDate,
                       TelephoneClass = DB.GetEnumDescriptionByValue(typeof(DB.ClassTelephone), t.ALL.Telephone.ClassTelephone),
                       CutAndEstablishStatus = DB.GetEnumDescriptionByValue(typeof(DB.CutOrEstablishStatusForTelephone), t.ALL.Telephone.CutAndEstablishStatus),
                       DayeriTakePossessionStatus = DB.GetEnumDescriptionByValue(typeof(DB.TelephoneStatus), t.ALL.Telephone.Status),
                       BirthDate = Date.GetPersianDate(t.ALL.Request.Customer.BirthDateOrRecordDate, Date.DateStringType.Short)

                   })
                   .OrderByDescending(t => t.EndDate).ToList()
                     .Take(1)
                     .SingleOrDefault();
                return g;
            }
        }

        public static CustomerPersonalInfo GetCustomerPersonalRequestPaymentInstalmentInfo(long ID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.RequestPayments.Where(t => t.RequestID == ID)
                    .GroupBy(t => new
                    {
                        ID = t.RequestID
                    }).Select(t => new CustomerPersonalInfo
                   {

                       AmountSum = t.Sum(x => x.AmountSum)

                   }).SingleOrDefault();
            }
        }

        public static List<CustomerPersonalInfo> GetCustomerPersonalRequestPaymentInstallmentInfo(long ID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Installments.Where(t => t.ID == ID)
                   .Select(t => new CustomerPersonalInfo
                    {
                        InstallmentCount = t.InstallmentCount.ToString(),
                        Amount = t.Amount.ToString()

                    }).ToList();
            }
        }

        public static CustomerPersonalInfo GetCustomerPersonalInfoTakePossessionReason(long? TelNo)
        {
            using (MainDataContext context = new MainDataContext())
            {


                string query = @";with CTE as (select Request.ID,TakePossession.CauseOfTakePossessionID, Row_Number() over(Partition By EndDate Order By EndDate DESC) as RowNo from Request inner join TakePossession on TakePossession.id=Request.ID)";
                if (TelNo != -1)
                    query += "and  Request.TelephoneNo ='" + TelNo + "'";
                query += ", CTEDischarge as (select * from CTE where RowNo=1) Select Name from CTEDischarge inner join CauseOfTakePossession on CauseOfTakePossession.id=CTEDischarge.CauseOfTakePossessionID";

                CustomerPersonalInfo result = context.ExecuteQuery<CustomerPersonalInfo>(string.Format(query)).SingleOrDefault();
                return result;

            }
        }

        public static CustomerPersonalInfo GetCustomerPersonalInfoOuterBandMetraj(long? TelNo)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.VisitAddresses.Join(context.Requests, v => v.RequestID, r => r.ID, (v, r) => new { VisitAddress = v, Request = r })
                    .Where(t => t.Request.TelephoneNo == TelNo).Select(t => new CustomerPersonalInfo
                    {
                        MetrajOuterBand = t.VisitAddress.OutBoundMeter.ToString()
                    }).SingleOrDefault();
            }
        }

        public static CustomerPersonalInfo GetCustomerPersonalInfoRequestPayment(long? LastRequestID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.RequestPayments.Where(t => t.RequestID == LastRequestID).GroupBy(t => new
                    {
                        ID = t.RequestID
                    }).Select(t => new CustomerPersonalInfo
                    {
                        AmountSum = t.Sum(x => x.AmountSum)
                    }).SingleOrDefault();
            }
        }

        public static List<CustomerPersonalInfo> GetCustomerPersonalInfoRequestPaymentList(long? RequestID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.RequestPayments.Where(t => t.RequestID == RequestID)
                    .Select(t => new CustomerPersonalInfo
                    {
                        Amount = t.AmountSum.ToString(),
                        PaymentType = DB.GetEnumDescriptionByValue(typeof(DB.PaymentType), t.PaymentType),
                        PaymentDate = Date.GetPersianDate(t.PaymentDate, Date.DateStringType.Short)

                    }).ToList();
            }
        }

        public static List<CustomerPersonalInfo> GetCustomerPersonalInfoInstalmentInfo(long RequestID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Installments.Where(t => t.ID == RequestID).Select(t => new CustomerPersonalInfo
                    {
                        InstallmentCount = t.InstallmentCount.ToString(),
                        Amount = t.Amount.ToString(),
                        PaymentType = "اقساط"
                    }).ToList();
            }
        }

        public static List<ADSLSellerAgentInfo> GetADSLSellerAgentUserCreditInfo(List<int> cityIDs, List<int> ADSlSellerAgentIDs, List<int> ADSLSelleragentUserIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ADSLSellerAgentUsers
                    .Join(context.ADSLSellerAgentUserRecharges, a => a.ID, u => u.ID, (a, u) => new { ADSLSellerAgentUser = a, ADSlSellerAgentUSerRecharge = u }).Where
                    (t =>
                        ((ADSlSellerAgentIDs.Count == 0) || (ADSlSellerAgentIDs.Contains((int)t.ADSLSellerAgentUser.SellerAgentID)) &&
                        (ADSLSelleragentUserIDs.Count == 0 || ADSLSelleragentUserIDs.Contains((int)t.ADSLSellerAgentUser.ID))
                       && ((cityIDs.Count == 0) || (cityIDs.Contains((int)t.ADSLSellerAgentUser.ADSLSellerAgent.CityID)))
                            //&& ((Groups.Count == 0) || (Groups.Contains((int)t.ADSLSellerAgent.GroupID)))
                        )).GroupBy(t => new
                        {
                            ADSlSllerAgnetID = t.ADSLSellerAgentUser.ID,
                            Title = t.ADSLSellerAgentUser.User.FirstName + " " + t.ADSLSellerAgentUser.User.LastName,
                            ADSLSellerAgentName = t.ADSLSellerAgentUser.ADSLSellerAgent.Title,
                            CreditCash = t.ADSLSellerAgentUser.CreditCash,
                            CreditCashRemain = t.ADSLSellerAgentUser.CreditCashRemain,
                            CreditCashUse = t.ADSLSellerAgentUser.CreditCashUse,
                            CityName = t.ADSLSellerAgentUser.ADSLSellerAgent.City.Name,

                        }).Select(t => new
                        {
                            First = t.OrderByDescending(x => x.ADSlSellerAgentUSerRecharge.ID).First(),
                            Cost = t.Sum(x => x.ADSlSellerAgentUSerRecharge.Cost),
                        })


                        .Select
                        (t => new ADSLSellerAgentInfo
                        {
                            CityName = t.First.ADSLSellerAgentUser.ADSLSellerAgent.City.Name,
                            Title = t.First.ADSLSellerAgentUser.User.FirstName + " " + t.First.ADSLSellerAgentUser.User.LastName,
                            ADSLSellerAgentName = t.First.ADSLSellerAgentUser.ADSLSellerAgent.Title,
                            CreditCash = t.First.ADSLSellerAgentUser.CreditCash,
                            CreditCashRemain = t.First.ADSLSellerAgentUser.CreditCashRemain,
                            CreditCashUse = t.First.ADSLSellerAgentUser.CreditCashRemain,
                            RechargedCost = t.Cost,
                            ISSellModem = t.First.ADSLSellerAgentUser.ADSLSellerAgent.IsSellModem,
                            RechargeDate = Date.GetPersianDate(t.First.ADSlSellerAgentUSerRecharge.InsertDate, Date.DateStringType.Short),
                            UserRecharge = t.First.ADSlSellerAgentUSerRecharge.User.FirstName + " " + t.First.ADSlSellerAgentUSerRecharge.User.LastName

                        }
                         ).ToList();
            }
        }





        public static List<E1LinkReportInfo> GetMDFE1Dayeri(List<long> RequestIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.E1Links.Where(t => RequestIDs.Contains((long)t.ReqeustID))
                    .Select(t => new E1LinkReportInfo
                    {
                        //BuchtRadif = t.Request.InvestigatePossibilities.Take(1).SingleOrDefault().Bucht.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString(),
                        BuchtRadif = t.Request.InvestigatePossibilities.Where(ip => ip.ID == t.InvestigatePossibilityID).Select(ip => ip.Bucht.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo).SingleOrDefault().ToString(),
                        //BuchtTabaghe = t.Request.InvestigatePossibilities.Take(1).SingleOrDefault().Bucht.VerticalMDFRow.VerticalRowNo.ToString(),
                        BuchtTabaghe = t.Request.InvestigatePossibilities.Where(ip => ip.ID == t.InvestigatePossibilityID).Select(ip => ip.Bucht.VerticalMDFRow.VerticalRowNo).SingleOrDefault().ToString(),
                        //BuchtEttesali = t.Request.InvestigatePossibilities.Take(1).SingleOrDefault().Bucht.BuchtNo.ToString(),
                        BuchtEttesali = t.Request.InvestigatePossibilities.Where(ip => ip.ID == t.InvestigatePossibilityID).Select(ip => ip.Bucht.BuchtNo).SingleOrDefault().ToString(),
                        OtherRadif = t.Bucht1.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString(),
                        OtherTabaghe = t.Bucht1.VerticalMDFRow.VerticalRowNo.ToString(),
                        OtherEttesali = t.Bucht1.BuchtNo.ToString(),
                        AccessRadif = t.Bucht2.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString(),
                        AccessTabaghe = t.Bucht2.VerticalMDFRow.VerticalRowNo.ToString(),
                        AccessEttesali = t.Bucht2.BuchtNo.ToString(),
                        TelephoneNo = t.Request.TelephoneNo.ToString(),
                        RequestID = t.ReqeustID
                    }).ToList();
            }
        }

        public static List<ADSLInstalmentRequestPaymentTelephoneNoInfo> GetInstallmentRequestPaymentByTelephoneNoInfo(List<int> CityIDs, List<int> CenterIDs,
                                                                                                                       DateTime? FromDate, DateTime? ToDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.InstallmentRequestPayments.Where(t =>
                    (CityIDs.Count == 0 || CityIDs.Contains((int)t.RequestPayment.Request.Center.Region.CityID))
                   && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.RequestPayment.Request.CenterID))
                    && (!FromDate.HasValue || FromDate <= t.EndDate)
                    && (!ToDate.HasValue || ToDate > t.EndDate))
                    .GroupBy(t => new
                    {
                        TelephoneNo = t.TelephoneNo.ToString()
                    })
                    .Select(t => new ADSLInstalmentRequestPaymentTelephoneNoInfo
                    {
                        TelephoneNo = t.Key.TelephoneNo,
                        Cost = t.Sum(x => x.Cost)
                    }).ToList();
            }
        }

        public static List<uspReportMDFExchangeCabinuteInputCentralResult> GetTranslationPostInputMDF(List<long> requestIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.uspReportMDFExchangeCabinuteInputCentral(string.Join(",", requestIDs)).ToList();
                //return context.TranslationPostInputs.Join(context.TranslationPostInputConnections, i => i.RequestID, c => c.RequestID, (i, c) => new { TranslationPostInput = i, TranslationPostInputConnection = c })
                //   .Join(context.Buchts, a => a.TranslationPostInputConnection.CabinetInputID, b => b.CabinetInputID, (a, b) => new { All = a, NewBucht = b })
                //   .Join(context.Buchts, s => s.All.TranslationPostInputConnection.ConnectionID, b => b.ConnectionID, (s, b) => new { ALLOld = s, OldBucht = b })
                //   .Join(context.PostContacts, a => a.ALLOld.All.TranslationPostInputConnection.NewConnectionID, p => p.ID, (a, p) => new { ALLJoin = a, NewPostContact = p })
                //    .Where(t => t.ALLJoin.ALLOld.All.TranslationPostInput.RequestID == RequestID)
                //    .Select(t => new TranslationPostInputMDFInfo
                //    {
                //        OldRadif = t.ALLJoin.OldBucht.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString(),
                //        OldTabaghe = t.ALLJoin.OldBucht.VerticalMDFRow.VerticalRowNo.ToString(),
                //        OldEttesali = t.ALLJoin.ALLOld.All.TranslationPostInputConnection.PostContact.ConnectionNo.ToString(),
                //        OldMDF = t.ALLJoin.OldBucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Number.ToString(),

                //        NewRadif = t.ALLJoin.ALLOld.NewBucht.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString(),
                //        NewTabaghe = t.ALLJoin.ALLOld.NewBucht.VerticalMDFRow.VerticalRowNo.ToString(),
                //        NewEttesali = t.NewPostContact.ConnectionNo.ToString(),
                //        NewMDF = t.ALLJoin.ALLOld.NewBucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Number.ToString()

                //    }).ToList();
            }
        }

        public static List<TranslationPostInputMDFInfo> GetFromOldExchangeCabinetInputInfo(long ID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return (context.ExchangeCabinetInputs.Join(context.Cabinets, e => e.OldCabinetID, c => c.ID, (e, c) => new { OldExchangeCabinetInput = e, OldCabinet = c })
                    .Join(context.CabinetInputs, a => a.OldExchangeCabinetInput.FromOldCabinetInputID, c => c.ID, (a, c) => new { ALLOld = a, OldCabinetInput = c }))
                     .Join(context.Buchts, z => z.OldCabinetInput.ID, b => b.CabinetInputID, (z, b) => new { ALlJoin = z, OldBucht = b })
                     .Where(t => t.ALlJoin.ALLOld.OldExchangeCabinetInput.ID == ID)
                    .Select(t => new TranslationPostInputMDFInfo
                    {
                        OldRadif = t.OldBucht.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString(),
                        OldTabaghe = t.OldBucht.VerticalMDFRow.VerticalRowNo.ToString(),
                        OldEttesali = t.OldBucht.PostContact.ConnectionNo.ToString(),
                        OldMDF = t.OldBucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Number.ToString(),
                        BuchtID = t.OldBucht.ID,
                        TelephoneNo = t.ALlJoin.ALLOld.OldExchangeCabinetInput.Request.TelephoneNo,


                    }).ToList();
            }
        }

        public static List<TranslationPostInputMDFInfo> GetToOldExchangeCabinetInputInfo(long ID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return (context.ExchangeCabinetInputs.Join(context.Cabinets, e => e.OldCabinetID, c => c.ID, (e, c) => new { OldExchangeCabinetInput = e, OldCabinet = c })
                    .Join(context.CabinetInputs, a => a.OldExchangeCabinetInput.ToOldCabinetInputID, c => c.ID, (a, c) => new { ALLOld = a, OldCabinetInput = c }))
                     .Join(context.Buchts, z => z.OldCabinetInput.ID, b => b.CabinetInputID, (z, b) => new { ALlJoin = z, OldBucht = b })
                     .Where(t => t.ALlJoin.ALLOld.OldExchangeCabinetInput.ID == ID)
                    .Select(t => new TranslationPostInputMDFInfo
                    {
                        OldRadif = t.OldBucht.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString(),
                        OldTabaghe = t.OldBucht.VerticalMDFRow.VerticalRowNo.ToString(),
                        OldEttesali = t.OldBucht.PostContact.ConnectionNo.ToString(),
                        OldMDF = t.OldBucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Number.ToString(),

                    }).ToList();
            }
        }

        public static List<TranslationPostInputMDFInfo> GetFromNewExchangeCabinetInputInfo(long ID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return (context.ExchangeCabinetInputs.Join(context.Cabinets, e => e.NewCabinetID, c => c.ID, (e, c) => new { NewExchangeCabinetInput = e, NewCabinet = c })
                    .Join(context.CabinetInputs, a => a.NewExchangeCabinetInput.FromNewCabinetInputID, c => c.ID, (a, c) => new { ALLNew = a, NewCabinetInput = c }))
                     .Join(context.Buchts, z => z.NewCabinetInput.ID, b => b.CabinetInputID, (z, b) => new { ALlJoin = z, NewBucht = b })
                     .Where(t => t.ALlJoin.ALLNew.NewExchangeCabinetInput.ID == ID)
                    .Select(t => new TranslationPostInputMDFInfo
                    {
                        NewRadif = t.NewBucht.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString(),
                        NewTabaghe = t.NewBucht.VerticalMDFRow.VerticalRowNo.ToString(),
                        NewEttesali = t.NewBucht.PostContact.ConnectionNo.ToString(),
                        NewMDF = t.NewBucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Number.ToString(),

                    }).ToList();
            }
        }

        public static List<TranslationPostInputMDFInfo> GetToNewExchangeCabinetInputInfo(long ID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return (context.ExchangeCabinetInputs.Join(context.Cabinets, e => e.NewCabinetID, c => c.ID, (e, c) => new { NewExchangeCabinetInput = e, NewCabinet = c })
                    .Join(context.CabinetInputs, a => a.NewExchangeCabinetInput.ToNewCabinetInputID, c => c.ID, (a, c) => new { ALLNew = a, NewCabinetInput = c }))
                     .Join(context.Buchts, z => z.NewCabinetInput.ID, b => b.CabinetInputID, (z, b) => new { ALlJoin = z, NewBucht = b })
                     .Where(t => t.ALlJoin.ALLNew.NewExchangeCabinetInput.ID == ID)
                    .Select(t => new TranslationPostInputMDFInfo
                    {
                        NewRadif = t.NewBucht.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString(),
                        NewTabaghe = t.NewBucht.VerticalMDFRow.VerticalRowNo.ToString(),
                        NewEttesali = t.NewBucht.PostContact.ConnectionNo.ToString(),
                        NewMDF = t.NewBucht.VerticalMDFRow.VerticalMDFColumn.MDFFrame.MDF.Number.ToString(),

                    }).ToList();
            }
        }

        public static List<ExchangeCabinetInputInfo> GetFromNewNetworkingExchangeCabinetInputInfo(long ID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ExchangeCabinetInputs.Join(context.Cabinets, e => e.NewCabinetID, c => c.ID, (e, c) => new { NewExchangeCabinetInput = e, NewCabinet = c })
                      .Join(context.Buchts, z => z.NewExchangeCabinetInput.CabinetInput2.ID, b => b.CabinetInputID, (z, b) => new { ALlJoin = z, NewBucht = b })
                      .Where(t => t.ALlJoin.NewExchangeCabinetInput.ID == ID)
                     .Select(t => new ExchangeCabinetInputInfo
                     {
                         NewCafu = t.ALlJoin.NewExchangeCabinetInput.CabinetInput2.Cabinet.CabinetNumber.ToString(),
                         NewPost = t.ALlJoin.NewExchangeCabinetInput.Post.Number.ToString(),
                         NewEttesali = t.NewBucht.PostContact.ConnectionNo.ToString(),
                         NewMarkazi = t.ALlJoin.NewExchangeCabinetInput.CabinetInput2.InputNumber.ToString()

                     }).ToList();

            }
        }

        public static List<ExchangeCabinetInputInfo> GetToNewNetworkingExchangeCabinetInputInfo(long ID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ExchangeCabinetInputs.Join(context.Cabinets, e => e.NewCabinetID, c => c.ID, (e, c) => new { NewExchangeCabinetInput = e, NewCabinet = c })
                      .Join(context.Buchts, z => z.NewExchangeCabinetInput.CabinetInput3.ID, b => b.CabinetInputID, (z, b) => new { ALlJoin = z, NewBucht = b })
                      .Where(t => t.ALlJoin.NewExchangeCabinetInput.ID == ID)
                     .Select(t => new ExchangeCabinetInputInfo
                     {
                         NewCafu = t.ALlJoin.NewExchangeCabinetInput.CabinetInput2.Cabinet.CabinetNumber.ToString(),
                         NewPost = t.ALlJoin.NewExchangeCabinetInput.Post.Number.ToString(),
                         NewEttesali = t.NewBucht.PostContact.ConnectionNo.ToString(),
                         NewMarkazi = t.ALlJoin.NewExchangeCabinetInput.CabinetInput3.InputNumber.ToString()

                     }).ToList();

            }
        }

        public static List<ExchangeCabinetInputInfo> GetFromOldNetworkingExchangeCabinetInputInfo(long ID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ExchangeCabinetInputs.Join(context.Cabinets, e => e.OldCabinetID, c => c.ID, (e, c) => new { OldExchangeCabinetInput = e, OldCabinet = c })
                      .Join(context.Buchts, z => z.OldExchangeCabinetInput.CabinetInput.ID, b => b.CabinetInputID, (z, b) => new { ALlJoin = z, OldBucht = b })
                      .Where(t => t.ALlJoin.OldExchangeCabinetInput.ID == ID)
                     .Select(t => new ExchangeCabinetInputInfo
                     {
                         OldCafu = t.ALlJoin.OldExchangeCabinetInput.CabinetInput.Cabinet.CabinetNumber.ToString(),
                         OldPost = t.ALlJoin.OldExchangeCabinetInput.Post.Number.ToString(),
                         OldEttesali = t.OldBucht.PostContact.ConnectionNo.ToString(),
                         OldMarkazi = t.ALlJoin.OldExchangeCabinetInput.CabinetInput.InputNumber.ToString()

                     }).ToList();

            }
        }

        public static List<ExchangeCabinetInputInfo> GetToOldNetworkingExchangeCabinetInputInfo(long ID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ExchangeCabinetInputs.Join(context.Cabinets, e => e.OldCabinetID, c => c.ID, (e, c) => new { OldExchangeCabinetInput = e, OldCabinet = c })
                      .Join(context.Buchts, z => z.OldExchangeCabinetInput.CabinetInput1.ID, b => b.CabinetInputID, (z, b) => new { ALlJoin = z, OldBucht = b })
                      .Where(t => t.ALlJoin.OldExchangeCabinetInput.ID == ID)
                     .Select(t => new ExchangeCabinetInputInfo
                     {
                         OldCafu = t.ALlJoin.OldExchangeCabinetInput.CabinetInput1.Cabinet.CabinetNumber.ToString(),
                         OldPost = t.ALlJoin.OldExchangeCabinetInput.Post.Number.ToString(),
                         OldEttesali = t.OldBucht.PostContact.ConnectionNo.ToString(),
                         OldMarkazi = t.ALlJoin.OldExchangeCabinetInput.CabinetInput1.InputNumber.ToString()

                     }).ToList();

            }
        }

        public static List<TranslationPostInputMDFInfo> GetBuchtFromBuchtIDToBuchtID(long firstBucht, long lastBucht, byte status)
        {
            using (MainDataContext context = new MainDataContext())
            {

                IQueryable<Bucht> fromBucht = context.Buchts.Where(t => t.ID == firstBucht);
                IQueryable<Bucht> toBucht = context.Buchts.Where(t => t.ID == lastBucht);

                return context.Buchts.Where(t => t.MDFRowID == fromBucht.SingleOrDefault().MDFRowID && t.BuchtNo >= fromBucht.SingleOrDefault().BuchtNo && t.BuchtNo <= toBucht.SingleOrDefault().BuchtNo)
                    .Where(t => t.Status == status && t.CabinetInputID == null && t.CablePairID == null && t.ConnectionID == null)
                    .Select(t => new TranslationPostInputMDFInfo
                    {
                        NewRadif = t.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString(),
                        NewTabaghe = t.VerticalMDFRow.VerticalRowNo.ToString(),
                        NewEttesali = t.BuchtNo.ToString()

                    }).OrderBy(t => t.NewEttesali).ToList();
            }
        }

        public static List<TranslationPostInputMDFInfo> GetBuchtByCabinetInputIDs(List<long> cabinetInputIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Buchts.Where(t => cabinetInputIDs.Contains((long)t.CabinetInputID))
                    .Select(t => new TranslationPostInputMDFInfo
                    {
                        OldRadif = t.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString(),
                        OldTabaghe = t.VerticalMDFRow.VerticalRowNo.ToString(),
                        OldEttesali = t.BuchtNo.ToString(),
                        InputNumber = t.CabinetInput.InputNumber.ToString()
                    })
                    .OrderBy(t => t.InputNumber).ToList();
            }
        }

        public static List<CenterToCenterTranslationChooseNumberInfo> GetCenterToCenterTranslationCustomerInfo(long RequestID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.CenterToCenterTranslationTelephones.Where(t => t.RequestID == RequestID)
                    .Select(t => new CenterToCenterTranslationChooseNumberInfo
                    {
                        TelephonNo = t.TelephoneNo,
                        NewTelephonNo = t.NewTelephoneNo,
                        CustomerName = t.Telephone1.Customer.FirstNameOrTitle.ToString() + " " + (t.Telephone1.Customer.LastName ?? "")

                    }).ToList();
            }
        }

        public static List<TranslationPostInputMDFInfo> GetBuchtSwitchingMDFInfo(List<long> RequestsId)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.BuchtSwitchings.Where(t => RequestsId.Contains(t.ID)).Select(t => new TranslationPostInputMDFInfo
                    {
                        OldRadif = t.Bucht.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString(),
                        OldTabaghe = t.Bucht.VerticalMDFRow.VerticalRowNo.ToString(),
                        OldEttesali = t.Bucht.BuchtNo.ToString(),
                        Telephone = context.Requests.Where(r => r.RequestTypeID == (int)DB.RequestType.BuchtSwiching && r.ID == t.ID).Select(r => r.TelephoneNo).SingleOrDefault(),
                        NewRadif = t.Bucht1.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString(),
                        NewTabaghe = t.Bucht1.VerticalMDFRow.VerticalRowNo.ToString(),
                        NewEttesali = t.Bucht1.BuchtNo.ToString(),
                        NewOtherRadif = t.Bucht2.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString(),
                        NewOtherTabaghe = t.Bucht2.VerticalMDFRow.VerticalRowNo.ToString(),
                        NewOtherEttesali = t.Bucht2.BuchtNo.ToString()


                    }).ToList();
            }
        }

        public static List<ExchangeCabinetInputInfo> GetBuchtSwitchingNetworkInfo(long RequestID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.BuchtSwitchings
                    .GroupJoin(context.PostContacts, b => b.PostContactID, p => p.ID, (b, p) => new { BuchtSwitching = b, PostContact = p })
                    .SelectMany(x => x.PostContact.DefaultIfEmpty(), (x, t2) => new { BuchtSwitching = x.BuchtSwitching, PostContact = t2 })
                    .Where(t => t.BuchtSwitching.ID == RequestID)
                    .Select(t => new ExchangeCabinetInputInfo
                    {
                        OldCafu = t.BuchtSwitching.Bucht.CabinetInput.Cabinet.CabinetNumber.ToString(),
                        OldMarkazi = t.BuchtSwitching.Bucht.CabinetInput.InputNumber.ToString(),
                        OldPost = t.BuchtSwitching.Bucht.PostContact.Post.Number.ToString(),
                        OldEttesali = t.BuchtSwitching.Bucht.PostContact.ConnectionNo.ToString(),

                        NewCafu = t.BuchtSwitching.Bucht1.CabinetInput.Cabinet.CabinetNumber.ToString(),
                        NewMarkazi = t.BuchtSwitching.Bucht1.CabinetInput.InputNumber.ToString(),
                        NewPost = t.PostContact.Post.Number.ToString(),
                        NewEttesali = t.PostContact.ConnectionNo.ToString()

                    }).ToList();
            }
        }

        public static List<TranslationPostInfo> GetTranslationPostInfo(List<int> CityIDs, List<int> CenterIDs,
                                                                       DateTime? FromDate, DateTime? ToDate,
                                                                        int OldPost, int NewPost)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.TranslationPosts.Where(t =>
                    (CityIDs.Count == 0 || CityIDs.Contains((int)t.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.Request.CenterID))
                    && (!FromDate.HasValue || FromDate <= t.InsertDate.Date)
                    && (!ToDate.HasValue || ToDate >= t.InsertDate.Date)
                    && (OldPost == -1 || OldPost == t.Post.Number)
                    && (NewPost == -1 || NewPost == t.Post.Number)).Select(t => new TranslationPostInfo
                    {
                        OldCafu = t.Cabinet.CabinetNumber.ToString(),
                        OldPost = t.Post.Number.ToString(),
                        NewPost = t.Post1.Number.ToString(),
                        FromEttesali = t.PostContact.ConnectionNo.ToString(),
                        ToEttesali = t.PostContact1.ConnectionNo.ToString(),
                        InsertDate = Date.GetPersianDate(t.InsertDate, Date.DateStringType.Short),
                        CompletationDate = Date.GetPersianDate(t.CompletionDate, Date.DateStringType.Short)
                    }).ToList();
            }
        }

        public static List<TranslationPostInputInfo> GetTranslationPostInputInfo(List<int> CityIDs, List<int> CenterIDs,
                                                                                DateTime? FromDate, DateTime? ToDate,
                                                                                int OldCafu, int NewCafu)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.TranslationPostInputs.Where(t =>
                    (CityIDs.Count == 0 || CityIDs.Contains((int)t.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.Request.CenterID))
                    && (!FromDate.HasValue || FromDate <= t.InsertDate.Value.Date)
                    && (!ToDate.HasValue || ToDate >= t.InsertDate.Value.Date)
                    && (OldCafu == -1 || OldCafu == t.Cabinet.CabinetNumber)
                    && (NewCafu == -1 || NewCafu == t.Cabinet1.CabinetNumber)).Select(t => new TranslationPostInputInfo
                    {
                        OldCafu = t.Cabinet.CabinetNumber.ToString(),
                        NewCafu = t.Cabinet1.CabinetNumber.ToString(),
                        OldPost = t.Post.Number.ToString(),
                        NewPost = t.Post1.Number.ToString(),
                        InsertDate = Date.GetPersianDate(t.InsertDate, Date.DateStringType.Short),
                        MDFDate = (Date.GetPersianDate(t.MDFAccomplishmentDate, Date.DateStringType.Short)),
                        NetworkDate = (Date.GetPersianDate(t.NetworkAccomplishmentDate, Date.DateStringType.Short)),
                        MDFTime = t.MDFAccomplishmentTime,
                        NetworkTime = t.NetworkAccomplishmentTime

                    }).ToList();
            }
        }

        public static List<ExchangeCabinetInputReportInfo> GetExchangeCabinetInputInfo(List<int> CityIDs, List<int> CenterIDs
                                                                                , DateTime? FromDate, DateTime? ToDate,
                                                                                int OldCafu, int NewCafu)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ExchangeCabinetInputs.Where(t =>
                    (CityIDs.Count == 0 || CityIDs.Contains((int)t.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.Request.CenterID))
                    && (!FromDate.HasValue || FromDate <= t.InsertDate.Date)
                    && (!ToDate.HasValue || ToDate >= t.InsertDate.Date)
                    && (OldCafu == -1 || OldCafu == t.Cabinet.CabinetNumber)
                    && (NewCafu == -1 || NewCafu == t.Cabinet1.CabinetNumber)).Select(t => new ExchangeCabinetInputReportInfo
                    {
                        OldCabinet = t.Cabinet.CabinetNumber.ToString(),
                        NewCabinet = t.Cabinet1.CabinetNumber.ToString(),

                        FromOldcabinetInput = t.CabinetInput.InputNumber.ToString(),
                        ToOldCabinetInput = t.CabinetInput1.InputNumber.ToString(),

                        FromNewCabinetInput = t.CabinetInput2.InputNumber.ToString(),
                        ToNewCabinetInput = t.CabinetInput3.InputNumber.ToString(),

                        FromPost = t.Post.Number.ToString(),
                        MDFDate = Date.GetPersianDate(t.MDFAccomplishmentDate, Date.DateStringType.Short),
                        MDFTime = t.MDFAccomplishmentTime,
                        NetworkDate = Date.GetPersianDate(t.NetworkAccomplishmentDate, Date.DateStringType.Short),
                        NetworkTime = t.NetworkAccomplishmentTime,
                        InsertDate = Date.GetPersianDate(t.InsertDate, Date.DateStringType.Short)
                    }).ToList();
            }
        }

        public static List<ExchangeCentralMDFCableReportInfo> GetExchangeCentralMDFCableInfo(List<int> CityIDs, List<int> CenterIDs,
                                                                                      DateTime? FromDate, DateTime? ToDate,
                                                                                      int FromCabinet, int ToCabinet)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.ExchangeCentralCableMDFs.Where(t =>
                    (CityIDs.Count == 0 || CityIDs.Contains((int)t.Bucht.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.Bucht.CenterID))
                    && (!FromDate.HasValue || FromDate <= t.InsertDate.Date)
                    && (!ToDate.HasValue || ToDate >= t.InsertDate.Date)).Select(t => new ExchangeCentralMDFCableReportInfo
                    {
                        FromRadif = t.Bucht.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString(),
                        FromTabaghe = t.Bucht.VerticalMDFRow.VerticalRowNo.ToString(),
                        FromEttesali = t.Bucht.BuchtNo.ToString(),

                        ToRadif = t.Bucht1.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString(),
                        ToTabaghe = t.Bucht1.VerticalMDFRow.VerticalRowNo.ToString(),
                        ToEttesali = t.Bucht1.BuchtNo.ToString()
                    }).ToList();
            }
        }

        public static List<CenterToCenterTranslationReportInfo> GetCenterToCenterTranslationInfo(List<int> CityIDs, List<int> CenterIDs,
                                                                                           DateTime? FromDate, DateTime? ToDate,
                                                                                           int FromCabinet, int ToCabinet)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.CenterToCenterTranslations.Where(t =>
                    (CityIDs.Count == 0 || CityIDs.Contains((int)t.Request.Center.Region.CityID))
                    && (CenterIDs.Count == 0 || CenterIDs.Contains((int)t.Request.CenterID))
                    && (!FromDate.HasValue || FromDate <= t.InsertDate.Date)
                    && (!ToDate.HasValue || ToDate >= t.InsertDate.Date)
                    && (FromCabinet == -1 || FromCabinet == t.Cabinet.CabinetNumber)
                    && (ToCabinet == -1 || ToCabinet == t.Cabinet1.CabinetNumber)).Select(t => new CenterToCenterTranslationReportInfo
                    {
                        SourceCenter = t.Center.CenterName,
                        TargetCenter = t.Center1.CenterName,
                        OldCabinet = t.Cabinet.CabinetNumber.ToString(),
                        NewCabinet = t.Cabinet1.CabinetNumber.ToString(),
                        FromOldCabinetInput = t.CabinetInput.InputNumber.ToString(),
                        ToOldCabinetInput = t.CabinetInput1.InputNumber.ToString(),
                        FromNewCabinetInput = t.CabinetInput2.InputNumber.ToString(),
                        ToNewCabinetInput = t.CabinetInput3.InputNumber.ToString(),
                        InsertDate = Date.GetPersianDate(t.InsertDate, Date.DateStringType.Short),
                        AccomplishmentDate = Date.GetPersianDate(t.AccomplishmentDate, Date.DateStringType.Short),
                        AccomplishmentTime = t.AccomplishmentTime

                    }).ToList();
            }

        }

        public static List<BuchtSwitchingReportInfo> GetBuchtSwitchingReportInfo(DateTime? FromDate, DateTime? ToDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.BuchtSwitchings.Where(t =>
                    (!FromDate.HasValue || FromDate <= t.InsertDate.Value.Date)
                    && (!ToDate.HasValue || ToDate >= t.InsertDate.Value.Date)).Select(t => new BuchtSwitchingReportInfo
                    {
                        OldRadif = t.Bucht.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString(),
                        OldTabaghe = t.Bucht.VerticalMDFRow.VerticalRowNo.ToString(),
                        OldEttesali = t.Bucht.BuchtNo.ToString(),

                        NewRadif = t.Bucht1.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo.ToString(),
                        NewTabaghe = t.Bucht1.VerticalMDFRow.VerticalRowNo.ToString(),
                        NewEttesali = t.Bucht1.BuchtNo.ToString(),

                        MDFAccomplishmentDate = Date.GetPersianDate(t.MDFAccomplishmentDate, Date.DateStringType.Short),
                        MDFAccomplishmentTime = t.MDFAccomplishmentTime,

                        NetworkAccmplishmentDate = Date.GetPersianDate(t.NetworkAccomplishmentDate, Date.DateStringType.Short),
                        NetworkAccomplishmentTime = t.NetworkAccomplishmentTime,

                        CauseOfChange = t.CauseBuchtSwitching.Name
                    }).ToList();
            }
        }

        public static List<CenterCabinetInfo> GetCabinetGenerallInfoReport(List<int> cites, List<int> centers, string cabinetNumber)
        {
            using (MainDataContext context = new MainDataContext())
            {
                IQueryable<CenterCabinetInfo> query = context.Cabinets.Where(t =>
                                         (cites.Count() == 0 || cites.Contains(t.Center.Region.CityID)) &&
                                        (centers.Count() == 0 || centers.Contains(t.CenterID)) &&
                                        (cabinetNumber == null || t.CabinetNumber.ToString() == cabinetNumber))
                                         .Select(t => new CenterCabinetInfo
                                         {
                                             Address = t.Address,
                                             City = t.Center.Region.City.Name,
                                             Center = t.Center.CenterName,
                                             CabinetNumber = t.CabinetNumber,
                                             CabinetTypeID = t.CabinetType.CabinetTypeName,
                                             CabinetInputCount = t.CabinetInputs.Count(),
                                             PostCount = t.Posts.Count(),
                                             ReservedPostCount = t.Posts.Where(t2 => t2.PostTypeID == (byte)DB.PostStatus.ReserveForExchange).Count(),
                                         }).OrderBy(t => t.CabinetNumber);

                return query.ToList();


            }
        }


        public static List<PostInfo> GetPostInfoTotal(List<int> cites, List<int> centers, List<int> cabinets, List<int> posts, List<int> PostTypeIDs
                                   , List<int> ABTypeIDs
                                   , int Distance
                                   , int IsBorderMeter
                                   , string PostalCode
                                   , int OutBorderMeter
                                   , string Address
                                   , List<int> StatusPostIDs
                                   , List<int> PostGroupIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Posts.Where(t => (cites.Count() == 0 || cites.Contains(t.Cabinet.Center.Region.CityID)) &&
                                               (centers.Count() == 0 || centers.Contains(t.Cabinet.CenterID)) &&
                                               (cabinets.Count() == 0 || cabinets.Contains(t.CabinetID)) &&
                                               (posts.Count() == 0 || posts.Contains(t.ID)) &&
                                               (PostTypeIDs.Count == 0 || PostTypeIDs.Contains(t.PostTypeID)) &&
                                               (ABTypeIDs.Count == 0 || ABTypeIDs.Contains((int)t.AorBType)) &&
                                               (Distance == 0 || Distance == t.Distance) &&
                                               ((IsBorderMeter == 0 && t.IsOutBorder == false) || (IsBorderMeter == 1 && t.IsOutBorder == true && (OutBorderMeter == 0 || OutBorderMeter == (int)t.OutBorderMeter))) &&
                                               (Address == (string)null || Address == t.Address) &&
                                               (PostalCode == (string)null || PostalCode == t.PostalCode) &&
                                               (StatusPostIDs.Count == 0 || StatusPostIDs.Contains(t.Status)))
                                               .Select(t => new PostInfo
                                               {
                                                   Center = t.Cabinet.Center.CenterName,
                                                   Address = t.Address,
                                                   Capacity = t.Capacity.ToString(),
                                                   Distance = t.Distance.ToString(),
                                                   Number = t.Number,
                                                   PostalCode = t.PostalCode,
                                                   PostTypeID = t.PostTypeID,
                                                   PostTypeName = t.PostType.PostTypeName,
                                                   Status = t.Status.ToString(),
                                                   PostGroupNo = t.PostGroup.GroupNo.ToString(),
                                                   PostGroupID = t.PostGroup.ID.ToString(),
                                                   City = t.Cabinet.Center.Region.City.Name,
                                                   ABType = t.AORBPostAndCabinet.Name,


                                               }
                        ).OrderBy(t => t.Number)
                        .ToList();


            }
        }

        public static List<PostContactInfo> GetPCMPostContactInfo(List<int> CenterIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.PostContacts
                    .Where(t => (CenterIDs.Count == 0 || CenterIDs.Contains(t.Post.Cabinet.CenterID)) && t.ConnectionType == (int)DB.PostContactConnectionType.PCMRemote)
                    .Select(t => new PostContactInfo
                    {
                        CabinetNumber = t.Post.Cabinet.CabinetNumber,
                        CabinetID = t.Post.Cabinet.ID,
                        Center = t.Post.Cabinet.Center.CenterName,
                        City = t.Post.Cabinet.Center.Region.City.Name,
                        ConnectionNo = t.ConnectionNo,
                        AORBType = t.Post.AORBPostAndCabinet.Name,
                        ConnectionType = t.ConnectionType,
                        PostID = t.Post.ID,
                        Status = t.Status,
                        ID = t.ID,
                        Address = t.Post.Address,
                        PostNumber = t.Post.Number
                    })
                    .ToList();
            }
        }

        //TOOD:rad
        public static List<PCMPostInfo> GetPCMPostInfo(List<int> cities, List<int> centers, List<int> cabinets, List<int> posts)
        {
            using (MainDataContext context = new MainDataContext())
            {
                var query = context.PostContacts

                                   .GroupJoin(context.Buchts, pc => pc.ID, b => b.ConnectionID, (pc, b) => new { Bucht = pc.Buchts, PostContact = b })
                                   .SelectMany(pc => pc.Bucht.DefaultIfEmpty(), (pc, b) => new { PostContacts = pc.PostContact, Buchts = b })

                                   .GroupJoin(context.Telephones, b => b.Buchts.SwitchPortID, t => t.SwitchPortID, (b, t) => new { Telephone = t, Buchts = b, PostContacts = b.PostContacts })
                                   .SelectMany(x => x.Telephone.DefaultIfEmpty(), (t1, t2) => new { Bucht = t1.Buchts.Buchts, PostContact = t1.PostContacts, Telephone = t2 })

                                   .Where(t =>
                                           (cities.Count == 0 || cities.Contains(t.Bucht.CabinetInput.Cabinet.Center.Region.CityID)) &&
                                           (centers.Count == 0 || centers.Contains(t.Bucht.CabinetInput.Cabinet.CenterID)) &&
                                           (cabinets.Count == 0 || cabinets.Contains(t.Bucht.CabinetInput.Cabinet.ID)) &&
                                           (posts.Count == 0 || posts.Contains(t.Bucht.PostContact.Post.ID)) &&
                                           (t.Bucht.PostContact.ConnectionType == (byte)DB.PostContactConnectionType.PCMRemote && !t.Bucht.PCMPortID.HasValue)
                                          )
                                   .Select(t => new PCMPostInfo
                                                 {
                                                     City = t.Bucht.PostContact.Post.Cabinet.Center.Region.City.Name,
                                                     ABType = t.Bucht.PostContact.Post.AORBPostAndCabinet.Name,
                                                     Center = t.Bucht.PostContact.Post.Cabinet.Center.CenterName,
                                                     CabinetNumber = t.Bucht.PostContact.Post.Cabinet.CabinetNumber,
                                                     PostNumber = t.Bucht.PostContact.Post.Number,
                                                     // TelephoneNo = (t.Telephone != null) ? t.Telephone.TelephoneNo : default(long?),
                                                     TelephoneNo = context.Buchts.Where(b => b.CabinetInputID == t.Bucht.CabinetInputID && b.BuchtTypeID == (int)DB.BuchtType.InLine && b.SwitchPortID.HasValue).OrderBy(b => b.BuchtNo).Take(1).Select(b => b.SwitchPort.Telephones.Take(1).SingleOrDefault().TelephoneNo).SingleOrDefault(),
                                                     CabinetInputNumber = t.Bucht.CabinetInput.InputNumber.ToString(),
                                                     PostContactConnectionNo = t.Bucht.PostContact.ConnectionNo.ToString(),
                                                     Bucht = "ردیف : " + t.Bucht.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo + " ، " + "طبقه : " + t.Bucht.VerticalMDFRow.VerticalRowNo + " ،  " + "اتصالی : " + t.Bucht.BuchtNo,
                                                     PcmBox = "رک:" + t.Bucht.Bucht1.PCMPort.PCM.PCMShelf.PCMRock.Number.ToString() + " ،  " + "شلف : " + t.Bucht.Bucht1.PCMPort.PCM.PCMShelf.Number.ToString() + " ،  " + "کارت : " + t.Bucht.Bucht1.PCMPort.PCM.Card.ToString() + " ،  " + "پورت : " + t.Bucht.Bucht1.PCMPort.PortNumber.ToString(),
                                                 }
                                          )
                                   .OfType<PCMPostInfo>();

                return query.ToList();

            }
        }

        public static List<WorkingTelephoneReport> GetWorkingTelephon(List<int> cityes, List<int> centers, List<int> cabinets, List<long> cabinetInputs, List<int> preCodes, List<int> posts)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.Telephones
                              .GroupJoin(context.Buchts, t => t.SwitchPortID, b => b.SwitchPortID, (t, b) => new { telephone = t, bucht = b })
                              .SelectMany(t => t.bucht.DefaultIfEmpty(), (t, b) => new { Telephone = t.telephone, Bucht = b })
                    //join with ADSLPAPPort
                             .GroupJoin(context.ADSLPAPPorts, b3 => b3.Telephone.TelephoneNo, p => p.TelephoneNo, (b3, p) => new { Bucht = b3.Bucht, ADSLPAPPort = p, Telephone = b3.Telephone })
                             .SelectMany(p1 => p1.ADSLPAPPort.DefaultIfEmpty(), (bp, p1) => new { bucht = bp.Bucht, Telephone = bp.Telephone, BuchtADSLPAPPort = p1 })

                              .Where(t => (t.Telephone.Status == (byte)DB.TelephoneStatus.Connecting) &&
                                         (preCodes.Count() == 0 || preCodes.Contains(t.Telephone.SwitchPrecode.ID)) &&
                                         (centers.Count() == 0 || centers.Contains(t.Telephone.SwitchPrecode.Switch.CenterID)) &&
                                         (cabinets.Count() == 0 || cabinets.Contains(t.bucht.CabinetInput.CabinetID)) &&
                                         (cabinetInputs.Count == 0 || cabinetInputs.Contains(t.bucht.CabinetInput.ID)) &&
                                         (cityes.Count() == 0 || cityes.Contains(t.Telephone.SwitchPrecode.Switch.Center.Region.CityID)) &&
                                         (posts.Count() == 0 || posts.Contains(t.bucht.PostContact.Post.ID))

                                     ).OrderBy(t => t.bucht.CabinetInput.Cabinet.CabinetNumber)
                                     .ThenBy(t => t.bucht.PostContact.Post.Number)
                                     .ThenBy(t => t.bucht.PostContact.ConnectionNo)
                                     .Select(t => new WorkingTelephoneReport
                                     {
                                         cityName = t.Telephone.SwitchPrecode.Switch.Center.Region.City.Name,
                                         CenterName = t.Telephone.SwitchPrecode.Switch.Center.CenterName,
                                         Telephone = t.Telephone.TelephoneNo,
                                         Post = t.bucht.PostContact.Post.Number,
                                         PostContact = t.bucht.PostContact.ConnectionNo,
                                         Cabinet = t.bucht.CabinetInput.Cabinet.CabinetNumber,
                                         CabinetInput = t.bucht.CabinetInput.InputNumber,
                                         Bucht = t.bucht.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo + "-" + t.bucht.VerticalMDFRow.VerticalRowNo + "-" + t.bucht.BuchtNo,
                                         PAPName = t.BuchtADSLPAPPort.PAPInfo.Title,
                                         ADSLBucht = "ردیف : " + t.BuchtADSLPAPPort.RowNo + " ، طبقه : " + t.BuchtADSLPAPPort.ColumnNo + " ، اتصالی : " + t.BuchtADSLPAPPort.BuchtNo

                                     }
                                     ).ToList();
            }
        }

        public static List<WarningHistoryReportInfo> GetWarningHistory(List<int> cities, List<int> centers, DateTime? fromDate, DateTime? toDate, long telephonNo, List<int> warningHistoryTypes)
        {
            using (MainDataContext context = new MainDataContext())
            {
                List<WarningHistoryReportInfo> result = new List<WarningHistoryReportInfo>();
                result = context.WarningHistories
                                .Where(t =>
                                            (cities.Count == 0 || cities.Contains(t.Telephone.Center.Region.CityID)) &&
                                            (centers.Count == 0 || centers.Contains(t.Telephone.CenterID)) &&
                                            (warningHistoryTypes.Count == 0 || warningHistoryTypes.Contains(t.Type)) &&
                                            (!fromDate.HasValue || t.Date.Date >= fromDate) &&
                                            (!toDate.HasValue || t.Date.Date <= toDate) &&
                                            (telephonNo == -1 || t.TelephonNo == telephonNo)
                                       )
                                .Select(t => new WarningHistoryReportInfo
                                                {
                                                    CustomerName = t.Telephone.Customer.FirstNameOrTitle + " " + t.Telephone.Customer.LastName,
                                                    cityName = t.Telephone.Center.Region.City.Name,
                                                    CenterName = t.Telephone.Center.CenterName,
                                                    Date = t.Date,
                                                    Time = t.Time,
                                                    InsertDate = t.InsertDate,
                                                    Telephone = t.TelephonNo,
                                                    ArrestLetterNo = t.ArrestLetterNo,
                                                    ArrestReference = t.ArrestReference,
                                                    ArrestLetterNoDate = t.ArrestLetterNoDate
                                                }
                                        )
                                .ToList();

                //اگر تاریخها، مقداری داشته باشند آنها را به معادل تاریخ شمسی تبدیل میکنیم
                //همچنین چنانچه شماره نامه بازداشت کننده و مرجع بازداشت کننده مقداری نداشته باشند، به جاِ آنها خط تیره میگذاریم
                result.ForEach((whr) =>
                                        {
                                            whr.ArrestLetterNoDatePersian = whr.ArrestLetterNoDate.HasValue ? whr.ArrestLetterNoDate.ToPersian(Date.DateStringType.Short) : "-----";
                                            whr.DatePersian = whr.Date.HasValue ? whr.Date.ToPersian(Date.DateStringType.Short) : "-----";
                                            whr.InsertDatePersian = whr.InsertDate.HasValue ? whr.InsertDate.ToPersian(Date.DateStringType.Short) : "-----";
                                            whr.ArrestLetterNo = !string.IsNullOrEmpty(whr.ArrestLetterNo) ? whr.ArrestLetterNo : "-----";
                                            whr.ArrestReference = !string.IsNullOrEmpty(whr.ArrestReference) ? whr.ArrestReference : "-----";
                                        }
                               );
                return result;
            }
        }

        public static List<RoundTelephoneReportInfo> GetRoundTelephoneInfo(List<int> cites, List<int> centers, List<int> cabinets, List<int> preCodes, List<int> status, List<int> roundtype)
        {
            using (MainDataContext context = new MainDataContext())
            {
                return context.Telephones
                              .GroupJoin(context.Buchts, t => t.SwitchPortID, b => b.SwitchPortID, (t, b) => new { t, b })
                              .SelectMany(t => t.b.DefaultIfEmpty(), (t, b) => new { Telephone = t, Bucht = b })
                              .Where(t => (t.Telephone.t.Status == (byte)DB.TelephoneStatus.Connecting) &&
                                         (preCodes.Count() == 0 || preCodes.Contains(t.Telephone.t.SwitchPrecode.ID)) &&
                                         (centers.Count() == 0 || centers.Contains(t.Telephone.t.SwitchPrecode.Switch.CenterID)) &&
                                         (cabinets.Count() == 0 || cabinets.Contains(t.Bucht.CabinetInput.CabinetID)) &&
                                         (status.Count() == 0 || status.Contains(t.Telephone.t.Status)) &&
                                         (roundtype.Count() == 0 || roundtype.Contains((int)t.Telephone.t.RoundType)) &&
                                         (cites.Count() == 0 || cites.Contains(t.Telephone.t.SwitchPrecode.Switch.Center.Region.CityID))
                                     ).Select(t => new RoundTelephoneReportInfo
                                     {
                                         cityName = t.Telephone.t.SwitchPrecode.Switch.Center.Region.City.Name,
                                         CenterName = t.Telephone.t.SwitchPrecode.Switch.Center.CenterName,
                                         Telephone = t.Telephone.t.TelephoneNo,
                                         Customer = (t.Telephone.t.Customer.FirstNameOrTitle ?? "") + " " + (t.Telephone.t.Customer.LastName ?? ""),
                                         Precode = t.Telephone.t.SwitchPrecode.SwitchPreNo.ToString(),
                                         RoundType = t.Telephone.t.RoundType.ToString(),
                                         Status = t.Telephone.t.Status.ToString()
                                     }
                                     ).OrderBy(t => t.Telephone).ToList();
            }
        }

        public static List<CustomerNationalCodeReportInfo> GetCustomerNationalCode(List<int> cites, List<int> centers, bool? isNationalCode)
        {
            using (MainDataContext context = new MainDataContext())
            {

                return context.Telephones.Where(t => (cites.Count == 0 || cites.Contains(t.Center.Region.CityID)) &&
                                                    (centers.Count == 0 || centers.Contains(t.CenterID)) &&
                                                    (isNationalCode == null || (isNationalCode == true ? ((t.Customer.NationalCodeOrRecordNo != null) && (t.Customer.NationalCodeOrRecordNo != string.Empty)) : ((t.Customer.NationalCodeOrRecordNo == null) || (t.Customer.NationalCodeOrRecordNo == string.Empty)))))
                                                    .Select(t => new CustomerNationalCodeReportInfo
                                                    {
                                                        cityName = t.Center.Region.City.Name,
                                                        CenterName = t.Center.CenterName,
                                                        TelephoneNo = t.TelephoneNo,
                                                        Agency = t.Customer.Agency,
                                                        AgencyNumber = t.Customer.AgencyNumber,
                                                        BirthCertificateID = t.Customer.BirthCertificateID,
                                                        //   BirthDateOrRecordDate = t.Customer.BirthDateOrRecordDate == null ? string.Empty : t.Customer.BirthDateOrRecordDate.ToPersian(Date.DateStringType.Short),
                                                        CustomerID = t.Customer.CustomerID,
                                                        Email = t.Customer.Email,
                                                        FatherName = t.Customer.FatherName,
                                                        FirstNameOrTitle = t.Customer.FirstNameOrTitle,
                                                        Gender = t.Customer.Gender != null ? (t.Customer.Gender == 0 ? "مرد" : "زن") : string.Empty,
                                                        //  InsertDate = t.Customer.InsertDate == null ? string.Empty : t.Customer.InsertDate.ToPersian(Date.DateStringType.Short),
                                                        IssuePlace = t.Customer.IssuePlace,
                                                        LastName = t.Customer.LastName,
                                                        MobileNo = t.Customer.MobileNo,
                                                        NationalCodeOrRecordNo = t.Customer.NationalCodeOrRecordNo,
                                                        NationalID = t.Customer.NationalID,
                                                        PersonType = t.Customer.PersonType != null ? (t.Customer.PersonType == 1 ? "حقوقی" : "حقیقی") : string.Empty,
                                                        UrgentTelNo = t.Customer.UrgentTelNo
                                                    }).ToList();

            }
        }

        public static List<WorkingTelephoneBaseDateReport> GetWorkingTelephonBaseDate(List<int> cites, List<int> centers, DateTime? FromDate, DateTime? ToDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                string query = @"SELECT       City.Name AS cityName , Center.CenterName AS CenterName, Telephone.TelephoneNo as Telephone,
                                              ( CAST(VerticalMDFColumn.VerticalCloumnNo AS VARCHAR) + '-' + CAST( VerticalMDFRow.VerticalRowNo AS VARCHAR) + '-' + CAST( Bucht.BuchtNo AS VARCHAR)) AS Bucht,
                                              Cabinet.CabinetNumber AS Cabinet,
                                               CAST( CabinetInput.InputNumber as bigint) AS CabinetInput,
                                              Post.Number AS Post,
                                              CAST(  PostContact.ConnectionNo as bigint) AS PostContact ,
                                              T2.InstallationDate ,
                                              '' as InstallationDatePersian

                                           
                                 FROM            VerticalMDFRow INNER JOIN
                                                        Bucht ON VerticalMDFRow.ID = Bucht.MDFRowID INNER JOIN
                                                        VerticalMDFColumn ON VerticalMDFRow.VerticalMDFColumnID = VerticalMDFColumn.ID INNER JOIN
                                                        MDFFrame ON VerticalMDFColumn.MDFFrameID = MDFFrame.ID INNER JOIN
                                                        MDF ON MDFFrame.MDFID = MDF.ID INNER JOIN
                                                        Telephone ON Bucht.SwitchPortID = Telephone.SwitchPortID INNER JOIN
                                                        CabinetInput ON Bucht.CabinetInputID = CabinetInput.ID INNER JOIN
                                                        Cabinet ON CabinetInput.CabinetID = Cabinet.ID INNER JOIN
                                                        PostContact ON Bucht.ConnectionID = PostContact.ID INNER JOIN
                                                        Post ON PostContact.PostID = Post.ID INNER JOIN
                                                        Center ON Telephone.CenterID = Center.ID INNER JOIN
                                                        Region ON Center.RegionID = Region.ID INNER JOIN
                                                        City ON Region.CityID = City.ID INNER JOIN
                                                        (
                                 			                    SELECT T.TelephoneNo , T.InstallationDate FROM
                                                                    (
                                                                     SELECT       ROW_NUMBER() OVER(PARTITION BY Request.TelephoneNo ORDER BY dbo.InstallRequest.InstallationDate) AS Row,  request.TelephoneNo , dbo.InstallRequest.InstallationDate
                                                                     FROM            Request INNER JOIN
                                                                                              InstallRequest ON Request.ID = InstallRequest.RequestID
                                                                     WHERE RequestTypeID = 1 AND TelephoneNo IS NOT NULL
                                                                    ) AS T WHERE T.Row = 1
                                 					  ) AS T2 ON T2.TelephoneNo = Telephone.TelephoneNo
                                 
                                 
                                  WHERE Telephone.Status = 2 ";

                if (cites.Count != 0)
                {
                    string citylist = DB.MakeTheList(cites);
                    query += " and City.ID in " + citylist;
                }
                if (centers.Count != 0)
                {
                    string CenterList = DB.MakeTheList(centers);
                    query += " and  Center.ID in " + CenterList;
                }

                if (FromDate.HasValue)
                    query += " and CONVERT(date,T2.InstallationDate) >= CONVERT(date, '" + FromDate.Value.ToShortDateString() + "')";
                if (ToDate.HasValue)
                    query += " and CONVERT(date,T2.InstallationDate) <= CONVERT(date, '" + ToDate.Value.ToShortDateString() + "')";



                return context.ExecuteQuery<WorkingTelephoneBaseDateReport>(query).ToList();
            }
        }

        public static List<CustomerOfficeReportInfo> GetCustomerOfficeInfo(List<int> cites, List<int> centers, List<int> requestTypes, List<int> rolsID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                string query = @" SELECT u.FirstName,u.LastName,r.TelephoneNo,t.Title,ci.Name,c.CenterName,cu.FirstNameOrTitle,cu.LastName as customerLastName,r.InsertDate,r.EndDate,r.RequesterName
                                   FROM [CRM].[dbo].[Request] as r
                                   join CRM.dbo.RequestType as t on t.ID=r.RequestTypeID
                                   join CRM.dbo.Center as c on c.ID=r.CenterID
                                   join CRM.dbo.[User] as u on u.id=r.CreatorUserID
                                   join CRM.dbo.[Role] as ro on ro.id=u.RoleID
                                   left join CRM.dbo.[Customer] as cu on cu.ID=r.CustomerID
                                   join CRM.dbo.[City] as ci on ci.ID=c.RegionID ";

                if (cites.Count != 0)
                {
                    string citylist = DB.MakeTheList(cites);
                    query += " and ci.ID in " + citylist;
                }
                if (centers.Count != 0)
                {
                    string CenterList = DB.MakeTheList(centers);
                    query += " and  c.ID in " + CenterList;
                }


                if (requestTypes.Count != 0)
                {
                    string requestTypeList = DB.MakeTheList(requestTypes);
                    query += " and  t.ID in " + requestTypeList;
                }

                if (rolsID.Count != 0)
                {
                    string roleList = DB.MakeTheList(rolsID);
                    query += " and  ro.ID in " + roleList;
                }

                return context.ExecuteQuery<CustomerOfficeReportInfo>(query).ToList();
            }

        }

        //TODO : rad
        public static List<TranslationOpticalCabinetToNormalReportInfo> GetTranslationOpticalCabinetToNormalReport(List<long> requestsId = null)
        {
            using (MainDataContext context = new MainDataContext())
            {
                List<TranslationOpticalCabinetToNormalReportInfo> result = new List<TranslationOpticalCabinetToNormalReportInfo>();
                string parameters = string.Empty;
                if (requestsId != null)
                {
                    parameters = (requestsId.Count != 0) ? string.Join(",", requestsId.ToArray()) : "";
                }
                result = context.uspReportTrasnlationOpticalCabinetToNormal(parameters)
                                .Select(tr => new TranslationOpticalCabinetToNormalReportInfo
                                                  {
                                                      RequestID = tr.RequestID,
                                                      FirstNameOrTitle = string.IsNullOrEmpty(tr.FirstNameOrTitle) ? "-----" : tr.FirstNameOrTitle,
                                                      LastName = string.IsNullOrEmpty(tr.LastName) ? "-----" : tr.LastName,
                                                      FromTelephoneNo = (tr.FromTelephoneNo.HasValue) ? tr.FromTelephoneNo.Value.ToString() : "-----",
                                                      ToTelephoneNo = (tr.ToTelephoneNo.HasValue) ? tr.ToTelephoneNo.Value.ToString() : "-----",
                                                      CorrespondenceAddress = string.IsNullOrEmpty(tr.CorrespondenceAddress) ? "-----" : tr.CorrespondenceAddress,
                                                      CorrespondencePostalCode = string.IsNullOrEmpty(tr.CorrespondencePostalCode) ? "-----" : tr.CorrespondencePostalCode,
                                                      InstallAddress = string.IsNullOrEmpty(tr.InstallAddress) ? "-----" : tr.InstallAddress,
                                                      InstallPostalCode = string.IsNullOrEmpty(tr.InstallPostalCode) ? "-----" : tr.InstallPostalCode
                                                  }
                                        )
                                .ToList();
                return result;
            }
        }


        //TODO:rad
        public static List<TranslationOpticalCabinetToNormalRequestReportInfo> GetTranslationOpticalCabinetToNormalRequestReport(long? requestId, long? telephoneNo, List<int> citiesId, List<int> centersId, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                List<TranslationOpticalCabinetToNormalRequestReportInfo> result = new List<TranslationOpticalCabinetToNormalRequestReportInfo>();
                string cities = (citiesId != null && citiesId.Count != 0) ? string.Join(",", citiesId.ToArray()) : "";
                string centers = (centersId != null && centersId.Count != 0) ? string.Join(",", centersId.ToArray()) : "";
                result = context.uspReportTranslationOpticalCabinetToNormalRequest(cities, centers, fromDate, toDate, requestId, telephoneNo)
                              .Select(tr => new TranslationOpticalCabinetToNormalRequestReportInfo
                                                {
                                                    RequestId = tr.RequestId.ToString(),
                                                    RequestDate = Folder.PersianDate.ToPersianDateString(tr.RequestDate),
                                                    FirstNameOrTitle = string.IsNullOrEmpty(tr.FirstNameOrTitle) ? "-----" : tr.FirstNameOrTitle,
                                                    LastName = string.IsNullOrEmpty(tr.LastName) ? "-----" : tr.LastName,
                                                    NationalCode = string.IsNullOrEmpty(tr.NationalCode) ? "-----" : tr.NationalCode,
                                                    OldTelephone = tr.OldTelephone.ToString(),
                                                    NewTelephone = tr.NewTelephone.ToString(),
                                                    CityName = string.IsNullOrEmpty(tr.CityName) ? "-----" : tr.CityName,
                                                    CenterName = string.IsNullOrEmpty(tr.CenterName) ? "-----" : tr.CenterName,
                                                    InstallAddress = string.IsNullOrEmpty(tr.InstallAddress) ? "-----" : tr.InstallAddress,
                                                    InstallPostalCode = string.IsNullOrEmpty(tr.InstallPostalCode) ? "-----" : tr.InstallPostalCode,
                                                    CorrespondenceAddress = string.IsNullOrEmpty(tr.CorrespondenceAddress) ? "-----" : tr.CorrespondenceAddress,
                                                    CorrespondencePostalCode = string.IsNullOrEmpty(tr.CorrespondencePostalCode) ? "-----" : tr.CorrespondencePostalCode,
                                                    OldCabinetNumber = tr.OldCabinetNumber.ToString(),
                                                    OldInputNumber = tr.OldInputNumber.ToString(),
                                                    OldPostNumber = tr.OldPostNumber.ToString(),
                                                    OldConnectionNo = tr.OldConnectionNo.ToString(),
                                                    NewCabinetNumber = tr.NewCabinetNumber.ToString(),
                                                    NewInputNumber = tr.NewInputNumber.ToString(),
                                                    NewPostNumber = tr.NewPostNumber.ToString(),
                                                    NewConnectionNo = tr.NewConnectionNo.ToString(),
                                                    OldMdfNumber = tr.OldMdfNumber.ToString(),
                                                    OldVerticalColumnNo = tr.OldVerticalColumnNo.ToString(),
                                                    OldVerticalRowNo = tr.OldVerticalRowNo.ToString(),
                                                    OldBuchtNo = (tr.OldBuchtNo.HasValue) ? tr.OldBuchtNo.Value.ToString() : "-----",
                                                    NewMdfNumber = tr.NewMdfNumber.ToString(),
                                                    NewVerticalColumnNo = tr.NewVerticalCloumnNo.ToString(),
                                                    NewVerticalRowNo = tr.NewVerticalRowNo.ToString(),
                                                    NewBuchtNo = (tr.NewBuchtNo.HasValue) ? tr.NewBuchtNo.Value.ToString() : "-----"
                                                }
                                     )
                              .ToList();
                return result;
            }
        }

        public static List<Report_SpecialWireCertificatePrintResult> GetSpecialWireCertificatePrint(List<int> cityIDs, List<int> centerIDs, List<long?> requestIDs, DateTime? FromDate, DateTime? ToDate, long? TelephoneNo, DateTime? FromCreateDate, DateTime? ToCreateDate)
        {
            try
            {
                using (MainDataContext context = new MainDataContext())
                {
                    context.CommandTimeout = 0;
                    return context.Report_SpecialWireCertificatePrint(string.Join(",", cityIDs),
                                                                      string.Join(",", centerIDs),
                                                                      string.Join(",", requestIDs),
                                                                      (FromDate.HasValue) ? FromDate.Value.Date.ToShortDateString() : null,
                                                                      (ToDate.HasValue) ? ToDate.Value.Date.ToShortDateString() : null,
                                                                      TelephoneNo,
                                                                      (FromCreateDate.HasValue) ? FromCreateDate.Value.Date.ToShortDateString() : null,
                                                                      (ToCreateDate.HasValue) ? ToCreateDate.Value.Date.ToShortDateString() : null).ToList();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString());
            }

            return null;
        }


        public static IEnumerable GetMDFVacatePrivateWire(List<long> requestIDs)
        {
            try
            {
                using (MainDataContext context = new MainDataContext())
                {
                    context.CommandTimeout = 0;

                    return context.Report_MDFVacateSpecialWire(string.Join(",", requestIDs)).ToList();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString());
            }

            return null;
        }

        public static IEnumerable GetNetworkVacateSpecialWire(List<long> requestIDs)
        {
            try
            {
                using (MainDataContext context = new MainDataContext())
                {
                    context.CommandTimeout = 0;

                    return context.Report_VacateSpecialWireWiringNetwork(string.Join(",", requestIDs)).ToList();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString());
            }

            return null;
        }
        public static IEnumerable GetE1NetworkWire(List<long> requestIDs)
        {
            try
            {
                using (MainDataContext context = new MainDataContext())
                {
                    context.CommandTimeout = 0;

                    return context.uspReportE1WiringNetwork(string.Join(",", requestIDs)).ToList();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString());
            }

            return null;
        }
        public static IEnumerable GetE1LinkNetworkWire(List<long> requestIDs)
        {
            try
            {
                using (MainDataContext context = new MainDataContext())
                {
                    context.CommandTimeout = 0;

                    return context.uspReportE1LINKWiringNetwork(string.Join(",", requestIDs)).ToList();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString());
            }

            return null;
        }
        public static IEnumerable GetVacateSpecialwireCertificateInfo(DateTime? fromDate, DateTime? toDate, List<int> cityIDs, List<int> centerIDs, List<long?> requestIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.VacateSpecialWires

                    .GroupJoin(context.Telephones, r => r.Request.TelephoneNo, t => t.TelephoneNo, (r, t) => new { request = r.Request, telephone = t, VacateSpecialWire = r })
                    .SelectMany(t1 => t1.telephone.DefaultIfEmpty(), (t2, t1) => new { Tel = t1, vacate = t2.VacateSpecialWire, request = t2.request })
                     .Where(t =>
                         (requestIDs.Count == 0 || requestIDs.Contains(t.request.ID)) &&
                         (!fromDate.HasValue || t.Tel.DischargeDate >= fromDate) &&
                         (!toDate.HasValue || t.Tel.DischargeDate <= toDate) &&
                         (cityIDs.Count == 0 || cityIDs.Contains(t.request.Center.Region.CityID)) &&
                         (centerIDs.Count == 0 || centerIDs.Contains(t.request.CenterID))
                         )
                     .Select(t => new
                     {
                         ID = t.vacate.RequestID,
                         TelNo = t.request.TelephoneNo.ToString(),
                         InsertRequestDate = Date.GetPersianDate(t.request.InsertDate, Date.DateStringType.Short),
                         Name = (t.request.Customer.FirstNameOrTitle ?? "") + " " + (t.request.Customer.LastName ?? ""),


                         MelliCode = t.request.Customer.NationalCodeOrRecordNo,
                         PostalCode = t.vacate.Address.PostalCode,
                         Address = t.vacate.Address.AddressContent,
                         City = t.request.Center.Region.City.Name,
                         Center = t.request.Center.CenterName,
                         Region = t.request.Center.Region.Title,
                         PersonType = DB.GetEnumDescriptionByValue(typeof(DB.PersonType), (int?)t.request.Customer.PersonType),
                         MobileNo = t.request.Customer.MobileNo,
                         UrgentTelNo = t.request.Customer.UrgentTelNo
                     }).ToList();
            }
        }

        public static IEnumerable GetChangeLocationSpecialwireCertificateInfo(DateTime? fromDate, DateTime? toDate, List<int> cityIDs, List<int> centerIDs, List<long?> requestIDs)
        {
            try
            {
                using (MainDataContext context = new MainDataContext())
                {
                    context.CommandTimeout = 0;
                    return context.Report_ChangeLocationSpecialWireCertificate(
                                                                                (fromDate.HasValue) ? fromDate.Value.Date.ToString() : null,
                                                                                (toDate.HasValue) ? toDate.Value.Date.ToString() : null,
                                                                                string.Join(",", cityIDs),
                                                                                string.Join(",", centerIDs),
                                                                                string.Join(",", requestIDs)).ToList();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString());
            }

            return null;
        }

        public static List<Report_ChangeLocationMDFSpecialWireResult> GetChangeLocationMDFSpecialwire(List<long> RequestIDs)
        {
            try
            {
                using (MainDataContext context = new MainDataContext())
                {
                    context.CommandTimeout = 0;
                    return context.Report_ChangeLocationMDFSpecialWire(string.Join(",", RequestIDs)).ToList();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString());
            }

            return null;
        }
        public static List<Report_ChangeLocationNetworkSpecialWireResult> GetChangeLocationNetworkSpecialWire(List<long> RequestIDs)
        {
            try
            {
                using (MainDataContext context = new MainDataContext())
                {
                    context.CommandTimeout = 0;
                    return context.Report_ChangeLocationNetworkSpecialWire(string.Join(",", RequestIDs)).ToList();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString());
            }

            return null;
        }
        public static List<AssignmentInfo> LoadPCMInfo(Bucht bucht)
        {
            PCMPort pCMPort = Data.PCMPortDB.GetPCMPortByID((long)bucht.PCMPortID);
            List<PCMPort> pCMPortList = Data.PCMPortDB.GetAllPCMPortByPCMID(pCMPort.PCMID).ToList();
            List<Bucht> buchtList = Data.BuchtDB.getBuchtByPCMPortID(pCMPortList.Select(t => t.ID).ToList()).ToList();

            List<AssignmentInfo> assingmentInfo = DB.GetAllInformationByBuchtIDs(buchtList.Select(b => b.ID).ToList(), (byte)DB.BuchtStatus.AllocatedToInlinePCM);
            return assingmentInfo;
        }

        public static List<BuchtNoInfo> GetBuchtNoCentralInfo(Bucht bucht)
        {
            PCMPort pCMPort = Data.PCMPortDB.GetPCMPortByID((long)bucht.PCMPortID);
            List<PCMPort> pCMPortList = Data.PCMPortDB.GetAllPCMPortByPCMID(pCMPort.PCMID).ToList();
            List<Bucht> buchtList = Data.BuchtDB.getBuchtByPCMPortID(pCMPortList.Select(t => t.ID).ToList()).ToList();
            List<BuchtNoInfo> BuchtnoInfoList = new List<BuchtNoInfo>();
            BuchtNoInfo BuchtnoInfo = new BuchtNoInfo();

            Bucht buchtConnectToInputCabinet = Data.BuchtDB.GetBuchtByID((long)buchtList.Where(t => t.BuchtTypeID == (byte)DB.BuchtType.OutLine).SingleOrDefault().BuchtIDConnectedOtherBucht);
            BuchtnoInfo.BuchNoInput = DB.GetConnectionByBuchtID(buchtConnectToInputCabinet.ID);
            BuchtnoInfo.BuchtNoInputPCM = DB.GetConnectionByBuchtID(buchtList.Where(t => t.BuchtTypeID == (byte)DB.BuchtType.OutLine).SingleOrDefault().ID);
            BuchtnoInfo.Radif = DB.GetBuchtInfoByBuchtIDInSeperation(buchtList.Where(t => t.BuchtTypeID == (byte)DB.BuchtType.OutLine).SingleOrDefault().ID)[0].Radif;
            BuchtnoInfo.Tabaghe = DB.GetBuchtInfoByBuchtIDInSeperation(buchtList.Where(t => t.BuchtTypeID == (byte)DB.BuchtType.OutLine).SingleOrDefault().ID)[0].Tabaghe;
            BuchtnoInfo.CabinetInputID = DB.GetBuchtInfoByBuchtIDInSeperation(buchtList.Where(t => t.BuchtTypeID == (byte)DB.BuchtType.OutLine).SingleOrDefault().ID)[0].CabinetInputID;
            BuchtnoInfoList.Add(BuchtnoInfo);

            return BuchtnoInfoList;
        }

        public static List<TranslatoionPostWiring> GetTranslationPostReport(List<long> RequestIDs)
        {
            try
            {
                List<TranslationPost> _translationPost = Data.TranslationPostDB.GetTranslationPostByIDs(RequestIDs);
                List<TranslatoionPostWiring> Result = new List<TranslatoionPostWiring>();
                foreach (var item in _translationPost)
                {
                    Post FromPost = Data.PostDB.GetPostByID(item.OldPostID);
                    Post ToPost = Data.PostDB.GetPostByID(item.NewPostID);

                    Cabinet FromCabinet = Data.CabinetDB.GetCabinetByID(item.OldCabinetID);
                    //Cabinet ToCabinet = Data.CabinetDB.GetCabinetByID(_translationPost.NewCabinetID);


                    TranslatoionPostWiring ResultFalse = new TranslatoionPostWiring();

                    ResultFalse.fromCabinet = FromCabinet.CabinetNumber.ToString();
                    ResultFalse.toCabinet = FromCabinet.CabinetNumber.ToString();
                    ResultFalse.fromPost = FromPost.Number.ToString();
                    ResultFalse.toPost = ToPost.Number.ToString();

                    if (item.OverallTransfer == false)
                    {
                        ResultFalse.OldConnectionNo = Data.PostContactDB.GetPostContactByID((long)item.OldPostContactID).ConnectionNo;
                        ResultFalse.NewConnectionNo = Data.PostContactDB.GetPostContactByID((long)item.NewPostContactID).ConnectionNo;
                        Result.Add(ResultFalse);
                    }
                    else if (item.OverallTransfer == true)
                    {
                        List<int> OldConnectionNoList = Data.PostContactDB.GetPostContactNoByPostID(item.OldPostID);
                        List<int> NewConnectionNoList = Data.PostContactDB.GetPostContactNoByPostID(item.NewPostID);


                        for (int i = 0; i < OldConnectionNoList.Count(); i++)
                        {
                            TranslatoionPostWiring Element = new TranslatoionPostWiring();
                            Element.fromCabinet = FromCabinet.CabinetNumber.ToString();
                            Element.toCabinet = FromCabinet.CabinetNumber.ToString();
                            Element.fromPost = FromPost.Number.ToString();
                            Element.toPost = ToPost.Number.ToString();
                            Element.OldConnectionNo = OldConnectionNoList[i];
                            Result.Add(Element);
                        }

                        for (int i = 0; i < NewConnectionNoList.Count(); i++)
                        {
                            Result[i].toPost = ToPost.Number.ToString();
                            Result[i].NewConnectionNo = NewConnectionNoList[i];
                            Result[i].toCabinet = FromCabinet.CabinetNumber.ToString();
                        }
                    }
                }
                return Result;
            }
            catch (Exception ex)
            {
                Logger.Write(ex, "RequestsInbox");
                MessageBox.Show("خطا در ایجاد گزارش", "", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return null;

            }
        }

        public static List<uspReportFailure117RequestRemaindInNetworkResult> GetFailure117RequestRemaindInNetworkInfo(DateTime? fromDate, DateTime? toDate, int? cityID, int? centerID)
        {
            using (MainDataContext context = new MainDataContext())
            {

                return context.uspReportFailure117RequestRemaindInNetwork((cityID.HasValue) ? cityID : null,
                                                                          (cityID.HasValue) ? centerID : null,
                                                                          (fromDate.HasValue) ? fromDate.Value.Date.ToShortDateString() : null,
                                                                          (toDate.HasValue) ? toDate.Value.Date.ToShortDateString() : null
                                                                          ).ToList();
            }
        }

        public static List<uspReportMDFExchangeCabinuteInputResult> GetMDFExchangeCabinuteInput(List<long> requestIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.uspReportMDFExchangeCabinuteInput(string.Join(",", requestIDs)).ToList();
            }
        }

        public static List<uspReportNetworkWireExchangeCabinuteInputResult> GetNetworkWireExchangeCabinuteInput(List<long> requestIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.uspReportNetworkWireExchangeCabinuteInput(string.Join(",", requestIDs)).ToList();
            }
        }


        public static List<uspReportNetworkWireExchangeCentralPostResult> GetNetworkWireExchangeCentralPost(List<long> requestIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.uspReportNetworkWireExchangeCentralPost(string.Join(",", requestIDs)).ToList();
            }
        }

        //TODO:rad
        public static IEnumerable GetMalfuctionHistoryReport(int malfuctionType, DateTime? fromDate, DateTime? toDate, int cityId, int centerId)
        {
            using (MainDataContext context = new MainDataContext())
            {

                //دستورات مورد نیاز برای استخراج داده های مشترک از خرابی ها که باید برگردانده شوند- بدون توجه به نوع آیتم خرابی
                string commonDataQuery = @"SELECT 
                                      	    M.DateMalfunction, --تاریخ خرابی
                                      	    M.TimeMalfunction, --زمان خرابی
                                      	    M.TypeMalfunction, --نوع خرابی
                                      	    ISNULL(M.Description,'-----') Description, --توضیحات
                                      	    ISNULL(NULLIF(M.LicenseNumber,''),'-----') LicenseNumber, --شماره مجوز
                                      	    M.MalfuctionOrhealthy, --اعلام خرابی یا اصلاحی
                                      	    ISNULL(M.DistanceFromCabinet,'-----') DistanceFromCabinet, --فاصله از کافو
                                      	    ISNULL(M.DistanceFromMDF,'-----') DistanceFromMDF --فاصله از ام دی اف
                                            {0}
                                          FROM
                                      	    Malfuction M  ";


                //دستورات مورد نیاز برای استخراج داده های اختصاصی که باید بر اساس نوع آیتم خرابی برگردانده شوند
                string specialDataJoin = string.Empty;
                //داده های اختصاصی که باید بر اساس نوع آیتم خرابی برگردانده شوند
                string specialDataResult = string.Empty;

                switch (malfuctionType)
                {
                    case (int)DB.MalfuctionType.CabinetInput:
                        specialDataJoin = @" INNER JOIN 
                                             	CabinetInput CI ON M.CabinetInputID = CI.ID
                                             INNER JOIN 
                                             	Cabinet CA ON CI.CabinetID  = CA.ID
                                             INNER JOIN 
                                             	Center CE ON CE.ID = CA.CenterID
                                             INNER JOIN 
                                             	Region RE ON RE.ID = CE.RegionID
                                             INNER JOIN 
                                             	City CTY ON CTY.ID = RE.CityID
                                             WHERE 
                                             	M.CabinetInputID IS NOT NULL  ";

                        specialDataResult = @" ,CI.InputNumber CabinetInputNumber
	                                           ,CA.CabinetNumber CabinetNumber
                                               ,CTY.Name CityName
                                               ,CE.CenterName CenterName";
                        break;
                    case (int)DB.MalfuctionType.PostConntact:
                        specialDataJoin = @" INNER JOIN 
                                            	PostContact PC ON M.PostContactID  = PC.ID
                                            INNER JOIN 
                                            	Post P ON PC.PostID = P.ID
                                            INNER JOIN
                                            	Cabinet CA ON CA.ID = P.CabinetID
                                            INNER JOIN 
                                            	Center CE ON CE.ID = CA.CenterID
                                            INNER JOIN 
                                            	Region RE ON RE.ID = CE.RegionID
                                            INNER JOIN 
                                            	City CTY ON CTY.ID = RE.CityID
                                            WHERE 
                                            	M.PostContactID IS NOT NULL ";

                        specialDataResult = @" ,PC.ConnectionNo PostContactConnectionNo
	                                           ,P.Number PostNumber
                                               ,CTY.Name CityName
                                               ,CE.CenterName CenterName";
                        break;
                    case (int)DB.MalfuctionType.PCM:
                        specialDataJoin = @" INNER JOIN
                                            	PCM PM on M.PCMID = PM.ID
                                            INNER JOIN 
                                            	PCMShelf PMS ON PM.ShelfID = PMS.ID
                                            INNER JOIN 
                                            	PCMRock PMR ON PMR.ID = PMS.PCMRockID
                                            INNER JOIN 
                                            	Center CE ON CE.ID = PMR.CenterID
                                            INNER JOIN 
                                            	Region RE ON RE.ID = CE.RegionID
                                            INNER JOIN 
                                            	City CTY ON CTY.ID = RE.CityID
                                            WHERE	
                                            	M.PCMID IS NOT NULL";

                        specialDataResult = @" ,PMR.Number Rock
	                                           ,PMS.Number Shelf
	                                           ,PM.[Card] [Card]
                                               ,CTY.Name CityName
                                               ,CE.CenterName CenterName";
                        break;
                    case (int)DB.MalfuctionType.PCMPort:
                        specialDataJoin = @" INNER JOIN 
                                            	PCM PM ON M.PCMID = PM.ID
                                            INNER JOIN 
                                            	PCMPort PMP ON PMP.PCMID = PM.ID
                                            INNER JOIN 
                                            	PCMShelf PMS ON PMS.ID = PM.ShelfID
                                            INNER JOIN 
                                            	PCMRock PMR ON PMR.ID = PMS.PCMRockID
                                            INNER JOIN 
                                            	Center CE ON CE.ID = PMR.CenterID
                                            INNER JOIN 
                                            	Region RE ON RE.ID = CE.RegionID
                                            INNER JOIN 
                                            	City CTY ON CTY.ID = RE.CityID
                                            WHERE 
                                            	M.PCMPortID IS NOT NULL";

                        specialDataResult = @"	,PMR.Number  Rock
	                                            ,PMS.Number Shelf
	                                            ,PM.Card [Card]
	                                            ,PMP.PortNumber
                                                ,CTY.Name CityName
                                                ,CE.CenterName CenterName";
                        break;
                }
                commonDataQuery = string.Concat(commonDataQuery, specialDataJoin);
                commonDataQuery = string.Format(commonDataQuery, specialDataResult);

                //اضافه کردن شرط تاریخ
                string dateCondition = string.Empty;
                if (fromDate.HasValue && toDate.HasValue)
                {
                    dateCondition = string.Format(" AND \nM.DateMalfunction > '{0}' AND M.DateMalfunction< '{1}'", fromDate.Value.ToShortDateString(), toDate.Value.ToShortDateString());
                }
                else if (fromDate.HasValue && !toDate.HasValue)
                {
                    dateCondition = string.Format(" AND \nM.DateMalfunction > '{0}'", fromDate.Value.ToShortDateString());
                }
                else if (toDate.HasValue && !fromDate.HasValue)
                {
                    dateCondition = string.Format(" AND \nM.DateMalfunction< '{0}'", toDate.Value.ToShortDateString());
                }
                commonDataQuery = string.Concat(commonDataQuery, dateCondition);

                //اضافه کردن شرط شهر و مرکز
                string cityAndCenterCondition = string.Format(" AND ( {0} = -1  OR {0} = CTY.ID ) AND ( {1} = -1 OR {1} = CE.ID )", cityId.ToString(), centerId.ToString());
                commonDataQuery = string.Concat(commonDataQuery, cityAndCenterCondition);

                var primaryResult = context.ExecuteQuery<MalfuctionHistoryInfo>(commonDataQuery);

                var finalResult = primaryResult.Select(pr => new
                                                    {
                                                        DataMalfuction = pr.DateMalfunction.ToPersian(Date.DateStringType.Short),
                                                        TimeMalfuction = pr.TimeMalfunction,
                                                        TypeMalfuction = (malfuctionType == (int)DB.MalfuctionType.CabinetInput && pr.TypeMalfunction != 0 && pr.MalfuctionOrhealthy == 0) ? Helpers.GetEnumDescription(pr.TypeMalfunction, typeof(DB.CabinetInputMalfuctionType)) :
                                                                              (malfuctionType == (int)DB.MalfuctionType.PostConntact && pr.TypeMalfunction != 0 && pr.MalfuctionOrhealthy == 0) ? Helpers.GetEnumDescription(pr.TypeMalfunction, typeof(DB.PostContactMalfuctionType)) :
                                                                              (malfuctionType == (int)DB.MalfuctionType.PCM && pr.TypeMalfunction != 0 && pr.MalfuctionOrhealthy == 0) ? Helpers.GetEnumDescription(pr.TypeMalfunction, typeof(DB.PCMCardMalfuctionType)) :
                                                                              (malfuctionType == (int)DB.MalfuctionType.PCMPort && pr.TypeMalfunction != 0 && pr.MalfuctionOrhealthy == 0) ? Helpers.GetEnumDescription(pr.TypeMalfunction, typeof(DB.PCMMalfuctionType)) :
                                                                              "-----",
                                                        Description = pr.Description,
                                                        LicenseNumber = pr.LicenseNumber,
                                                        MalfuctionOrHealthy = Helpers.GetEnumDescription((int)pr.MalfuctionOrhealthy, typeof(DB.MalfuctionStatus)),
                                                        DistanceFromCabinet = pr.DistanceFromCabinet,
                                                        DistanceFromMDF = pr.DistanceFromMDF,
                                                        CityName = pr.CityName,
                                                        CenterName = pr.CenterName,
                                                        CabinetInputNumber = (malfuctionType == (int)DB.MalfuctionType.CabinetInput) ? pr.CabinetInputNumber.ToString() : "-----",
                                                        CabinetNumber = (malfuctionType == (int)DB.MalfuctionType.CabinetInput) ? pr.CabinetNumber.ToString() : "-----",
                                                        PostNumber = (malfuctionType == (int)DB.MalfuctionType.PostConntact) ? pr.PostNumber.ToString() : "-----",
                                                        PostContactConnectionNo = (malfuctionType == (int)DB.MalfuctionType.PostConntact) ? pr.PostContactConnectionNo.ToString() : "-----",
                                                        Rock = (malfuctionType == (int)DB.MalfuctionType.PCM || malfuctionType == (int)DB.MalfuctionType.PCMPort) ? pr.Rock.ToString() : "-----",
                                                        Shelf = (malfuctionType == (int)DB.MalfuctionType.PCM || malfuctionType == (int)DB.MalfuctionType.PCMPort) ? pr.Shelf.ToString() : "-----",
                                                        Card = (malfuctionType == (int)DB.MalfuctionType.PCM || malfuctionType == (int)DB.MalfuctionType.PCMPort) ? pr.Card.ToString() : "-----",
                                                        PortNumber = (malfuctionType == (int)DB.MalfuctionType.PCMPort) ? pr.PortNumber.ToString() : "-----"
                                                    }
                                           ).ToList();
                return finalResult;
            }
        }

        //TODO:rad
        public static List<OutBoundRequestInfo> GetOutOfBoundRequest(int requestTypeId, int cityId, int centerId, int requestCompletionStatus, int outBoundMetersGreaterThan, DateTime? outBoundEstablishFromDate, DateTime? outBoundEstablishToDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                //تعریف نتیجه نهایی
                List<OutBoundRequestInfo> result = new List<OutBoundRequestInfo>();

                var query = context.Requests.Join(context.VisitAddresses, r => r.ID, va => va.RequestID, (r, va) => new { Request = r, VisitAddress = va })
                                            .Where(rv =>
                                                         (cityId == -1 || rv.Request.Center.Region.CityID == cityId) &&
                                                         (centerId == -1 || rv.Request.CenterID == centerId) &&
                                                         (requestTypeId == -1 || rv.Request.RequestTypeID == requestTypeId) &&
                                                         (!outBoundEstablishFromDate.HasValue || rv.VisitAddress.OutBoundEstablishDate >= outBoundEstablishFromDate) &&
                                                         (!outBoundEstablishToDate.HasValue || rv.VisitAddress.OutBoundEstablishDate <= outBoundEstablishToDate) &&
                                                         (outBoundMetersGreaterThan == -1 || (rv.VisitAddress.OutBoundMeter.HasValue && rv.VisitAddress.OutBoundMeter.Value > outBoundMetersGreaterThan)) && //متراژ خران از مرز بزرگتر از پارامتر مربوطه باشد
                                                         (rv.VisitAddress.IsOutBound) //خارج از مرز
                                                  );

                //در اینجا بررسی میشود که کدام درخواست های خارج از مرز برگردانده شوند 
                switch (requestCompletionStatus)
                {
                    case (int)DB.RequestCompletionStatus.Complete://درخواست هایی که به اتمام رسیده اند
                        {
                            query = query.Where(rv => rv.Request.EndDate.HasValue);
                            break;
                        }
                    case (int)DB.RequestCompletionStatus.Incomplete://درخواست هایی که ناتمام هستند
                        {
                            query = query.Where(rv => !rv.Request.EndDate.HasValue);
                            break;
                        }
                    case (int)DB.RequestCompletionStatus.All://کلیه ی درخواست های خارج از مرز
                    default:
                        {
                            //do nothing
                            break;
                        }
                }

                //مقدار دهی نتیجه نهایی
                result = query.Select(rv => new OutBoundRequestInfo
                                                {
                                                    TelephoneNo = rv.Request.TelephoneNo.ToString(),
                                                    RequestType = rv.Request.RequestType.Title,
                                                    RequestInsertDate = rv.Request.InsertDate.ToPersian(Date.DateStringType.Short),
                                                    RequestEndDate = rv.Request.EndDate.ToPersian(Date.DateStringType.Short),
                                                    CityName = rv.Request.Center.Region.City.Name,
                                                    CenterName = rv.Request.Center.CenterName,
                                                    OutBoundEstablishDate = rv.VisitAddress.OutBoundEstablishDate.ToPersian(Date.DateStringType.Short),
                                                    OutBoundMeter = (rv.VisitAddress.OutBoundMeter.HasValue) ? rv.VisitAddress.OutBoundMeter.ToString() : string.Empty,
                                                    RequestPaymentsSumAmount = context.RequestPayments.Where(rp =>
                                                                                                                (rp.RequestID == rv.Request.ID) &&
                                                                                                                (rp.IsPaid.HasValue && rp.IsPaid.Value) &&
                                                                                                                (rp.IsKickedBack.HasValue && !rp.IsKickedBack.Value)
                                                                                                             )
                                                                                                       .Select(rp => rp.AmountSum)
                                                                                                       .Sum() ?? 0
                                                }
                                   ).ToList();

                //با استفاده از متد زیر ستون های رشته ای که مقدار آنها نال یا خالی باشند ، یک مقدار پیش فرض میگیرند
                result.ForEach(r => r.CheckMembersValue());

                return result;
            }
        }

        //TODO:rad
        public static string GetReportTitleByReportTemplateID(int reportTemplateID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                string title = string.Empty;
                title = context.ReportTemplates.Where(rt => rt.ID == reportTemplateID).SingleOrDefault().Title;
                return title;
            }
        }

        public static List<uspReportRequestStateResult> GetRequestStateInfo(DateTime? fromDate, DateTime? toDate, List<int> CityIDs, List<int> CenterIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.uspReportRequestState(string.Join(",", CityIDs),
                                                     string.Join(",", CenterIDs),
                                                     (fromDate.HasValue) ? fromDate.Value.Date.ToString() : null,
                                                     (toDate.HasValue) ? toDate.Value.Date.ToString() : null
                                                    ).ToList();

            }
        }

        //TODO:rad
        public static List<WorkingTelephoneStatisticsInfo> GetWorkingTelephoneStatisticsBySwitchType(int cityId, int centerId, int switchTypeId, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                var result = context.Telephones
                                      .Where(s =>
                                                  (cityId == -1 || s.Center.Region.CityID == cityId) &&
                                                  (centerId == -1 || s.CenterID == centerId) &&
                                                  (switchTypeId == -1 || s.SwitchPrecode.Switch.SwitchTypeID == switchTypeId)
                                            )

                                      .Select(s => new WorkingTelephoneStatisticsInfo
                                      {
                                          CityName = s.Center.Region.City.Name,
                                          CenterName = s.Center.CenterName,
                                          SwitchTypeName = s.SwitchPrecode.Switch.SwitchType.CommercialName,

                                          //تعداد منصوبه
                                          InstalledCount = context.Telephones.Where(t => t.SwitchPrecode.SwitchID == s.SwitchPrecode.SwitchID).Count(),
                                          //تعداد مشغول بکار
                                          InUseCount = context.Telephones.Where(t =>
                                                                                     t.SwitchPrecode.SwitchID == s.SwitchPrecode.SwitchID
                                                                                     &&
                                                                                     t.Status != (int)DB.TelephoneStatus.Free  //تلفن آزاد نباشد
                                                                                     &&
                                                                                     t.Status != (int)DB.TelephoneStatus.Discharge //تلفن تخلیه نباشد
                                                                                 )
                                                                          .Count(),
                                          //تعداد دایری
                                          DayriCount = context.Requests.Where(r =>
                                                                                    r.EndDate.HasValue &&
                                                                                    r.RequestTypeID == (int)DB.RequestType.Dayri &&
                                                                                    context.Telephones.Where(t2 =>
                                                                                                                    (t2.SwitchPrecode.SwitchID == s.SwitchPrecode.SwitchID) &&
                                                                                                                    (!fromDate.HasValue || t2.InstallationDate >= fromDate) &&
                                                                                                                    (!toDate.HasValue || t2.InstallationDate <= toDate)
                                                                                                             )
                                                                                                       .Select(t2 => t2.TelephoneNo)
                                                                                                       .Contains(r.TelephoneNo.Value)
                                                                               ).Count(),
                                          //تعداد تخلیه
                                          DischarginCount = context.Requests.Where(r =>
                                                                                 r.EndDate.HasValue &&
                                                                                 r.RequestTypeID == (int)DB.RequestType.Dischargin &&
                                                                                 context.Telephones.Where(t2 =>
                                                                                                                (t2.SwitchPrecode.SwitchID == s.SwitchPrecode.SwitchID) &&
                                                                                                                (!fromDate.HasValue || t2.InstallationDate >= fromDate) &&
                                                                                                                (!toDate.HasValue || t2.InstallationDate <= toDate)
                                                                                                          )
                                                                                                    .Select(t2 => t2.TelephoneNo)
                                                                                                    .Contains(r.TelephoneNo.Value)
                                                                             ).Count(),
                                          //تعداد استرداد ودیعه
                                          RefundDepositCount = context.Requests.Where(r =>
                                                                                        r.EndDate.HasValue &&
                                                                                        r.RequestTypeID == (int)DB.RequestType.RefundDeposit &&
                                                                                        context.Telephones.Where(t2 =>
                                                                                                                    (t2.SwitchPrecode.SwitchID == s.SwitchPrecode.SwitchID) &&
                                                                                                                    (!fromDate.HasValue || t2.InstallationDate >= fromDate) &&
                                                                                                                    (!toDate.HasValue || t2.InstallationDate <= toDate)
                                                                                                                )
                                                                                                           .Select(t2 => t2.TelephoneNo)
                                                                                                           .Contains(r.TelephoneNo.Value)
                                                                                   ).Count(),
                                          //تعداد تعویض شماره
                                          ChangeNoCount = context.Requests.Where(r =>
                                                                                    r.EndDate.HasValue &&
                                                                                    r.RequestTypeID == (int)DB.RequestType.ChangeNo &&
                                                                                    context.Telephones.Where(t2 =>
                                                                                                                    (t2.SwitchPrecode.SwitchID == s.SwitchPrecode.SwitchID) &&
                                                                                                                    (!fromDate.HasValue || t2.InstallationDate >= fromDate) &&
                                                                                                                    (!toDate.HasValue || t2.InstallationDate <= toDate)
                                                                                                            )
                                                                                                       .Select(t2 => t2.TelephoneNo)
                                                                                                       .Contains(r.TelephoneNo.Value)
                                                                              ).Count(),
                                          //تعداد برگردان نوری
                                          TranslationOpticalCabinetToNormalCount = context.Requests.Where(r =>
                                                                                                            r.EndDate.HasValue &&
                                                                                                            r.RequestTypeID == (int)DB.RequestType.TranslationOpticalCabinetToNormal &&
                                                                                                            context.Telephones.Where(t2 =>
                                                                                                                                            (t2.SwitchPrecode.SwitchID == s.SwitchPrecode.SwitchID) &&
                                                                                                                                            (!fromDate.HasValue || t2.InstallationDate >= fromDate) &&
                                                                                                                                            (!toDate.HasValue || t2.InstallationDate <= toDate)
                                                                                                                                    )
                                                                                                                               .Select(t2 => t2.TelephoneNo)
                                                                                                                               .Contains(r.TelephoneNo.Value)
                                                                                                       ).Count()
                                      }
                                             )
                                      .Distinct()
                                      .ToList();

                //با استفاده از متد زیر ستون های رشته ای که مقدار آنها نال یا خالی باشند ، یک مقدار پیش فرض میگیرند
                //result.ForEach((wt) => wt.CheckMembersValue());

                return result;
            }
        }

        ////TODO:rad
        //public static List<WorkingTelephoneStatisticsInfo> GetWorkingTelephoneStatisticsBySwitchType(int cityId, int centerId, int switchTypeId, DateTime? fromDate, DateTime? toDate)
        //{
        //    using (MainDataContext context = new MainDataContext())
        //    {
        //        var result = context.Switches
        //                              .GroupJoin(context.SwitchPrecodes, s => s.ID, sp => sp.SwitchID, (s, sp) => new { Switch0 = s, SwitchPrecode0 = sp })
        //                              .SelectMany(rt => rt.SwitchPrecode0.DefaultIfEmpty(), (x, y) => new { Switch = x.Switch0, SwitchPrecode = y })

        //                              .GroupJoin(context.Telephones, a => a.SwitchPrecode.ID, t => t.SwitchPrecodeID, (a, t) => new { Telephone = t, SwitchPrecode = a.SwitchPrecode, Switch = a.Switch })
        //                              .SelectMany(a => a.Telephone.DefaultIfEmpty(), (x, y) => new { Switch = x.Switch, SwitchPrecode = x.SwitchPrecode, Telephone = y })

        //                              .Where(s =>
        //                                          (cityId == -1 || s.Switch.Center.Region.CityID == cityId) &&
        //                                          (centerId == -1 || s.Switch.CenterID == centerId) &&
        //                                          (switchTypeId == -1 || s.Switch.SwitchTypeID == switchTypeId)
        //                                    )

        //                              .Select(s => new WorkingTelephoneStatisticsInfo
        //                                          {
        //                                              CityName = s.Switch.Center.Region.City.Name,
        //                                              CenterName = s.Switch.Center.CenterName,
        //                                              SwitchTypeName = s.Switch.SwitchType.CommercialName,

        //                                              //تعداد منصوبه
        //                                              InstalledCount = context.Telephones.Where(t => t.SwitchPrecode.SwitchID == s.SwitchPrecode.SwitchID).Count(),
        //                                              //تعداد مشغول بکار
        //                                              InUseCount = context.Telephones.Where(t =>
        //                                                                                         t.SwitchPrecode.SwitchID == s.SwitchPrecode.SwitchID
        //                                                                                         &&
        //                                                                                         t.Status != (int)DB.TelephoneStatus.Free  //تلفن آزاد نباشد
        //                                                                                         &&
        //                                                                                         t.Status != (int)DB.TelephoneStatus.Discharge //تلفن تخلیه نباشد
        //                                                                                     )
        //                                                                              .Count(),
        //                                              //تعداد دایری
        //                                              DayriCount = context.Requests.Where(r =>
        //                                                                                        r.EndDate.HasValue &&
        //                                                                                        r.RequestTypeID == (int)DB.RequestType.Dayri &&
        //                                                                                        context.Telephones.Where(t2 =>
        //                                                                                                                        (t2.SwitchPrecode.SwitchID == s.SwitchPrecode.SwitchID) &&
        //                                                                                                                        (!fromDate.HasValue || t2.InstallationDate >= fromDate) &&
        //                                                                                                                        (!toDate.HasValue || t2.InstallationDate <= toDate)
        //                                                                                                                 )
        //                                                                                                           .Select(t2 => t2.TelephoneNo)
        //                                                                                                           .Contains(r.TelephoneNo.Value)
        //                                                                                   ).Count(),
        //                                              //تعداد تخلیه
        //                                              DischarginCount = context.Requests.Where(r =>
        //                                                                                     r.EndDate.HasValue &&
        //                                                                                     r.RequestTypeID == (int)DB.RequestType.Dischargin &&
        //                                                                                     context.Telephones.Where(t2 =>
        //                                                                                                                    (t2.SwitchPrecode.SwitchID == s.SwitchPrecode.SwitchID) &&
        //                                                                                                                    (!fromDate.HasValue || t2.InstallationDate >= fromDate) &&
        //                                                                                                                    (!toDate.HasValue || t2.InstallationDate <= toDate)
        //                                                                                                              )
        //                                                                                                        .Select(t2 => t2.TelephoneNo)
        //                                                                                                        .Contains(r.TelephoneNo.Value)
        //                                                                                 ).Count(),
        //                                              //تعداد استرداد ودیعه
        //                                              RefundDepositCount = context.Requests.Where(r =>
        //                                                                                            r.EndDate.HasValue &&
        //                                                                                            r.RequestTypeID == (int)DB.RequestType.RefundDeposit &&
        //                                                                                            context.Telephones.Where(t2 =>
        //                                                                                                                        (t2.SwitchPrecode.SwitchID == s.SwitchPrecode.SwitchID) &&
        //                                                                                                                        (!fromDate.HasValue || t2.InstallationDate >= fromDate) &&
        //                                                                                                                        (!toDate.HasValue || t2.InstallationDate <= toDate)
        //                                                                                                                    )
        //                                                                                                               .Select(t2 => t2.TelephoneNo)
        //                                                                                                               .Contains(r.TelephoneNo.Value)
        //                                                                                       ).Count(),
        //                                              //تعداد تعویض شماره
        //                                              ChangeNoCount = context.Requests.Where(r =>
        //                                                                                        r.EndDate.HasValue &&
        //                                                                                        r.RequestTypeID == (int)DB.RequestType.ChangeNo &&
        //                                                                                        context.Telephones.Where(t2 =>
        //                                                                                                                        (t2.SwitchPrecode.SwitchID == s.SwitchPrecode.SwitchID) &&
        //                                                                                                                        (!fromDate.HasValue || t2.InstallationDate >= fromDate) &&
        //                                                                                                                        (!toDate.HasValue || t2.InstallationDate <= toDate)
        //                                                                                                                )
        //                                                                                                           .Select(t2 => t2.TelephoneNo)
        //                                                                                                           .Contains(r.TelephoneNo.Value)
        //                                                                                  ).Count(),
        //                                              //تعداد برگردان نوری
        //                                              TranslationOpticalCabinetToNormalCount = context.Requests.Where(r =>
        //                                                                                                                r.EndDate.HasValue &&
        //                                                                                                                r.RequestTypeID == (int)DB.RequestType.TranslationOpticalCabinetToNormal &&
        //                                                                                                                context.Telephones.Where(t2 =>
        //                                                                                                                                                (t2.SwitchPrecode.SwitchID == s.SwitchPrecode.SwitchID) &&
        //                                                                                                                                                (!fromDate.HasValue || t2.InstallationDate >= fromDate) &&
        //                                                                                                                                                (!toDate.HasValue || t2.InstallationDate <= toDate)
        //                                                                                                                                        )
        //                                                                                                                                   .Select(t2 => t2.TelephoneNo)
        //                                                                                                                                   .Contains(r.TelephoneNo.Value)
        //                                                                                                           ).Count()
        //                                          }
        //                                     )
        //                              .Distinct()
        //                              .ToList();

        //        //با استفاده از متد زیر ستون های رشته ای که مقدار آنها نال یا خالی باشند ، یک مقدار پیش فرض میگیرند
        //        //result.ForEach((wt) => wt.CheckMembersValue());

        //        return result;
        //    }
        //}
        public static List<uspReportTransferPostResult> GetTranslationPost(List<long> requestIDs)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.uspReportTransferPost(string.Join(",", requestIDs)).ToList();

            }
        }


        public static List<BlackListCustomerReportInfo> GetBlackListCustomerInfo(DateTime? fromDate, DateTime? toDate, string nationalCode, bool? checkBox)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.BlackLists.Where(t =>
                                    (!fromDate.HasValue || t.InsertDate >= fromDate)
                                    && (!toDate.HasValue || t.InsertDate <= toDate)
                                    && (string.IsNullOrWhiteSpace(nationalCode) || t.Customer.NationalCodeOrRecordNo == nationalCode)
                                    && (t.TypeMember == (int)DB.BlackListType.Customer)
                                    && (checkBox == null || (checkBox == true ? t.Status == true : t.Status == false))
                                    )
                                    .Select(t => new BlackListCustomerReportInfo
                                    {
                                        ArrestLetterNo = t.ArrestLetterNo,
                                        ArrestLetterNoDate = t.ArrestLetterNoDate.ToPersian(Date.DateStringType.Short),
                                        ArrestReference = t.ArrestReference,
                                        NationalCode = t.Customer.NationalCodeOrRecordNo,
                                        CreateDate = t.InsertDate.ToPersian(Date.DateStringType.Short),
                                        ExistDate = t.ExitDate.ToPersian(Date.DateStringType.Short),
                                        CreateUser = t.User.FirstName + t.User.LastName,
                                        ExistUser = t.User1.FirstName + t.User1.LastName,
                                        Customer = t.Customer.FirstNameOrTitle ?? "" + "" + t.Customer.LastName ?? "",
                                        Reason = t.BlackListReason.ReasonContent,
                                    }
                                    ).ToList();

            }
        }

        public static List<BlackListAddressReportInfo> GetBlackListAddressInfo(List<int> cites, List<int> centers, DateTime? fromDate, DateTime? toDate, string PostallCode, bool? checkBox)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.BlackLists.Where(t =>
                                       (cites.Count() == 0 || cites.Contains(t.Address.Center.Region.CityID))
                                    && (centers.Count() == 0 || centers.Contains(t.Address.CenterID))
                                    && (!fromDate.HasValue || t.InsertDate >= fromDate)
                                    && (!toDate.HasValue || t.InsertDate <= toDate)
                                    && (string.IsNullOrWhiteSpace(PostallCode) || t.Address.PostalCode == PostallCode)
                                    && (t.TypeMember == (int)DB.BlackListType.Address)
                                    && (checkBox == null || (checkBox == true ? t.Status == true : t.Status == false))
                                    )
                                    .Select(t => new BlackListAddressReportInfo
                                    {
                                        Center = t.Address.Center.CenterName,
                                        ArrestLetterNo = t.ArrestLetterNo,
                                        ArrestLetterNoDate = t.ArrestLetterNoDate.ToPersian(Date.DateStringType.Short),
                                        ArrestReference = t.ArrestReference,
                                        CreateDate = t.InsertDate.ToPersian(Date.DateStringType.Short),
                                        ExistDate = t.ExitDate.ToPersian(Date.DateStringType.Short),
                                        CreateUser = t.User.FirstName + t.User.LastName,
                                        ExistUser = t.User1.FirstName + t.User1.LastName,
                                        Address = t.Address.AddressContent,
                                        PostalCode = t.Address.PostalCode,
                                        Reason = t.BlackListReason.ReasonContent,
                                    }
                                    ).ToList();

            }
        }

        public static List<BlackListTelephoneReportInfo> GetBlackListTelephoneInfo(List<int> cites, List<int> centers, DateTime? fromDate, DateTime? toDate, long telephone, bool? checkBox)
        {
            using (MainDataContext context = new MainDataContext())
            {
                context.CommandTimeout = 0;
                return context.BlackLists.Where(t =>
                                       (cites.Count() == 0 || cites.Contains(t.Telephone.Center.Region.CityID))
                                    && (centers.Count() == 0 || centers.Contains(t.Telephone.CenterID))
                                    && (!fromDate.HasValue || t.InsertDate >= fromDate)
                                    && (!toDate.HasValue || t.InsertDate <= toDate)
                                    && (telephone == -1 || t.TelephoneNo == telephone)
                                    && (t.TypeMember == (int)DB.BlackListType.TelephoneNo)
                                    && (checkBox == null || (checkBox == true ? t.Status == true : t.Status == false))
                                    )
                                    .Select(t => new BlackListTelephoneReportInfo
                                    {
                                        TelephoneNo = t.TelephoneNo,
                                        TelephoneStatus = Helpers.GetEnumDescription(t.Telephone.Status, typeof(DB.TelephoneStatus)),
                                        Center = t.Telephone.Center.CenterName,
                                        Name = t.Telephone.Customer.FirstNameOrTitle ?? "" + "" + t.Telephone.Customer.LastName ?? "",
                                        ArrestLetterNo = t.ArrestLetterNo,
                                        ArrestLetterNoDate = t.ArrestLetterNoDate.ToPersian(Date.DateStringType.Short),
                                        ArrestReference = t.ArrestReference,
                                        CreateDate = t.InsertDate.ToPersian(Date.DateStringType.Short),
                                        ExistDate = t.ExitDate.ToPersian(Date.DateStringType.Short),
                                        CreateUser = t.User.FirstName + t.User.LastName,
                                        ExistUser = t.User1.FirstName + t.User1.LastName,
                                        Reason = t.BlackListReason.ReasonContent,
                                    }
                                    ).ToList();

            }
        }

        //TODO:rad
        public static List<FilledCabinetInfo> GetFilledCabinet(List<int> cities, List<int> centers, List<int> cabinets, int emptyCount)
        {
            using (MainDataContext context = new MainDataContext())
            {
                //سهمیه رزرو 3 درصد
                int intCabinetShare = default(int);
                string strCabinetShare = DB.GetSettingByKey(DB.GetEnumItemDescription(typeof(DB.SettingKeys), (int)DB.SettingKeys.ApplyCabinetShare));
                intCabinetShare = int.Parse(strCabinetShare);

                var primaryResult = context.Cabinets
                                   .Join(context.CabinetInputs, ca => ca.ID, ci => ci.CabinetID, (x, y) => new { Cabinet = x, CabinetInput = y })

                                   .GroupJoin(context.Buchts, a => a.CabinetInput.ID, b => b.CabinetInputID, (x, y) => new { Cabinet = x.Cabinet, CabinetInput = x.CabinetInput, Buchts = y })
                                   .SelectMany(a => a.Buchts.DefaultIfEmpty(), (x, y) => new { Cabinet = x.Cabinet, CabinetInput = x.CabinetInput, Bucht = y })
                                   .Where(c =>
                                              (cities.Count == 0 || cities.Contains(c.Cabinet.Center.Region.CityID)) &&
                                              (centers.Count == 0 || centers.Contains(c.Cabinet.CenterID)) &&
                                              (cabinets.Count == 0 || cabinets.Contains(c.Cabinet.ID))
                                         )
                                   .Select(q => new FilledCabinetInfo
                                    {
                                        CityName = q.Cabinet.Center.Region.City.Name,
                                        CenterName = q.Cabinet.Center.CenterName,
                                        CabinetNumber = q.Cabinet.CabinetNumber,
                                        CabinetInputsCount = q.Cabinet.CabinetInputs.Count().ToString(),
                                        RemainedQuotaReservation = (context.Buchts.Where(bu => bu.CabinetInput.CabinetID == q.Bucht.CabinetInput.Cabinet.ID && bu.Status == (byte)DB.BuchtStatus.Free && bu.CabinetInput.Status == (byte)DB.CabinetInputStatus.healthy && bu.PCMPortID == null).Count())
                                                                   -
                                                                   (context.Buchts.Where(bu => bu.CabinetInput.CabinetID == q.Bucht.CabinetInput.Cabinet.ID && bu.CabinetInput.Status == (byte)DB.CabinetInputStatus.healthy && bu.PCMPortID == null).Count() * intCabinetShare / 100),

                                        ActiveCount = context.Buchts.Where(b => b.CabinetInput.CabinetID == q.Bucht.CabinetInput.Cabinet.ID && b.Status == (int)DB.BuchtStatus.Connection && !b.PCMPortID.HasValue).Count()
                                                         + context.Buchts.Where(b => b.CabinetInput.CabinetID == q.Bucht.CabinetInput.Cabinet.ID && b.Status == (int)DB.BuchtStatus.AllocatedToInlinePCM && !b.PCMPortID.HasValue).Count(),
                                        ReservedCount = context.Buchts.Where(b => b.CabinetInput.CabinetID == q.CabinetInput.Cabinet.ID && b.Status == (int)DB.BuchtStatus.Reserve && !b.PCMPortID.HasValue).Count(),
                                        BrokenCount = context.Buchts.Where(b => b.CabinetInput.CabinetID == q.CabinetInput.Cabinet.ID && b.Status == (int)DB.BuchtStatus.Destroy && !b.PCMPortID.HasValue).Count(),
                                        EmptyCount = context.Buchts.Where(b => b.CabinetInput.CabinetID == q.CabinetInput.Cabinet.ID && b.Status == (int)DB.BuchtStatus.Free && b.CabinetInput.Status == (byte)DB.CabinetInputStatus.healthy && !b.PCMPortID.HasValue).Count()
                                    }
                                   )
                                  .AsQueryable();

                //به خاطر مقایسه با تعدادزوج خالی به عنوان یکی از فیلتر های گزارش متغیر زیر را تعریف کردم
                var secondaryResult = primaryResult.Where(pr => (emptyCount == -1 || pr.EmptyCount <= emptyCount)).AsQueryable();

                return secondaryResult.Distinct()
                                      .ToList();
            }
        }

        //TODO:rad
        public static SpaceAndPowerInvoiceIssuanceCertificateInfo SearchSpaceAndPowerInvoiceByRequestID(out CustomerReportInfo customer, long requestId)
        {
            using (MainDataContext context = new MainDataContext())
            {
                CustomerReportInfo customerInfo = new CustomerReportInfo();
                IQueryable<SpaceAndPower> query = Enumerable.Empty<SpaceAndPower>().AsQueryable();
                query = context.SpaceAndPowers.Where(sp => sp.ID == requestId);

                customerInfo = query.Select(sp => new CustomerReportInfo
                                                {
                                                    ID = sp.SpaceAndPowerCustomerID,
                                                    AddressContent = (sp.Customer.AddressID.HasValue) ? sp.Customer.Address.AddressContent : string.Empty,
                                                    AddressID = sp.Customer.AddressID,
                                                    ProvinceName = (sp.Customer.AddressID.HasValue) ? sp.Customer.Address.Center.Region.City.Province.Name : string.Empty,
                                                    CityName = (sp.Customer.AddressID.HasValue) ? sp.Customer.Address.Center.Region.City.Name : string.Empty,
                                                    RegionName = (sp.Customer.AddressID.HasValue) ? sp.Customer.Address.Center.Region.Title : string.Empty,
                                                    CustomerName = string.Format("{0} {1}", sp.Customer.FirstNameOrTitle, sp.Customer.LastName),
                                                    PostalCode = (sp.Customer.AddressID.HasValue) ? sp.Customer.Address.PostalCode : string.Empty,
                                                    UrgentTelNo = sp.Customer.UrgentTelNo,
                                                    NationalID = sp.Customer.NationalID
                                                }
                                           )
                                    .SingleOrDefault();
                customer = customerInfo;

                SpaceAndPowerInvoiceIssuanceCertificateInfo result = new SpaceAndPowerInvoiceIssuanceCertificateInfo();
                result = query.Select(sp => new SpaceAndPowerInvoiceIssuanceCertificateInfo
                                            {
                                                AddressID = sp.AddressID,
                                                CustomerID = sp.SpaceAndPowerCustomerID,
                                                SpaceSize = sp.SpaceSize,
                                                SpaceMonthlyRent = "",
                                                PowerRate = sp.PowerRate,
                                                PowerMonthlyRent = "",
                                                AntennaCount = context.Antennas
                                                                      .Where(an => an.SpaceAndPowerID == sp.ID)
                                                                      .Select(an => an.Count)
                                                                      .FirstOrDefault(),
                                                AntennaMonthlyRent = "",
                                                AllocationDateString = sp.AdministrationOfTheTelecommunicationEquipmentOperationDate.ToPersian(Date.DateStringType.Short),
                                                NumberOfUsing = "",
                                                TotalAmountWithoutTaxVAT = "",
                                                RemarkTaxCharges = ""
                                            }
                                      )
                            .FirstOrDefault();

                return result;
            }
        }

        //TODO:rad
        public static E1InvoiceIssuanceCertificateInfo SearchE1InvoiceByRequestID(out CustomerReportInfo customer, long requestId)
        {
            using (MainDataContext context = new MainDataContext())
            {
                CustomerReportInfo customerInfo = new CustomerReportInfo();
                IQueryable<E1> query = Enumerable.Empty<E1>().AsQueryable();
                query = context.E1s.Where(e => e.RequestID == requestId);
                customerInfo = query.Select(e => new CustomerReportInfo
                                                 {
                                                     ID = (e.Request.CustomerID.HasValue) ? e.Request.CustomerID.Value : 0,
                                                     AddressContent = (e.Request.Customer.AddressID.HasValue) ? e.Request.Customer.Address.AddressContent : string.Empty,
                                                     AddressID = e.Request.Customer.AddressID,
                                                     ProvinceName = (e.Request.Customer.AddressID.HasValue) ? e.Request.Customer.Address.Center.Region.City.Province.Name : string.Empty,
                                                     CityName = (e.Request.Customer.AddressID.HasValue) ? e.Request.Customer.Address.Center.Region.City.Name : string.Empty,
                                                     RegionName = (e.Request.Customer.AddressID.HasValue) ? e.Request.Customer.Address.Center.Region.Title : string.Empty,
                                                     CustomerName = string.Format("{0} {1}", e.Request.Customer.FirstNameOrTitle, e.Request.Customer.LastName),
                                                     PostalCode = (e.Request.Customer.AddressID.HasValue) ? e.Request.Customer.Address.PostalCode : string.Empty,
                                                     UrgentTelNo = e.Request.Customer.UrgentTelNo,
                                                     NationalID = e.Request.Customer.NationalID
                                                 }
                                           )
                                    .SingleOrDefault();
                customer = customerInfo;

                E1InvoiceIssuanceCertificateInfo result = new E1InvoiceIssuanceCertificateInfo();
                result = query.Select(e => new E1InvoiceIssuanceCertificateInfo
                                                {
                                                    InstallAddressID = e.InstallAddressID,
                                                    TargetInstallAddressID = e.TargetInstallAddressID,
                                                    CustomerID = (e.Request.CustomerID.HasValue) ? e.Request.CustomerID.Value : 0,
                                                    LinkType = (e.LinkTypeID.HasValue) ? e.E1LinkType.Name : string.Empty,
                                                    NumberOfLine = null,
                                                    TotalAmount = "",
                                                    RemarkTaxCharges = ""
                                                }
                                     )
                              .FirstOrDefault();
                return result;
            }
        }

        //TODO:rad
        public static List<E1CertificateReportInfo> SearchE1CertificateByRequestID(long requestID)
        {
            using (MainDataContext context = new MainDataContext())
            {
                List<E1CertificateReportInfo> finalResult = new List<E1CertificateReportInfo>();

                var firstQuery = context.E1s
                                        .GroupJoin(context.Customers, e1 => e1.Request.CustomerID, cu => cu.ID, (e1, cus) => new { _E1 = e1, _Customers = cus }) //Left join with Customer
                                        .SelectMany(a => a._Customers.DefaultIfEmpty(), (a, cu) => new { _E1 = a._E1, _Customer = cu })

                                        .GroupJoin(context.CustomerTypes, a => a._E1.TelephoneType, ct => ct.ID, (a, cts) => new { _E1 = a._E1, _Customer = a._Customer, TelephoneTypes = cts }) //Left join with CustomerType
                                        .SelectMany(a => a.TelephoneTypes.DefaultIfEmpty(), (a, ct) => new { _E1 = a._E1, _Customer = a._Customer, TelephoneType = ct })

                                        .GroupJoin(context.CustomerGroups, a => a._E1.TelephoneTypeGroup, cg => cg.ID, (a, cgs) => new { _E1 = a._E1, _Customer = a._Customer, TelephoneType = a.TelephoneType, TelephoneGroups = cgs }) //Left join with CustomerGroup
                                        .SelectMany(a => a.TelephoneGroups.DefaultIfEmpty(), (a, cg) => new { _E1 = a._E1, _Customer = a._Customer, TelephoneType = a.TelephoneType, TelephoneGroup = cg })

                                        .GroupJoin(context.Addresses, a => a._E1.InstallAddressID, ad => ad.ID, (a, sas) => new { _E1 = a._E1, _Customer = a._Customer, TelephoneType = a.TelephoneType, TelephoneGroup = a.TelephoneGroup, SourceAddresses = sas }) //Left join with Address - InstallAddressID
                                        .SelectMany(a => a.SourceAddresses.DefaultIfEmpty(), (a, sa) => new { _E1 = a._E1, _Customer = a._Customer, TelephoneType = a.TelephoneType, TelephoneGroup = a.TelephoneGroup, SourceAddress = sa })

                                        .GroupJoin(context.Addresses, a => a._E1.TargetInstallAddressID, ad => ad.ID, (a, tas) => new { _E1 = a._E1, _Customer = a._Customer, TelephoneType = a.TelephoneType, TelephoneGroup = a.TelephoneGroup, SourceAddress = a.SourceAddress, TargetAddresses = tas })  //Left join with Address - TargetInstallAddressID
                                        .SelectMany(a => a.TargetAddresses.DefaultIfEmpty(), (a, ta) => new { _E1 = a._E1, _Customer = a._Customer, TelephoneType = a.TelephoneType, TelephoneGroup = a.TelephoneGroup, SourceAddress = a.SourceAddress, TargetAddress = ta })

                                        .GroupJoin(context.Addresses, a => a._E1.CorrespondenceAddressID, ad => ad.ID, (a, cas) => new { _E1 = a._E1, _Customer = a._Customer, TelephoneType = a.TelephoneType, TelephoneGroup = a.TelephoneGroup, SourceAddress = a.SourceAddress, TargetAddress = a.TargetAddress, CorrespondenceAddresses = cas }) //Left join with Address - CorrespondenceAddressID
                                        .SelectMany(a => a.CorrespondenceAddresses.DefaultIfEmpty(), (a, ca) => new { _E1 = a._E1, _Customer = a._Customer, TelephoneType = a.TelephoneType, TelephoneGroup = a.TelephoneGroup, SourceAddress = a.SourceAddress, TargetAddress = a.TargetAddress, CorrespondenceAddress = ca })

                                        .Where(a => a._E1.RequestID == requestID)

                                        .AsQueryable();

                finalResult = firstQuery.Select(result => new E1CertificateReportInfo
                                                        {
                                                            CityName = result._E1.Request.Center.Region.City.Name,
                                                            CenterName = result._E1.Request.Center.CenterName,
                                                            CustomerName = string.Format("{0} {1}", result._Customer.FirstNameOrTitle, result._Customer.LastName),
                                                            NationalCodeOrRecordNo = result._Customer.NationalCodeOrRecordNo,
                                                            TelephoneTypeTitle = result.TelephoneType.Title,
                                                            TelephoneGroupTitle = result.TelephoneGroup.Title,
                                                            LinkTypeName = (result._E1.LinkTypeID.HasValue) ? result._E1.E1LinkType.Name : string.Empty,
                                                            CodeTypeName = (result._E1.CodeTypeID.HasValue) ? result._E1.E1CodeType.Name : string.Empty,
                                                            ChanalType = Helpers.GetEnumDescription(result._E1.ChanalType.Value, typeof(DB.E1ChanalType)),
                                                            NumberOfLine = result._E1.NumberOfLine,
                                                            ConnectionNo = result._E1.ConnectionNo,
                                                            CompanyCode = result._E1.CompanyCode,
                                                            LineType = Helpers.GetEnumDescription(result._E1.LineType.Value, typeof(DB.E1Type)),
                                                            SourcePostalCode = result.SourceAddress.PostalCode,
                                                            SourceAddress = result.SourceAddress.AddressContent,
                                                            TargetPostalCode = result.TargetAddress.PostalCode,
                                                            TargetAddress = result.TargetAddress.AddressContent,
                                                            CorrespondencePostalCode = result.CorrespondenceAddress.PostalCode,
                                                            CorrespondenceAddress = result.CorrespondenceAddress.AddressContent
                                                        }
                                                  )
                                        .ToList();


                return finalResult;
            }
        }

        //TODO:rad
        public static List<E1CertificateReportInfo> SearchE1Certificate(List<int> cities, List<int> centers, string nationalCodeOrRecordNo, DateTime? fromDate, DateTime? toDate)
        {
            using (MainDataContext context = new MainDataContext())
            {
                List<E1CertificateReportInfo> finalResult = new List<E1CertificateReportInfo>();

                var firstQuery = context.E1s
                                        .GroupJoin(context.Customers, e1 => e1.Request.CustomerID, cu => cu.ID, (e1, cus) => new { _E1 = e1, _Customers = cus }) //Left join with Customer
                                        .SelectMany(a => a._Customers.DefaultIfEmpty(), (a, cu) => new { _E1 = a._E1, _Customer = cu })

                                        .GroupJoin(context.CustomerTypes, a => a._E1.TelephoneType, ct => ct.ID, (a, cts) => new { _E1 = a._E1, _Customer = a._Customer, TelephoneTypes = cts }) //Left join with CustomerType
                                        .SelectMany(a => a.TelephoneTypes.DefaultIfEmpty(), (a, ct) => new { _E1 = a._E1, _Customer = a._Customer, TelephoneType = ct })

                                        .GroupJoin(context.CustomerGroups, a => a._E1.TelephoneTypeGroup, cg => cg.ID, (a, cgs) => new { _E1 = a._E1, _Customer = a._Customer, TelephoneType = a.TelephoneType, TelephoneGroups = cgs }) //Left join with CustomerGroup
                                        .SelectMany(a => a.TelephoneGroups.DefaultIfEmpty(), (a, cg) => new { _E1 = a._E1, _Customer = a._Customer, TelephoneType = a.TelephoneType, TelephoneGroup = cg })

                                        .GroupJoin(context.Addresses, a => a._E1.InstallAddressID, ad => ad.ID, (a, sas) => new { _E1 = a._E1, _Customer = a._Customer, TelephoneType = a.TelephoneType, TelephoneGroup = a.TelephoneGroup, SourceAddresses = sas }) //Left join with Address - InstallAddressID
                                        .SelectMany(a => a.SourceAddresses.DefaultIfEmpty(), (a, sa) => new { _E1 = a._E1, _Customer = a._Customer, TelephoneType = a.TelephoneType, TelephoneGroup = a.TelephoneGroup, SourceAddress = sa })

                                        .GroupJoin(context.Addresses, a => a._E1.TargetInstallAddressID, ad => ad.ID, (a, tas) => new { _E1 = a._E1, _Customer = a._Customer, TelephoneType = a.TelephoneType, TelephoneGroup = a.TelephoneGroup, SourceAddress = a.SourceAddress, TargetAddresses = tas })  //Left join with Address - TargetInstallAddressID
                                        .SelectMany(a => a.TargetAddresses.DefaultIfEmpty(), (a, ta) => new { _E1 = a._E1, _Customer = a._Customer, TelephoneType = a.TelephoneType, TelephoneGroup = a.TelephoneGroup, SourceAddress = a.SourceAddress, TargetAddress = ta })

                                        .GroupJoin(context.Addresses, a => a._E1.CorrespondenceAddressID, ad => ad.ID, (a, cas) => new { _E1 = a._E1, _Customer = a._Customer, TelephoneType = a.TelephoneType, TelephoneGroup = a.TelephoneGroup, SourceAddress = a.SourceAddress, TargetAddress = a.TargetAddress, CorrespondenceAddresses = cas }) //Left join with Address - CorrespondenceAddressID
                                        .SelectMany(a => a.CorrespondenceAddresses.DefaultIfEmpty(), (a, ca) => new { _E1 = a._E1, _Customer = a._Customer, TelephoneType = a.TelephoneType, TelephoneGroup = a.TelephoneGroup, SourceAddress = a.SourceAddress, TargetAddress = a.TargetAddress, CorrespondenceAddress = ca })

                                        .Where(a =>
                                                    (cities.Count == 0 || cities.Contains(a._E1.Request.Center.Region.CityID)) &&
                                                    (centers.Count == 0 || centers.Contains(a._E1.Request.CenterID)) &&
                                                    (!fromDate.HasValue || a._E1.Request.EndDate >= fromDate) &&
                                                    (!toDate.HasValue || a._E1.Request.EndDate <= toDate) &&
                                                    (string.IsNullOrEmpty(nationalCodeOrRecordNo) || (nationalCodeOrRecordNo == a._Customer.NationalCodeOrRecordNo))
                                               )

                                        .AsQueryable();

                finalResult = firstQuery.Select(result => new E1CertificateReportInfo
                {
                    CityName = result._E1.Request.Center.Region.City.Name,
                    CenterName = result._E1.Request.Center.CenterName,
                    CustomerName = string.Format("{0} {1}", result._Customer.FirstNameOrTitle, result._Customer.LastName),
                    NationalCodeOrRecordNo = result._Customer.NationalCodeOrRecordNo,
                    TelephoneTypeTitle = result.TelephoneType.Title,
                    TelephoneGroupTitle = result.TelephoneGroup.Title,
                    LinkTypeName = (result._E1.LinkTypeID.HasValue) ? result._E1.E1LinkType.Name : string.Empty,
                    CodeTypeName = (result._E1.CodeTypeID.HasValue) ? result._E1.E1CodeType.Name : string.Empty,
                    ChanalType = Helpers.GetEnumDescription(result._E1.ChanalType.Value, typeof(DB.E1ChanalType)),
                    NumberOfLine = result._E1.NumberOfLine,
                    ConnectionNo = result._E1.ConnectionNo,
                    CompanyCode = result._E1.CompanyCode,
                    LineType = Helpers.GetEnumDescription(result._E1.LineType.Value, typeof(DB.E1Type)),
                    SourcePostalCode = result.SourceAddress.PostalCode,
                    SourceAddress = result.SourceAddress.AddressContent,
                    TargetPostalCode = result.TargetAddress.PostalCode,
                    TargetAddress = result.TargetAddress.AddressContent,
                    CorrespondencePostalCode = result.CorrespondenceAddress.PostalCode,
                    CorrespondenceAddress = result.CorrespondenceAddress.AddressContent
                }
                                                  )
                                        .ToList();


                return finalResult;
            }
        }

        //TODO:rad
        public static List<TelecomminucationServicePaymentReportInfo> SearchTelecomminucationServicePaymentStatistics(string nationalCodeOrRecordNo, long requestId, int requestTypeId, out List<CustomerReportInfo> customers)
        {
            using (MainDataContext context = new MainDataContext())
            {
                List<CustomerReportInfo> customersInfo = new List<CustomerReportInfo>();
                List<TelecomminucationServicePaymentReportInfo> result = new List<TelecomminucationServicePaymentReportInfo>();

                IQueryable<TelecomminucationServicePayment> query = Enumerable.Empty<TelecomminucationServicePayment>().AsQueryable();
                query = context.TelecomminucationServicePayments
                               .Where(tsp =>
                                            (requestId == -1 || tsp.RequestID == requestId) &&
                                            (string.IsNullOrEmpty(nationalCodeOrRecordNo) || (tsp.Request.Customer.NationalCodeOrRecordNo == nationalCodeOrRecordNo))
                                      );
                //پر کردن لیست مشترکینی که درخواستشان دارای کالا وخدمات مخابرات بوده است
                customersInfo = query.Select(tsp => new CustomerReportInfo
                                                    {
                                                        ID = tsp.Request.Customer.ID,
                                                        AddressContent = (tsp.Request.Customer.AddressID.HasValue) ? tsp.Request.Customer.Address.AddressContent : string.Empty,
                                                        ProvinceName = (tsp.Request.Customer.AddressID.HasValue) ? tsp.Request.Customer.Address.Center.Region.City.Province.Name : string.Empty,
                                                        CityName = (tsp.Request.Customer.AddressID.HasValue) ? tsp.Request.Customer.Address.Center.Region.City.Name : string.Empty,
                                                        CustomerName = string.Format("{0} {1}", tsp.Request.Customer.FirstNameOrTitle, tsp.Request.Customer.LastName),
                                                        PostalCode = (tsp.Request.Customer.AddressID.HasValue) ? tsp.Request.Customer.Address.PostalCode : string.Empty,
                                                        UrgentTelNo = tsp.Request.Customer.UrgentTelNo,
                                                        NationalCodeOrRecordNo = tsp.Request.Customer.NationalCodeOrRecordNo,
                                                        NationalID = tsp.Request.Customer.NationalID
                                                    }
                                              )
                                    .Distinct()
                                    .ToList();
                customers = customersInfo;
                //**************************************************************************************************************************************************


                //باید بر اساس نوع درخواست مابقی ستون های گزارش پر شود
                //چون ستونی که در پایگاه داده مقدار آدرس به ازای هر رکورد از گزارش را دارا میباشد در نوع درخواستهای گوناگون ، متفاوت است
                switch (requestTypeId)
                {
                    case (int)DB.RequestType.SpaceandPower:
                        {
                            //صورتحساب هایی را باید برگرداند که فقط مربوط به درخواست فضا و پاور میباشد
                            result = query.Join(context.SpaceAndPowers, tsp => tsp.RequestID, sp => sp.ID, (tsp, sp) => new { _TelecomminucationServicePayment = tsp, _SpaceAndPower = sp })
                                          .Select(tsp => new TelecomminucationServicePaymentReportInfo
                                                        {
                                                            CustomerID = tsp._SpaceAndPower.Request.CustomerID.Value,
                                                            TelecomminucationServiceTitle = tsp._TelecomminucationServicePayment.TelecomminucationService.Title,
                                                            Quantity = tsp._TelecomminucationServicePayment.Quantity,
                                                            UnitMeasureName = tsp._TelecomminucationServicePayment.TelecomminucationService.UnitMeasure.Name,
                                                            UnitPrice = tsp._TelecomminucationServicePayment.TelecomminucationService.UnitPrice,
                                                            NetAmount = tsp._TelecomminucationServicePayment.NetAmount,
                                                            Discount = tsp._TelecomminucationServicePayment.Discount,
                                                            NetAmountWithDiscount = tsp._TelecomminucationServicePayment.NetAmountWithDiscount,
                                                            TaxAndTollAmount = tsp._TelecomminucationServicePayment.TaxAndTollAmount,
                                                            AmountSum = tsp._TelecomminucationServicePayment.AmountSum,
                                                            RequestID = tsp._TelecomminucationServicePayment.RequestID,
                                                            AddressContent = tsp._TelecomminucationServicePayment.Request.SpaceAndPower.Address.AddressContent
                                                        }
                                                  )
                                          .ToList();
                            break;
                        }
                    case (int)DB.RequestType.E1:
                        {
                            //صورتحساب هایی را باید برگرداند که فقط مربوط به درخواست ایوان میباشد
                            result = query.Join(context.E1s, tsp => tsp.RequestID, e1 => e1.RequestID, (tsp, e1) => new { _TelecomminucationServicePayment = tsp, _E1 = e1 })
                                          .Select(tsp => new TelecomminucationServicePaymentReportInfo
                                                        {
                                                            CustomerID = tsp._E1.Request.CustomerID.Value,
                                                            TelecomminucationServiceTitle = tsp._TelecomminucationServicePayment.TelecomminucationService.Title,
                                                            Quantity = tsp._TelecomminucationServicePayment.Quantity,
                                                            UnitMeasureName = tsp._TelecomminucationServicePayment.TelecomminucationService.UnitMeasure.Name,
                                                            UnitPrice = tsp._TelecomminucationServicePayment.TelecomminucationService.UnitPrice,
                                                            NetAmount = tsp._TelecomminucationServicePayment.NetAmount,
                                                            Discount = tsp._TelecomminucationServicePayment.Discount,
                                                            NetAmountWithDiscount = tsp._TelecomminucationServicePayment.NetAmountWithDiscount,
                                                            TaxAndTollAmount = tsp._TelecomminucationServicePayment.TaxAndTollAmount,
                                                            AmountSum = tsp._TelecomminucationServicePayment.AmountSum,
                                                            RequestID = tsp._TelecomminucationServicePayment.RequestID,
                                                            InstallAddressContent = tsp._TelecomminucationServicePayment.Request.E1.Address.AddressContent,
                                                            TargetAddressContent = tsp._TelecomminucationServicePayment.Request.E1.Address2.AddressContent
                                                        }
                                                 )
                                          .ToList();
                            break;
                        }
                }

                return result;
            }
        }


        /// <summary>
        /// .لیست تلفن های قطع شده را بر اساس شناسه درخواست برمیگرداند
        /// </summary>
        /// <param name="requestsId"></param>
        /// <returns></returns>
        public static List<CuttedTelephoneInfo> GetCuttedTelephoneInfosByRequestsID(List<long> requestsId)
        {
            using (MainDataContext context = new MainDataContext())
            {
                List<CuttedTelephoneInfo> result = new List<CuttedTelephoneInfo>();

                var query = context.Requests
                                   .Join(context.Telephones, re => re.TelephoneNo, te => te.TelephoneNo, (re, te) => new { _Request = re, _Telephone = te }) //join with Telephones

                                   .GroupJoin(context.Buchts, a => a._Telephone.SwitchPortID, bu => bu.SwitchPortID, (a, bus) => new { _Request = a._Request, _Telephone = a._Telephone, _Buchts = bus })
                                   .SelectMany(a => a._Buchts.DefaultIfEmpty(), (a, bu) => new { _Request = a._Request, _Telephone = a._Telephone, _Bucht = bu }) //join with Buchts

                                   .GroupJoin(context.ADSLPAPPorts, a => a._Telephone.TelephoneNo, adp => adp.TelephoneNo, (a, adps) => new { _Request = a._Request, _Telephone = a._Telephone, _Bucht = a._Bucht, _AdslPapPorts = adps })
                                   .SelectMany(a => a._AdslPapPorts.DefaultIfEmpty(), (a, adp) => new { _Request = a._Request, _Telephone = a._Telephone, _Bucht = a._Bucht, _AdslPapPort = adp }) //join with ADSlPapPorts 

                                   .Where(a =>
                                              (a._Request.RequestTypeID == (byte)DB.RequestType.CutAndEstablish) &&
                                              (requestsId.Count == 0 || requestsId.Contains(a._Request.ID))
                                         )
                                   .Select(a => new CuttedTelephoneInfo
                                                {
                                                    CityName = a._Request.Center.Region.City.Name,
                                                    CenterName = a._Request.Center.CenterName,
                                                    TelephoneNo = a._Telephone.TelephoneNo,
                                                    VerticalColumnNo = a._Bucht.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo,
                                                    VerticalRowNo = a._Bucht.VerticalMDFRow.VerticalRowNo,
                                                    BuchtNo = a._Bucht.BuchtNo,

                                                    PcmColumnNo = (a._Bucht.BuchtTypeID == (int)DB.BuchtType.InLine) ?
                                                                  context.Buchts
                                                                         .Where(t2 =>
                                                                                     (t2.CabinetInputID == a._Bucht.CabinetInputID) &&
                                                                                     (t2.BuchtTypeID == (int)DB.BuchtType.CustomerSide)
                                                                                )
                                                                         .Select(t2 => t2.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo)
                                                                         .SingleOrDefault() : default(int?),

                                                    PcmRowNo = (a._Bucht.BuchtTypeID == (int)DB.BuchtType.InLine) ?
                                                                context.Buchts
                                                                       .Where(t2 =>
                                                                                 (t2.CabinetInputID == a._Bucht.CabinetInputID) &&
                                                                                 (t2.BuchtTypeID == (int)DB.BuchtType.CustomerSide)
                                                                             )
                                                                       .Select(t2 => t2.VerticalMDFRow.VerticalRowNo)
                                                                       .SingleOrDefault() : default(int?),

                                                    PcmBuchtNo = (a._Bucht.BuchtTypeID == (int)DB.BuchtType.InLine) ?
                                                                 context.Buchts
                                                                        .Where(t2 =>
                                                                                    (t2.CabinetInputID == a._Bucht.CabinetInputID) &&
                                                                                    (t2.BuchtTypeID == (int)DB.BuchtType.CustomerSide)
                                                                              )
                                                                        .Select(t2 => t2.BuchtNo)
                                                                        .SingleOrDefault() : default(long?),
                                                    AdslColumnNo = a._AdslPapPort.RowNo,
                                                    AdslRowNo = a._AdslPapPort.ColumnNo,
                                                    AdslBuchtNo = a._AdslPapPort.BuchtNo,
                                                    ActionCutDueDate = a._Request.CutAndEstablish.ActionCutDueDate.ToPersian(Date.DateStringType.Short)
                                                }
                                          )
                                   .AsQueryable();

                result = query.ToList();

                return result;
            }
        }

        /// <summary>
        /// .لیست تلفن های وصل شده را بر اساس شناسه درخواست برمیگرداند
        /// </summary>
        /// <param name="requestsId"></param>
        /// <returns></returns>
        public static List<EstablishedTelephoneInfo> GetEstablishedTelephoneInfosByRequestsID(List<long> requestsId)
        {
            using (MainDataContext context = new MainDataContext())
            {
                List<EstablishedTelephoneInfo> result = new List<EstablishedTelephoneInfo>();
                var query = context.Requests
                                   .Join(context.Telephones, re => re.TelephoneNo, te => te.TelephoneNo, (re, te) => new { _Request = re, _Telephone = te }) //join with Telephones

                                   .GroupJoin(context.Buchts, a => a._Telephone.SwitchPortID, bu => bu.SwitchPortID, (a, bus) => new { _Request = a._Request, _Telephone = a._Telephone, _Buchts = bus })
                                   .SelectMany(a => a._Buchts.DefaultIfEmpty(), (a, bu) => new { _Request = a._Request, _Telephone = a._Telephone, _Bucht = bu }) //join with Buchts

                                   .GroupJoin(context.ADSLPAPPorts, a => a._Telephone.TelephoneNo, adps => adps.TelephoneNo, (a, adps) => new { _Request = a._Request, _Telephone = a._Telephone, _Bucht = a._Bucht, _AdslPapPorts = adps })
                                   .SelectMany(a => a._AdslPapPorts.DefaultIfEmpty(), (a, adp) => new { _Request = a._Request, _Telephone = a._Telephone, _Bucht = a._Bucht, _AdslPapPort = adp }) //join with ADSLPAPPorts

                                   .Where(a =>
                                              (a._Request.RequestTypeID == (int)DB.RequestType.Connect) &&
                                              (requestsId.Count == 0 || requestsId.Contains(a._Request.ID))
                                         )
                                  .Select(a => new EstablishedTelephoneInfo
                                                {
                                                    CityName = a._Request.Center.Region.City.Name,
                                                    CenterName = a._Request.Center.CenterName,
                                                    TelephoneNo = a._Telephone.TelephoneNo,
                                                    VerticalColumnNo = a._Bucht.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo,
                                                    VerticalRowNo = a._Bucht.VerticalMDFRow.VerticalRowNo,
                                                    BuchtNo = a._Bucht.BuchtNo,

                                                    PcmColumnNo = (a._Bucht.BuchtTypeID == (int)DB.BuchtType.InLine) ?
                                                                  context.Buchts
                                                                         .Where(bu =>
                                                                                    (bu.CabinetInputID == a._Bucht.CabinetInputID) &&
                                                                                    (bu.BuchtTypeID == (int)DB.BuchtType.CustomerSide)
                                                                                )
                                                                         .Select(bu => bu.VerticalMDFRow.VerticalMDFColumn.VerticalCloumnNo)
                                                                         .SingleOrDefault() : default(int?),
                                                    PcmRowNo = (a._Bucht.BuchtTypeID == (int)DB.BuchtType.InLine) ?
                                                                context.Buchts.Where(bu =>
                                                                                        (bu.CabinetInputID == a._Bucht.CabinetInputID) &&
                                                                                        (bu.BuchtTypeID == (int)DB.BuchtType.CustomerSide)
                                                                                    )
                                                                              .Select(bu => bu.VerticalMDFRow.VerticalRowNo)
                                                                              .SingleOrDefault() : default(int?),
                                                    PcmBuchtNo = (a._Bucht.BuchtTypeID == (int)DB.BuchtType.InLine) ?
                                                                 context.Buchts
                                                                        .Where(bu =>
                                                                                  (bu.CabinetInputID == a._Bucht.CabinetInputID) &&
                                                                                  (bu.BuchtTypeID == (int)DB.BuchtType.CustomerSide)
                                                                              )
                                                                        .Select(bu => bu.BuchtNo)
                                                                        .SingleOrDefault() : default(long?),
                                                    AdslColumnNo = a._AdslPapPort.RowNo,
                                                    AdslRowNo = a._AdslPapPort.ColumnNo,
                                                    AdslBuchtNo = a._AdslPapPort.BuchtNo,
                                                    ActionEstablishDueDate = a._Request.CutAndEstablish.ActionEstablishDueDate.ToPersian(Date.DateStringType.Short)
                                                }
                                         )
                                  .AsQueryable();
                result = query.ToList();
                return result;
            }
        }
    }
}

