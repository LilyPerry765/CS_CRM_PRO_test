

namespace CaseManagement.Common.Entities
{
    using Newtonsoft.Json;
    using Serenity;
    using Serenity.ComponentModel;
    using Serenity.Data;
    using Serenity.Data.Mapping;
    using System;
    using System.ComponentModel;
    using System.IO;

    [ConnectionKey("Default"), DisplayName("MessageLog"), InstanceName("MessageLog"), TwoLevelCached]
    [ReadPermission("Administration")]
    [ModifyPermission("Administration")]
    public sealed class MessageLogRow : Row, IIdRow, INameRow
    {
        [DisplayName("شناسه"), Column("ID"), Identity]
        public Int32? Id
        {
            get { return Fields.Id[this]; }
            set { Fields.Id[this] = value; }
        }

        [DisplayName("تاریخ ارسال"), NotNull]
        public DateTime? InsertDate
        {
            get { return Fields.InsertDate[this]; }
            set { Fields.InsertDate[this] = value; }
        }

        [DisplayName("شناسه فعالیت"), Column("ActivityRequestID")]
        public Int64? ActivityRequestId
        {
            get { return Fields.ActivityRequestId[this]; }
            set { Fields.ActivityRequestId[this] = value; }
        }

        [DisplayName("Message Id"), Column("MessageID"), NotNull]
        public Int32? MessageId
        {
            get { return Fields.MessageId[this]; }
            set { Fields.MessageId[this] = value; }
        }

        [DisplayName("Sender User Id"), Column("SenderUserID"), NotNull]
        public Int32? SenderUserId
        {
            get { return Fields.SenderUserId[this]; }
            set { Fields.SenderUserId[this] = value; }
        }

        [DisplayName("Sender User Name"), Size(255), QuickSearch]
        public String SenderUserName
        {
            get { return Fields.SenderUserName[this]; }
            set { Fields.SenderUserName[this] = value; }
        }
       
        [LookupEditor("Case.Province")]
        [DisplayName("Province"), Column("ReceiverProvinceID"), ForeignKey("[dbo].[Province]", "ID"), LeftJoin("jProvince"), TextualField("ProvinceName")]
        public Int32? ReceiverProvinceId
        {
            get { return Fields.ReceiverProvinceId[this]; }
            set { Fields.ReceiverProvinceId[this] = value; }
        }

        [DisplayName("Receiver User Id"), Column("ReceiverUserID"), NotNull]
        public Int32? ReceiverUserId
        {
            get { return Fields.ReceiverUserId[this]; }
            set { Fields.ReceiverUserId[this] = value; }
        }

        [DisplayName("کاربر"), Size(255)]
        public String ReceiverUserName
        {
            get { return Fields.ReceiverUserName[this]; }
            set { Fields.ReceiverUserName[this] = value; }
        }

        [DisplayName("شماره موبایل"), Size(15)]
        public String MobileNumber
        {
            get { return Fields.MobileNumber[this]; }
            set { Fields.MobileNumber[this] = value; }
        }

        [DisplayName("Text Sent"), Size(1000)]
        public String TextSent
        {
            get { return Fields.TextSent[this]; }
            set { Fields.TextSent[this] = value; }
        }

        [DisplayName("Is Sent"), NotNull]
        public Boolean? IsSent
        {
            get { return Fields.IsSent[this]; }
            set { Fields.IsSent[this] = value; }
        }

        [DisplayName("Is Delivered"), NotNull]
        public Boolean? IsDelivered
        {
            get { return Fields.IsDelivered[this]; }
            set { Fields.IsDelivered[this] = value; }
        }

        [DisplayName("استان"), Expression("jProvince.[Name]")]
        public String ReceiverProvinceName
        {
            get { return Fields.ReceiverProvinceName[this]; }
            set { Fields.ReceiverProvinceName[this] = value; }
        }

        IIdField IIdRow.IdField
        {
            get { return Fields.Id; }
        }

        StringField INameRow.NameField
        {
            get { return Fields.SenderUserName; }
        }

        public static readonly RowFields Fields = new RowFields().Init();

        public MessageLogRow()
            : base(Fields)
        {
        }

        public class RowFields : RowFieldsBase
        {
            public Int32Field Id;
            public DateTimeField InsertDate;
            public Int64Field ActivityRequestId;
            public Int32Field MessageId;
            public Int32Field SenderUserId;
            public StringField SenderUserName;
            public Int32Field ReceiverProvinceId;
            public Int32Field ReceiverUserId;
            public StringField ReceiverUserName;
            public StringField MobileNumber;
            public StringField TextSent;
            public BooleanField IsSent;
            public BooleanField IsDelivered;
            public StringField ReceiverProvinceName;

            public RowFields()
                : base("[dbo].[MessageLog]")
            {
                LocalTextPrefix = "Common.MessageLog";
            }
        }
    }
}