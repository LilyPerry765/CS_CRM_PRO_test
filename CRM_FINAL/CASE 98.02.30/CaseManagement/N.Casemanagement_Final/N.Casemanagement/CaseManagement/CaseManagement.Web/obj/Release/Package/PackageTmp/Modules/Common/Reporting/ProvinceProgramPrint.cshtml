
<!DOCTYPE html>
<html>
<head>
    <script src="~/scripts/persian-date-0.1.8.js"></script>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>ProvinceProgram</title>
    <meta content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" name="viewport">
   <!-- <link rel="stylesheet" href="~/Content/bootstrap.css">
    <link rel="stylesheet" href="~/Content/site/site.css">-->
</head>
<body onload="window.print();">
    <div class="wrapper" >
        <!-- Main content -->
        <section class="invoice">
            <!-- Table row -->
            <div class="row">
                <div class="col-xs-12 table-responsive">
                    <div style="text-align:center;">
                        <img style="margin-bottom:4px;float:right;" src="/Modules/Common/Reporting/mokhaberat_40.png" />
                        <th3 style="font-size:16px;font-family:Tahoma;font-weight:bold;">گزارش فعالیت استان ها</th3>
                        <th3 style="float:left;margin-top:15px;font-size:9px;" id="date"></th3>
                    </div>
                    <br />
                    <table cellspacing="0" border="1" class="table" id="Province_Program_Table" style="font-family: Tahoma; font-size: 11px; border: 1px solid black; border-collapse: collapse;margin-bottom:0px; ">
                        <thead style="background-color: #0090D9; color: #eee; font-weight: 600; ">
                            <tr>
                                <th style="text-align: center; border: 1px solid black;">استان</th>
                                <th style="text-align: center; border: 1px solid black;">سال</th>
                                <th style="text-align: center; border: 1px solid black;">برنامه</th>
                                <th style="text-align: center; border: 1px solid black;">نشتی کل</th>
                                <th style="text-align: center; border: 1px solid black;">نشتی قابل وصول</th>
                                <th style="text-align: center; border: 1px solid black;">مبلغ مصوب</th>
                                <th style="text-align: center; border: 1px solid black;">درصد نشتی کل</th>
                                <th style="text-align: center; border: 1px solid black;">درصد نشتی قابل وصول</th>
                                <th style="text-align: center; border: 1px solid black;">درصد مصوب</th>
                                <th style="text-align: center; border: 1px solid black;">درصد مصوب به نشتی کل</th>

                            </tr>
                        </thead>
                        <tbody style="text-align: center; line-height: 1; "></tbody>
                    </table>
                </div>
                <!-- /.col -->
            </div>
            <!-- /.row -->
            <div class="row">
                <!-- accepted payments column -->
                <!-- /.col -->
            </div>
            <!-- /.row -->
        </section>
        <!-- /.content -->
    </div>
    <!-- ./wrapper -->
    </bodyonload>
</html>

<script type="text/javascript">
   var now = persianDate();
    /*  y = n.getFullYear();
      m = n.getMonth() + 1;
      d = n.getDate();*/
    //console.log(now);
    //PersiaNumber(now.hour().toString()) + ":" + PersiaNumber(now.minute().toString()) + ":" + PersiaNumber(now.second().toString()) + "  " +
   document.getElementById("date").innerHTML = " تاریخ : "  + PersiaNumber(now.date().toString()) + "-" + PersiaNumber(now.month().toString()) + "-" + PersiaNumber(now.year().toString())  ;


    function CostSeperator(value) {
        if (value != null) {
            var persianNumbers = ['۰', '۱', '۲', '۳', '۴', '۵', '۶', '۷', '۸', '۹'];
            value = value.toString();
            value = value.replace(/\,/g, '');
            var objRegex = new RegExp('(-?[0-9]+)([0-9]{3})');
            while (objRegex.test(value))
                value = value.replace(objRegex, '$1,$2');

            value = value.replace(/[0-9]/g, function (w) { return persianNumbers[+w] });
        }
        return value;
    }

    function PersiaNumber(value) {
        var arabicNumbers = ['۰', '١', '٢', '٣', '٤', '٥', '٦', '٧', '٨', '٩'];

        var chars = value.split('');

        for (var i = 0; i < chars.length; i++) {
            if (/\d/.test(chars[i])) {
                chars[i] = arabicNumbers[chars[i]];
            }
        }
        return chars.join('');
    }

    function getParameterByName(name, url) {
        if (!url) {
            url = window.location.href;
        }
        name = name.replace(/[\[\]]/g, "\\$&");
        var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, " "));
    }

    debugger;
    var Year = getParameterByName('Year');

    // alert(Year1);

    var Province_FilterName = getParameterByName('Province');
    var Province_Name = '';
    var ProvinceID = 0;
    var YearID = 0;
    var Years = new Array(11);

    var url = "http://" + window.location.hostname + ":" + window.location.port + "/Services/Case/Year/List";
    // alert("URL : " + url);

    //FIXME
    $.ajaxSetup({ async: false });
    $.getJSON(url, function (data) {

        for (var i = 0; i < data.TotalCount; i++) {

            Years[data.Entities[i].Id] = data.Entities[i].Year;

            if (data.Entities[i].Year == Year) {

                YearID = data.Entities[i].Id;
            }
        }
    });

    var url = "http://" + window.location.hostname + ":" + window.location.port + "/Services/Case/Province/List";
    // alert("URL : " + url);

    var Province = new Array(30);


    //FIXME
    $.ajaxSetup({ async: false });
    $.getJSON(url, function (data) {

        for (var k = 0; k < data.TotalCount; k++) {

            Province[data.Entities[k].Id] = data.Entities[k].Name;

            if (Province_FilterName == data.Entities[k].Name) {
                ProvinceID = data.Entities[k].Id;
            }

        }
    });

    var url = "http://" + window.location.hostname + ":" + window.location.port + "/Services/Case/ProvinceProgram/List";
    // alert("URL : " + url);

    var Table_Rows_Count = 0;

    //FIXME
    $.ajaxSetup({ async: false });
    $.getJSON(url, function (data) {

        var tableRef = document.getElementById('Province_Program_Table').getElementsByTagName('tbody')[0];

        if ((YearID != 0) && (ProvinceID == 0)) {
            var Program_Total = 0;
            var TotalLeakage_Total = 0;
            var RecoverableLeakage_Total = 0;
            var Recovered_Total = 0;

            for (var j = 0; j < data.TotalCount; j++) {

               
                if (data.Entities[j].YearId == YearID) {

                    // Insert a row in the table at the last row
                    var newRow = tableRef.insertRow(tableRef.rows.length);

                    // Insert a cell in the row at index 0
                    var newCell = newRow.insertCell(0);
                    newCell.style.border = ' 1px solid black';

                    // Append a text node to the cell
                    var newText = document.createTextNode(Province[data.Entities[j].ProvinceId]);
                    newCell.appendChild(newText);

                    var newCell = newRow.insertCell(1);
                    newCell.style.border = ' 1px solid black';
                    var newText = document.createTextNode(PersiaNumber(Years[data.Entities[j].YearId]));
                    newCell.appendChild(newText);

                    var newCell = newRow.insertCell(2);
                    newCell.style.border = ' 1px solid black';
                    var newText = document.createTextNode(CostSeperator(data.Entities[j].Program));
                    Program_Total += data.Entities[j].Program;
                    newCell.appendChild(newText);

                    var newCell = newRow.insertCell(3);
                    newCell.style.border = ' 1px solid black';
                    var newText = document.createTextNode(CostSeperator(data.Entities[j].TotalLeakage));
                    TotalLeakage_Total += data.Entities[j].TotalLeakage;
                    newCell.appendChild(newText);

                    var newCell = newRow.insertCell(4);
                    newCell.style.border = ' 1px solid black';
                    var newText = document.createTextNode(CostSeperator(data.Entities[j].RecoverableLeakage));
                    RecoverableLeakage_Total += data.Entities[j].RecoverableLeakage;
                    newCell.appendChild(newText);

                    var newCell = newRow.insertCell(5);
                    newCell.style.border = ' 1px solid black';
                    var newText = document.createTextNode(CostSeperator(data.Entities[j].Recovered));
                    Recovered_Total += data.Entities[j].Recovered;
                    newCell.appendChild(newText);

                    var newCell = newRow.insertCell(6);
                    newCell.style.border = ' 1px solid black';
                    var newText = document.createTextNode(CostSeperator(data.Entities[j].PercentTotalLeakage));
                    newCell.appendChild(newText);

                    var newCell = newRow.insertCell(7);
                    newCell.style.border = ' 1px solid black';
                    var newText = document.createTextNode(CostSeperator(data.Entities[j].PercentRecoverableLeakage));
                    newCell.appendChild(newText);

                    var newCell = newRow.insertCell(8);
                    newCell.style.border = ' 1px solid black';
                    var newText = document.createTextNode(CostSeperator(data.Entities[j].PercentRecovered));
                    newCell.appendChild(newText);

                    var newCell = newRow.insertCell(9);
                    newCell.style.border = ' 1px solid black';
                    var newText = document.createTextNode(CostSeperator(data.Entities[j].PercentRecoveredonTotal));
                    newCell.appendChild(newText);
                    

                }
            }
            //To Show Total amount of Numeric Columns
            var newRow = tableRef.insertRow(tableRef.rows.length);

            var newCell = newRow.insertCell(0);
            newCell.style.border = ' 1px solid black';
            newCell.style = 'font-weight: bold;font-size:11px';
            // Append a text node to the cell
            var newText = document.createTextNode('مجموع');
            newCell.appendChild(newText);

            var newCell = newRow.insertCell(1);
            newCell.style.border = ' 1px solid black';
            newCell.style = 'font-weight: bold;font-size:11px';
            var newText = document.createTextNode(PersiaNumber(Years[YearID]));
            newCell.appendChild(newText);

            var newCell = newRow.insertCell(2);
            newCell.style.border = ' 1px solid black';
            newCell.style = 'font-weight: bold;font-size:11px';
            var newText = document.createTextNode(CostSeperator(Program_Total));
            newCell.appendChild(newText);

            var newCell = newRow.insertCell(3);
            newCell.style.border = ' 1px solid black';
            newCell.style = 'font-weight: bold;font-size:11px';
            var newText = document.createTextNode(CostSeperator(TotalLeakage_Total));
            newCell.appendChild(newText);

            var newCell = newRow.insertCell(4);
            newCell.style.border = ' 1px solid black';
            newCell.style = 'font-weight: bold;font-size:11px';
            var newText = document.createTextNode(CostSeperator(RecoverableLeakage_Total));
            newCell.appendChild(newText);

            var newCell = newRow.insertCell(5);
            newCell.style.border = ' 1px solid black';
            newCell.style = 'font-weight: bold;font-size:11px';
            var newText = document.createTextNode(CostSeperator(Recovered_Total));
            newCell.appendChild(newText);

            var newCell = newRow.insertCell(6);
            newCell.style.border = ' 1px solid black';
            //newCell.style = 'font-weight: bold';
            var newText = document.createTextNode('_____');
            newCell.appendChild(newText);

            var newCell = newRow.insertCell(7);
            newCell.style.border = ' 1px solid black';
            //newCell.style = 'font-weight: bold';
            var newText = document.createTextNode('_____');
            newCell.appendChild(newText);

            var newCell = newRow.insertCell(8);
            newCell.style.border = ' 1px solid black';
            //newCell.style = 'font-weight: bold';
            var newText = document.createTextNode('_____');
            newCell.appendChild(newText);

            var newCell = newRow.insertCell(9);
            newCell.style.border = ' 1px solid black';
            //newCell.style = 'font-weight: bold';
            var newText = document.createTextNode('_____');
            newCell.appendChild(newText);

           

        } else if ((YearID == 0) && (ProvinceID != 0)) {

            for (var j = 0; j < data.TotalCount; j++) {

                if (data.Entities[j].ProvinceId == ProvinceID) {

                    // Insert a row in the table at the last row
                    var newRow = tableRef.insertRow(tableRef.rows.length);

                    // Insert a cell in the row at index 0
                    var newCell = newRow.insertCell(0);
                    newCell.style.border = ' 1px solid black';

                    // Append a text node to the cell
                    var newText = document.createTextNode(Province[data.Entities[j].ProvinceId]);
                    newCell.appendChild(newText);

                    var newCell = newRow.insertCell(1);
                    newCell.style.border = ' 1px solid black';
                    var newText = document.createTextNode(PersiaNumber(Years[data.Entities[j].YearId]));
                    newCell.appendChild(newText);

                    var newCell = newRow.insertCell(2);
                    newCell.style.border = ' 1px solid black';
                    var newText = document.createTextNode(CostSeperator(data.Entities[j].Program));
                    newCell.appendChild(newText);

                    var newCell = newRow.insertCell(3);
                    newCell.style.border = ' 1px solid black';
                    var newText = document.createTextNode(CostSeperator(data.Entities[j].TotalLeakage));
                    newCell.appendChild(newText);

                    var newCell = newRow.insertCell(4);
                    newCell.style.border = ' 1px solid black';
                    var newText = document.createTextNode(CostSeperator(data.Entities[j].RecoverableLeakage));
                    newCell.appendChild(newText);

                    var newCell = newRow.insertCell(5);
                    newCell.style.border = ' 1px solid black';
                    var newText = document.createTextNode(CostSeperator(data.Entities[j].Recovered));
                    newCell.appendChild(newText);

                    var newCell = newRow.insertCell(6);
                    newCell.style.border = ' 1px solid black';
                    var newText = document.createTextNode(CostSeperator(data.Entities[j].PercentTotalLeakage));
                    newCell.appendChild(newText);

                    var newCell = newRow.insertCell(7);
                    newCell.style.border = ' 1px solid black';
                    var newText = document.createTextNode(CostSeperator(data.Entities[j].PercentRecoverableLeakage));
                    newCell.appendChild(newText);

                    var newCell = newRow.insertCell(8);
                    newCell.style.border = ' 1px solid black';
                    var newText = document.createTextNode(CostSeperator(data.Entities[j].PercentRecovered));
                    newCell.appendChild(newText);

                    var newCell = newRow.insertCell(9);
                    newCell.style.border = ' 1px solid black';
                    var newText = document.createTextNode(CostSeperator(data.Entities[j].PercentRecoveredonTotal));
                    newCell.appendChild(newText);

                }
            }
        } else if ((YearID != 0) && (ProvinceID != 0)) {

            for (var j = 0; j < data.TotalCount; j++) {

                if ((data.Entities[j].YearId == YearID) && (data.Entities[j].ProvinceId == ProvinceID)) {

                    // Insert a row in the table at the last row
                    var newRow = tableRef.insertRow(tableRef.rows.length);

                    // Insert a cell in the row at index 0
                    var newCell = newRow.insertCell(0);
                    newCell.style.border = ' 1px solid black';

                    // Append a text node to the cell
                    var newText = document.createTextNode(Province[data.Entities[j].ProvinceId]);
                    newCell.appendChild(newText);

                    var newCell = newRow.insertCell(1);
                    newCell.style.border = ' 1px solid black';
                    var newText = document.createTextNode(PersiaNumber(Years[data.Entities[j].YearId]));
                    newCell.appendChild(newText);

                    var newCell = newRow.insertCell(2);
                    newCell.style.border = ' 1px solid black';
                    var newText = document.createTextNode(CostSeperator(data.Entities[j].Program));
                    newCell.appendChild(newText);

                    var newCell = newRow.insertCell(3);
                    newCell.style.border = ' 1px solid black';
                    var newText = document.createTextNode(CostSeperator(data.Entities[j].TotalLeakage));
                    newCell.appendChild(newText);

                    var newCell = newRow.insertCell(4);
                    newCell.style.border = ' 1px solid black';
                    var newText = document.createTextNode(CostSeperator(data.Entities[j].RecoverableLeakage));
                    newCell.appendChild(newText);

                    var newCell = newRow.insertCell(5);
                    newCell.style.border = ' 1px solid black';
                    var newText = document.createTextNode(CostSeperator(data.Entities[j].Recovered));
                    newCell.appendChild(newText);

                    var newCell = newRow.insertCell(6);
                    newCell.style.border = ' 1px solid black';
                    var newText = document.createTextNode(CostSeperator(data.Entities[j].PercentTotalLeakage));
                    newCell.appendChild(newText);

                    var newCell = newRow.insertCell(7);
                    newCell.style.border = ' 1px solid black';
                    var newText = document.createTextNode(CostSeperator(data.Entities[j].PercentRecoverableLeakage));
                    newCell.appendChild(newText);

                    var newCell = newRow.insertCell(8);
                    newCell.style.border = ' 1px solid black';
                    var newText = document.createTextNode(CostSeperator(data.Entities[j].PercentRecovered));
                    newCell.appendChild(newText);

                    var newCell = newRow.insertCell(9);
                    newCell.style.border = ' 1px solid black';
                    var newText = document.createTextNode(CostSeperator(data.Entities[j].PercentRecoveredonTotal));
                    newCell.appendChild(newText);

                }
            }
        } else {

            for (var j = 0; j < data.TotalCount; j++) {


                // Insert a row in the table at the last row
                var newRow = tableRef.insertRow(tableRef.rows.length);

                // Insert a cell in the row at index 0
                var newCell = newRow.insertCell(0);
                newCell.style.border = ' 1px solid black';

                // Append a text node to the cell
                var newText = document.createTextNode(Province[data.Entities[j].ProvinceId]);
                newCell.appendChild(newText);

                var newCell = newRow.insertCell(1);
                newCell.style.border = ' 1px solid black';
                var newText = document.createTextNode(PersiaNumber(Years[data.Entities[j].YearId]));
                newCell.appendChild(newText);

                var newCell = newRow.insertCell(2);
                newCell.style.border = ' 1px solid black';
                var newText = document.createTextNode(CostSeperator(data.Entities[j].Program));
                newCell.appendChild(newText);

                var newCell = newRow.insertCell(3);
                newCell.style.border = ' 1px solid black';
                var newText = document.createTextNode(CostSeperator(data.Entities[j].TotalLeakage));
                newCell.appendChild(newText);

                var newCell = newRow.insertCell(4);
                newCell.style.border = ' 1px solid black';
                var newText = document.createTextNode(CostSeperator(data.Entities[j].RecoverableLeakage));
                newCell.appendChild(newText);

                var newCell = newRow.insertCell(5);
                newCell.style.border = ' 1px solid black';
                var newText = document.createTextNode(CostSeperator(data.Entities[j].Recovered));
                newCell.appendChild(newText);

                var newCell = newRow.insertCell(6);
                newCell.style.border = ' 1px solid black';
                var newText = document.createTextNode(CostSeperator(data.Entities[j].PercentTotalLeakage));
                newCell.appendChild(newText);

                var newCell = newRow.insertCell(7);
                newCell.style.border = ' 1px solid black';
                var newText = document.createTextNode(CostSeperator(data.Entities[j].PercentRecoverableLeakage));
                newCell.appendChild(newText);

                var newCell = newRow.insertCell(8);
                newCell.style.border = ' 1px solid black';
                var newText = document.createTextNode(CostSeperator(data.Entities[j].PercentRecovered));
                newCell.appendChild(newText);

                var newCell = newRow.insertCell(9);
                newCell.style.border = ' 1px solid black';
                var newText = document.createTextNode(CostSeperator(data.Entities[j].PercentRecoveredonTotal));
                newCell.appendChild(newText);

            }
        }

    });


</script>
