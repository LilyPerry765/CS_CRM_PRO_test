//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1008
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1008.
// 
#pragma warning disable 1591

namespace CRM.WebService.SMSService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BulkSoap", Namespace="http://tempuri.org/")]
    public partial class Bulk : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SendBulkOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendBulkCityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStatusOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Bulk() {
            this.Url = global::CRM.WebService.Properties.Settings.Default.CRM_WebService_SMSService_Bulk;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SendBulkCompletedEventHandler SendBulkCompleted;
        
        /// <remarks/>
        public event SendBulkCityCompletedEventHandler SendBulkCityCompleted;
        
        /// <remarks/>
        public event GetStatusCompletedEventHandler GetStatusCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendBulk", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long SendBulk(string username, string password, string to, string from, string text, System.DateTime scheduleDateTime) {
            object[] results = this.Invoke("SendBulk", new object[] {
                        username,
                        password,
                        to,
                        from,
                        text,
                        scheduleDateTime});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void SendBulkAsync(string username, string password, string to, string from, string text, System.DateTime scheduleDateTime) {
            this.SendBulkAsync(username, password, to, from, text, scheduleDateTime, null);
        }
        
        /// <remarks/>
        public void SendBulkAsync(string username, string password, string to, string from, string text, System.DateTime scheduleDateTime, object userState) {
            if ((this.SendBulkOperationCompleted == null)) {
                this.SendBulkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendBulkOperationCompleted);
            }
            this.InvokeAsync("SendBulk", new object[] {
                        username,
                        password,
                        to,
                        from,
                        text,
                        scheduleDateTime}, this.SendBulkOperationCompleted, userState);
        }
        
        private void OnSendBulkOperationCompleted(object arg) {
            if ((this.SendBulkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendBulkCompleted(this, new SendBulkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendBulkCity", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long SendBulkCity(
                    string username, 
                    string password, 
                    string from, 
                    string text, 
                    int state, 
                    int city, 
                    string prefix, 
                    string startAge, 
                    string endAge, 
                    int prePost, 
                    int gender, 
                    string firstNumber, 
                    string lastNumber, 
                    bool orderNumbers, 
                    int startIndex, 
                    int count, 
                    System.DateTime scheduleDateTime) {
            object[] results = this.Invoke("SendBulkCity", new object[] {
                        username,
                        password,
                        from,
                        text,
                        state,
                        city,
                        prefix,
                        startAge,
                        endAge,
                        prePost,
                        gender,
                        firstNumber,
                        lastNumber,
                        orderNumbers,
                        startIndex,
                        count,
                        scheduleDateTime});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void SendBulkCityAsync(
                    string username, 
                    string password, 
                    string from, 
                    string text, 
                    int state, 
                    int city, 
                    string prefix, 
                    string startAge, 
                    string endAge, 
                    int prePost, 
                    int gender, 
                    string firstNumber, 
                    string lastNumber, 
                    bool orderNumbers, 
                    int startIndex, 
                    int count, 
                    System.DateTime scheduleDateTime) {
            this.SendBulkCityAsync(username, password, from, text, state, city, prefix, startAge, endAge, prePost, gender, firstNumber, lastNumber, orderNumbers, startIndex, count, scheduleDateTime, null);
        }
        
        /// <remarks/>
        public void SendBulkCityAsync(
                    string username, 
                    string password, 
                    string from, 
                    string text, 
                    int state, 
                    int city, 
                    string prefix, 
                    string startAge, 
                    string endAge, 
                    int prePost, 
                    int gender, 
                    string firstNumber, 
                    string lastNumber, 
                    bool orderNumbers, 
                    int startIndex, 
                    int count, 
                    System.DateTime scheduleDateTime, 
                    object userState) {
            if ((this.SendBulkCityOperationCompleted == null)) {
                this.SendBulkCityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendBulkCityOperationCompleted);
            }
            this.InvokeAsync("SendBulkCity", new object[] {
                        username,
                        password,
                        from,
                        text,
                        state,
                        city,
                        prefix,
                        startAge,
                        endAge,
                        prePost,
                        gender,
                        firstNumber,
                        lastNumber,
                        orderNumbers,
                        startIndex,
                        count,
                        scheduleDateTime}, this.SendBulkCityOperationCompleted, userState);
        }
        
        private void OnSendBulkCityOperationCompleted(object arg) {
            if ((this.SendBulkCityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendBulkCityCompleted(this, new SendBulkCityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetStatus(long bulkId, ref long status, ref long delivered, ref long sent) {
            object[] results = this.Invoke("GetStatus", new object[] {
                        bulkId,
                        status,
                        delivered,
                        sent});
            status = ((long)(results[1]));
            delivered = ((long)(results[2]));
            sent = ((long)(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetStatusAsync(long bulkId, long status, long delivered, long sent) {
            this.GetStatusAsync(bulkId, status, delivered, sent, null);
        }
        
        /// <remarks/>
        public void GetStatusAsync(long bulkId, long status, long delivered, long sent, object userState) {
            if ((this.GetStatusOperationCompleted == null)) {
                this.GetStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStatusOperationCompleted);
            }
            this.InvokeAsync("GetStatus", new object[] {
                        bulkId,
                        status,
                        delivered,
                        sent}, this.GetStatusOperationCompleted, userState);
        }
        
        private void OnGetStatusOperationCompleted(object arg) {
            if ((this.GetStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStatusCompleted(this, new GetStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SendBulkCompletedEventHandler(object sender, SendBulkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendBulkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendBulkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SendBulkCityCompletedEventHandler(object sender, SendBulkCityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendBulkCityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendBulkCityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetStatusCompletedEventHandler(object sender, GetStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public long status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public long delivered {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public long sent {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[3]));
            }
        }
    }
}

#pragma warning restore 1591