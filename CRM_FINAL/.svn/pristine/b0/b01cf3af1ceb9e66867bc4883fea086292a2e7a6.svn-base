//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18034.
// 
#pragma warning disable 1591

namespace CRM.Application.HotBillingService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="HotBillingServiceSoap", Namespace="http://tempuri.org/")]
    public partial class HotBillingService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetCdrDetailInCycleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCdrDetailIntimeRangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCallTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCounterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetKarkardInCycleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetKarkardInCycleNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetKarkardInTimeRangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetKarkardInTimeRangeNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCdrDetailOnCalledNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeCurrentCycleEndDateOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public HotBillingService() {
            this.Url = "http://10.10.110.214/hotbillingservice.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetCdrDetailInCycleCompletedEventHandler GetCdrDetailInCycleCompleted;
        
        /// <remarks/>
        public event GetCdrDetailIntimeRangeCompletedEventHandler GetCdrDetailIntimeRangeCompleted;
        
        /// <remarks/>
        public event GetCallTypesCompletedEventHandler GetCallTypesCompleted;
        
        /// <remarks/>
        public event GetCounterCompletedEventHandler GetCounterCompleted;
        
        /// <remarks/>
        public event GetKarkardInCycleCompletedEventHandler GetKarkardInCycleCompleted;
        
        /// <remarks/>
        public event GetKarkardInCycleNewCompletedEventHandler GetKarkardInCycleNewCompleted;
        
        /// <remarks/>
        public event GetKarkardInTimeRangeCompletedEventHandler GetKarkardInTimeRangeCompleted;
        
        /// <remarks/>
        public event GetKarkardInTimeRangeNewCompletedEventHandler GetKarkardInTimeRangeNewCompleted;
        
        /// <remarks/>
        public event GetCdrDetailOnCalledNumberCompletedEventHandler GetCdrDetailOnCalledNumberCompleted;
        
        /// <remarks/>
        public event ChangeCurrentCycleEndDateCompletedEventHandler ChangeCurrentCycleEndDateCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCdrDetailInCycle", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetCdrDetailInCycle(string phone, int year, int cycle, out string errorMessage, out System.Data.DataTable table) {
            object[] results = this.Invoke("GetCdrDetailInCycle", new object[] {
                        phone,
                        year,
                        cycle});
            errorMessage = ((string)(results[1]));
            table = ((System.Data.DataTable)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetCdrDetailInCycleAsync(string phone, int year, int cycle) {
            this.GetCdrDetailInCycleAsync(phone, year, cycle, null);
        }
        
        /// <remarks/>
        public void GetCdrDetailInCycleAsync(string phone, int year, int cycle, object userState) {
            if ((this.GetCdrDetailInCycleOperationCompleted == null)) {
                this.GetCdrDetailInCycleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCdrDetailInCycleOperationCompleted);
            }
            this.InvokeAsync("GetCdrDetailInCycle", new object[] {
                        phone,
                        year,
                        cycle}, this.GetCdrDetailInCycleOperationCompleted, userState);
        }
        
        private void OnGetCdrDetailInCycleOperationCompleted(object arg) {
            if ((this.GetCdrDetailInCycleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCdrDetailInCycleCompleted(this, new GetCdrDetailInCycleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCdrDetailIntimeRange", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetCdrDetailIntimeRange(string phone, System.DateTime startDate, System.DateTime endDate, out string errorMessage, out System.Data.DataTable table) {
            object[] results = this.Invoke("GetCdrDetailIntimeRange", new object[] {
                        phone,
                        startDate,
                        endDate});
            errorMessage = ((string)(results[1]));
            table = ((System.Data.DataTable)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetCdrDetailIntimeRangeAsync(string phone, System.DateTime startDate, System.DateTime endDate) {
            this.GetCdrDetailIntimeRangeAsync(phone, startDate, endDate, null);
        }
        
        /// <remarks/>
        public void GetCdrDetailIntimeRangeAsync(string phone, System.DateTime startDate, System.DateTime endDate, object userState) {
            if ((this.GetCdrDetailIntimeRangeOperationCompleted == null)) {
                this.GetCdrDetailIntimeRangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCdrDetailIntimeRangeOperationCompleted);
            }
            this.InvokeAsync("GetCdrDetailIntimeRange", new object[] {
                        phone,
                        startDate,
                        endDate}, this.GetCdrDetailIntimeRangeOperationCompleted, userState);
        }
        
        private void OnGetCdrDetailIntimeRangeOperationCompleted(object arg) {
            if ((this.GetCdrDetailIntimeRangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCdrDetailIntimeRangeCompleted(this, new GetCdrDetailIntimeRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCallTypes", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetCallTypes() {
            object[] results = this.Invoke("GetCallTypes", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetCallTypesAsync() {
            this.GetCallTypesAsync(null);
        }
        
        /// <remarks/>
        public void GetCallTypesAsync(object userState) {
            if ((this.GetCallTypesOperationCompleted == null)) {
                this.GetCallTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCallTypesOperationCompleted);
            }
            this.InvokeAsync("GetCallTypes", new object[0], this.GetCallTypesOperationCompleted, userState);
        }
        
        private void OnGetCallTypesOperationCompleted(object arg) {
            if ((this.GetCallTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCallTypesCompleted(this, new GetCallTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCounter", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetCounter(string phoneNumber, System.DateTime requestDate, out int localCounter, out int nonLocalCounter, out string errorMessage) {
            object[] results = this.Invoke("GetCounter", new object[] {
                        phoneNumber,
                        requestDate});
            localCounter = ((int)(results[1]));
            nonLocalCounter = ((int)(results[2]));
            errorMessage = ((string)(results[3]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetCounterAsync(string phoneNumber, System.DateTime requestDate) {
            this.GetCounterAsync(phoneNumber, requestDate, null);
        }
        
        /// <remarks/>
        public void GetCounterAsync(string phoneNumber, System.DateTime requestDate, object userState) {
            if ((this.GetCounterOperationCompleted == null)) {
                this.GetCounterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCounterOperationCompleted);
            }
            this.InvokeAsync("GetCounter", new object[] {
                        phoneNumber,
                        requestDate}, this.GetCounterOperationCompleted, userState);
        }
        
        private void OnGetCounterOperationCompleted(object arg) {
            if ((this.GetCounterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCounterCompleted(this, new GetCounterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetKarkardInCycle", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetKarkardInCycle(string phoneNumber, int yearNumber, int cycleNumber, out System.DateTime lastDate, out int local, out int nonLocal, out int international, out int bistalk, out int IA, out string errorMessage) {
            object[] results = this.Invoke("GetKarkardInCycle", new object[] {
                        phoneNumber,
                        yearNumber,
                        cycleNumber});
            lastDate = ((System.DateTime)(results[1]));
            local = ((int)(results[2]));
            nonLocal = ((int)(results[3]));
            international = ((int)(results[4]));
            bistalk = ((int)(results[5]));
            IA = ((int)(results[6]));
            errorMessage = ((string)(results[7]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetKarkardInCycleAsync(string phoneNumber, int yearNumber, int cycleNumber) {
            this.GetKarkardInCycleAsync(phoneNumber, yearNumber, cycleNumber, null);
        }
        
        /// <remarks/>
        public void GetKarkardInCycleAsync(string phoneNumber, int yearNumber, int cycleNumber, object userState) {
            if ((this.GetKarkardInCycleOperationCompleted == null)) {
                this.GetKarkardInCycleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetKarkardInCycleOperationCompleted);
            }
            this.InvokeAsync("GetKarkardInCycle", new object[] {
                        phoneNumber,
                        yearNumber,
                        cycleNumber}, this.GetKarkardInCycleOperationCompleted, userState);
        }
        
        private void OnGetKarkardInCycleOperationCompleted(object arg) {
            if ((this.GetKarkardInCycleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetKarkardInCycleCompleted(this, new GetKarkardInCycleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetKarkardInCycleNew", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetKarkardInCycleNew(string phoneNumber, int yearNumber, int cycleNumber, out System.Data.DataTable table, out System.DateTime lastDate, out string errorMessage) {
            object[] results = this.Invoke("GetKarkardInCycleNew", new object[] {
                        phoneNumber,
                        yearNumber,
                        cycleNumber});
            table = ((System.Data.DataTable)(results[1]));
            lastDate = ((System.DateTime)(results[2]));
            errorMessage = ((string)(results[3]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetKarkardInCycleNewAsync(string phoneNumber, int yearNumber, int cycleNumber) {
            this.GetKarkardInCycleNewAsync(phoneNumber, yearNumber, cycleNumber, null);
        }
        
        /// <remarks/>
        public void GetKarkardInCycleNewAsync(string phoneNumber, int yearNumber, int cycleNumber, object userState) {
            if ((this.GetKarkardInCycleNewOperationCompleted == null)) {
                this.GetKarkardInCycleNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetKarkardInCycleNewOperationCompleted);
            }
            this.InvokeAsync("GetKarkardInCycleNew", new object[] {
                        phoneNumber,
                        yearNumber,
                        cycleNumber}, this.GetKarkardInCycleNewOperationCompleted, userState);
        }
        
        private void OnGetKarkardInCycleNewOperationCompleted(object arg) {
            if ((this.GetKarkardInCycleNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetKarkardInCycleNewCompleted(this, new GetKarkardInCycleNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetKarkardInTimeRange", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetKarkardInTimeRange(string phoneNumber, System.DateTime startDate, ref System.DateTime endDate, out int local, out int nonLocal, out int international, out int bistalk, out int IA, out string errorMessage) {
            object[] results = this.Invoke("GetKarkardInTimeRange", new object[] {
                        phoneNumber,
                        startDate,
                        endDate});
            endDate = ((System.DateTime)(results[1]));
            local = ((int)(results[2]));
            nonLocal = ((int)(results[3]));
            international = ((int)(results[4]));
            bistalk = ((int)(results[5]));
            IA = ((int)(results[6]));
            errorMessage = ((string)(results[7]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetKarkardInTimeRangeAsync(string phoneNumber, System.DateTime startDate, System.DateTime endDate) {
            this.GetKarkardInTimeRangeAsync(phoneNumber, startDate, endDate, null);
        }
        
        /// <remarks/>
        public void GetKarkardInTimeRangeAsync(string phoneNumber, System.DateTime startDate, System.DateTime endDate, object userState) {
            if ((this.GetKarkardInTimeRangeOperationCompleted == null)) {
                this.GetKarkardInTimeRangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetKarkardInTimeRangeOperationCompleted);
            }
            this.InvokeAsync("GetKarkardInTimeRange", new object[] {
                        phoneNumber,
                        startDate,
                        endDate}, this.GetKarkardInTimeRangeOperationCompleted, userState);
        }
        
        private void OnGetKarkardInTimeRangeOperationCompleted(object arg) {
            if ((this.GetKarkardInTimeRangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetKarkardInTimeRangeCompleted(this, new GetKarkardInTimeRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetKarkardInTimeRangeNew", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetKarkardInTimeRangeNew(string phoneNumber, System.DateTime startDate, System.DateTime endDate, out System.Data.DataTable table, out System.DateTime lastDate, out string errorMessage) {
            object[] results = this.Invoke("GetKarkardInTimeRangeNew", new object[] {
                        phoneNumber,
                        startDate,
                        endDate});
            table = ((System.Data.DataTable)(results[1]));
            lastDate = ((System.DateTime)(results[2]));
            errorMessage = ((string)(results[3]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetKarkardInTimeRangeNewAsync(string phoneNumber, System.DateTime startDate, System.DateTime endDate) {
            this.GetKarkardInTimeRangeNewAsync(phoneNumber, startDate, endDate, null);
        }
        
        /// <remarks/>
        public void GetKarkardInTimeRangeNewAsync(string phoneNumber, System.DateTime startDate, System.DateTime endDate, object userState) {
            if ((this.GetKarkardInTimeRangeNewOperationCompleted == null)) {
                this.GetKarkardInTimeRangeNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetKarkardInTimeRangeNewOperationCompleted);
            }
            this.InvokeAsync("GetKarkardInTimeRangeNew", new object[] {
                        phoneNumber,
                        startDate,
                        endDate}, this.GetKarkardInTimeRangeNewOperationCompleted, userState);
        }
        
        private void OnGetKarkardInTimeRangeNewOperationCompleted(object arg) {
            if ((this.GetKarkardInTimeRangeNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetKarkardInTimeRangeNewCompleted(this, new GetKarkardInTimeRangeNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCdrDetailOnCalledNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> GetCdrDetailOnCalledNumber(string CalledNumber, System.DateTime startDate, System.DateTime endDate, out string message, out System.Data.DataTable table) {
            object[] results = this.Invoke("GetCdrDetailOnCalledNumber", new object[] {
                        CalledNumber,
                        startDate,
                        endDate});
            message = ((string)(results[1]));
            table = ((System.Data.DataTable)(results[2]));
            return ((System.Nullable<bool>)(results[0]));
        }
        
        /// <remarks/>
        public void GetCdrDetailOnCalledNumberAsync(string CalledNumber, System.DateTime startDate, System.DateTime endDate) {
            this.GetCdrDetailOnCalledNumberAsync(CalledNumber, startDate, endDate, null);
        }
        
        /// <remarks/>
        public void GetCdrDetailOnCalledNumberAsync(string CalledNumber, System.DateTime startDate, System.DateTime endDate, object userState) {
            if ((this.GetCdrDetailOnCalledNumberOperationCompleted == null)) {
                this.GetCdrDetailOnCalledNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCdrDetailOnCalledNumberOperationCompleted);
            }
            this.InvokeAsync("GetCdrDetailOnCalledNumber", new object[] {
                        CalledNumber,
                        startDate,
                        endDate}, this.GetCdrDetailOnCalledNumberOperationCompleted, userState);
        }
        
        private void OnGetCdrDetailOnCalledNumberOperationCompleted(object arg) {
            if ((this.GetCdrDetailOnCalledNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCdrDetailOnCalledNumberCompleted(this, new GetCdrDetailOnCalledNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangeCurrentCycleEndDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ChangeCurrentCycleEndDate(int year, int cycle, System.DateTime endDate, out string errorMessage) {
            object[] results = this.Invoke("ChangeCurrentCycleEndDate", new object[] {
                        year,
                        cycle,
                        endDate});
            errorMessage = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeCurrentCycleEndDateAsync(int year, int cycle, System.DateTime endDate) {
            this.ChangeCurrentCycleEndDateAsync(year, cycle, endDate, null);
        }
        
        /// <remarks/>
        public void ChangeCurrentCycleEndDateAsync(int year, int cycle, System.DateTime endDate, object userState) {
            if ((this.ChangeCurrentCycleEndDateOperationCompleted == null)) {
                this.ChangeCurrentCycleEndDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeCurrentCycleEndDateOperationCompleted);
            }
            this.InvokeAsync("ChangeCurrentCycleEndDate", new object[] {
                        year,
                        cycle,
                        endDate}, this.ChangeCurrentCycleEndDateOperationCompleted, userState);
        }
        
        private void OnChangeCurrentCycleEndDateOperationCompleted(object arg) {
            if ((this.ChangeCurrentCycleEndDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeCurrentCycleEndDateCompleted(this, new ChangeCurrentCycleEndDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetCdrDetailInCycleCompletedEventHandler(object sender, GetCdrDetailInCycleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCdrDetailInCycleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCdrDetailInCycleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public System.Data.DataTable table {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetCdrDetailIntimeRangeCompletedEventHandler(object sender, GetCdrDetailIntimeRangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCdrDetailIntimeRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCdrDetailIntimeRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public System.Data.DataTable table {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetCallTypesCompletedEventHandler(object sender, GetCallTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCallTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCallTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetCounterCompletedEventHandler(object sender, GetCounterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCounterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCounterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int localCounter {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int nonLocalCounter {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetKarkardInCycleCompletedEventHandler(object sender, GetKarkardInCycleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetKarkardInCycleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetKarkardInCycleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.DateTime lastDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int local {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public int nonLocal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public int international {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public int bistalk {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public int IA {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetKarkardInCycleNewCompletedEventHandler(object sender, GetKarkardInCycleNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetKarkardInCycleNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetKarkardInCycleNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Data.DataTable table {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public System.DateTime lastDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetKarkardInTimeRangeCompletedEventHandler(object sender, GetKarkardInTimeRangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetKarkardInTimeRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetKarkardInTimeRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.DateTime endDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int local {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public int nonLocal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public int international {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public int bistalk {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public int IA {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetKarkardInTimeRangeNewCompletedEventHandler(object sender, GetKarkardInTimeRangeNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetKarkardInTimeRangeNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetKarkardInTimeRangeNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Data.DataTable table {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public System.DateTime lastDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetCdrDetailOnCalledNumberCompletedEventHandler(object sender, GetCdrDetailOnCalledNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCdrDetailOnCalledNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCdrDetailOnCalledNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Nullable<bool> Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Nullable<bool>)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public System.Data.DataTable table {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ChangeCurrentCycleEndDateCompletedEventHandler(object sender, ChangeCurrentCycleEndDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeCurrentCycleEndDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeCurrentCycleEndDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591